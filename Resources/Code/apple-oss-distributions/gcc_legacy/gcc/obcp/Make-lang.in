# Top level makefile fragment for GNU Objective C++.
#   Copyright (C) 1994, 1995, 1997, 1998, 1999 Free Software Foundation, Inc.

#This file is part of GNU CC.

#GNU CC is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#GNU CC is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU CC; see the file COPYING.  If not, write to
#the Free Software Foundation, 59 Temple Place - Suite 330,
#Boston, MA 02111-1307, USA.

# This file provides the language dependent support in the main Makefile.
# Each language makefile fragment must provide the following targets:
#
# foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,
# foo.info, foo.dvi,
# foo.install-normal, foo.install-common, foo.install-info, foo.install-man,
# foo.uninstall, foo.distdir,
# foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean,
# foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4
#
# where `foo' is the name of the language.
#
# It should also provide rules for:
#
# - making any compiler driver (eg: g++)
# - the compiler proper (eg: cc1objplus)
# - define the names for selecting the language in LANGUAGES.
#
# Extra flags to pass to recursive makes.
CXX_FLAGS_TO_PASS = \
	"CXX_FOR_BUILD=$(CXX_FOR_BUILD)" \
	"CXXFLAGS=$(CXXFLAGS)" \
	"CXX_FOR_TARGET=$(CXX_FOR_TARGET)"

# Actual names to use when installing a native compiler.
CXX_INSTALL_NAME = `t='$(program_transform_name)'; echo c++ | sed $$t`
GXX_INSTALL_NAME = `t='$(program_transform_name)'; echo g++ | sed $$t`
DEMANGLER_INSTALL_NAME = `t='$(program_transform_name)'; echo c++filt | sed $$t`

# Actual names to use when installing a cross-compiler.
CXX_CROSS_NAME = `t='$(program_transform_cross_name)'; echo c++ | sed $$t`
GXX_CROSS_NAME = `t='$(program_transform_cross_name)'; echo g++ | sed $$t`
DEMANGLER_CROSS_NAME = `t='$(program_transform_cross_name)'; echo c++filt | sed $$t`

# The name to use for the demangler program.
DEMANGLER_PROG = c++filt$(exeext)

# Extra headers to install.
CXX_EXTRA_HEADERS = $(srcdir)/obcp/inc/typeinfo $(srcdir)/obcp/inc/exception \
	$(srcdir)/obcp/inc/new $(srcdir)/obcp/inc/new.h

# Extra code to include in libgcc2.
CXX_LIB2FUNCS = tinfo.o tinfo2.o new.o opnew.o opnewnt.o opvnew.o opvnewnt.o \
	opdel.o opdelnt.o opvdel.o opvdelnt.o exception.o
CXX_LIB2SRCS = $(srcdir)/obcp/new.cc $(srcdir)/obcp/new1.cc $(srcdir)/obcp/new2.cc \
	$(srcdir)/obcp/exception.cc $(srcdir)/obcp/tinfo.cc \
	$(srcdir)/obcp/tinfo2.cc $(srcdir)/obcp/tinfo.h
#
# Define the names for selecting objc++ in LANGUAGES.
# Note that it would be nice to move the dependency on g++
# into the C++ rule, but that needs a little bit of work
# to do the right thing within all.cross.
ObjC++ objc++: cc1objplus$(exeext)

# Tell GNU make to ignore these if they exist.
.PHONY: ObjC++ objc++

g++spec.o: $(srcdir)/obcp/g++spec.c
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/obcp/g++spec.c

$(INTL_TARGETS): obcp/parse.c
obcp/parse.c: obcp/parse.y
	@cp_srcdir=`sed -n 's/^srcdir[ 	]*=[	 ]*//p' obcp/Makefile` && \
	echo "cd obcp && $(MAKE) parse.c" && \
	cd obcp && \
	  $(MAKE) $(SUBDIR_FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) \
	    parse.c

# Create the compiler driver for g++.
GXX_OBJS = gcc.o g++spec.o intl.o prefix.o version.o 
g++$(exeext): $(GXX_OBJS) $(EXTRA_GCC_OBJS) $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \
	  $(GXX_OBJS) $(EXTRA_GCC_OBJS) $(LIBS)

# Create a version of the g++ driver which calls the cross-compiler.
g++-cross$(exeext): g++$(exeext)
	-rm -f g++-cross$(exeext)
	cp g++$(exeext) g++-cross$(exeext)

cxxmain.o: $(srcdir)/../libiberty/cplus-dem.c $(DEMANGLE_H)
	rm -f cxxmain.c
	$(LN_S) $(srcdir)/../libiberty/cplus-dem.c cxxmain.c
	$(CC) -c -DMAIN $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
	  -DVERSION=\"$(version)\" cxxmain.c

# Apparently OpenVM needs the -o to be at the beginning of the link line.
$(DEMANGLER_PROG): cxxmain.o underscore.o $(LIBDEPS)
	$(CC) -o $@ $(ALL_CFLAGS) $(LDFLAGS) \
	  cxxmain.o underscore.o $(LIBS)

CXX_SRCS = $(srcdir)/obcp/call.c $(srcdir)/obcp/decl2.c \
 $(srcdir)/obcp/except.c $(srcdir)/obcp/input.c $(srcdir)/obcp/pt.c \
 $(srcdir)/obcp/spew.c $(srcdir)/obcp/xref.c $(srcdir)/obcp/class.c \
 $(srcdir)/obcp/expr.c $(srcdir)/obcp/lex.c \
 $(srcdir)/obcp/ptree.c $(srcdir)/obcp/tree.c $(srcdir)/obcp/cvt.c \
 $(srcdir)/obcp/errfn.c $(srcdir)/obcp/rtti.c $(srcdir)/obcp/method.c \
 $(srcdir)/obcp/search.c $(srcdir)/obcp/typeck.c $(srcdir)/obcp/decl.c \
 $(srcdir)/obcp/error.c $(srcdir)/obcp/friend.c $(srcdir)/obcp/init.c \
 $(srcdir)/obcp/parse.y $(srcdir)/obcp/sig.c $(srcdir)/obcp/typeck2.c \
 $(srcdir)/obcp/repo.c $(srcdir)/obcp/semantics.c \
 $(srcdir)/obcp/cp-internal_debug.c $(srcdir)/obcp/objc-act.c

cc1objplus$(exeext): $(P) $(CXX_SRCS) $(LIBDEPS) stamp-objlist c-common.o c-pragma.o \
	$(srcdir)/obcp/cp-tree.h $(srcdir)/obcp/objc-act.h $(srcdir)/obcp/cp-tree.def \
        $(srcdir)/obcp/objc-tree.def hash.o
	cd obcp; $(MAKE) $(FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) ../cc1objplus$(exeext)
#
# Build hooks:

objc++.all.build: g++$(exeext)
objc++.all.cross: g++-cross$(exeext) $(DEMANGLER_PROG)
objc++.start.encap: g++$(exeext)
objc++.rest.encap: $(DEMANGLER_PROG)

objc++.info:
objc++.dvi:

# C++ language-support library pieces for libgcc.
tinfo.o: cc1objplus$(exeext) $(srcdir)/obcp/tinfo.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(CXXFLAGS) -frtti $(INCLUDES) \
	  -c $(srcdir)/obcp/tinfo.cc
tinfo2.o: cc1objplus$(exeext) $(srcdir)/obcp/tinfo2.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(CXXFLAGS) -frtti $(INCLUDES) \
	  -c $(srcdir)/obcp/tinfo2.cc
exception.o: cc1objplus$(exeext) $(srcdir)/obcp/exception.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(CXXFLAGS) -frtti $(INCLUDES) \
	  -c -fexceptions $(srcdir)/obcp/exception.cc
new.o: cc1objplus$(exeext) $(srcdir)/obcp/new.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(CXXFLAGS) $(INCLUDES) \
	  -c $(srcdir)/obcp/new.cc
opnew.o: cc1objplus$(exeext) $(srcdir)/obcp/new1.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(CXXFLAGS) $(INCLUDES) \
	  -c $(srcdir)/obcp/new1.cc -DL_op_new -o opnew.o
opnewnt.o: cc1objplus$(exeext) $(srcdir)/obcp/new1.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(CXXFLAGS) $(INCLUDES) \
	  -c $(srcdir)/obcp/new1.cc -DL_op_newnt -o opnewnt.o
opvnew.o: cc1objplus$(exeext) $(srcdir)/obcp/new2.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(CXXFLAGS) $(INCLUDES) \
	  -c $(srcdir)/obcp/new2.cc -DL_op_vnew -o opvnew.o
opvnewnt.o: cc1objplus$(exeext) $(srcdir)/obcp/new2.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(CXXFLAGS) $(INCLUDES) \
	  -c $(srcdir)/obcp/new2.cc -DL_op_vnewnt -o opvnewnt.o
opdel.o: cc1objplus$(exeext) $(srcdir)/obcp/new2.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(CXXFLAGS) $(INCLUDES) \
	  -c $(srcdir)/obcp/new2.cc -DL_op_delete -o opdel.o
opdelnt.o: cc1objplus$(exeext) $(srcdir)/obcp/new2.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(CXXFLAGS) $(INCLUDES) \
	  -c $(srcdir)/obcp/new2.cc -DL_op_delnt -o opdelnt.o
opvdel.o: cc1objplus$(exeext) $(srcdir)/obcp/new2.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(CXXFLAGS) $(INCLUDES) \
	  -c $(srcdir)/obcp/new2.cc -DL_op_vdel -o opvdel.o
opvdelnt.o: cc1objplus$(exeext) $(srcdir)/obcp/new2.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(CXXFLAGS) $(INCLUDES) \
	  -c $(srcdir)/obcp/new2.cc -DL_op_vdelnt -o opvdelnt.o

# We want to update cplib2.txt if any of the source files change...
cplib2.txt: $(CXX_LIB2SRCS) $(CXX_EXTRA_HEADERS) cplib2.ready
	case " $(LANGUAGES) " in \
	*" "[cC]"++ "*) \
	  echo $(CXX_LIB2FUNCS) > cplib2.new;; \
	*) \
	  echo "" > cplib2.new;; \
	esac
	mv -f cplib2.new cplib2.txt 

# Or if it would be different.
# Don't try to do write if `.' is not writable;
# in that case, we're installing from someone else's directory.
# But go ahead and fail if that directory hasn't been properly built.
cplib2.ready: $(GCC_PASSES) $(LIBGCC2_DEPS) stmp-int-hdrs
	@if [ -r cplib2.txt -a -w . ]; then \
	  case " $(LANGUAGES) " in \
	  *" "[cC]"++ "*) \
	    echo $(CXX_LIB2FUNCS) > cplib2.new;; \
	  *) \
	    echo "" > cplib2.new;; \
	  esac; \
	  if cmp -s cplib2.new cplib2.txt; then true; else \
	    touch cplib2.ready; \
	  fi; \
	  rm -f cplib2.new; \
	else true ; \
	fi
	@if [ -f cplib2.ready ]; then true; else \
	  touch cplib2.ready; \
	fi
#
# Install hooks:
# cc1objplus is installed elsewhere as part of $(COMPILERS).

# Nothing to do here.
objc++.install-normal:

# Install the driver program as $(target)-g++
# and also as either g++ (if native) or $(tooldir)/bin/g++.
objc++.install-common:
	-if [ -f cc1objplus$(exeext) ] ; then \
	  if [ -f g++-cross$(exeext) ] ; then \
	    rm -f $(bindir)/$(GXX_CROSS_NAME)$(exeext); \
	    $(INSTALL_PROGRAM) g++-cross$(exeext) $(bindir)/$(GXX_CROSS_NAME)$(exeext); \
	    chmod a+x $(bindir)/$(GXX_CROSS_NAME)$(exeext); \
	    rm -f $(bindir)/$(CXX_CROSS_NAME)$(exeext); \
	    $(LN) $(bindir)/$(GXX_CROSS_NAME)$(exeext) $(bindir)/$(CXX_CROSS_NAME)$(exeext); \
	  else \
	    rm -f $(bindir)/$(GXX_INSTALL_NAME)$(exeext); \
	    $(INSTALL_PROGRAM) g++$(exeext) $(bindir)/$(GXX_INSTALL_NAME)$(exeext); \
	    chmod a+x $(bindir)/$(GXX_INSTALL_NAME)$(exeext); \
	    rm -f $(bindir)/$(CXX_INSTALL_NAME)$(exeext); \
	    $(LN) $(bindir)/$(GXX_INSTALL_NAME)$(exeext) $(bindir)/$(CXX_INSTALL_NAME)$(exeext); \
	  fi ; \
	  if [ x$(DEMANGLER_PROG) != x ] && [ -x "$(DEMANGLER_PROG)" ]; then \
	    if [ -f g++-cross$(exeext) ] ; then \
	      rm -f $(bindir)/$(DEMANGLER_CROSS_NAME)$(exeext); \
	      $(INSTALL_PROGRAM) $(DEMANGLER_PROG) $(bindir)/$(DEMANGLER_CROSS_NAME)$(exeext); \
	      chmod a+x $(bindir)/$(DEMANGLER_CROSS_NAME)$(exeext); \
	    else \
	      rm -f $(bindir)/$(DEMANGLER_INSTALL_NAME)$(exeext); \
	      $(INSTALL_PROGRAM) $(DEMANGLER_PROG) $(bindir)/$(DEMANGLER_INSTALL_NAME)$(exeext); \
	      chmod a+x $(bindir)/$(DEMANGLER_INSTALL_NAME)$(exeext); \
	    fi ; \
	  fi ; \
	fi

objc++.install-info:

objc++.install-man: $(srcdir)/obcp/g++.1
	-if [ -f cc1objplus$(exeext) ] ; then \
	  if [ -f g++-cross$(exeext) ] ; then \
	    rm -f $(man1dir)/$(GXX_CROSS_NAME)$(manext); \
	    $(INSTALL_DATA) $(srcdir)/obcp/g++.1 $(man1dir)/$(GXX_CROSS_NAME)$(manext); \
	    chmod a-x $(man1dir)/$(GXX_CROSS_NAME)$(manext); \
	  else \
	    rm -f $(man1dir)/$(GXX_INSTALL_NAME)$(manext); \
	    $(INSTALL_DATA) $(srcdir)/obcp/g++.1 $(man1dir)/$(GXX_INSTALL_NAME)$(manext); \
	    chmod a-x $(man1dir)/$(GXX_INSTALL_NAME)$(manext); \
	  fi; \
	else true; fi

objc++.uninstall:
	-rm -rf $(bindir)/$(CXX_INSTALL_NAME)$(exeext)
	-rm -rf $(bindir)/$(CXX_CROSS_NAME)$(exeext)
	-rm -rf $(bindir)/$(GXX_INSTALL_NAME)$(exeext)
	-rm -rf $(bindir)/$(GXX_CROSS_NAME)$(exeext)
	-rm -rf $(bindir)/$(DEMANGLER_INSTALL_NAME)$(exeext)
	-rm -rf $(bindir)/$(DEMANGLER_CROSS_NAME)$(exeext)
	-rm -rf $(man1dir)/$(GXX_INSTALL_NAME)$(manext)
	-rm -rf $(man1dir)/$(GXX_CROSS_NAME)$(manext)
#
# Clean hooks:
# A lot of the ancillary files are deleted by the main makefile.
# We just have to delete files specific to us.

objc++.mostlyclean:
	-rm -f obcp/*$(objext) $(DEMANGLER_PROG)
objc++.clean:
	-rm -f cplib2.txt cplib2.ready
objc++.distclean:
	-rm -f obcp/config.status obcp/Makefile
	-rm -f obcp/parse.output
objc++.extraclean:
objc++.maintainer-clean:
	-rm -f obcp/parse.c obcp/parse.h
#
# Stage hooks:
# The main makefile has already created stage?/obcp.

objc++.stage1: stage1-start
	-mv obcp/*$(objext) stage1/obcp
objc++.stage2: stage2-start
	-mv obcp/*$(objext) stage2/obcp
objc++.stage3: stage3-start
	-mv obcp/*$(objext) stage3/obcp
objc++.stage4: stage4-start
	-mv obcp/*$(objext) stage4/obcp
#
# Maintenance hooks:

# This target creates the files that can be rebuilt, but go in the
# distribution anyway.  It then copies the files to the distdir directory.
objc++.distdir:
	mkdir tmp/obcp
	mkdir tmp/obcp/inc
	cd obcp ; $(MAKE) $(FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) parse.c hash.h
	cd obcp; \
	for file in *[0-9a-zA-Z+]; do \
	  $(LN) $$file ../tmp/obcp; \
	done
	cd obcp/inc; \
	for file in *[0-9a-zA-Z+]; do \
	  ln $$file ../../tmp/obcp/inc >/dev/null 2>&1 \
	   || cp $$file ../../tmp/obcp/inc; \
	done
