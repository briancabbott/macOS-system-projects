#   Copyright (C) 1999, 2001, 2003 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# Please email any bugs, comments, and/or additions to this file to:
# gcc-patches@gcc.gnu.org

# This file defines procs for determining features supported by the target.

###############################
# proc check_weak_available { }
###############################

# weak symbols are only supported in some configs/object formats
# this proc returns 1 if they're supported, 0 if they're not, or -1 if unsure

proc check_weak_available { } {
    global target_triplet
    global target_cpu

    # All mips targets should support it

    if { [ string first "mips" $target_cpu ] >= 0 } {
        return 1
    }

    # All solaris2 targets should support it

    if { [regexp ".*-solaris2.*" $target_triplet] } {
        return 1
    }

    # DEC OSF/1/Digital UNIX/Tru64 UNIX supports it

    if { [regexp "alpha.*osf.*" $target_triplet] } {
	return 1
    }

    # ELF and ECOFF support it. a.out does with gas/gld but may also with
    # other linkers, so we should try it

    set objformat [gcc_target_object_format]

    switch $objformat {
        elf      { return 1 }
        ecoff    { return 1 }
        a.out    { return 1 }
	mach-o	 { return 1 }
        unknown  { return -1 }
        default  { return 0 }
    }
}

###############################
# proc check_visibility_available { }
###############################

# The visibility attribute is only support in some object formats
# This proc returns 1 if it is supported, 0 if not, -1 if unsure.

proc check_visibility_available { } {
    global target_triplet
    global target_cpu

    # On NetWare, support makes no sense.
    
    if { [string match "*-*-netware*" $target_triplet] } {
        return 0
    }

    # ELF supports it if the system has recent GNU ld and gas.
    # As a start we return 1 for all ELF systems; we'll let people
    # add exceptions as necessary.

    set objformat [gcc_target_object_format]

    switch $objformat {
        elf      { return 1 }
        unknown  { return -1 }
        default  { return 0 }
    }
}

###############################
# proc check_alias_available { }
###############################

# Determine if the target toolchain supports the alias attribute.

# Returns 2 if the target supports aliases.  Returns 1 if the target
# only supports weak aliased.  Returns 0 if the target does not
# support aliases at all.  Returns -1 if support for aliases could not
# be determined.

proc check_alias_available { } {
    global alias_available_saved
    global tool

    if [info exists alias_available_saved] {
        verbose "check_alias_available  returning saved $alias_available_saved" 2
    } else {
	set src alias[pid].c
	set obj alias[pid].o
        verbose "check_alias_available  compiling testfile $src" 2
	set f [open $src "w"]
	# Compile a small test program.  The definition of "g" is
	# necessary to keep the Solaris assembler from complaining
	# about the program.
	puts $f "#ifdef __cplusplus\nextern \"C\"\n#endif\n"
	puts $f "void g() {} void f() __attribute__((alias(\"g\")));"
	close $f
	set lines [${tool}_target_compile $src $obj object ""]
	file delete $src
	remote_file build delete $obj

	if [string match "" $lines] then {
	    # No error messages, everything is OK.
	    set alias_available_saved 2
	} else {
	    if [regexp "alias definitions not supported" $lines] {
		verbose "check_alias_available  target does not support aliases" 2

		set objformat [gcc_target_object_format]

		if { $objformat == "elf" } {
		    verbose "check_alias_available  but target uses ELF format, so it ought to" 2
		    set alias_available_saved -1
		} else {
		    set alias_available_saved 0
		}
	    } else {
		if [regexp "only weak aliases are supported" $lines] {
		verbose "check_alias_available  target supports only weak aliases" 2
		set alias_available_saved 1
		} else {
		    set alias_available_saved -1
		}
	    }
	}

	verbose "check_alias_available  returning $alias_available_saved" 2
    }

    return $alias_available_saved
}

# Returns true if --gc-sections is supported on the target.

proc check_gc_sections_available { } {
    global gc_sections_available_saved
    global tool

    if {![info exists gc_sections_available_saved]} {
	# Check if the ld used by gcc supports --gc-sections.
	set gcc_spec [${tool}_target_compile "-dumpspecs" "" "none" ""]
	regsub ".*\n\*linker:\[ \t\]*\n(\[^ \t\n\]*).*" "$gcc_spec" {\1} linker
	set gcc_ld [lindex [${tool}_target_compile "-print-prog-name=$linker" "" "none" ""] 0]
	set ld_output [remote_exec host "$gcc_ld" "--help"]
	if { [ string first "--gc-sections" $ld_output ] >= 0 } {
	    set gc_sections_available_saved 1
	} else {
	    set gc_sections_available_saved 0
	}
    }
    return $gc_sections_available_saved
}

# Return true if profiling is supported on the target.

proc check_profiling_available { test_what } {
    global profiling_available_saved

    verbose "Profiling argument is <$test_what>" 1

    # These conditions depend on the argument so examine them before
    # looking at the cache variable.

    # Support for -p on solaris2 relies on mcrt1.o which comes with the
    # vendor compiler.  We cannot reliably predict the directory where the
    # vendor compiler (and thus mcrt1.o) is installed so we can't
    # necessarily find mcrt1.o even if we have it.
    if { [istarget *-*-solaris2*] && [lindex $test_what 1] == "-p" } {
	return 0
    }

    # Support for -p on irix relies on libprof1.a which doesn't appear to
    # exist on any irix6 system currently posting testsuite results.
    # Support for -pg on irix relies on gcrt1.o which doesn't exist yet.
    # See: http://gcc.gnu.org/ml/gcc/2002-10/msg00169.html
    if { [istarget mips*-*-irix*]
    && ([lindex $test_what 1] == "-p" || [lindex $test_what 1] == "-pg") } {
	return 0
    }

    # Now examine the cache variable.
    if {![info exists profiling_available_saved]} {
	# Some targets don't have any implementation of __bb_init_func or are
	# missing other needed machinery.
	if { [istarget mmix-*-*]
	     || [istarget arm*-*-eabi*]
	     || [istarget arm*-*-elf]
	     || [istarget arm*-*-symbianelf*]
	     || [istarget powerpc-*-eabi*]
	     || [istarget strongarm*-*-elf]
	     || [istarget xscale*-*-elf]
	     || [istarget cris-*-*]
	     || [istarget h8300-*-*]
	     || [istarget mips*-*-elf]
	     || [istarget *-*-windiss] } {
	    set profiling_available_saved 0
	} else {
	    set profiling_available_saved 1
	}
    }

    return $profiling_available_saved
}

# Return true if iconv is supported on the target. In particular IBM-1047.

proc check_iconv_available { test_what } {
    global tool
    global libiconv

    set result ""

    set src iconv[pid].c
    set exe iconv[pid].x
    verbose "check_iconv_available compiling testfile $src" 2
    set f [open $src "w"]
    # Compile a small test program.
    puts $f "#include <iconv.h>\n"
    puts $f "int main (void)\n {\n iconv_t cd; \n"
    puts $f "cd = iconv_open (\"[lindex $test_what 1]\", \"UTF-8\");\n"
    puts $f "if (cd == (iconv_t) -1)\n return 1;\n"
    puts $f "return 0;\n}"
    close $f

    set lines [${tool}_target_compile $src $exe executable "libs=$libiconv" ]
    file delete $src

    if [string match "" $lines] then {
	# No error messages, everything is OK.

	set result [${tool}_load "./$exe" "" ""]
	set status [lindex $result 0];
	remote_file build delete $exe

	verbose "check_iconv_available status is <$status>" 2

	if { $status == "pass" } then {
	    return 1
	}
    }

    return 0
}

# Return true if named sections are supported on this target.
# This proc does not cache results, because the answer may vary
# when cycling over subtarget options (e.g. irix o32/n32/n64) in
# the same test run.
proc check_named_sections_available { } {
    global tool

    set src named[pid].c
    set obj named[pid].o
    verbose "check_named_sections_available compiling testfile $src" 2
    set f [open $src "w"]
    # Compile a small test program.
    puts $f "int __attribute__ ((section(\"whatever\"))) foo;"
    close $f
    set lines [${tool}_target_compile $src $obj object ""]
    file delete $src
    remote_file build delete $obj

    # If we got no error messages, everything is OK.
    set answer [string match "" $lines]
    verbose "check_named_sections_available  returning $answer" 2
    return $answer
}

# Return 1 if the target supports executing AltiVec instructions, 0
# otherwise.  Cache the result.

proc check_vmx_hw_available { } {
    global vmx_hw_available_saved
    global tool

    if [info exists vmx_hw_available_saved] {
	verbose "check_hw_available  returning saved $vmx_hw_available_saved" 2
    } else {
	set vmx_hw_available_saved 0

	# Some simulators are known to not support VMX instructions.
	if { [istarget powerpc-*-eabi] || [istarget powerpc*-*-eabispe] } {
	    verbose "check_hw_available  returning 0" 2
	    return $vmx_hw_available_saved
	}

	# Set up, compile, and execute a test program containing VMX
	# instructions.  Include the current process ID in the file
	# names to prevent conflicts with invocations for multiple
	# testsuites.
	set src vmx[pid].c
	set exe vmx[pid].x

	set f [open $src "w"]
	puts $f "int main() {"
	puts $f "#ifdef __MACH__"
	puts $f "  asm volatile (\"vor v0,v0,v0\");"
	puts $f "#else"
	puts $f "  asm volatile (\"vor 0,0,0\");"
	puts $f "#endif"
	puts $f "  return 0; }"
	close $f

	verbose "check_vmx_hw_available  compiling testfile $src" 2
	set lines [${tool}_target_compile $src $exe executable ""]
	file delete $src

	if [string match "" $lines] then {
	    # No error message, compilation succeeded.
	    set result [${tool}_load "./$exe" "" ""]
	    set status [lindex $result 0]
	    remote_file build delete $exe
	    verbose "check_vmx_hw_available testfile status is <$status>" 2

	    if { $status == "pass" } then {
		set vmx_hw_available_saved 1
	    }
	} else {
	    verbose "check_vmx_hw_availalble testfile compilation failed" 2
	}
    }

    return $vmx_hw_available_saved
}
