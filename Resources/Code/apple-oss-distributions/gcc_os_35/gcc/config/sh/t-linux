TARGET_LIBGCC2_CFLAGS = -fpic -DNO_FPSCR_VALUES
LIB1ASMFUNCS_CACHE = _ic_invalidate

LIB2FUNCS_EXTRA=

MULTILIB_DIRNAMES= 
MULTILIB_MATCHES = 
MULTILIB_EXCEPTIONS=

EXTRA_MULTILIB_PARTS= crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o

# Override t-slibgcc-elf-ver to export some libgcc symbols with
# the symbol versions that glibc used.  Also use an sh specific
# libgcc-std.ver to avoid to export some lib1func routines which
# should not be called via PLT.
SHLIB_MAPFILES =  $(srcdir)/config/sh/libgcc-std.ver \
	$(srcdir)/config/sh/libgcc-glibc.ver

# Override SHLIB_LINK and SHLIB_INSTALL to use linker script
# libgcc_s.so.
SHLIB_LINK = $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -shared -nodefaultlibs \
	-Wl,--soname=$(SHLIB_SONAME) \
	-Wl,--version-script=$(SHLIB_MAP) \
	-o $(SHLIB_NAME) @multilib_flags@ $(SHLIB_OBJS) $(SHLIB_LC) && \
	rm -f $(SHLIB_SOLINK) && \
	(echo "/* GNU ld script"; \
	 echo "   Use the shared library, but some functions are only in"; \
	 echo "   the static library.  */"; \
	 echo "GROUP ( $(SHLIB_SONAME) libgcc.a )" \
	) > $(SHLIB_SOLINK)
SHLIB_INSTALL = \
	$$(mkinstalldirs) $$(DESTDIR)$$(slibdir)$(SHLIB_SLIBDIR_QUAL); \
	$(INSTALL_DATA) $(SHLIB_NAME) \
	  $$(DESTDIR)$$(slibdir)$(SHLIB_SLIBDIR_QUAL)/$(SHLIB_SONAME); \
	rm -f $$(DESTDIR)$$(slibdir)$(SHLIB_SLIBDIR_QUAL)/$(SHLIB_SOLINK); \
	$(INSTALL_DATA) $(SHLIB_SOLINK) \
	  $$(DESTDIR)$$(slibdir)$(SHLIB_SLIBDIR_QUAL)/$(SHLIB_SOLINK)
