## Process this file with automake to produce Makefile.in.
# Copyright (C) 2004-2006 Free Software Foundation, Inc.
#
# This file is free software, distributed under the terms of the GNU
# General Public License.  As a special exception to the GNU General
# Public License, this file may be distributed as part of a program
# that contains a configuration script generated by Autoconf, under
# the same distribution terms as the rest of that program.
#
# Generated by gnulib-tool.
# Reproduce by: gnulib-tool --import --dir=. --lib=libm4 --source-base=lib --m4-base=m4 --doc-base=doc --aux-dir=. --no-libtool --macro-prefix=M4 binary-io cloexec close-stream error fdl fopen-safer free gendocs getopt gnupload mkstemp obstack regex stdlib-safer strtol tmpfile-safer unlocked-io verror xalloc xvasprintf

AUTOMAKE_OPTIONS = 1.5 gnits no-dependencies

noinst_LIBRARIES = libm4.a

libm4_a_SOURCES =
libm4_a_LIBADD = @LIBOBJS@
noinst_HEADERS =
EXTRA_DIST =
BUILT_SOURCES =
SUFFIXES =
MOSTLYCLEANFILES = core *.stackdump
MOSTLYCLEANDIRS =
CLEANFILES =
DISTCLEANFILES =
MAINTAINERCLEANFILES =

AM_CPPFLAGS =

## begin gnulib module alloca


libm4_a_LIBADD += @ALLOCA@
## end   gnulib module alloca

## begin gnulib module alloca-opt

BUILT_SOURCES += $(ALLOCA_H)
EXTRA_DIST += alloca_.h

# We need the following in order to create <alloca.h> when the system
# doesn't have one that works with the given compiler.
alloca.h: alloca_.h
	cp $(srcdir)/alloca_.h $@-t
	mv $@-t $@
MOSTLYCLEANFILES += alloca.h alloca.h-t

## end   gnulib module alloca-opt

## begin gnulib module binary-io

libm4_a_SOURCES += binary-io.h

## end   gnulib module binary-io

## begin gnulib module cloexec

EXTRA_DIST += cloexec.h

## end   gnulib module cloexec

## begin gnulib module close-stream

EXTRA_DIST += close-stream.h

## end   gnulib module close-stream

## begin gnulib module exit

libm4_a_SOURCES += exit.h

## end   gnulib module exit

## begin gnulib module exitfail

EXTRA_DIST += exitfail.h

## end   gnulib module exitfail

## begin gnulib module fopen-safer

EXTRA_DIST += stdio-safer.h stdio--.h

## end   gnulib module fopen-safer

## begin gnulib module fpending

EXTRA_DIST += __fpending.h

## end   gnulib module fpending

## begin gnulib module getopt

BUILT_SOURCES += $(GETOPT_H)
EXTRA_DIST += getopt_.h getopt_int.h

# We need the following in order to create <getopt.h> when the system
# doesn't have one that works with the given compiler.
getopt.h: getopt_.h
	cp $(srcdir)/getopt_.h $@-t
	mv $@-t $@
MOSTLYCLEANFILES += getopt.h getopt.h-t

## end   gnulib module getopt

## begin gnulib module gettext-h

libm4_a_SOURCES += gettext.h

## end   gnulib module gettext-h

## begin gnulib module mbchar

libm4_a_SOURCES += mbchar.h

## end   gnulib module mbchar

## begin gnulib module mbuiter

libm4_a_SOURCES += mbuiter.h

## end   gnulib module mbuiter

## begin gnulib module regex

EXTRA_DIST += regcomp.c regex.h regex_internal.c regex_internal.h regexec.c

## end   gnulib module regex

## begin gnulib module size_max

libm4_a_SOURCES += size_max.h

## end   gnulib module size_max

## begin gnulib module stat-macros

EXTRA_DIST += stat-macros.h

## end   gnulib module stat-macros

## begin gnulib module stdbool

BUILT_SOURCES += $(STDBOOL_H)
EXTRA_DIST += stdbool_.h

# We need the following in order to create <stdbool.h> when the system
# doesn't have one that works.
stdbool.h: stdbool_.h
	sed -e 's/@''HAVE__BOOL''@/$(HAVE__BOOL)/g' < $(srcdir)/stdbool_.h > $@-t
	mv $@-t $@
MOSTLYCLEANFILES += stdbool.h stdbool.h-t

## end   gnulib module stdbool

## begin gnulib module stdint

BUILT_SOURCES += $(STDINT_H)
EXTRA_DIST += stdint_.h

# We need the following in order to create <stdint.h> when the system
# doesn't have one that works with the given compiler.
stdint.h: stdint_.h
	sed -e 's/@''HAVE_WCHAR_H''@/$(HAVE_WCHAR_H)/g' \
	    -e 's/@''HAVE_STDINT_H''@/$(HAVE_STDINT_H)/g' \
	    -e 's/@''HAVE_SYS_TYPES_H''@/$(HAVE_SYS_TYPES_H)/g' \
	    -e 's|@''ABSOLUTE_STDINT_H''@|$(ABSOLUTE_STDINT_H)|g' \
	    -e 's/@''HAVE_INTTYPES_H''@/$(HAVE_INTTYPES_H)/g' \
	    -e 's/@''HAVE_SYS_INTTYPES_H''@/$(HAVE_SYS_INTTYPES_H)/g' \
	    -e 's/@''HAVE_SYS_BITYPES_H''@/$(HAVE_SYS_BITYPES_H)/g' \
	    -e 's/@''HAVE_LONG_LONG_INT''@/$(HAVE_LONG_LONG_INT)/g' \
	    -e 's/@''BITSIZEOF_PTRDIFF_T''@/$(BITSIZEOF_PTRDIFF_T)/g' \
	    -e 's/@''PTRDIFF_T_SUFFIX''@/$(PTRDIFF_T_SUFFIX)/g' \
	    -e 's/@''BITSIZEOF_SIG_ATOMIC_T''@/$(BITSIZEOF_SIG_ATOMIC_T)/g' \
	    -e 's/@''HAVE_SIGNED_SIG_ATOMIC_T''@/$(HAVE_SIGNED_SIG_ATOMIC_T)/g' \
	    -e 's/@''SIG_ATOMIC_T_SUFFIX''@/$(SIG_ATOMIC_T_SUFFIX)/g' \
	    -e 's/@''BITSIZEOF_SIZE_T''@/$(BITSIZEOF_SIZE_T)/g' \
	    -e 's/@''SIZE_T_SUFFIX''@/$(SIZE_T_SUFFIX)/g' \
	    -e 's/@''BITSIZEOF_WCHAR_T''@/$(BITSIZEOF_WCHAR_T)/g' \
	    -e 's/@''HAVE_SIGNED_WCHAR_T''@/$(HAVE_SIGNED_WCHAR_T)/g' \
	    -e 's/@''WCHAR_T_SUFFIX''@/$(WCHAR_T_SUFFIX)/g' \
	    -e 's/@''BITSIZEOF_WINT_T''@/$(BITSIZEOF_WINT_T)/g' \
	    -e 's/@''HAVE_SIGNED_WINT_T''@/$(HAVE_SIGNED_WINT_T)/g' \
	    -e 's/@''WINT_T_SUFFIX''@/$(WINT_T_SUFFIX)/g' \
	    < $(srcdir)/stdint_.h > $@-t
	mv $@-t $@
MOSTLYCLEANFILES += stdint.h stdint.h-t

## end   gnulib module stdint

## begin gnulib module stdlib-safer

EXTRA_DIST += stdlib-safer.h stdlib--.h

## end   gnulib module stdlib-safer

## begin gnulib module strcase

libm4_a_SOURCES += strcase.h

## end   gnulib module strcase

## begin gnulib module strnlen1

libm4_a_SOURCES += strnlen1.h strnlen1.c

## end   gnulib module strnlen1

## begin gnulib module sys_stat

BUILT_SOURCES += $(SYS_STAT_H)
EXTRA_DIST += stat_.h

# We need the following in order to create <sys/stat.h> when the system
# has one that is incomplete.
sys/stat.h: stat_.h
	test -d sys || mkdir sys
	sed -e 's|@''ABSOLUTE_SYS_STAT_H''@|$(ABSOLUTE_SYS_STAT_H)|g' \
	    < $(srcdir)/stat_.h > $@-t
	mv $@-t $@
MOSTLYCLEANFILES += sys/stat.h sys/stat.h-t
MOSTLYCLEANDIRS += sys

## end   gnulib module sys_stat

## begin gnulib module tmpfile-safer

EXTRA_DIST += stdio-safer.h stdio--.h

## end   gnulib module tmpfile-safer

## begin gnulib module unistd

BUILT_SOURCES += $(UNISTD_H)

# We need the following in order to create an empty placeholder for
# <unistd.h> when the system doesn't have one.
unistd.h:
	echo '/* Empty placeholder for $@.  */' >$@
MOSTLYCLEANFILES += unistd.h

## end   gnulib module unistd

## begin gnulib module unistd-safer

EXTRA_DIST += unistd-safer.h unistd--.h

## end   gnulib module unistd-safer

## begin gnulib module unlocked-io

EXTRA_DIST += unlocked-io.h

## end   gnulib module unlocked-io

## begin gnulib module vasnprintf

libm4_a_SOURCES += printf-args.h printf-parse.h vasnprintf.h

## end   gnulib module vasnprintf

## begin gnulib module vasprintf

libm4_a_SOURCES += vasprintf.h

## end   gnulib module vasprintf

## begin gnulib module verror

libm4_a_SOURCES += verror.h verror.c

## end   gnulib module verror

## begin gnulib module wcwidth

libm4_a_SOURCES += wcwidth.h

## end   gnulib module wcwidth

## begin gnulib module xalloc

EXTRA_DIST += xalloc.h

## end   gnulib module xalloc

## begin gnulib module xalloc-die

libm4_a_SOURCES += xalloc-die.c

## end   gnulib module xalloc-die

## begin gnulib module xsize

libm4_a_SOURCES += xsize.h

## end   gnulib module xsize

## begin gnulib module xvasprintf

libm4_a_SOURCES += xvasprintf.h xvasprintf.c xasprintf.c

## end   gnulib module xvasprintf


mostlyclean-local: mostlyclean-generic
	@test -z "$(MOSTLYCLEANDIRS)" || \
	  for dir in $(MOSTLYCLEANDIRS); do \
	    if test -d $$dir; then \
	      echo "rmdir $$dir"; rmdir $$dir; \
	    fi; \
	  done

# Makefile.am ends here
