Index: samba/source/include/vfs.h
===================================================================
--- samba/source/include/vfs.h.orig
+++ samba/source/include/vfs.h
@@ -558,6 +558,8 @@ typedef struct vfs_statvfs_struct {
 	SMB_BIG_UINT FsIdentifier;   /* fsid */
 	/* NB Namelen comes from FILE_SYSTEM_ATTRIBUTE_INFO call */
 	/* NB flags can come from FILE_SYSTEM_DEVICE_INFO call   */
+
+	int FsCapabilities;
 } vfs_statvfs_struct;
 
 /* Add a new FSP extension of the given type. Returns a pointer to the
Index: samba/source/smbd/statvfs.c
===================================================================
--- samba/source/smbd/statvfs.c.orig
+++ samba/source/smbd/statvfs.c
@@ -3,6 +3,8 @@
    VFS API's statvfs abstraction
    Copyright (C) Alexander Bokovoy			2005
    Copyright (C) Steve French				2005
+
+   Copyright (C) 2006 Apple Inc. All rights reserved.
    
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -38,11 +40,93 @@ static int linux_statvfs(const char *pat
 		statbuf->TotalFileNodes = statvfs_buf.f_files;
 		statbuf->FreeFileNodes = statvfs_buf.f_ffree;
 		statbuf->FsIdentifier = statvfs_buf.f_fsid;
+
+		/* Good defaults for Linux filesystems are case sensitive
+		 * and case preserving.
+		 */
+		statbuf->FsCapabilities =
+		    FILE_CASE_SENSITIVE_SEARCH | FILE_CASE_PRESERVING_NAMES;
 	}
 	return result;
 }
 #endif
 
+#if defined(DARWINOS)
+
+#include <sys/attr.h>
+
+static int darwin_fs_capabilities(const char * path)
+{
+	int caps = 0;
+	vol_capabilities_attr_t *vcaps;
+	struct attrlist	attrlist;
+	char attrbuf[sizeof(u_int32_t) + sizeof(vol_capabilities_attr_t)];
+
+#define FORMAT_CAP(vinfo, cap) \
+	( ((vinfo)->valid[VOL_CAPABILITIES_FORMAT] & (cap)) && \
+	   ((vinfo)->capabilities[VOL_CAPABILITIES_FORMAT] & (cap)) )
+
+#define INTERFACE_CAP(vinfo, cap) \
+	( ((vinfo)->valid[VOL_CAPABILITIES_INTERFACES] & (cap)) && \
+	   ((vinfo)->capabilities[VOL_CAPABILITIES_INTERFACES] & (cap)) )
+
+	ZERO_STRUCT(attrlist);
+	attrlist.bitmapcount = ATTR_BIT_MAP_COUNT;
+	attrlist.volattr = ATTR_VOL_CAPABILITIES;
+
+	if (getattrlist(path, &attrlist, attrbuf, sizeof(attrbuf), 0) != 0) {
+		DEBUG(0, ("getattrlist for %s capabilities failed: %s\n",
+			    path, strerror(errno)));
+		/* Return no capabilities on failure. */
+		return 0;
+	}
+
+	vcaps =
+	    (vol_capabilities_attr_t *)(attrbuf + sizeof(u_int32_t));
+
+	if (FORMAT_CAP(vcaps, VOL_CAP_FMT_SPARSE_FILES)) {
+		caps |= FILE_SUPPORTS_SPARSE_FILES;
+	}
+
+	if (FORMAT_CAP(vcaps, VOL_CAP_FMT_CASE_SENSITIVE)) {
+		caps |= FILE_CASE_SENSITIVE_SEARCH;
+	}
+
+	if (FORMAT_CAP(vcaps, VOL_CAP_FMT_CASE_PRESERVING)) {
+		caps |= FILE_CASE_PRESERVED_NAMES;
+	}
+
+	if (INTERFACE_CAP(vcaps, VOL_CAP_INT_EXTENDED_SECURITY)) {
+		caps |= FILE_PERSISTENT_ACLS;
+	}
+
+	return caps;
+}
+
+static int darwin_statvfs(const char *path, vfs_statvfs_struct *statbuf)
+{
+	struct statfs sbuf;
+	int ret;
+
+	ret = statfs(path, &sbuf);
+	if (ret != 0) {
+		return ret;
+	}
+
+	statbuf->OptimalTransferSize = sbuf.f_iosize;
+	statbuf->BlockSize = sbuf.f_bsize;
+	statbuf->TotalBlocks = sbuf.f_blocks;
+	statbuf->BlocksAvail = sbuf.f_bfree;
+	statbuf->UserBlocksAvail = sbuf.f_bavail;
+	statbuf->TotalFileNodes = sbuf.f_files;
+	statbuf->FreeFileNodes = sbuf.f_ffree;
+	statbuf->FsIdentifier = *(SMB_BIG_UINT *)(&sbuf.f_fsid); /* Ick. */
+	statbuf->FsCapabilities = darwin_fs_capabilities(sbuf.f_mntonname);
+
+	return 0;
+}
+#endif
+
 /* 
  sys_statvfs() is an abstraction layer over system-dependent statvfs()/statfs()
  for particular POSIX systems. Due to controversy of what is considered more important
@@ -53,6 +137,8 @@ int sys_statvfs(const char *path, vfs_st
 {
 #if defined(LINUX) && defined(HAVE_FSID_INT)
 	return linux_statvfs(path, statbuf);
+#elif defined(DARWINOS)
+	return darwin_statvfs(path, statbuf);
 #else
 	/* BB change this to return invalid level */
 #ifdef EOPNOTSUPP
