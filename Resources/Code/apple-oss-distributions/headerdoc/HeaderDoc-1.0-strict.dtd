<!--
   HeaderDoc DTD version 1.0

   This can be included by the following identifiers:

   Copyright (c) 2004 Apple,
   All Rights Reserved.

   PUBLIC "-//Apple Computer//DTD HEADERDOC 1.0//EN"
   SYSTEM "http://www.apple.com/DTDs/HeaderDoc-1.0.dtd"

   $Revision: 1.1.2.1 $
   $Date: 2004/04/16 00:33:09 $

-->



<!-- HTML character encodings -->

<!ENTITY % HTMLlat1 PUBLIC "-//W3C//ENTITIES Latin 1 for XHTML//EN"
   "xhtml-lat1.ent">
%HTMLlat1;

<!ENTITY % HTMLsymbol PUBLIC "-//W3C//ENTITIES Symbols for XHTML//EN"
   "xhtml-symbol.ent">
%HTMLsymbol;

<!ENTITY % HTMLspecial PUBLIC "-//W3C//ENTITIES Special for XHTML//EN"
   "xhtml-special.ent">
%HTMLspecial;

<!ENTITY % html.dtd PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
%html.dtd;


<!-- Allowable HTML entities -->

<!-- These are the most commonly used HTML elements, IMHO.  I'm
     intentionally leaving out head, body, html, br, h1-h5, since
     they absolutely do not belong in a HeaderDoc discussion block. -->
<!ENTITY % htmlData "( #PCDATA|div|a|p|br|table|caption|td|tr|th|
	span|col|colgroup|thead|tbody|tfoot|dl|dd|dt|ol|ul|li|
	font|code|pre|tt|em|i|b|hr|center|link|meta|blockquote|
	img|hd_value|hd_ihd|hd_link )*" >


<!-- Broad categories of element types -->

<!ENTITY % apiOwner "( name, abstract?, availability?, updated?,
	group?, value?, throws?, constantlist?,
	(fieldlist | parameterlist | template_fields)*,
	parsedparameterlist?, attributes?, attributelists?,
	returntype?, result?, declaration?, desc?,
	functions?, methods?, globals?, constants?, typedefs?,
	structs_and_unions?, enums?, defines?, classes?,
	copyrightinfo?, timestamp? )" >

<!ENTITY % headerObject "( name, abstract?, availability?, updated?,
	group?, value?, throwlist?, constantlist?,
	(fieldlist | parameterlist | template_fields)*,
	parsedparameterlist?, attributes?, attributelists?,
	returntype?, result?, declaration?, desc? )" >



<!-- main element types -->

<!-- class -->
<!ELEMENT class %apiOwner; >
<!ATTLIST class id CDATA #REQUIRED >
<!ATTLIST class lang CDATA #REQUIRED >


<!-- header -->
<!ELEMENT header %apiOwner; >
<!ATTLIST header id CDATA "">
<!ATTLIST header lang CDATA "">
<!ATTLIST header filename CDATA "">
<!ATTLIST header headerpath CDATA "">
<!ATTLIST header headerclass CDATA "">


<!-- com_interface -->
<!ELEMENT com_interface %apiOwner; >
<!ATTLIST com_interface id CDATA #REQUIRED >
<!ATTLIST com_interface lang CDATA #REQUIRED >


<!-- enum -->
<!ELEMENT enum %headerObject; >
<!ATTLIST enum id CDATA #REQUIRED >
<!ATTLIST enum lang CDATA #REQUIRED >


<!-- function -->
<!ELEMENT function %headerObject; >
<!ATTLIST function id CDATA #REQUIRED >
<!ATTLIST function lang CDATA #REQUIRED >


<!-- method -->
<!ELEMENT method %headerObject; >
<!ATTLIST method id CDATA #REQUIRED >
<!ATTLIST method lang CDATA #REQUIRED >


<!-- category -->
<!ELEMENT category %apiOwner; >
<!ATTLIST category id CDATA #REQUIRED >
<!ATTLIST category lang CDATA #REQUIRED >


<!-- protocol -->
<!ELEMENT protocol %apiOwner; >
<!ATTLIST protocol id CDATA #REQUIRED >
<!ATTLIST protocol lang CDATA #REQUIRED >


<!-- pdefine -->
<!ELEMENT pdefine %headerObject; >
<!ATTLIST pdefine id CDATA #REQUIRED >
<!ATTLIST pdefine lang CDATA #REQUIRED >


<!-- union -->
<!ELEMENT union %headerObject; >
<!ATTLIST union id CDATA #REQUIRED >
<!ATTLIST union lang CDATA #REQUIRED >


<!-- struct -->
<!ELEMENT struct %headerObject; >
<!ATTLIST struct id CDATA #REQUIRED >
<!ATTLIST struct lang CDATA #REQUIRED >


<!-- typedef -->
<!ELEMENT typedef %headerObject; >
<!ATTLIST typedef id CDATA #REQUIRED >
<!ATTLIST typedef lang CDATA #REQUIRED >
<!ATTLIST typedef type CDATA "simple">


<!-- variable -->
<!ELEMENT variable %headerObject; >
<!ATTLIST variable id CDATA #REQUIRED >
<!ATTLIST variable lang CDATA #REQUIRED >


<!-- constant -->
<!-- NOTE: this can be either top level or as part of another element,
     hence there are two different forms.  I'd love to make the attributes
     optional for only one of them, but alas.... -->
<!ELEMENT constant ( %headerObject;, callback_parameters?) >
<!ATTLIST constant id CDATA "" >
<!ATTLIST constant lang CDATA "" >



<!-- Lists included in API Owners -->

<!-- functions (list) -->
<!ELEMENT functions (function+) >


<!-- methods (list) -->
<!ELEMENT methods (method+) >


<!-- globals (list of global variables) -->
<!ELEMENT globals ( ( variable | constant )+ ) >


<!-- constants (list) -->
<!ELEMENT constants (constant+) >


<!-- typedefs (list) -->
<!ELEMENT typedefs (typedef+) >


<!-- structs_and_unions (list) -->
<!ELEMENT structs_and_unions ((struct | union)+) >


<!-- enums (list) -->
<!ELEMENT enums (enum+) >


<!-- defines (list) -->
<!ELEMENT defines (pdefine+) >


<!-- classes (list) -->
<!ELEMENT classes ((class|category|protocol|com_interface)+) >



<!-- Lists included in header objects (and supporting elements) -->

<!-- fieldlist -->
<!ELEMENT fieldlist ( field+ ) >


<!-- constantlist -->
<!ELEMENT constantlist ( constant+ ) >


<!-- parameterlist -->
<!ELEMENT parameterlist ( (parameter | constant)+ ) >


<!-- template_fields (list) -->
<!ELEMENT template_fields ( field+ ) >


<!-- field -->
<!ELEMENT field ( name, desc, callback_parameters? ) >


<!-- callback_parameters (list) -->
<!ELEMENT callback_parameters ( parameter+ ) >


<!-- parameter (specified) -->
<!ELEMENT parameter ( name, desc ) >


<!-- parsedparameter (parsed) -->
<!ELEMENT parsedparameter ( type, name ) >


<!-- parsedparameterlist -->
<!ELEMENT parsedparameterlist (parsedparameter+) >


<!-- attributes -->
<!ELEMENT attributes ((attribute | longattribute)+) >


<!-- attributelists -->
<!ELEMENT attributelists (listattribute+) >


<!-- returntype (from code) -->
<!ELEMENT returntype (#PCDATA) >


<!-- attribute -->
<!ELEMENT attribute (name, value) >


<!-- longattribute -->
<!ELEMENT longattribute (name, value) >


<!-- listattribute -->
<!ELEMENT listattribute (name, list) >


<!-- list -->
<!ELEMENT list (item+) >


<!-- item -->
<!ELEMENT item (name, value) >



<!-- Minor elements included from header objects -->

<!-- result -->
<!ELEMENT result %htmlData; >


<!-- desc -->
<!ELEMENT desc %htmlData; >


<!-- type (from code) -->
<!ELEMENT type (#PCDATA) >


<!-- name (from code or comments) -->
<!ELEMENT name %htmlData; >


<!-- abstract -->
<!ELEMENT abstract %htmlData; >


<!-- availability -->
<!ELEMENT availability %htmlData; >


<!-- updated -->
<!ELEMENT updated %htmlData; >


<!-- group -->
<!ELEMENT group %htmlData; >


<!-- value -->
<!ELEMENT value %htmlData; >


<!-- These are really placeholder elements -->
<!-- hd_value -->
<!ELEMENT hd_value (#PCDATA) >
<!-- hd_ihd -->
<!ELEMENT hd_ihd (#PCDATA) >


<!-- hd_link -->
<!ELEMENT hd_link (#PCDATA) >
<!ATTLIST hd_link logicalPath CDATA #REQUIRED >


<!-- copyrightinfo -->
<!ELEMENT copyrightinfo (#PCDATA) >


<!-- timestamp -->
<!ELEMENT timestamp (#PCDATA) >


<!-- throws -->
<!ELEMENT throwlist (throw+) >


<!-- throws -->
<!ELEMENT throw %htmlData; >



<!-- declaration and declaration subelements -->

<!ENTITY % declarationElements "( #PCDATA | declaration_comment | declaration_string | 
	declaration_char | declaration_preprocessor | declaration_number | 
	declaration_keyword | declaration_function | declaration_var | 
	declaration_template | declaration_type | declaration_param )*" >

<!-- declaration -->
<!ELEMENT declaration %declarationElements; >

<!ELEMENT declaration_comment %declarationElements; >
<!ELEMENT declaration_string ( #PCDATA ) >
<!ELEMENT declaration_char ( #PCDATA ) >
<!ELEMENT declaration_preprocessor ( #PCDATA ) >
<!ELEMENT declaration_number ( #PCDATA ) >
<!ELEMENT declaration_keyword ( #PCDATA ) >
<!ELEMENT declaration_function ( #PCDATA ) >
<!ELEMENT declaration_var ( #PCDATA ) >
<!ELEMENT declaration_template ( #PCDATA ) >
<!ELEMENT declaration_type ( #PCDATA ) >
<!ELEMENT declaration_param ( #PCDATA ) >

