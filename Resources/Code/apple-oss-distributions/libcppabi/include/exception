/*
 * Copyright (c) 2010 Apple Inc. All rights reserved.
 *
 * @APPLE_LICENSE_HEADER_START@
 * 
 * This file contains Original Code and/or Modifications of Original Code
 * as defined in and that are subject to the Apple Public Source License
 * Version 2.0 (the 'License'). You may not use this file except in
 * compliance with the License. Please obtain a copy of the License at
 * http://www.opensource.apple.com/apsl/ and read it before using this
 * file.
 * 
 * The Original Code and all software distributed under the License are
 * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
 * Please see the License for the specific language governing rights and
 * limitations under the License.
 * 
 * @APPLE_LICENSE_HEADER_END@
 */

#ifndef __EXCEPTION__
#define __EXCEPTION__


namespace std  
{

class exception
{
public:
     __attribute__ ((__visibility__("hidden"), __always_inline__)) 
			exception() throw() {}
    virtual ~exception() throw();
    virtual const char* what() const throw();
};

class bad_exception : public exception
{
public:
     __attribute__ ((__visibility__("hidden"), __always_inline__)) 
	         bad_exception() throw() {}
    virtual ~bad_exception() throw();
    virtual const char* what() const throw();
};

typedef void (*unexpected_handler)();
unexpected_handler set_unexpected(unexpected_handler) throw();
void unexpected()  __attribute__ ((__noreturn__));

typedef void (*terminate_handler)();
terminate_handler set_terminate(terminate_handler) throw();
void terminate() __attribute__((__noreturn__));

bool uncaught_exception() throw();

}  // std

#endif  // __EXCEPTION__

