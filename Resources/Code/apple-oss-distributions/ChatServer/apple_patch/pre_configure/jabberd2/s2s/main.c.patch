--- /tmp/jabberd-2.2.17/s2s/main.c	2012-08-06 11:18:46.000000000 -0700
+++ ./jabberd2/s2s/main.c	2012-08-28 18:49:00.000000000 -0700
@@ -50,6 +50,10 @@ static void _s2s_pidfile(s2s_t s2s) {
     char *pidfile;
     FILE *f;
     pid_t pid;
+    char piddir[PATH_MAX] = "";
+    struct stat statbuf;
+    int i, last;
+    int i_slash = 0;
 
     pidfile = config_get_one(s2s->config, "pidfile", 0);
     if(pidfile == NULL)
@@ -57,6 +61,39 @@ static void _s2s_pidfile(s2s_t s2s) {
 
     pid = getpid();
 
+    // Get the pid directory from the full file path
+    for (i = 0; pidfile[i] != '\0'; i++) {
+        if (pidfile[i] == '/')
+            i_slash = i;
+    }
+    do { // not a loop
+        if (i_slash == 0) {
+            // no directory provided in pidfile preference, or only one slash found in path... skip creation attempt
+            break;
+        } else {
+            last = i_slash+1;
+        }
+        if (i_slash > sizeof(piddir)) {
+            log_write(s2s->log, LOG_ERR, "specified PID path exceeds the maximum allowed length");
+            return;
+        }
+        strlcpy(piddir, pidfile, last);
+
+        // Create the pid directory if it does not exist (don't attempt to create intermediate directories)
+        if (stat(piddir, &statbuf)) {
+            log_debug(ZONE, "pid directory appears to not exist, trying to create it...");
+            if (mkdir(piddir, 0755)) {
+                if ((errno == EEXIST) && (! stat(piddir, &statbuf))) {
+                    log_debug(ZONE, "working around probable race condition, pid directory now exists");
+                    break;
+                }
+                log_write(s2s->log, LOG_ERR, "couldn't create pid directory %s: %s", piddir, strerror(errno));
+                return;
+            }
+            log_debug(ZONE, "created pid directory: %s", piddir);
+        }
+    } while(0); // not a loop
+
     if((f = fopen(pidfile, "w+")) == NULL) {
         log_write(s2s->log, LOG_ERR, "couldn't open %s for writing: %s", pidfile, strerror(errno));
         return;
@@ -100,6 +137,10 @@ static void _s2s_config_expand(s2s_t s2s
 
     s2s->router_pemfile = config_get_one(s2s->config, "router.pemfile", 0);
 
+    s2s->router_cachain = config_get_one(s2s->config, "router.cachain", 0);
+
+    s2s->router_private_key_password = config_get_one(s2s->config, "router.private_key_password", 0);
+
     s2s->retry_init = j_atoi(config_get_one(s2s->config, "router.retry.init", 0), 3);
     s2s->retry_lost = j_atoi(config_get_one(s2s->config, "router.retry.lost", 0), 3);
     if((s2s->retry_sleep = j_atoi(config_get_one(s2s->config, "router.retry.sleep", 0), 2)) < 1)
@@ -166,6 +207,7 @@ static void _s2s_config_expand(s2s_t s2s
     s2s->local_pemfile = config_get_one(s2s->config, "local.pemfile", 0);
     s2s->local_cachain = config_get_one(s2s->config, "local.cachain", 0);
     s2s->local_verify_mode = j_atoi(config_get_one(s2s->config, "local.verify-mode", 0), 0);
+    s2s->local_private_key_password = config_get_one(s2s->config, "local.private_key_password", 0);
 
     s2s->io_max_fds = j_atoi(config_get_one(s2s->config, "io.max_fds", 0), 1024);
 
@@ -235,16 +277,18 @@ static void _s2s_hosts_expand(s2s_t s2s)
 
         host->host_verify_mode = j_atoi(j_attr((const char **) elem->attrs[i], "verify-mode"), 0);
 
+        host->host_private_key_password = j_attr((const char **) elem->attrs[i], "private-key-password");
+
 #ifdef HAVE_SSL
         if(host->host_pemfile != NULL) {
             if(s2s->sx_ssl == NULL) {
-                s2s->sx_ssl = sx_env_plugin(s2s->sx_env, sx_ssl_init, host->realm, host->host_pemfile, host->host_cachain, host->host_verify_mode);
+                s2s->sx_ssl = sx_env_plugin(s2s->sx_env, sx_ssl_init, host->realm, host->host_pemfile, host->host_cachain, host->host_verify_mode, host->host_private_key_password);
                 if(s2s->sx_ssl == NULL) {
                     log_write(s2s->log, LOG_ERR, "failed to load %s SSL pemfile", host->realm);
                     host->host_pemfile = NULL;
                 }
             } else {
-                if(sx_ssl_server_addcert(s2s->sx_ssl, host->realm, host->host_pemfile, host->host_cachain, host->host_verify_mode) != 0) {
+                if(sx_ssl_server_addcert(s2s->sx_ssl, host->realm, host->host_pemfile, host->host_cachain, host->host_verify_mode, host->host_private_key_password) != 0) {
                     log_write(s2s->log, LOG_ERR, "failed to load %s SSL pemfile", host->realm);
                     host->host_pemfile = NULL;
                 }
@@ -632,8 +676,8 @@ int _s2s_populate_whitelist_domains(s2s_
             continue;
         }
         s2s->whitelist_domains[j] = (char *) malloc(sizeof(char) * (elem_len+1));
-        strncpy(s2s->whitelist_domains[j], values[i], elem_len);
-        s2s->whitelist_domains[j][elem_len] = '\0';
+        memset(s2s->whitelist_domains[j], 0, (sizeof(char) * (elem_len+1)));
+        strlcpy(s2s->whitelist_domains[j], values[i], elem_len+1);
         log_debug(ZONE, "s2s whitelist domain read from file: %s\n", s2s->whitelist_domains[j]);
         j++;
     }
@@ -665,8 +709,7 @@ int s2s_domain_in_whitelist(s2s_t s2s, c
     char *domain_ptr = &domain[0];
     int domain_len;
 
-    strncpy(domain, in_domain, sizeof(domain));
-    domain[sizeof(domain)-1] = '\0';
+    strlcpy((char *)domain, in_domain, sizeof(domain));
     domain_len = strlen((const char *)&domain);
 
     if (domain_len <= 0) {
@@ -745,8 +788,7 @@ int s2s_domain_in_whitelist(s2s_t s2s, c
         dst = &segments[segcount];
         *dst = (char *)malloc(seg_tmp_len + 1);
         if (*dst != NULL) {
-            strncpy(*dst, seg_tmp, seg_tmp_len + 1);
-            (*dst)[seg_tmp_len] = '\0';
+            strlcpy(*dst, seg_tmp, sizeof(*dst));
         } else { 
             if (seg_tmp != NULL) {
                 free(seg_tmp);
@@ -769,11 +811,9 @@ int s2s_domain_in_whitelist(s2s_t s2s, c
             matchstr[0] = '\0';
             for (i = domain_index; i < segcount; i++) {
                 if (i > domain_index) {
-                    strncat((char *)&matchstr, ".", sizeof(matchstr));
-                    matchstr[sizeof(matchstr)-1] = '\0';
+                    strlcat((char *)&matchstr, ".", sizeof(matchstr));
                 }
-                strncat((char *)&matchstr, (char *)segments[i], sizeof(matchstr));
-                matchstr[sizeof(matchstr)-1] = '\0';
+                strlcat((char *)&matchstr, (char *)segments[i], sizeof(matchstr));
             }
             for (wl_index = 0; wl_index < s2s->n_whitelist_domains; wl_index++) {
                 wl_len = strlen(s2s->whitelist_domains[wl_index]);
@@ -925,7 +965,7 @@ JABBER_MAIN("jabberd2s2s", "Jabber 2 S2S
 #ifdef HAVE_SSL
     /* get the ssl context up and running */
     if(s2s->local_pemfile != NULL) {
-        s2s->sx_ssl = sx_env_plugin(s2s->sx_env, sx_ssl_init, NULL, s2s->local_pemfile, s2s->local_cachain, s2s->local_verify_mode);
+        s2s->sx_ssl = sx_env_plugin(s2s->sx_env, sx_ssl_init, NULL, s2s->local_pemfile, s2s->local_cachain, s2s->local_verify_mode, s2s->local_private_key_password);
 
         if(s2s->sx_ssl == NULL) {
             log_write(s2s->log, LOG_ERR, "failed to load local SSL pemfile, SSL will not be available to peers");
@@ -936,7 +976,7 @@ JABBER_MAIN("jabberd2s2s", "Jabber 2 S2S
 
     /* try and get something online, so at least we can encrypt to the router */
     if(s2s->sx_ssl == NULL && s2s->router_pemfile != NULL) {
-        s2s->sx_ssl = sx_env_plugin(s2s->sx_env, sx_ssl_init, NULL, s2s->router_pemfile, NULL, NULL);
+        s2s->sx_ssl = sx_env_plugin(s2s->sx_env, sx_ssl_init, NULL, s2s->router_pemfile, s2s->router_cachain, NULL, s2s->router_private_key_password);
         if(s2s->sx_ssl == NULL) {
             log_write(s2s->log, LOG_ERR, "failed to load router SSL pemfile, channel to router will not be SSL encrypted");
             s2s->router_pemfile = NULL;
@@ -965,6 +1005,13 @@ JABBER_MAIN("jabberd2s2s", "Jabber 2 S2S
 
     s2s->mio = mio_new(s2s->io_max_fds);
 
+    struct stat stat_buf;
+    if (stat("/etc/resolv.conf", &stat_buf) == -1) {
+        log_write(s2s->log, LOG_ERR, "can't stat /etc/resolv.conf, can't initialize dns, aborting");
+        exit(1);
+    }
+    usleep(100000); // attempt to prevent potential race condition with resolv.conf not being finalized
+
     if((s2s->udns_fd = dns_init(NULL, 1)) < 0) {
         log_write(s2s->log, LOG_ERR, "unable to initialize dns library, aborting");
         exit(1);
