--- /tmp/jabberd-2.2.17/router/main.c	2012-05-04 07:51:08.000000000 -0700
+++ ./jabberd2/router/main.c	2012-08-28 18:49:00.000000000 -0700
@@ -48,6 +48,10 @@ static void _router_pidfile(router_t r) 
     char *pidfile;
     FILE *f;
     pid_t pid;
+    char piddir[PATH_MAX] = "";
+    struct stat statbuf;
+    int i, last;
+    int i_slash = 0;
 
     pidfile = config_get_one(r->config, "pidfile", 0);
     if(pidfile == NULL)
@@ -55,6 +59,39 @@ static void _router_pidfile(router_t r) 
 
     pid = getpid();
 
+    // Get the pid directory from the full file path
+    for (i = 0; pidfile[i] != '\0'; i++) {
+        if (pidfile[i] == '/')
+            i_slash = i;
+    }
+    do { // not a loop
+        if (i_slash == 0) {
+            // no directory provided in pidfile preference, or only one slash found in path... skip creation attempt
+            break;
+        } else {
+            last = i_slash+1;
+        }
+        if (i_slash > sizeof(piddir)) {
+            log_write(r->log, LOG_ERR, "specified PID path exceeds the maximum allowed length");
+            return;
+        }
+        strlcpy(piddir, pidfile, last);
+
+        // Create the pid directory if it does not exist (don't attempt to create intermediate directories)
+        if (stat(piddir, &statbuf)) {
+            log_debug(ZONE, "pid directory appears to not exist, trying to create it...");
+            if (mkdir(piddir, 0755)) {
+                if ((errno == EEXIST) && (! stat(piddir, &statbuf))) {
+                    log_debug(ZONE, "working around probable race condition, pid directory now exists");
+                    break;
+                }
+                log_write(r->log, LOG_ERR, "couldn't create pid directory %s: %s", piddir, strerror(errno));
+                return;
+            }
+            log_debug(ZONE, "created pid directory: %s", piddir);
+        }
+    } while(0); // not a loop
+
     if((f = fopen(pidfile, "w+")) == NULL) {
         log_write(r->log, LOG_ERR, "couldn't open %s for writing: %s", pidfile, strerror(errno));
         return;
@@ -76,7 +113,7 @@ static void _router_config_expand(router
 {
     char *str, *ip, *mask, *name, *target;
     config_elem_t elem;
-    int i, len;
+    int i;
     alias_t alias;
 
     r->id = config_get_one(r->config, "id", 0);
@@ -113,6 +150,8 @@ static void _router_config_expand(router
 
     r->local_pemfile = config_get_one(r->config, "local.pemfile", 0);
 
+    r->local_private_key_password = config_get_one(r->config, "local.private_key_password", 0);
+
     r->io_max_fds = j_atoi(config_get_one(r->config, "io.max_fds", 0), 1024);
 
     elem = config_get(r->config, "io.limits.bytes");
@@ -201,6 +240,13 @@ static void _router_config_expand(router
     /* message logging to flat file */
     r->message_logging_enabled = j_atoi(config_get_one(r->config, "message_logging.enabled", 0), 0);
     r->message_logging_file = config_get_one(r->config, "message_logging.file", 0);
+    if (strlen(r->message_logging_file) >= (PATH_MAX-13)) { // room for a full path plus .xxxx.gz appended (necessary for log rolling)
+        log_debug(ZONE, "ERROR: message logging directory and filename exceed file system limits.  Disabling message logging.");
+        r->message_logging_enabled = 0;
+    }
+    r->message_logging_roll_days = j_atoi(config_get_one(r->config, "message_logging.log_roll_days", 0), 30);
+    r->message_logging_roll_megs = j_atoi(config_get_one(r->config, "message_logging.log_roll_megs", 0), 500);
+    r->filter_muc_messages_from = config_get_one(r->config, "message_logging.filter_muc_messages_from", 0);
 
     r->check_interval = j_atoi(config_get_one(r->config, "check.interval", 0), 60);
     r->check_keepalive = j_atoi(config_get_one(r->config, "check.keepalive", 0), 0);
@@ -418,7 +464,7 @@ JABBER_MAIN("jabberd2router", "Jabber 2 
 
 #ifdef HAVE_SSL
     if(r->local_pemfile != NULL) {
-        r->sx_ssl = sx_env_plugin(r->sx_env, sx_ssl_init, NULL, r->local_pemfile, NULL, NULL);
+        r->sx_ssl = sx_env_plugin(r->sx_env, sx_ssl_init, NULL, r->local_pemfile, NULL, NULL, r->local_private_key_password);
         if(r->sx_ssl == NULL)
             log_write(r->log, LOG_ERR, "failed to load SSL pemfile, SSL disabled");
     }
@@ -483,6 +529,12 @@ JABBER_MAIN("jabberd2router", "Jabber 2 
 
             _router_time_checks(r);
 
+            if (r->message_logging_enabled)
+            {
+                // Roll message logs if necessary
+                roll_message_log(r);
+            }
+
             r->next_check = time(NULL) + r->check_interval;
             log_debug(ZONE, "next time check at %d", r->next_check);
         }
