.\"Copyright 2006, Sun Microsystems, Inc.
.\" Copyright (c) 1996 Thinking Machines Corporation
.TH MPI_Comm_spawn_multiple 3OpenMPI "September 2006" "Open MPI 1.2" " "
.SH NAME
\fBMPI_Comm_spawn_multiple\fP \- Spawns multiple binaries, or the same binary with multiple sets of arguments. 

.SH SYNTAX
.ft R
.SH C Syntax
.nf
#include <mpi.h>
int MPI_Comm_spawn_multiple(int \fIcount\fP, char *\fIarray_of_commands\fP[], 
	char **\fIarray_of_argv\fP[], int \fIarray_of_maxprocs\fP[], MPI_Info 
	\fIarray_of_info\fP[], int \fIroot\fP, MPI_Comm \fIcomm\fP, MPI_Comm *\fIintercomm\fP, 
	int \fIarray_of_errcodes\fP[])

.SH Fortran Syntax
.nf
INCLUDE 'mpif.h'
MPI_COMM_SPAWN_MULTIPLE(\fICOUNT, ARRAY_OF_COMMANDS, ARRAY_OF_ARGV, 
	ARRAY_OF_MAXPROCS, ARRAY_OF_INFO, ROOT, COMM, INTERCOMM, 
	ARRAY_OF_ERRCODES, IERROR\fP)
	INTEGER	\fICOUNT, ARRAY_OF_INFO(*), ARRAY_OF_MAXPROCS(*), ROOT, 
		COMM, INTERCOMM, ARRAY_OF_ERRCODES(*), IERROR\fP 
	CHARACTER*(*) \fIARRAY_OF_COMMANDS\fP(*), \fIARRAY_OF_ARGV\fP(\fICOUNT\fP, *)

.SH C++ Syntax
.nf
#include <mpi.h>
MPI::Intercomm MPI::Intracomm::Spawn_multiple(int \fIcount\fP,
	const char* \fIarray_of_commands\fP[], const char** \fIarray_of_argv\fP[],
	const int \fIarray_of_maxprocs\fP[], const MPI::Info \fIarray_of_info\fP[],
	int \fIroot\fP, int \fIarray_of_errcodes\fP[])

MPI::Intercomm MPI::Intracomm::Spawn_multiple(int \fIcount\fP,
	const char* \fIarray_of_commands\fP[], const char** \fIarray_of_argv\fP[],
	const int \fIarray_of_maxprocs\fP[], const MPI::Info \fIarray_of_info\fP[],
	int \fIroot\fP)

.SH INPUT PARAMETERS
.ft R
.TP 1i
count
Number of commands (positive integer, significant to MPI only at \fIroot\fP -- see NOTES).
.TP 1i
array_of_commands
Programs to be executed (array of strings, significant only at \fIroot\fP). 
.TP 1i
array_of_argv
Arguments for \fIcommands\fP (array of array of strings,  significant only at \fIroot\fP). 
.TP 1i
array_of_maxprocs
Maximum number of processes to start for each command (array of integers, significant only at \fIroot\fP). 
.TP 1i
array_of_info
Info objects telling the runtime system where and how to start processes (array of handles, significant only at \fIroot\fP).
.TP 1i
root
Rank of process in which previous arguments are examined (integer).
.TP 1i
comm
Intracommunicator containing group of spawning processes (handle).

.SH OUTPUT PARAMETERS
.ft R
.TP 1i
intercomm
Intercommunicator between original group and the newly spawned group (handle).
.TP 1i
array_of_errcodes
One code per process (array of integers).
.TP 1i
IERROR
Fortran only: Error status (integer). 

.SH DESCRIPTION
.ft R
MPI_Comm_spawn_multiple is identical to MPI_Comm_spawn except that it can specify multiple executables. The first argument, \fIcount\fP, indicates the number of executables. The next three arguments are arrays of the corresponding arguments in MPI_Comm_spawn. The next argument, \fIarray_of_info\fP, is an array of \fIinfo\fP arguments; however, only the first argument in that array is used.  Any subsequent arguments in the array are ignored because an \fIinfo\fP argument applies to the entire job that is spawned, and cannot be different for each executable in the job.  See the INFO ARGUMENTS section for more information.
.sp
For the Fortran version of \fIarray_of_argv\fP, the element \fIarray_of_argv\fP(i,j) is the jth argument to command number i. 
.sp
In any language, an application may use the constant MPI_ARGVS_NULL (which is likely to be (char ***)0 in C) to specify that no arguments should be passed to any commands. The effect of setting individual elements of \fIarray_of_argv\fP to MPI_ARGV_NULL is not defined. To specify arguments for some commands but not others, the commands without arguments should have a corresponding \fIargv\fP whose first element is null ((char *)0 in C and empty string in Fortran). 
.sp
All of the spawned processes have the same MPI_COMM_WORLD. Their ranks in MPI_COMM_WORLD correspond directly to the order in which the commands are specified in MPI_Comm_spawn_multiple. Assume that m1 processes are generated by the first command, m2 by the second, etc. The processes corresponding to the first command have ranks 0, 1,..., m1-1. The processes in the second command have ranks m1, m1+1, ..., m1+m2-1. The processes in the third have ranks m1+m2, m1+m2+1, ..., m1+m2+m3-1, etc.
.sp
The \fIarray_of_errcodes\fP argument is 1-dimensional array of size 
.sp
.nf
	 _ count
	\\       n ,
	/_ i=1   i 
.fi
.sp
where i is the ith element of \fIarray_of_maxprocs\fP. Command number \fIi\fP corresponds to the i contiguous slots in this array from element 
.sp
.nf
                      _              _
	 _ \fIi\fP-1          |   _ \fIi\fP          |
	\\       n ,  to |  \\      n      | -1
	/_ \fIj\fP=1   i      |  /_ \fIj\fP=1  j     |
                     |_              _| 
.fi 
.sp
Error codes are treated as for MPI_Comm_spawn. 

 
.SH INFO ARGUMENTS
The following values for \fIinfo\fP are recognized in Open MPI 1.2. (The reserved values mentioned in Section 5.3.4 of the MPI-2 standard are not implemented.)
.sp
.sp
.nf
Key value             Type      Description
----------            ----      -----------

host                  char *    Host on which the process should be spawned.
wdir                  char *    Directory where the executable is located.
.fi
 
.sp
Note that in Open MPI 1.2, the first array location in \fIarray_of_info\fP is applied to all the commands in \fIarray_of_commands\fP. 

.SH NOTES
The argument \fIcount\fP is interpreted by MPI only at the root, as is \fIarray_of_argv\fP. Since the leading dimension of \fIarray_of_argv\fP is \fIcount\fP, a nonpositive value of \fIcount\fP at a nonroot node could theoretically cause a runtime bounds check error, even though \fIarray_of_argv\fP should be ignored by the subroutine. If this happens, you should explicitly supply a reasonable value of \fIcount\fP on the nonroot nodes. 
.sp
Calling MPI_Comm_spawn many times would create many sets of children with different MPI_COMM_WORLDs, whereas MPI_Comm_spawn_multiple creates children with a single MPI_COMM_WORLD, so the two methods are not completely equivalent. Also  if you need to spawn multiple executables, you may get better performance by using MPI_Comm_spawn_multiple instead of calling MPI_Comm_spawn several times.   

.SH ERRORS
Almost all MPI routines return an error value; C routines as the value of the function and Fortran routines in the last argument. C++ functions do not return errors. If the default error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism will be used to throw an MPI:Exception object.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for I/O function errors. The error handler may be changed with MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarantee that an MPI program can continue past an error.  

.SH SEE ALSO
.ft R
.sp
.nf
MPI_Comm_spawn(3)
MPI_Comm_get_parent(3)
mpirun(1)

