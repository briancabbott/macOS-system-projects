diff --git Modules/objc/block_support.m Modules/objc/block_support.m
index 2b4bbc0..6eda45f 100644
--- Modules/objc/block_support.m
+++ Modules/objc/block_support.m
@@ -10,6 +10,8 @@
  */
 #import "pyobjc.h"
 
+#import <Block_private.h>
+
 #if __has_include(<ptrauth.h>)
 #include <ptrauth.h>
 #endif
@@ -53,14 +55,6 @@
 void _Block_object_assign(void *destAddr, const void *object, const int flags) BLOCK_FUNC_ATTRIBUTE;
 void _Block_object_dispose(const void *object, const int flags) BLOCK_FUNC_ATTRIBUTE;
 
-#else
-	/* minimal definition, only contains the definitions we actually use */
-
-enum {
-	BLOCK_HAS_COPY_DISPOSE =  (1 << 25),
-   	BLOCK_HAS_SIGNATURE  =    (1 << 30) // interim until complete world build is accomplished
-};
-
 #endif
 
 
@@ -359,7 +353,7 @@ static void PyObjCBlock_CleanupCapsule(PyObject* ptr)
 	*block = gLiteralTemplate;
 	/* XXX: block->descriptor needs to be copied to be able to add a signature to it */
 	block->isa = gStackBlockClass;
-	block->invoke = PyObjCFFI_MakeBlockFunction(signature, callable);
+	_Block_set_function_pointer(block->invoke, PyObjCFFI_MakeBlockFunction(signature, callable));
 	if (block->invoke == NULL) {
 		PyMem_Free(block);
 		return NULL;
@@ -367,7 +361,7 @@ static void PyObjCBlock_CleanupCapsule(PyObject* ptr)
 	block->invoke_cleanup = PyCapsule_New(block->invoke, "objc.__block_release__", 
 			PyObjCBlock_CleanupCapsule);
 	if (block->invoke_cleanup == NULL) {
-		PyObjCFFI_FreeBlockFunction(block->invoke);
+		PyObjCFFI_FreeBlockFunction(_Block_get_function_pointer(block->invoke));
 		PyMem_Free(block);
 		return NULL;
 	}
@@ -394,5 +388,5 @@ static void PyObjCBlock_CleanupCapsule(PyObject* ptr)
 _block_func_ptr
 PyObjCBlock_GetFunction(void* block)
 {
-	return ((struct block_literal*)block)->invoke;
+	return _Block_get_function_pointer(((struct block_literal*)block)->invoke);
 }
