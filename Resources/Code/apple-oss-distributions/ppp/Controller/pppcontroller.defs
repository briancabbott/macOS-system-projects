/*
 * Copyright (c) 2004-2013, 2018 Apple Inc. All rights reserved.
 *
 * @APPLE_LICENSE_HEADER_START@
 *
 * The contents of this file constitute Original Code as defined in and
 * are subject to the Apple Public Source License Version 1.1 (the
 * "License").  You may not use this file except in compliance with the
 * License.  Please obtain a copy of the License at
 * http://www.apple.com/publicsource and read it before using this file.
 *
 * This Original Code and all software distributed under the License are
 * distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT.  Please see the
 * License for the specific language governing rights and limitations
 * under the License.
 *
 * @APPLE_LICENSE_HEADER_END@
 */

/*
 * Modification History
 *
 * March 29, 2004		Christophe Allie (callie@apple.com)
 * - initial revision
 */

#include <mach/std_types.defs>
#include <mach/mach_types.defs>
#include "pppcontroller_mach_defines.h"

subsystem pppcontroller 18000;
serverprefix _;

import "pppcontroller_types.h";
import "pppcontroller_mach_defines.h";

/*
 * serialized XML data (client->server)
 */
type xmlData    = ^ array [] of MACH_MSG_TYPE_BYTE
	ctype : xmlData_t;

/*
 * serialized XML data (server->client)
 */
type xmlDataOut = ^ array [] of MACH_MSG_TYPE_BYTE
	ctype : xmlDataOut_t;

/*
 * additional types
 */
/*
type task_move_send_t = MACH_MSG_TYPE_MOVE_SEND
	ctype: mach_port_t;
*/

type xmlDataInlineOut_t = array [ * : PPP_MACH_MAX_INLINE_DATA ] of uint8_t
	ctype : uchar_ptr_out_t;

type xmlDataInline_t = array [ * : PPP_MACH_MAX_INLINE_DATA ] of uint8_t
	ctype : uchar_ptr_t;


/* 
 * routines called by SCNetworkConnection API
 */
routine pppcontroller_attach (	server		: mach_port_t;
					name_data	: xmlData;
					bootstrap	: bootstrap_t;
					notify		: mach_port_move_send_t;
					au_session	: mach_port_t;		
				out	session		: mach_port_move_send_t;
				out	result		: int;
   ServerAuditToken	audit_token	: audit_token_t);

routine pppcontroller_getstatus (	session		: mach_port_t;
				 out	phase		: int;
				 out	result		: int);

routine pppcontroller_copyextendedstatus (	session		: mach_port_t;
				 out	status_data	: xmlDataOut, dealloc;
				 out	result		: int);

routine pppcontroller_copystatistics (	session		: mach_port_t;
				 out	statistics_data	: xmlDataOut, dealloc;
				 out	result		: int);

routine pppcontroller_copyuseroptions (	session		: mach_port_t;
				 out	options_data	: xmlDataOut, dealloc;
				 out	result		: int);

routine pppcontroller_start (	session		: mach_port_t;
					start_data	: xmlData;
					linger	: int;
				 out	result		: int);
				 
routine pppcontroller_stop (	session		: mach_port_t;
					force	: int;
				 out	result		: int);

routine pppcontroller_suspend (	session		: mach_port_t;
				 out	result		: int);

routine pppcontroller_resume (	session		: mach_port_t;
				 out	result		: int);

routine pppcontroller_notification (	session		: mach_port_t;
					enable	: int;
				 out	result		: int);

skip;
skip;
skip;
			 
routine pppcontroller_attach_proxy (	server		: mach_port_t;
						name_data	: xmlData;
						bootstrap	: bootstrap_t;
						notify		: mach_port_move_send_t;
						au_session	: mach_port_t;		
						client_uid	: int;
						client_gid	: int;
						client_pid	: int;
					out	session		: mach_port_move_send_t;
					out	result		: int;
	   ServerAuditToken	audit_token	: audit_token_t);

skip;

/*
 * private routines for the PPPController or pppd 
 */
routine pppcontroller_bootstrap (	server		: mach_port_t;
				 out	bootstrap	: bootstrap_t;
				 out	au_session  : mach_port_t;
				 out	result		: int;
				 AuditToken audit_token: audit_token_t);

routine pppcontroller_copyprivoptions (	session		: mach_port_t;
					options_type	: int;
				 out	options_data	: xmlDataOut, dealloc;
				 out	result		: int;
				 AuditToken audit_token: audit_token_t);
				 
routine pppcontroller_iscontrolled (	session		: mach_port_t;
				 out	result		: int;
				 AuditToken audit_token: audit_token_t);

skip;
skip;
skip;
skip;
