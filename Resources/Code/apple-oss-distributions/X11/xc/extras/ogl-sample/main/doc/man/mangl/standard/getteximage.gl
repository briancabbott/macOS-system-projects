_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(GetTexImage,return a texture image)
_names(GetTexImage)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1)
Specifies which texture is to be obtained.
_const(TEXTURE_1D), _const(TEXTURE_2D), and _const(TEXTURE_3D)  are accepted.
_phead(_param2)
Specifies the level-of-detail number of the desired image.
Level 0 is the base image level.
Level $n$ is the $n$th mipmap reduction image.
_phead(_param3)
Specifies a pixel format for the returned data.
The supported formats are
_const(RED),
_const(GREEN),
_const(BLUE),
_const(ALPHA),
_const(RGB),
_const(BGR),
_const(RGBA),
_const(BGRA),
_C_ _const(ABGR_EXT),
_const(LUMINANCE), and
_const(LUMINANCE_ALPHA).
_phead(_param4)
Specifies a pixel type for the returned data.
The supported types are
_const(UNSIGNED_BYTE),
_const(BYTE),
_const(UNSIGNED_SHORT),
_const(SHORT),
_const(UNSIGNED_INT),
_const(INT),
_const(FLOAT),
_const(UNSIGNED_BYTE_3_3_2),
_const(UNSIGNED_BYTE_2_3_3_REV),
_const(UNSIGNED_SHORT_5_6_5),
_const(UNSIGNED_SHORT_5_6_5_REV),
_const(UNSIGNED_SHORT_4_4_4_4),
_const(UNSIGNED_SHORT_4_4_4_4_REV),
_const(UNSIGNED_SHORT_5_5_5_1),
_const(UNSIGNED_SHORT_1_5_5_5_REV),
_const(UNSIGNED_INT_8_8_8_8),
_const(UNSIGNED_INT_8_8_8_8_REV),
_const(UNSIGNED_INT_10_10_10_2), and
_const(UNSIGNED_INT_2_10_10_10_REV).
_phead(_param5)
Returns the texture image.
Should be a pointer to an array of the type specified by _param4.
.SH DESCRIPTION
_cmnd returns a texture image into _param5.
_param1 specifies whether the desired texture image is one specified by
_cmnd(TexImage1D) (_const(TEXTURE_1D)),
_cmnd(TexImage2D) (_const(TEXTURE_2D)), or
_cmnd(TexImage3D) (_const(TEXTURE_3D)).
_param2 specifies the level-of-detail number of the desired image.
_param3 and _param4 specify the format and type of the desired image array.
See the reference pages _cmnd(TexImage1D) and _cmnd(DrawPixels)
for a description of the acceptable values for the _param3 and _param4
parameters, respectively.
.P
To understand the operation of _cmnd, consider the selected internal
four-component texture image to be an RGBA color buffer the size of the image.
The semantics of _cmnd are then identical to those of _cmnd(ReadPixels),
with the exception that no pixel transfer operations are performed,
when called with the same _param3 and _param4,
with \f2x\fP and \f2y\fP set to 0,
\f2width\fP set to the width of the texture image
(including border if one was specified),
and \f2height\fP set to 1 for 1D images,
or to the height of the texture image
(including border if one was specified)
for 2D images.
.BP
Because the internal texture image is an RGBA image,
pixel formats _const(COLOR_INDEX),
_const(STENCIL_INDEX),
and _const(DEPTH_COMPONENT) are not accepted,
and pixel type _const(BITMAP) is not accepted.
.P
If the selected texture image does not contain four components,
the following mappings are applied.
Single-component textures are treated as RGBA buffers with red set
to the single-component value,
green set to 0,  blue set to 0, and alpha set to 1.
Two-component textures are treated as RGBA buffers with red set to
the value of component zero,
alpha set to the value of component one,
and green and blue set to 0.
Finally,
three-component textures are treated as RGBA buffers with red set to
component zero,
green set to component one,
blue set to component two,
and alpha set to 1.
.P
To determine the required size of _param5,
use _cmnd(GetTexLevelParameter) to determine the dimensions of the
internal texture image,
then scale the required number of pixels by the storage required for
each pixel,
based on _param3 and _param4.
Be sure to take the pixel storage parameters into account,
especially _const(PACK_ALIGNMENT).
.SH NOTES
If an error is generated,
no change is made to the contents of _param5.
.P
When the _arbstring(multitexture) extension is supported, _cmnd returns
the texture image for the active texture unit.
.P
The types _const(UNSIGNED_BYTE_3_3_2),
_const(UNSIGNED_BYTE_2_3_3_REV),
_const(UNSIGNED_SHORT_5_6_5),
_const(UNSIGNED_SHORT_5_6_5_REV),
_const(UNSIGNED_SHORT_4_4_4_4),
_const(UNSIGNED_SHORT_4_4_4_4_REV),
_const(UNSIGNED_SHORT_5_5_5_1),
_const(UNSIGNED_SHORT_1_5_5_5_REV),
_const(UNSIGNED_INT_8_8_8_8),
_const(UNSIGNED_INT_8_8_8_8_REV),
_const(UNSIGNED_INT_10_10_10_2), 
_const(UNSIGNED_INT_2_10_10_10_REV), 
and the formats
_const(BGR), and _const(BGRA) are available only if the GL version is
1.2 or greater.
.SH ERRORS
_const(INVALID_ENUM) is generated if _param1, _param3, or _param4 is not
an accepted value.
.P
_const(INVALID_VALUE) is generated if _param2 is less than 0.
.P 
_const(INVALID_VALUE) may be generated if _param2 is greater
than $log sub 2 max$,
where $max$ is the returned value of _const(MAX_TEXTURE_SIZE).
.P
_const(INVALID_OPERATION) is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
.P
_const(INVALID_OPERATION) is returned if _param4 is one of
_const(UNSIGNED_BYTE_3_3_2),
_const(UNSIGNED_BYTE_2_3_3_REV),
_const(UNSIGNED_SHORT_5_6_5), or
_const(UNSIGNED_SHORT_5_6_5_REV) and _param3 is not _const(RGB).
.P
_const(INVALID_OPERATION) is returned if _param4 is one of
_const(UNSIGNED_SHORT_4_4_4_4),
_const(UNSIGNED_SHORT_4_4_4_4_REV),
_const(UNSIGNED_SHORT_5_5_5_1),
_const(UNSIGNED_SHORT_1_5_5_5_REV),
_const(UNSIGNED_INT_8_8_8_8),
_const(UNSIGNED_INT_8_8_8_8_REV),
_const(UNSIGNED_INT_10_10_10_2), or
_const(UNSIGNED_INT_2_10_10_10_REV), and _param3 is neither _const(RGBA) 
or _const(BGRA).
.SH ASSOCIATED GETS
_cmnd(GetTexLevelParameter) with argument _const(TEXTURE_WIDTH)
.br
_cmnd(GetTexLevelParameter) with argument _const(TEXTURE_HEIGHT)
.br
_cmnd(GetTexLevelParameter) with argument _const(TEXTURE_BORDER)
.br
_cmnd(GetTexLevelParameter) with argument _const(TEXTURE_INTERNALFORMAT)
.br
_cmnd(Get) with arguments _const(PACK_ALIGNMENT) and others
.SH SEE ALSO
_cmnd(ActiveTextureARB),
_cmnd(DrawPixels),
_cmnd(ReadPixels),
_cmnd(TexEnv),
_cmnd(TexGen),
_cmnd(TexImage1D),
_cmnd(TexImage2D),
_cmnd(TexImage3D),
_cmnd(TexSubImage1D),
_cmnd(TexSubImage2D),
_cmnd(TexSubImage3D),
_cmnd(TexParameter)
