_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,tbl|eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(ShadeModel,select flat or smooth shading)
_names(ShadeModel)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1)
Specifies a symbolic value representing a shading technique.
Accepted values are _const(FLAT) and _const(SMOOTH).
The initial value is _const(SMOOTH).
.SH DESCRIPTION
GL primitives can have either flat or smooth shading.
Smooth shading,
the default,
causes the computed colors of vertices to be interpolated as the
primitive is rasterized,
typically assigning different colors to each resulting pixel fragment.
Flat shading selects the computed color of just one vertex
and assigns it to all the pixel fragments
generated by rasterizing a single primitive.
In either case, the computed color of a vertex is the result of
lighting if lighting is enabled,
or it is the current color at the time the vertex was specified if
lighting is disabled. 
.P
Flat and smooth shading are indistinguishable for points.
Starting when _cmnd(Begin) is issued and counting vertices and
primitives from 1, the GL gives each flat-shaded line segment $i$ the
computed color of vertex $i ~+~ 1$, its second vertex.
Counting similarly from 1,
the GL gives each flat-shaded polygon the computed color of the vertex listed
in the following table.
This is the last vertex to specify the polygon in all cases except single
polygons,
where the first vertex specifies the flat-shaded color.
.sp
.TS
center;
lb cb
l c .
_
Primitive Type of Polygon $i$	Vertex
_
Single polygon ($ i ~==~ 1 $)	1
Triangle strip	$i ~+~ 2$
Triangle fan	$i ~+~ 2$
Independent triangle	$ 3 i$
Quad strip	$2 i ~+~ 2$
Independent quad 	$ 4 i $
_
.TE
.sp
Flat and smooth shading are specified by _cmnd with _param1 set to
_const(FLAT) and _const(SMOOTH), respectively.
.SH ERRORS
_const(INVALID_ENUM) is generated if _param1 is any value other than
_const(FLAT) or _const(SMOOTH).
.P
_const(INVALID_OPERATION) is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
.SH ASSOCIATED GETS
_cmnd(Get) with argument _const(SHADE_MODEL)
.SH SEE ALSO
_cmnd(Begin),
_cmnd(Color),
_cmnd(Light),
_cmnd(LightModel)
