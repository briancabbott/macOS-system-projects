_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ $Date$ $Revision$
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(PickMatrix, define a picking region)
_names(PickMatrix)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1 _param2)
Specify the center of a picking region in window coordinates.
_phead(_param3 _param4)
Specify the width and height, respectively, of the picking region in window 
coordinates.
_phead(_param5)
Specifies the current viewport (as from a _glcmnd(GetIntegerv) call).
.SH DESCRIPTION
_cmnd creates a projection matrix that can be used to restrict drawing
to a small region of the viewport.
This is typically useful to
determine what objects are being drawn near the cursor.
Use _cmnd to
restrict drawing to a small region around the cursor.
Then,
enter selection mode (with _glcmnd(RenderMode)) and rerender the scene.
All primitives that would have been drawn near
the cursor are identified and stored in the selection buffer.
.P
The matrix created by _cmnd is multiplied by the current matrix just
as if _glcmnd(MultMatrix) is called with the generated matrix.
To effectively use the generated pick matrix for picking,
first call _glcmnd(LoadIdentity) to load an identity matrix onto the
perspective matrix stack.
Then call _cmnd,
and finally, call a command (such as _cmnd(Perspective))
to multiply the perspective matrix by the pick matrix.
.P
When using _cmnd to pick NURBS, be careful to turn off the NURBS 
property
_gluconst(AUTO_LOAD_MATRIX).  If _gluconst(AUTO_LOAD_MATRIX) is not
turned off, then any NURBS surface rendered is subdivided differently with
the pick matrix than the way it was subdivided without the pick matrix.
.bp
.SH EXAMPLE
When rendering a scene as follows:
.sp
.Ex
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
gluPerspective(...);
glMatrixMode(GL_MODELVIEW);
/* Draw the scene */
.Ee
.sp
a portion of the viewport can be selected as a pick region like this:
.sp
.Ex
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
gluPickMatrix(x, y, width, height, viewport);
gluPerspective(...);
glMatrixMode(GL_MODELVIEW);
/* Draw the scene */
.Ee
.SH SEE ALSO
_glcmnd(Get),
_glcmnd(LoadIndentity), 
_glcmnd(MultMatrix), 
_glcmnd(RenderMode),
_cmnd(Perspective)

