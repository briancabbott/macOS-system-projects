_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,tbl|eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(MapGrid,define a one- or two-dimensional mesh)
_names(MapGrid,[12]u*[df])
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1)
Specifies the number of partitions in the grid range interval
[_param2, _param3].
Must be positive.
_phead(_param2 _param3)
Specify the mappings for integer grid domain values $i~=~0$ and $i~=~_eqnparam1$.
_phead(_param4)
Specifies the number of partitions in the grid range interval
[_param5, _param6]
.br
(_cmnd(MapGrid2) only).
_phead(_param5 _param6)
Specify the mappings for integer grid domain values $j~=~0$ and $j~=~_eqnparam4$
.br
(_cmnd(MapGrid2) only).
.SH DESCRIPTION
_cmnd and _cmnd(EvalMesh) are used together to efficiently
generate and evaluate a series of evenly-spaced map domain values.
_cmnd(EvalMesh) steps through the integer domain
of a one- or two-dimensional grid,
whose range is the domain of the evaluation maps specified by
_cmnd(Map1) and _cmnd(Map2).
.P
_cmnd(MapGrid1) and _cmnd(MapGrid2) specify the linear grid mappings
between the $i$
(or $i$ and $j$)
integer grid coordinates,
to the $u$
(or $u$ and $v$)
floating-point evaluation map coordinates.
See _cmnd(Map1) and _cmnd(Map2) for details of how $u$ and $v$ coordinates
are evaluated.
.P
_cmnd(MapGrid1) specifies a single linear mapping
such that integer grid coordinate 0 maps exactly to _param2,
and integer grid coordinate _param1 maps exactly to _param3.
All other integer grid coordinates $i$ are mapped so that
.sp
.ce
.EQ
u ~=~ i (_eqnparam3 - _eqnparam2) / _eqnparam1 ~+~ _eqnparam2
.EN
.sp
_cmnd(MapGrid2) specifies two such linear mappings.
One maps integer grid coordinate $i~=~0$ exactly to _param2,
and integer grid coordinate $i~=~_eqnparam1$ exactly to _param3.
The other maps integer grid coordinate $j~=~0$ exactly to _param5,
and integer grid coordinate $j~=~_eqnparam4$ exactly to _param6.
Other integer grid coordinates $i$ and $j$ are mapped such that
.P
.ce
.EQ
u ~=~ i (_eqnparam3 - _eqnparam2) / _eqnparam1 ~+~ _eqnparam2
.EN
.P
.ce
.EQ
v ~=~ j (_eqnparam6 - _eqnparam5) / _eqnparam4 ~+~ _eqnparam5
.EN
.P
The mappings specified by _cmnd are used identically by
_cmnd(EvalMesh) and _cmnd(EvalPoint).
.SH ERRORS
_const(INVALID_VALUE) is generated if either _param1 or _param4 is not
positive.
.P
_const(INVALID_OPERATION) is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
.SH ASSOCIATED GETS
_cmnd(Get) with argument _const(MAP1_GRID_DOMAIN)
.br
_cmnd(Get) with argument _const(MAP2_GRID_DOMAIN)
.br
_cmnd(Get) with argument _const(MAP1_GRID_SEGMENTS)
.br
_cmnd(Get) with argument _const(MAP2_GRID_SEGMENTS)
.SH SEE ALSO
_cmnd(EvalCoord),
_cmnd(EvalMesh),
_cmnd(EvalPoint),
_cmnd(Map1),
_cmnd(Map2)
