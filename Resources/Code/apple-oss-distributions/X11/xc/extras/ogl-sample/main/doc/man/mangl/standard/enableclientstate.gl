_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_C_ A real line follows.
_define(_filters,tbl|eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_C_ Use GL not OpenGL
_C_ Don't change the ordering of the main headers.
_C_ C specification (or fortran) is handled automatically
_C_ .TH is automatically added to the top of this file.
_C_ Below, use current tense, active do not capitalize the first word and dont
_C_ use a period.
_header(EnableClientState, enable or disable client-side capability)
_names(EnableClientState)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1)
Specifies the capability to enable.
Symbolic constants
_const(COLOR_ARRAY),
_const(EDGE_FLAG_ARRAY),
_const(INDEX_ARRAY),
_const(NORMAL_ARRAY),
_const(TEXTURE_COORD_ARRAY), and
_const(VERTEX_ARRAY)
are accepted. 
_names(DisableClientState)
.SH PARAMETERS
_phead(_param1)
Specifies the capability to disable.
.SH DESCRIPTION
_cmnd and _cmnd(DisableClientState)
enable or disable individual client-side capabilities. By default, all
client-side capabilities are disabled.
Both 
_cmnd(EnableClientState) and _cmnd(DisableClientState) take a
single argument, _param1, which can assume one of the following
values: 
.TP 25
_const(COLOR_ARRAY)
If enabled, the color array is enabled for writing and used during
rendering when _cmnd(ArrayElement), _cmnd(DrawArrays),
_cmnd(DrawElement), or _cmnd(DrawRangeElements) is called. See
_cmnd(ColorPointer). 
.TP
_const(EDGE_FLAG_ARRAY)
If enabled, the edge flag array is enabled for writing and used during
rendering when _cmnd(ArrayElement), _cmnd(DrawArrays),
_cmnd(DrawElement), or _cmnd(DrawRangeElements) is called. See
_cmnd(EdgeFlagPointer). 
.TP
_const(INDEX_ARRAY)
If enabled, the index array is enabled for writing and used during
rendering when _cmnd(ArrayElement), _cmnd(DrawArrays),
_cmnd(DrawElement), or _cmnd(DrawRangeElements) is called. See
_cmnd(IndexPointer). 
.TP
_const(NORMAL_ARRAY)
If enabled, the normal array is enabled for writing and used during
rendering when _cmnd(ArrayElement), _cmnd(DrawArrays),
_cmnd(DrawElement), or _cmnd(DrawRangeElements) is called. See
_cmnd(NormalPointer). 
.TP
_const(TEXTURE_COORD_ARRAY)
If enabled, the texture coordinate array is enabled for writing and used during
rendering when _cmnd(ArrayElement), _cmnd(DrawArrays),
_cmnd(DrawElement), or _cmnd(DrawRangeElements) is called. See
_cmnd(TexCoordPointer). 
.TP
_const(VERTEX_ARRAY)
If enabled, the vertex array is enabled for writing and used during
rendering when _cmnd(ArrayElement), _cmnd(DrawArrays),
_cmnd(DrawElement), or _cmnd(DrawRangeElements) is called. See
_cmnd(VertexPointer). 
.SH NOTES
_cmnd is available only if the GL version is 1.1 or greater.
.P
If _arbstring(multitexture) is supported, enabling and disabling
_const(TEXTURE_COORD_ARRAY) affects the active client texture unit.
The active client texture unit is controlled with
_cmnd(ClientActiveTextureARB).
.SH ERRORS
_const(INVALID_ENUM) is generated if _param1 is not an accepted value.
.P
_cmnd is not allowed between the execution of _cmnd(Begin) and the
corresponding _cmnd(End), but an error may or may not be generated. If
no error is generated, the behavior is undefined.
.SH SEE ALSO 
_cmnd(ArrayElement),
_cmnd(ClientActiveTextureARB),
_cmnd(ColorPointer),
_cmnd(DrawArrays),
_cmnd(DrawElements),
_cmnd(EdgeFlagPointer),
_cmnd(Enable),
_cmnd(GetPointerv),
_cmnd(IndexPointer),
_cmnd(InterleavedArrays),
_cmnd(NormalPointer),
_cmnd(TexCoordPointer),
_cmnd(VertexPointer)
