_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_C_ A real line follows.
_define(_filters,tbl|eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_C_ Use GL not OpenGL
_C_ Don't change the ordering of the main headers.
_C_ C specification (or fortran) is handled automatically
_C_ .TH is automatically added to the top of this file.
_C_ Below, use current tense, active do not capitalize the first word
_C_ and don't use a period.
_header(InterleavedArrays, simultaneously specify and enable several interleaved arrays)
_names(InterleavedArrays)
.SH PARAMETERS
_phead(_param1)
Specifies the type of array to enable. Symbolic constants
_const(V2F),
_const(V3F),
_const(C4UB_V2F),
_const(C4UB_V3F),
_const(C3F_V3F),
_const(N3F_V3F),
_const(C4F_N3F_V3F),
_const(T2F_V3F),
_const(T4F_V4F),
_const(T2F_C4UB_V3F),
_const(T2F_C3F_V3F),
_const(T2F_N3F_V3F),
_const(T2F_C4F_N3F_V3F),
and
_const(T4F_C4F_N3F_V4F)
are accepted. 
_phead(_param2) 
Specifies the offset in bytes between each aggregate array element.
.SH DESCRIPTION
_cmnd lets you specify and enable individual color, 
normal, 
texture and vertex
arrays whose elements are part of a larger aggregate array element.
For some implementations, this is more efficient than specifying the arrays
separately. 
.P
If _param2 is 0, the aggregate elements are stored consecutively.
Otherwise, _param2 bytes occur between the beginning of one
aggregate array element and the beginning of the next aggregate array
element.
.P
_param1 serves as a ``key''
describing the extraction of individual arrays from the aggregate array.
If _param1 contains a T, then texture coordinates are 
extracted from the interleaved array.  If C is present, color values
are extracted. If N is present, normal coordinates are extracted.
Vertex coordinates are always extracted.
.P
The digits 2, 3, and 4 denote how many values are extracted.
F indicates that values are extracted as floating-point values.
Colors may also be extracted as 4 unsigned bytes if 4UB follows the
C.  If a color is extracted as 4 unsigned bytes, the vertex 
array element which follows is located at the first possible 
floating-point aligned address.
.SH NOTES
_cmnd is available only if the GL version is 1.1 or greater.
.P
If _cmnd is called while compiling a display list, it is not
compiled into the list, and it is executed immediately.
.P
Execution of _cmnd is not allowed between the execution of
_cmnd(Begin) and the corresponding execution of _cmnd(End),
but an error may or may not be generated. If no error is generated,
the operation is undefined.
.P
_cmnd is typically implemented on the client side.
.P
Vertex array parameters are client-side state and are therefore not
saved or restored by _cmnd(PushAttrib) and _cmnd(PopAttrib).
Use _cmnd(PushClientAttrib) and _cmnd(PopClientAttrib) instead.
.P
When the _arbstring(multitexture) extension is supported, _cmnd
only updates the texture coordinate array for the active active texture
unit. The texture coordinate state for other client texture units is not 
update, regardless if they are enabled or not.
.SH ERRORS
_const(INVALID_ENUM) is generated if _param1 is not an accepted value.
.P
_const(INVALID_VALUE) is generated if _param2 is negative.
.SH SEE ALSO 
_cmnd(ArrayElement),
_cmnd(ClientActiveTextureARB),
_cmnd(ColorPointer),
_cmnd(DrawArrays),
_cmnd(DrawElements),
_cmnd(EdgeFlagPointer),
_cmnd(EnableClientState),
_cmnd(GetPointer),
_cmnd(IndexPointer),
_cmnd(NormalPointer),
_cmnd(TexCoordPointer),
_cmnd(VertexPointer)
