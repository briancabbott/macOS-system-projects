_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn|tbl)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(LogicOp,specify a logical pixel operation for color index rendering)
_names(LogicOp)
.SH PARAMETERS
_phead(_param1)
Specifies a symbolic constant that selects a logical operation.
The following symbols are accepted:
_const(CLEAR),
_const(SET),
_const(COPY),
_const(COPY_INVERTED),
_const(NOOP),
_const(INVERT),
_const(AND),
_const(NAND),
_const(OR),
_const(NOR),
_const(XOR),
_const(EQUIV),
_const(AND_REVERSE),
_const(AND_INVERTED),
_const(OR_REVERSE), and
_const(OR_INVERTED). The initial value is _const(COPY).
.SH DESCRIPTION
_cmnd specifies a logical operation that,
when enabled,
is applied between the incoming color index or RGBA color
and the color index or RGBA color at the corresponding location in the
frame buffer. 
To enable or disable the logical operation, call
_cmnd(Enable) and _cmnd(Disable)
using the symbolic constant _const(COLOR_LOGIC_OP) for RGBA mode or
_const(INDEX_LOGIC_OP) for color index mode. The initial value is
disabled for both operations.
.P
.ne
.TS
center;
lb lb
l c.
_
Opcode	Resulting Operation
_
_const(CLEAR)	0
_const(SET)	1
_const(COPY)	s
_const(COPY_INVERTED)	~s
_const(NOOP)	d
_const(INVERT)	~d
_const(AND)	s & d
_const(NAND)	~(s & d)
_const(OR)	s | d
_const(NOR)	~(s | d)
_const(XOR)	s ^ d
_const(EQUIV)	~(s ^ d)
_const(AND_REVERSE)	s & ~d
_const(AND_INVERTED)	~s & d
_const(OR_REVERSE)	s | ~d
_const(OR_INVERTED)	~s | d
_
.TE

_param1 is a symbolic constant chosen from the list above.
In the explanation of the logical operations,
\f2s\fP represents the incoming color index and
\f2d\fP represents the index in the frame buffer.
Standard C-language operators are used.
As these bitwise operators suggest,
the logical operation is applied independently to each bit pair of the
source and destination indices or colors.
.SH NOTES
Color index logical operations are always supported. RGBA logical
operations are supported only if the GL version is 1.1 or greater.  
.P
When more than one RGBA color or index buffer is enabled for drawing,
logical operations are performed separately for each enabled buffer,
using for the destination value the contents of that buffer
(see _cmnd(DrawBuffer)).
.SH ERRORS
_const(INVALID_ENUM) is generated if _param1 is not an accepted value.
.P
_const(INVALID_OPERATION) is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
.SH ASSOCIATED GETS
_cmnd(Get) with argument _const(LOGIC_OP_MODE).
.br
_cmnd(IsEnabled) with argument _const(COLOR_LOGIC_OP) or _const(INDEX_LOGIC_OP).
.SH SEE ALSO
_cmnd(AlphaFunc),
_cmnd(BlendFunc),
_cmnd(DrawBuffer),
_cmnd(Enable),
_cmnd(StencilOp)
