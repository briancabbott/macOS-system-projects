_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(PolygonOffset, set the scale and units used to calculate depth values)
_names(PolygonOffset)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1) 
Specifies a scale factor that is used to create a variable
depth offset for each polygon. The initial value is 0.
_phead(_param2) 
Is multiplied by an implementation-specific value to
create a constant depth offset. The initial value is 0.
.SH DESCRIPTION
When _const(POLYGON_OFFSET_FILL), _const(POLYGON_OFFSET_LINE), or
_const(POLYGON_OFFSET_POINT) is enabled, each
fragment's \f2depth\fP value will be offset after it is interpolated
from the \f2depth\fP values of the appropriate vertices.
The value of the offset is $_eqnparam1 ~*~ DZ ~~+~~ r ~*~ _eqnparam2$,
where $DZ~$ is a measurement of the change in depth relative to the screen 
area of the polygon, and $r$ is the smallest value that is guaranteed to
produce a resolvable offset for a given implementation.
The offset is added before the depth test is performed and before
the value is written into the depth buffer.
.P
_cmnd is useful for rendering hidden-line images, for applying decals 
to surfaces, and for rendering solids with highlighted edges.
.SH NOTES
_cmnd is available only if the GL version is 1.1 or greater.
.P
_cmnd has no effect on depth coordinates placed in the
feedback buffer.
.P
_cmnd has no effect on selection.
.SH ERRORS
_const(INVALID_OPERATION) is generated if _cmnd is executed
between the execution of _cmnd(Begin) and the corresponding
execution of _cmnd(End).
.bp
.SH ASSOCIATED GETS
_cmnd(IsEnabled) with argument 
_const(POLYGON_OFFSET_FILL), 
_const(POLYGON_OFFSET_LINE), 
or _const(POLYGON_OFFSET_POINT).
.P
_cmnd(Get) with argument _const(POLYGON_OFFSET_FACTOR) or 
_const(POLYGON_OFFSET_UNITS).
.SH SEE ALSO
_cmnd(DepthFunc),
_cmnd(Enable),
_cmnd(Get),
_cmnd(IsEnabled)
