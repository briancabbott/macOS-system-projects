_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(MultMatrix,multiply the current matrix with the specified matrix)
_names(MultMatrix,[df])
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1)
Points to 16 consecutive values that are used as the elements of 
a $4 ~times~ 4$ column-major matrix. 
.SH DESCRIPTION
_cmnd multiplies the current matrix with the one specified using _param1, and
replaces the current matrix with the product.
.P
The current matrix is determined by the current matrix mode (see _cmnd(MatrixMode)). It is either the projection matrix,
modelview matrix,
or the texture matrix.
.SH EXAMPLES
If the current matrix is $C$, and the coordinates
to be transformed are, $v ~=~ (v[0], v[1], v[2], v[3])$.
Then the current transformation is $C ~times~ v$, or
.sp
.ce
.EQ
down 130
{{ left (  matrix {
   ccol { c[0] above c[1] above c[2] above c[3] }
   ccol { c[4] above c[5] above c[6] above c[7] }
   ccol { c[8] above c[9] above c[10] above c[11] }
   ccol { c[12]~ above c[13]~ above c[14]~ above c[15]~ }
} right ) } ~~ times ~~
{left ( matrix {
ccol { v[0]~ above v[1]~ above v[2]~ above v[3]~ }
} right )} }
.EN
.sp
.P
Calling _cmnd with an argument of $_eqnparam1 ~=~ m[0], m[1], ..., m[15]$ 
replaces the current transformation with $(C ~times~ M) ~times~ v$,
or
.sp
.ce
.EQ
down 130
{{ left (  matrix {
   ccol { c[0] above c[1] above c[2] above c[3] }
   ccol { c[4] above c[5] above c[6] above c[7] }
   ccol { c[8] above c[9] above c[10] above c[11] }
   ccol { c[12]~ above c[13]~ above c[14]~ above c[15]~ }
} right ) } ~~ times ~~
{ left (  matrix {
   ccol { m[0] above m[1] above m[2] above m[3] }
   ccol { m[4] above m[5] above m[6] above m[7] }
   ccol { m[8] above m[9] above m[10] above m[11] }
   ccol { m[12]~ above m[13]~ above m[14]~ above m[15]~ }
} right ) } ~~ times ~~
{left ( matrix {
ccol { v[0]~ above v[1]~ above v[2]~ above v[3]~ }
} right )} }
.EN
.sp
.P
Where '$times$' denotes matrix multiplication, and
$v$ is represented as a $4 ~times~ 1$ matrix. 
.br
.SH NOTES
While the elements of the matrix may be specified with
single or double precision, the GL may store or operate on these 
values in less than single precision.
.P
In many computer languages $4 ~times~ 4$ arrays are represented
in row-major order. The transformations just described
represent these matrices in column-major order.
The order of the multiplication is important. For example, if the current
transformation is a rotation, and _cmnd is called with a translation matrix,
the translation is done directly on the coordinates to be transformed,
while the rotation is done on the results of that translation.
.SH ERRORS
_const(INVALID_OPERATION) is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
.SH ASSOCIATED GETS
_cmnd(Get) with argument _const(MATRIX_MODE)
.br
_cmnd(Get) with argument _const(COLOR_MATRIX)
.br
_cmnd(Get) with argument _const(MODELVIEW_MATRIX)
.br
_cmnd(Get) with argument _const(PROJECTION_MATRIX)
.br
_cmnd(Get) with argument _const(TEXTURE_MATRIX)
.SH SEE ALSO
_cmnd(LoadIdentity),
_cmnd(LoadMatrix),
_cmnd(MatrixMode),
_cmnd(PushMatrix)

