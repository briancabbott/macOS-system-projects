_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(Hint,specify implementation-specific hints)
_names(Hint)
.SH PARAMETERS
_phead(_param1)
Specifies a symbolic constant indicating the behavior to be controlled.
_const(FOG_HINT),	
_const(LINE_SMOOTH_HINT),
_const(PERSPECTIVE_CORRECTION_HINT),
_const(POINT_SMOOTH_HINT), and
_const(POLYGON_SMOOTH_HINT) are accepted. 
_phead(_param2)
Specifies a symbolic constant indicating the desired behavior.
_const(FASTEST), 
_const(NICEST), and 
_const(DONT_CARE) are accepted. 
.SH DESCRIPTION
Certain aspects of GL behavior,
when there is room for interpretation,
can be controlled with hints.
A hint is specified with two arguments.
_param1 is a symbolic 
constant indicating the behavior to be controlled,
and _param2 is another symbolic constant indicating the desired
behavior. The initial value for each _param1 is _const(DONT_CARE). 
_param2 can be one of the following:
.TP 20
_const(FASTEST)
The most efficient option should be chosen.
.TP
_const(NICEST)
The most correct,
or highest quality,
option should be chosen.
.TP 
_const(DONT_CARE)
No preference.
.P
Though the implementation aspects that can be hinted are well defined,
the interpretation of the hints depends on the implementation.
The hint aspects that can be specified with _param1,
along with suggested semantics,
are as follows:
.TP 20
_const(FOG_HINT)
Indicates the accuracy of fog calculation.
If per-pixel fog calculation is not efficiently supported
by the GL implementation,
hinting _const(DONT_CARE) or _const(FASTEST) can result in per-vertex
calculation of fog effects.
.TP
_const(LINE_SMOOTH_HINT)
Indicates the sampling quality of antialiased lines.
If a larger filter function is applied, hinting _const(NICEST) can
result in more pixel fragments being generated during rasterization,
.TP
_const(PERSPECTIVE_CORRECTION_HINT)
Indicates the quality of color and texture coordinate interpolation.
If perspective-corrected parameter interpolation is not efficiently supported
by the GL implementation,
hinting _const(DONT_CARE) or _const(FASTEST) can result in simple linear
interpolation of colors and/or texture coordinates.
.TP
_const(POINT_SMOOTH_HINT)
Indicates the sampling quality of antialiased points.
If a larger filter function is applied, hinting _const(NICEST) can
result in more pixel fragments being generated during rasterization, 
.TP
_const(POLYGON_SMOOTH_HINT)
Indicates the sampling quality of antialiased polygons.
Hinting _const(NICEST) can result in more pixel fragments being generated
during rasterization,
if a larger filter function is applied.
.SH NOTES
The interpretation of hints depends on the implementation.
Some implementations ignore _cmnd(Hint) settings.
.SH ERRORS
_const(INVALID_ENUM) is generated if either _param1 or _param2 is not
an accepted value.
.P
_const(INVALID_OPERATION) is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
