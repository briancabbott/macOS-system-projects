_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(GetTexEnv,return texture environment parameters)
_names(GetTexEnv,[fi]v)
.SH PARAMETERS
_phead(_param1)
Specifies a texture environment.
Must be _const(TEXTURE_ENV).
_phead(_param2)
Specifies the symbolic name of a texture environment parameter.
Accepted values are _const(TEXTURE_ENV_MODE) and _const(TEXTURE_ENV_COLOR).
_phead(_param3)
Returns the requested data.
.SH DESCRIPTION
_cmnd returns in _param3 selected values of a texture environment that
was specified with _cmnd(TexEnv).
_param1 specifies a texture environment.
Currently, only one texture environment is defined and supported:
_const(TEXTURE_ENV). 
.P
_param2 names a specific texture environment parameter, as follows:
.TP 10
_const(TEXTURE_ENV_MODE)
_param3 returns the single-valued texture environment mode,
a symbolic constant. The initial value is _const(MODULATE).
.TP
_const(TEXTURE_ENV_COLOR)
_param3 returns four integer or floating-point values that are the
texture environment color.  
Integer values,
when requested,
are linearly mapped from the internal floating-point representation
such that 1.0 maps to the most positive representable integer,
and \-1.0 maps to the most negative representable integer. The initial
value is (0, 0, 0, 0).
.SH NOTES
If an error is generated,
no change is made to the contents of _param3.
.P
When the _arbstring(multitexture) extension is supported, _cmnd returns
the texture environment parameters for the active texture unit.
.SH ERRORS
_const(INVALID_ENUM) is generated if _param1 or _param2 is not an
accepted value.
.P
_const(INVALID_OPERATION) is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
.SH SEE ALSO
_cmnd(ActiveTextureARB),
_cmnd(TexEnv)
