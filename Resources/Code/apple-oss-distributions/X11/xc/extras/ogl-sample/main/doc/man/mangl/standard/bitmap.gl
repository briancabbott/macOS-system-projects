_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,tbl|eqn)_C_
_header(Bitmap,draw a bitmap)
_names(Bitmap)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1 _param2)
Specify the pixel width and height of the bitmap image.
_phead(_param3 _param4)
Specify the location of the origin in the bitmap image.
The origin is measured from the lower left corner of the bitmap,
with right and up being the positive axes.
_phead(_param5 _param6)
Specify the \f2x\fP and \f2y\fP offsets to be added to the current raster position
after the bitmap is drawn.
_phead(_param7)
Specifies the address of the bitmap image.
.SH DESCRIPTION
A bitmap is a binary image.
When drawn,
the bitmap is positioned relative to the current raster position,
and frame buffer pixels corresponding to 1's in the bitmap are
written using the current raster color or index.
Frame buffer pixels corresponding to 0's in the bitmap are not modified.
.P
_cmnd takes seven arguments.
The first pair specifies the width and height of the bitmap image.
The second pair specifies the location of the bitmap origin relative
to the lower left corner of the bitmap image.
The third pair of arguments specifies \f2x\fP and \f2y\fP offsets to be added
to the current raster position after the bitmap has been drawn.
The final argument is a pointer to the bitmap image itself.
.P
The bitmap image is interpreted like image data for the _cmnd(DrawPixels)
command,
with _param1 and _param2 corresponding to the width and height arguments
of that command,
and with \f2type\fP set to _const(BITMAP)
and \f2format\fP set to _const(COLOR_INDEX).
.BP
Modes specified using _cmnd(PixelStore) affect the
interpretation of bitmap image data;
modes specified using _cmnd(PixelTransfer) do not.
.P
If the current raster position is invalid, _cmnd is ignored.
Otherwise,
the lower left corner of the bitmap image is positioned at the window coordinates
.ce
.sp
$ x sub w ~=~ \(lf ~ x sub r ~-~ x sub o ~ \(rf $
.br
.sp
.ce
$ y sub w ~=~ \(lf ~ y sub r ~-~ y sub o ~ \(rf $
.sp
where $ ( x sub r , y sub r ) $ is the raster position
and $ ( x sub o , y sub o ) $ is the bitmap origin.
Fragments are then generated for each pixel corresponding to a 1 (one)
in the bitmap image.
These fragments are generated using the current raster \f2z\fP coordinate,
color or color index, and current raster texture coordinates.
They are then treated just as if they had been generated
by a point, line, or polygon,
including texture mapping,
.br
fogging,
and all per-fragment operations such as alpha and depth testing.
.P
After the bitmap has been drawn,
the \f2x\fP and \f2y\fP coordinates of the current raster position are offset by
_param5 and _param6.
No change is made to the \f2z\fP coordinate of the current raster position,
or to the current raster color, texture coordinates, or index.
.SH NOTES
To set a valid raster position outside the viewport, first set a valid
raster position inside the viewport, then call _cmnd(Bitmap) with NULL
as the _param7 parameter and with _param5 and _param6 set to
the offsets of the new raster position. This technique is useful when
panning an image around the viewport. 
.SH ERRORS
_const(INVALID_VALUE) is generated if _param1 or _param2 is negative.
.P
_const(INVALID_OPERATION) is generated if _cmnd
is executed between the execution of _cmnd(Begin) and the corresponding execution of
_cmnd(End).
.SH ASSOCIATED GETS
_cmnd(Get) with argument _const(CURRENT_RASTER_POSITION)
.br
_cmnd(Get) with argument _const(CURRENT_RASTER_COLOR)
.br
_cmnd(Get) with argument _const(CURRENT_RASTER_DISTANCE)
.br
_cmnd(Get) with argument _const(CURRENT_RASTER_INDEX)
.br
_cmnd(Get) with argument _const(CURRENT_RASTER_TEXTURE_COORDS)
.br
_cmnd(Get) with argument _const(CURRENT_RASTER_POSITION_VALID)
.SH SEE ALSO
_cmnd(DrawPixels),
_cmnd(PixelStore),
_cmnd(PixelTransfer),
_cmnd(RasterPos)

