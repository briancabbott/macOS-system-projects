_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(LineWidth,specify the width of rasterized lines)
_names(LineWidth)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1)
Specifies the width of rasterized lines.
The initial value is 1.
.SH DESCRIPTION
_cmnd specifies the rasterized width of both aliased and antialiased
lines.
Using a line width other than 1 has different effects,
depending on whether line antialiasing is enabled.
To enable and disable line antialiasing, call 
_cmnd(Enable) and _cmnd(Disable)
with argument _const(LINE_SMOOTH). Line antialiasing is initially
disabled. 
.P
If line antialiasing is disabled,
the actual width is determined by rounding the supplied width
to the nearest integer.
(If the rounding results in the value 0,
it is as if the line width were 1.)
If
$| DELTA x | ~>=~ | DELTA y |$,
\f2i\fP pixels are filled in each column that is rasterized,
where \f2i\fP is the rounded value of _param1.
Otherwise,
\f2i\fP pixels are filled in each row that is rasterized.
.P
If antialiasing is enabled,
line rasterization produces a fragment for each pixel square
that intersects the region lying within the rectangle having width
equal to the current line width,
length equal to the actual length of the line,
and centered on the mathematical line segment.
The coverage value for each fragment is the window coordinate area
of the intersection of the rectangular region with the corresponding
pixel square.
This value is saved and used in the final rasterization step. 
.P
Not all widths can be supported when line antialiasing is enabled. If an
unsupported width is requested, the nearest supported width is used.
Only width 1 is guaranteed to be supported; others depend on the
implementation.  Likewise, there is a range for aliased line widths as well.
To query the range of supported widths and the size
difference between supported widths within the range, call _cmnd(Get)
with arguments _const(ALIASED_LINE_WIDTH_RANGE),
_const(SMOOTH_LINE_WIDTH_RANGE), _const(SMOOTH_LINE_WIDTH_GRANULARITY).
.SH NOTES
The line width specified by _cmnd is always returned when _const(LINE_WIDTH)
is queried.
Clamping and rounding for aliased and antialiased lines have no effect
on the specified value.
.P
Nonantialiased line width may be clamped to an implementation-dependent
maximum.  Call _cmnd(Get) with _const(ALIASED_LINE_WIDTH_RANGE) to
determine the maximum width.
.SH ERRORS
_const(INVALID_VALUE) is generated if _param1 is less than or equal to 0.
.P
_const(INVALID_OPERATION) is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
.SH ASSOCIATED GETS
_cmnd(Get) with argument _const(LINE_WIDTH)
.br
_cmnd(Get) with argument _const(ALIASED_LINE_WIDTH_RANGE)
.br
_cmnd(Get) with argument _const(SMOOTH_LINE_WIDTH_RANGE)
.br
_cmnd(Get) with argument _const(SMOOTH_LINE_WIDTH_GRANULARITY)
.br
_cmnd(IsEnabled) with argument _const(LINE_SMOOTH)
.SH SEE ALSO
_cmnd(Enable)
