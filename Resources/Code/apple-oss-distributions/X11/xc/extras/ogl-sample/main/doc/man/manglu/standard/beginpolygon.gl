_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(BeginPolygon, delimit a polygon description)
_names(BeginPolygon)
_names(EndPolygon,,noheader)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1)
Specifies the tessellation object (created with _cmnd(NewTess)).
.SH DESCRIPTION
_cmnd(BeginPolygon) and _cmnd(EndPolygon) delimit the definition of a
nonconvex polygon.
To define such a polygon, first call _cmnd(BeginPolygon).
Then define the contours of the polygon
by calling 
_cmnd(TessVertex) for each vertex
and _cmnd(NextContour) to start each new contour.
Finally, call _cmnd(EndPolygon)
to signal the end of the definition.
See the _cmnd(TessVertex) and 
_cmnd(NextContour) reference pages for more details.
.P
Once _cmnd(EndPolygon) is called, the polygon is tessellated, and the
resulting triangles are described through callbacks.
See _cmnd(TessCallback) for descriptions of the callback functions.
.SH NOTES
This command is obsolete and is provided for backward compatibility
only. Calls to _cmnd(BeginPolygon) are mapped to 
_cmnd(TessBeginPolygon)
followed by 
_cmnd(TessBeginContour). Calls to _cmnd(EndPolygon) are mapped
to _cmnd(TessEndContour) followed by _cmnd(TessEndPolygon).
.SH EXAMPLE
A quadrilateral with a triangular hole in it can be described like this:
.sp
.Ex
gluBeginPolygon(tobj);
   gluTessVertex(tobj, v1, v1);
   gluTessVertex(tobj, v2, v2);
   gluTessVertex(tobj, v3, v3);
   gluTessVertex(tobj, v4, v4);
gluNextContour(tobj, GLU_INTERIOR);
   gluTessVertex(tobj, v5, v5);
   gluTessVertex(tobj, v6, v6);
   gluTessVertex(tobj, v7, v7);
gluEndPolygon(tobj);
.Ee
.SH SEE ALSO
_cmnd(NewTess), _cmnd(NextContour), _cmnd(TessCallback), _cmnd(TessVertex),
_cmnd(TessBeginPolygon), _cmnd(TessBeginContour)



