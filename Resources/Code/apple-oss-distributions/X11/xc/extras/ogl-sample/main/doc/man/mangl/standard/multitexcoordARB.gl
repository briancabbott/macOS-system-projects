_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,tbl|eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(MultiTexCoordARB, set the current texture coordinates)
_names(MultiTexCoord,[1-4]u*[sifdb]ARB)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1)
Specifies texture unit whose coordinates should be modified.  The number
of texture units is implementation dependent, but must be at least
two. Must be one of _arbconstidx(TEXTURE) where 0 \(<= $ i $ <
_arbconst(MAX_TEXTURE_UNITS), which is an implementation-dependent value.
_phead(_param2 _param3 _param4 _param5)
Specify _param2, _param3, _param4, and _param5 texture coordinates for
_param1 texture unit.  Not all parameters are present in all forms
of the command.
_names(MultiTexCoord,[1-4]u*[sifdb]vARB)
.SH PARAMETERS
_phead(_param1)
Specifies texture unit whose coordinates should be modified.  The number
of texture units is implementation dependent, but must be at least
two. Must be one of _arbconstidx(TEXTURE),
where 0 \(<= $ i $ < the implementation-dependent value of 
_const(MAX_TEXTURE_UNITS_ARB).
_phead(_param2)
Specifies a pointer to an array of one, two, three, or four elements,
which in turn specify the _param2(1), _param3(1), _param4(1),
and _param5(1) texture coordinates.
.SH DESCRIPTION
_cmnd specifies texture coordinates in one, two, three, or four
dimensions.  
_cmnd(MultiTexCoord1ARB) sets the current texture
coordinates to (_param2(1),\ 0,\ 0,\ 1);
a call to _cmnd(MultiTexCoord2ARB)
sets them to (_param2(1),\ _param3(1),\ 0,\ 1).
Similarly, _cmnd(MultiTexCoord3ARB) specifies the texture coordinates as
(_param2(1),\ _param3(1),\ _param4(1),\ 1), and
_cmnd(MultiTexCoord4ARB)
defines all four components explicitly as
(_param2(1),\ _param3(1),\ _param4(1),\ _param5(1)).
.P
The current texture coordinates are part of the data
that is associated with each vertex and with the current
raster position. 
Initially, the values for 
_param2(1), _param3(1), _param4(1), _param5(1) are (0,\ 0,\ 0,\ 1). 
.P
.SH NOTES
_cmnd is only supported if _arbstring(multitexture) is included in the
string returned by _cmnd(GetString) when called with the argument
_const(EXTENSIONS).
.P
The current texture coordinates can be updated at any time.
In particular,
_cmnd can be called between a call to _cmnd(Begin) and the corresponding
call to _cmnd(End).
.P
It is always the case that _arbconstidx(TEXTURE) = _arbconst(TEXTURE0) + $i$.
.SH ASSOCIATED GETS
_cmnd(Get) with argument _const(CURRENT_TEXTURE_COORDS) with appropriate 
texture unit selected.
.SH SEE ALSO
_cmnd(ActiveTextureARB),
_cmnd(ClientActiveTextureARB),
_cmnd(TexCoord),
_cmnd(TexCoordPointer),
_cmnd(Vertex)
