_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,tbl|eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(Normal,set the current normal vector)
.EQ
delim $$
.EN
_names(Normal,3[bdfis])
.SH PARAMETERS
_phead(_param1 _param2 _param3)
Specify the $x$, $y$, and $z$ coordinates of the new current normal.
The initial value of the current normal is the unit vector, (0, 0, 1).
.P
_names(Normal,3[bsidf]v)
.SH PARAMETERS
_phead(_param1)
Specifies a pointer to an array of three elements:
the $x$, $y$, and $z$ coordinates of the new current normal.
.P
.SH DESCRIPTION
The current normal is set to the given coordinates
whenever _cmnd is issued.
Byte, short, or integer arguments are converted to floating-point
format with a linear mapping that maps the most positive representable integer
value to 1.0,
and the most negative representable integer value to \-1.0.
.P
Normals specified with _cmnd need not have unit length.
If _const(NORMALIZE) is enabled,
then normals of any length specified with _cmnd are normalized after transformation.
If _const(RESCALE_NORMAL) is enabled, normals are scaled by a scaling factor
derived from the modelview matrix.  _const(RESCALE_NORMAL) requires that the
originally specified normals were of unit length, and that the modelview
matrix contain only uniform scales for proper results.
To enable and disable normalization, call _cmnd(Enable) and _cmnd(Disable)
with either _const(NORMALIZE) or _const(RESCALE_NORMAL).
Normalization is initially disabled.
.SH NOTES
The current normal can be updated at any time.
In particular, _cmnd can be called between a call to _cmnd(Begin) and
the corresponding call to _cmnd(End).
.SH ASSOCIATED GETS
_cmnd(Get) with argument _const(CURRENT_NORMAL)
.br
_cmnd(IsEnabled) with argument _const(NORMALIZE)
.br
_cmnd(IsEnabled) with argument _const(RESCALE_NORMAL)
.SH SEE ALSO
_cmnd(Begin),
_cmnd(Color),
_cmnd(Index),
_cmnd(NormalPointer),
_cmnd(TexCoord),
_cmnd(Vertex)
