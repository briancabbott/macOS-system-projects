_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ $Date$ $Revision$
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(NextContour, mark the beginning of another contour)
_names(NextContour)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1)
Specifies the tessellation object (created with _cmnd(NewTess)).
_phead(_param2)
Specifies the type of the contour being defined. Valid values are
_gluconst(EXTERIOR),
_gluconst(INTERIOR),
_gluconst(UNKNOWN),
_gluconst(CCW), and
_gluconst(CW).
.SH DESCRIPTION
_cmnd is used in describing polygons with multiple contours. After the first
contour has been described through a series of _cmnd(TessVertex) calls, 
a _cmnd call indicates that the previous contour is complete and that the
next contour is about to begin.
Another series of _cmnd(TessVertex) calls is then used to describe the new 
contour. This process can be repeated until all contours have been described.
.P
_param2 defines what type of contour follows.
The legal contour types are as follows:
.TP 18
_gluconst(EXTERIOR)
An exterior contour defines an exterior boundary of the polygon.
.TP
_gluconst(INTERIOR)
An interior contour defines an interior boundary of the polygon (such as 
a hole).
.TP
_gluconst(UNKNOWN)
An unknown contour is analyzed by the library to determine if it is interior
or exterior.
.TP
_gluconst(CCW), 
.TP
_gluconst(CW)
The first _gluconst(CCW) or _gluconst(CW) contour defined is considered to 
be exterior. All other contours are considered to be exterior if they 
are oriented in the same direction (clockwise or counterclockwise) as 
the first contour, and interior if they are not.
.P
If one contour is of type _gluconst(CCW) or _gluconst(CW), then all 
contours must be of the same type (if they are not, then all _gluconst(CCW)
and _gluconst(CW) contours will be changed to _gluconst(UNKNOWN)).
.P
Note that there is no real difference between the _gluconst(CCW) and 
_gluconst(CW) contour types.
.P
Before the first contour is described, _cmnd can be called to 
define the type of the first contour.
If _cmnd is not called before the first contour, then the first contour is 
marked _gluconst(EXTERIOR).
.P
This command is obsolete and is provided for backward compatibility
only. Calls to _cmnd are mapped to _cmnd(TessEndContour)
followed by 
_cmnd(TessBeginContour).
.SH EXAMPLE
A quadrilateral with a triangular hole in it can be described as follows:
.sp
.Ex
gluBeginPolygon(tobj);
   gluTessVertex(tobj, v1, v1);
   gluTessVertex(tobj, v2, v2);
   gluTessVertex(tobj, v3, v3);
   gluTessVertex(tobj, v4, v4);
gluNextContour(tobj, GLU_INTERIOR);
   gluTessVertex(tobj, v5, v5);
   gluTessVertex(tobj, v6, v6);
   gluTessVertex(tobj, v7, v7);
gluEndPolygon(tobj);
.Ee
.SH SEE ALSO
_cmnd(BeginPolygon), _cmnd(NewTess), _cmnd(TessCallback), _cmnd(TessVertex),
_cmnd(TessBeginContour)

