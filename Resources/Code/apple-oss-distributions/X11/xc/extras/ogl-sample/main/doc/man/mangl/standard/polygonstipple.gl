_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(PolygonStipple,set the polygon stippling pattern)
_names(PolygonStipple)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1)
Specifies a pointer to a $32 ~times~ 32$ stipple pattern that will be unpacked
from memory in the same way that _cmnd(DrawPixels) unpacks pixels.
.SH DESCRIPTION
Polygon stippling,
like line stippling
(see _cmnd(LineStipple)),
masks out certain fragments produced by rasterization,
creating a pattern.
Stippling is independent of polygon antialiasing.
.P
_param1 is a pointer to a $32 ~times~ 32$ stipple pattern that is stored
in memory just like the pixel data supplied to a _cmnd(DrawPixels)
call with 
.I
height
and
.I width
both equal to 32, a pixel format
of _const(COLOR_INDEX), and data type 
of _const(BITMAP).
That is,
the stipple pattern is represented as a $32 ~times~ 32$ array
of 1-bit color indices packed in unsigned bytes.
_cmnd(PixelStore) parameters like _const(UNPACK_SWAP_BYTES)
and _const(UNPACK_LSB_FIRST) affect the assembling of the bits into a
stipple pattern.
Pixel transfer operations
(shift, offset, pixel map)
are not applied to the stipple image,
however.
.P
To enable and disable polygon stippling, call
_cmnd(Enable) and _cmnd(Disable)
with argument _const(POLYGON_STIPPLE). Polygon stippling is initially
disabled. If it's enabled,
a rasterized polygon fragment with window coordinates $x sub w$ and $y sub w$
is sent to the next stage of the GL if and only if the
($x sub w~roman mod~32$)th bit in the ($y sub w~roman mod~32$)th row
of the stipple pattern is 1 (one).
When polygon stippling is disabled, it is as if the stipple pattern
consists of all 1's.
.SH ERRORS
_const(INVALID_OPERATION) is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
.SH ASSOCIATED GETS
_cmnd(GetPolygonStipple)
.br
_cmnd(IsEnabled) with argument _const(POLYGON_STIPPLE)
.SH SEE ALSO
_cmnd(DrawPixels),
_cmnd(LineStipple),
_cmnd(PixelStore),
_cmnd(PixelTransfer)
