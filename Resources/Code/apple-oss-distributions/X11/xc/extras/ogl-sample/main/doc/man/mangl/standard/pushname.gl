_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_header(PushName,push and pop the name stack)
_names(PushName)
.SH PARAMETERS
_phead(_param1)
Specifies a name that will be pushed onto the name stack.
_names(PopName)
.SH DESCRIPTION
The name stack is used during selection mode to allow sets of rendering
commands to be uniquely identified.
It consists of an ordered set of unsigned integers and is initially empty.
.P
_cmnd causes _param1(1) to be pushed onto the name stack.
_cmnd(PopName) pops one name off the top of the stack. 
.P
The maximum name stack depth is implementation-dependent; call
_const(MAX_NAME_STACK_DEPTH) to find out the value for a particular
implementation. It is an
error to push a name onto a full stack, 
or to pop a name off an empty stack.
It is also an error to manipulate the name stack between the execution of
_cmnd(Begin) and the corresponding execution of _cmnd(End).
In any of these cases, the error flag is set and no other change is
made to GL state.
.P
The name stack is always empty while the render mode is not _const(SELECT).
Calls to _cmnd(PushName) or _cmnd(PopName) while the render mode is not
_const(SELECT) are ignored.
.SH ERRORS
_const(STACK_OVERFLOW) is generated if _cmnd(PushName) is called while the
name stack is full.
.P
_const(STACK_UNDERFLOW) is generated if _cmnd(PopName) is called while the
name stack is empty.
.P
_const(INVALID_OPERATION) is generated if _cmnd(PushName) or _cmnd(PopName)
is executed between a call to _cmnd(Begin) and the corresponding call to
_cmnd(End).
.bp
.SH ASSOCIATED GETS
_cmnd(Get) with argument _const(NAME_STACK_DEPTH)
.br
_cmnd(Get) with argument _const(MAX_NAME_STACK_DEPTH)
.SH SEE ALSO
_cmnd(InitNames),
_cmnd(LoadName),
_cmnd(RenderMode),
_cmnd(SelectBuffer)
