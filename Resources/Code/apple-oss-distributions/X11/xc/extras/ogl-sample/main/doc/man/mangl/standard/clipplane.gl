_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(ClipPlane,specify a plane against which all geometry is clipped)
_names(ClipPlane)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1)
Specifies which clipping plane is being positioned.
Symbolic names of the form _const(CLIP_PLANE)\f2i\fP,
where \f2i\fP is an integer between 0 and _const(MAX_CLIP_PLANES)$^-^1$,
are accepted.
_phead(_param2)
Specifies the address of an array of four double-precision floating-point values.
These values are interpreted as a plane equation.
.SH DESCRIPTION
Geometry is always clipped against the boundaries of a six-plane frustum
in \f2x\fP, \f2y\fP, and \f2z\fP.  
_cmnd allows the specification of additional planes,
not necessarily perpendicular to the \f2x\fP, \f2y\fP, or \f2z\fP axis,
against which all geometry is clipped.
To determine the maximum number of additional clipping planes, call
_cmnd(GetIntegerv) with argument _const(MAX_CLIP_PLANES). All
implementations support at least six such clipping planes. 
Because the resulting clipping region is the intersection
of the defined half-spaces,
it is always convex.
.P
_cmnd specifies a half-space using a four-component plane equation.
When _cmnd is called,
_param2 is transformed by the inverse of the modelview matrix
and stored in the resulting eye coordinates.
Subsequent changes to the modelview matrix have no effect on the
stored plane-equation components.
If the dot product of the eye coordinates of a vertex with the
stored plane equation components is positive or zero,
the vertex is \f2in\f1 with respect to that clipping plane.
Otherwise, it is \f2out\fP.
.P 
To enable and disable clipping planes, call
_cmnd(Enable) and _cmnd(Disable) with the argument 
_const(CLIP_PLANE)\f2i\fP, 
where \f2i\fP is the plane number.
.P
All clipping planes are initially defined as (0, 0, 0, 0) in eye coordinates
and are disabled.
.SH NOTES
It is always the case that _const(CLIP_PLANE)$i$ = _const(CLIP_PLANE0)$~+~i$.
.SH ERRORS
_const(INVALID_ENUM) is generated if _param1 is not an accepted value.
.P
_const(INVALID_OPERATION) is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
.SH ASSOCIATED GETS
_cmnd(GetClipPlane)
.br
_cmnd(IsEnabled) with argument _const(CLIP_PLANE)\f2i\fP
.SH SEE ALSO
_cmnd(Enable)
