_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ $Date$ $Revision$
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(Perspective, set up a perspective projection matrix)
_names(Perspective)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1)
Specifies the field of view angle, in degrees, in the \f2y\fP direction.
_phead(_param2)
Specifies the aspect ratio that determines
the field of view in the \f2x\fP direction.
The aspect ratio is the ratio of \f2x\fP (width) to \f2y\fP (height).
_phead(_param3)
Specifies the distance from the viewer to the near clipping plane
(always positive).
_phead(_param4)
Specifies the distance from the viewer to the far clipping plane
(always positive).
.SH DESCRIPTION
_cmnd specifies a viewing frustum into the world coordinate system.
In general, the aspect ratio in _cmnd should match the aspect ratio
of the associated viewport. For example, $ _eqnparam2 ~=~ 2.0 $ means 
the viewer's
angle of view is twice as wide in \f2x\fP as it is in \f2y\fP.
If the viewport is
twice as wide as it is tall, it displays the image without distortion.
.P
The matrix generated by _cmnd is multipled by the current matrix,
just as if _glcmnd(MultMatrix) were called with the generated matrix.
To load the perspective matrix onto the current matrix stack instead,
precede the call to _cmnd with a call to _glcmnd(LoadIdentity).
.P
Given \f2f\fP defined as follows:
.sp
.ce
.EQ
f  ~=~ cotangent"("{_eqnparam1 over 2}")"
.EN
.bp
The generated matrix is
.sp
.ce
.EQ
left ( ~~ down 130 { matrix {
   ccol { {f over _eqnparam2} above 0 above 0 above 0 }
   ccol { 0 above f above 0 above 0 }
   ccol { 0 above 0 above {{_eqnparam4 + _eqnparam3} over {_eqnparam3 - _eqnparam4}} above -1 }
   ccol { 0 above 0 above {{2 * _eqnparam4 * _eqnparam3} over {_eqnparam3 - _eqnparam4}} above 0}
}}  ~~~ right )
.EN

.SH NOTES
Depth buffer precision is affected by the values specified for
_param3 and _param4.
The greater the ratio of _param4 to _param3 is,
the less effective the depth buffer will be at distinguishing between
surfaces that are near each other.
If 
.sp
.ce
$r ~=~ _eqnparam4 over _eqnparam3$
.sp
.P
roughly $log sub 2 r$ bits of depth buffer precision are lost.
Because $r$ approaches infinity as _param3 approaches 0,
_param3 must never be set to 0.
.SH SEE ALSO
_glcmnd(Frustum), _glcmnd(LoadIdentity),
_glcmnd(MultMatrix), _cmnd(Ortho2D)
