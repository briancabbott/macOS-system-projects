_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(PointSize,specify the diameter of rasterized points)
_names(PointSize)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1)
Specifies the diameter of rasterized points.
The initial value is 1.
.SH DESCRIPTION
_cmnd specifies the rasterized diameter of both aliased and antialiased
points.
Using a point size other than 1 has different effects,
depending on whether point antialiasing is enabled.
To enable and disable point antialiasing, call 
_cmnd(Enable) and _cmnd(Disable)
with argument _const(POINT_SMOOTH). Point antialiasing is initially disabled.
.P
If point antialiasing is disabled,
the actual size is determined by rounding the supplied size
to the nearest integer.
(If the rounding results in the value 0,
it is as if the point size were 1.)
If the rounded size is odd,
then the center point
($ x $, $ y $)
of the pixel fragment that represents the point is computed as
.sp
.ce
( $ \(lf ~ x sub w ~ \(rf ~+~ .5 $, $ \(lf ~ y sub w ~ \(rf ~+~ .5 $)
.sp
where $w$ subscripts indicate window coordinates.
All pixels that lie within the square grid of the rounded size centered at
($ x $, $ y $)
make up the fragment.
If the size is even,
the center point is
.sp
.ce
( $ \(lf ~ x sub w ~+~ .5 ~ \(rf$, $ \(lf ~ y sub w ~+~ .5 ~ \(rf $)
.sp
and the rasterized fragment's centers are the half-integer window coordinates
within the square of the rounded size centered at
($ x $, $ y $).
All pixel fragments produced in rasterizing a nonantialiased point are
assigned the same associated data,
that of the vertex corresponding to the point.
.P
If antialiasing is enabled,
then point rasterization produces a fragment for each pixel square
that intersects the region lying within the circle having diameter
equal to the current point size and centered at the point's
($ x sub w $, $ y sub w $).
The coverage value for each fragment is the window coordinate area
of the intersection of the circular region with the corresponding pixel square.
This value is saved and used in the final rasterization step. 
The data associated with each fragment is the data associated with 
the point being rasterized.
.P
Not all sizes are supported when point antialiasing is enabled. 
If an unsupported size is requested,
the nearest supported size is used.
Only size 1 is guaranteed to be supported;
others depend on the implementation.
To query the range of supported sizes and the size difference between
supported sizes within the range, call
_cmnd(Get) with arguments
_const(SMOOTH_POINT_SIZE_RANGE) and
_const(SMOOTH_POINT_SIZE_GRANULARITY).
For aliased points, query the supported ranges and granularity with
_cmnd(Get) with arguments
_const(ALIASED_POINT_SIZE_RANGE) and
_const(ALIASED_POINT_SIZE_GRANULARITY).
.SH NOTES
The point size specified by _cmnd is always returned when _const(POINT_SIZE)
is queried.
Clamping and rounding for aliased and antialiased points have no effect
on the specified value.
.P
A non-antialiased point size may be clamped to an implementation-dependent
maximum.
Although this maximum cannot be queried,
it must be no less than the maximum value for antialiased points,
rounded to the nearest integer value.
.P
_const(POINT_SIZE_RANGE) and _const(POINT_SIZE_GRANULARITY) are
deprecated in GL versions 1.2 and greater.  Their functionality has been 
replaced by _const(SMOOTH_POINT_SIZE_RANGE) and 
_const(SMOOTH_POINT_SIZE_GRANULARITY).
.SH ERRORS
_const(INVALID_VALUE) is generated if _param1 is less than or equal to 0.
.P
_const(INVALID_OPERATION) is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
.SH ASSOCIATED GETS
_cmnd(Get) with argument _const(POINT_SIZE)
.br
_cmnd(Get) with argument _const(ALIASED_POINT_SIZE_RANGE)
.br
_cmnd(Get) with argument _const(ALIASED_POINT_SIZE_GRANULARITY)
.br
_cmnd(Get) with argument _const(SMOOTH_POINT_SIZE_RANGE)
.br
_cmnd(Get) with argument _const(SMOOTH_POINT_SIZE_GRANULARITY)
.br
_cmnd(IsEnabled) with argument _const(POINT_SMOOTH)
.SH SEE ALSO
_cmnd(Enable)
