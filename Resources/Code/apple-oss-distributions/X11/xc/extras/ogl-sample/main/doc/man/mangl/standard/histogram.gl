_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,tbl|eqn)_C_
_header(Histogram,define histogram table)
_names(Histogram)
.EQ
delim $$
.EN
_define(@<__target>@,@<_param1>@)_C_
_define(@<__width>@,@<_param2>@)_C_
_define(@<__internalformat>@,@<_param3>@)_C_
_define(@<__sink>@,@<_param4>@)_C_
.SH PARAMETERS
_phead(__target)
The histogram whose parameters are to be set.
Must be one of
_const(HISTOGRAM) or
_const(PROXY_HISTOGRAM).
_phead(__width)
The number of entries in the histogram table.  Must be a power of 2.
_phead(__internalformat)
The format of entries in the histogram table.
Must be one of
_const(ALPHA),
_const(ALPHA4),
_const(ALPHA8),
_const(ALPHA12),
_const(ALPHA16),
_const(LUMINANCE),
_const(LUMINANCE4),
_const(LUMINANCE8),
_const(LUMINANCE12),
_const(LUMINANCE16),
_const(LUMINANCE_ALPHA),
_const(LUMINANCE4_ALPHA4),
_const(LUMINANCE6_ALPHA2),
_const(LUMINANCE8_ALPHA8),
_const(LUMINANCE12_ALPHA4),
_const(LUMINANCE12_ALPHA12),
_const(LUMINANCE16_ALPHA16),
_const(R3_G3_B2),
_const(RGB),
_const(RGB4),
_const(RGB5),
_const(RGB8),
_const(RGB10),
_const(RGB12),
_const(RGB16),
_const(RGBA),
_const(RGBA2),
_const(RGBA4),
_const(RGB5_A1),
_const(RGBA8),
_const(RGB10_A2),
_const(RGBA12), or
_const(RGBA16).
_phead(__sink)
If _const(TRUE), pixels will be consumed by the histogramming
process and no drawing or texture loading will take place.
If _const(FALSE), pixels will proceed to the minmax process after
histogramming.
.SH DESCRIPTION
When _const(HISTOGRAM) is enabled, RGBA color components are converted to
histogram table indices by clamping to the range [0,1], multiplying by
the width of the histogram table, and rounding to the nearest integer.
The table entries selected by the RGBA indices are then incremented.
(If the internal format of the histogram table includes luminance, then
the index derived from the R color component determines the luminance
table entry to be incremented.)  If a histogram table entry is incremented
beyond its maximum value, then its value becomes undefined.  (This is
not an error.)
.PP
Histogramming is performed only for RGBA pixels (though these may
be specified originally as color indices and converted to RGBA by
index table lookup).
Histogramming is enabled with _cmnd(Enable) and disabled with _cmnd(Disable).
.PP
When __target is _const(HISTOGRAM), _cmnd redefines the current
histogram table to have __width entries of the format specified by
__internalformat.
The entries are indexed 0 through $_eqnparam2 ~-~ 1$, and
all entries are initialized to zero.
The values in the previous histogram table, if any, are lost.
If __sink is _const(TRUE), then pixels are discarded after histogramming;
no further processing of the pixels takes place, and no drawing,
texture loading, or pixel readback will result.
.PP
When __target is _const(PROXY_HISTOGRAM), _cmnd computes all
state information as if the histogram table were to be redefined,
but does not actually define the new table.
If the requested histogram table is too large to be supported, then the
state information will be set to zero.
This provides a way to determine if a histogram table with the given
parameters can be supported.
.PP
.SH NOTES
_cmnd is present only if _arbstring(imaging) is returned when _cmnd(GetString)
is called with an argument of _const(EXTENSIONS).
.SH ERRORS
_const(INVALID_ENUM) is generated if __target is not one of the allowable
values.
.P
_const(INVALID_VALUE) is generated if __width is less than zero or is
not a power of 2.
.P
_const(INVALID_ENUM) is generated if __internalformat is not one of the
allowable values.
.P
_const(TABLE_TOO_LARGE) is generated if __target is _const(HISTOGRAM)
and the histogram table specified is too large for the implementation.
.P
_const(INVALID_OPERATION) is generated if _cmnd is executed
between the execution of _cmnd(Begin) and the corresponding
execution of _cmnd(End).
.SH ASSOCIATED GETS
_cmnd(GetHistogramParameter)
.SH SEE ALSO
_cmnd(GetHistogram),
_cmnd(ResetHistogram)
