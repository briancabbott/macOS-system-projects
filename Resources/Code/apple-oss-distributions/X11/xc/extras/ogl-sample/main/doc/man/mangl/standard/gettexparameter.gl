_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(GetTexParameter,return texture parameter values)
_names(GetTexParameter,[fi]v)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1)
Specifies the symbolic name of the target texture.
_const(TEXTURE_1D),_const(TEXTURE_2D), and _const(TEXTURE_3D)  are accepted.
_phead(_param2)
Specifies the symbolic name of a texture parameter.
_const(TEXTURE_MAG_FILTER),
_const(TEXTURE_MIN_FILTER),
_const(TEXTURE_MIN_LOD),
_const(TEXTURE_MAX_LOD),
_const(TEXTURE_BASE_LEVEL),
_const(TEXTURE_MAX_LEVEL),
_const(TEXTURE_WRAP_S),
_const(TEXTURE_WRAP_T),
_const(TEXTURE_WRAP_R),
_const(TEXTURE_BORDER_COLOR),
_const(TEXTURE_PRIORITY), and
_const(TEXTURE_RESIDENT) are accepted.
_phead(_param3)
Returns the texture parameters.
.SH DESCRIPTION
_cmnd returns in _param3 the value or values of the texture parameter
specified as _param2.
_param1 defines the target texture,
either _const(TEXTURE_1D), _const(TEXTURE_2D), or _const(TEXTURE_3D)
to specify one-, two-, or three-dimensional texturing.
_param2 accepts the same symbols as _cmnd(TexParameter),
with the same interpretations:
.TP 35
_const(TEXTURE_MAG_FILTER)
Returns the single-valued texture magnification filter,
a symbolic constant. The initial value is _const(LINEAR).
.TP
_const(TEXTURE_MIN_FILTER)
Returns the single-valued texture minification filter,
a symbolic constant. The initial value is _const(NEAREST_MIPMAP_LINEAR).
.TP
_const(TEXTURE_MIN_LOD)
Returns the single-valued texture minimum level-of-detail value.  The
initial value is $-1000$.
.TP
_const(TEXTURE_MAX_LOD)
Returns the single-valued texture maximum level-of-detail value. The
initial value is 1000.
.TP
_const(TEXTURE_BASE_LEVEL)
Returns the single-valued base texture mipmap level.  The initial value is 0.
.TP
_const(TEXTURE_MAX_LEVEL)
Returns the single-valued maximum texture mipmap array level.  The initial
value is 1000.
.TP
_const(TEXTURE_WRAP_S)
Returns the single-valued wrapping function for texture coordinate $s$,
a symbolic constant. The initial value is _const(REPEAT).
.TP
_const(TEXTURE_WRAP_T)
Returns the single-valued wrapping function for texture coordinate $t$,
a symbolic constant. The initial value is _const(REPEAT).
.TP
_const(TEXTURE_WRAP_R)
Returns the single-valued wrapping function for texture coordinate $r$,
a symbolic constant. The initial value is _const(REPEAT).
.BP
.TP
_const(TEXTURE_BORDER_COLOR)
Returns four integer or floating-point numbers that comprise the RGBA color
of the texture border.
Floating-point values are returned in the range [0, 1].
Integer values are returned as a linear mapping of the internal floating-point 
representation such that 1.0 maps to the most positive representable
integer and \-1.0 maps to the most negative representable
integer. The initial value is (0, 0, 0, 0). 
.TP
_const(TEXTURE_PRIORITY)
Returns the residence priority of the target texture (or the named
texture bound to it). The initial value is 1. 
See _cmnd(PrioritizeTextures).
.TP
_const(TEXTURE_RESIDENT)
Returns the residence status of the target texture.
If the value returned in _param3 is _const(TRUE), the texture is
resident in texture memory.
See _cmnd(AreTexturesResident).
.SH NOTES
_const(TEXTURE_PRIORITY) and _const(TEXTURE_RESIDENT) are
available only if the GL version is 1.1 or greater.
.P
_const(TEXTURE_3D), 
_const(TEXTURE_MIN_LOD), _const(TEXTURE_MAX_LOD), _const(TEXTURE_BASE_LEVEL),
_const(TEXTURE_MAX_LEVEL), and _const(TEXTURE_WRAP_R) are available only
if the GL version is 1.2 or greater.
.P
If an error is generated,
no change is made to the contents of _param3.
.SH ERRORS
_const(INVALID_ENUM) is generated if _param1 or _param2 is not an
accepted value.
.P
_const(INVALID_OPERATION) is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
.SH SEE ALSO
_cmnd(AreTexturesResident),
_cmnd(PrioritizeTextures),
_cmnd(TexParameter)
