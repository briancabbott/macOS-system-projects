_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_C_ A real line follows.
_define(_filters,tbl|eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_C_ Use GL not OpenGL
_C_ Don't change the ordering of the main headers.
_C_ C specification (or fortran) is handled automatically
_C_ .TH is automatically added to the top of this file.
_C_ Below, use current tense, active do not capitalize the first word and dont
_C_ use a period.
_C_ the function name must appear in (APIFILE) (usually gl.h) as set in 
_C_ Makefile.
_header(ColorPointer,define an array of colors)
_names(ColorPointer)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1)
Specifies the number of components per color. Must be 3 or 4.
The initial value is 4.
_phead(_param2)
Specifies the data type of each color component in the array.
Symbolic constants
_const(BYTE),
_const(UNSIGNED_BYTE),
_const(SHORT),
_const(UNSIGNED_SHORT),
_const(INT),
_const(UNSIGNED_INT),
_const(FLOAT),
and
_const(DOUBLE)
are accepted. 
The initial value is _const(FLOAT).
_phead(_param3)
Specifies the byte offset between consecutive colors.
If _param3 is 0 (the initial value), the colors are understood to be
tightly packed in the array. The initial value is 0.
_phead(_param4)
Specifies a pointer to the first component of the first color element
in the array.
.SH DESCRIPTION
_cmnd specifies the location and data format of an array of color components
to use when rendering.
_param1 specifies the number of components per color, and must be 3 or 4.
_param2 specifies the data type of each color component, and _param3
specifies the byte stride from one color to the next allowing vertices and 
attributes to be packed into a single array or stored in separate arrays.
(Single-array storage may be more efficient on some implementations;
see _cmnd(InterleavedArrays).)
.P
When a color array is specified, 
_param1, _param2, _param3, and _param4 are saved as client-side
state.
.P
To enable and disable the color array, call _cmnd(EnableClientState) and
.br
_cmnd(DisableClientState) with the argument _const(COLOR_ARRAY). If
enabled, the color array is used when _cmnd(DrawArrays),
_cmnd(DrawElements), _cmnd(DrawRangeElements), or _cmnd(ArrayElement) is
called. 
.SH NOTES
_cmnd is available only if the GL version is 1.1 or greater.
.P
The color array is initially disabled and isn't accessed when
_cmnd(ArrayElement), _cmnd(DrawArrays), _cmnd(DrawRangeElements), 
or _cmnd(DrawElements) is called.
.P
Execution of _cmnd is not allowed between the execution of
_cmnd(Begin) and the corresponding execution of _cmnd(End),
but an error may or may not be generated. If no error is generated,
the operation is undefined.
.P
_cmnd is typically implemented on the client side.
.P
Color array parameters are client-side state and are therefore not saved 
or restored by _cmnd(PushAttrib) and _cmnd(PopAttrib).
Use _cmnd(PushClientAttrib) and _cmnd(PopClientAttrib) instead.
.SH ERRORS
_const(INVALID_VALUE) is generated if _param1 is not 3 or 4.
.P
_const(INVALID_ENUM) is generated if _param2 is not an accepted value.
.P
_const(INVALID_VALUE) is generated if _param3 is negative.
.SH ASSOCIATED GETS  
_cmnd(IsEnabled) with argument _const(COLOR_ARRAY)
.br
_cmnd(Get) with argument _const(COLOR_ARRAY_SIZE)
.br
_cmnd(Get) with argument _const(COLOR_ARRAY_TYPE)
.br
_cmnd(Get) with argument _const(COLOR_ARRAY_STRIDE)
.br
_cmnd(GetPointerv) with argument _const(COLOR_ARRAY_POINTER)
.SH SEE ALSO 
_C_ no queries or gets listed above, alphabetize commands,
_C_ seperate with commas not .br. no command appears in the associated gets
_C_ as well as in SEE ALSO.
_cmnd(ArrayElement),
_cmnd(DrawArrays),
_cmnd(DrawElements),
_cmnd(EdgeFlagPointer),
_cmnd(Enable),
_cmnd(GetPointerv),
_cmnd(IndexPointer),
_cmnd(InterleavedArrays),
_cmnd(NormalPointer),
_cmnd(PopClientAttrib),
_cmnd(PushClientAttrib),
_cmnd(TexCoordPointer),
_cmnd(VertexPointer)
