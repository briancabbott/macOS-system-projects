_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(BindTexture,bind a named texture to a texturing target)
_names(BindTexture)
.SH PARAMETERS
_phead(_param1)
Specifies the target to which the texture is bound.
Must be either
_const(TEXTURE_1D),
_const(TEXTURE_2D), or
_const(TEXTURE_3D).
_phead(_param2)
Specifies the name of a texture. 
.SH DESCRIPTION
_cmnd lets you create or use a named texture. Calling _cmnd with 
.br
_param1 set to
_const(TEXTURE_1D), _const(TEXTURE_2D), _const(TEXTURE_3D) and _param2
set to the name
of the newtexture binds the texture name to the target.  
When a texture is bound to a target, the previous binding for that
target is automatically broken.
.P
Texture names are unsigned integers. The value zero is reserved to
represent the default texture for each texture target.
Texture names and the corresponding texture contents are local to
the shared display-list space (see _cmnd(XCreateContext)) of the current
GL rendering context;
two rendering contexts share texture names only if they
also share display lists.
.P
You may use _cmnd(GenTextures) to generate a set of new texture names.
.P
When a texture is first bound, it assumes the dimensionality of its
target:  A texture first bound to _const(TEXTURE_1D) becomes
one-dimensional, and a texture first bound to _const(TEXTURE_2D) becomes
two-dimensional, and a texture first bound to _const(TEXTURE_3D) becomes
a three-dimensional texture. The state of a one-dimensional texture
immediately after it is first bound is equivalent to the state of the
default _const(TEXTURE_1D) at GL initialization, and similarly for 
two-, and three-dimensional textures.
.P
While a texture is bound, GL operations on the target to which it is
bound affect the bound texture, and queries of the target to which it
is bound return state from the bound texture. If texture mapping of
the dimensionality of the target to which a texture is bound is
active, the bound texture is used.
In effect, the texture targets become aliases for the textures currently
bound to them, and the texture name zero refers to the default textures
that were bound to them at initialization.
.P
A texture binding created with _cmnd remains active until a different
texture is bound to the same target, or until the bound texture is
deleted with _cmnd(DeleteTextures).
.P
Once created, a named texture may be re-bound to the target of the
matching dimensionality as often as needed.
It is usually much faster to use _cmnd to bind an existing named
texture to one of the texture targets than it is to reload the texture image
using _cmnd(TexImage1D), _cmnd(TexImage2D), or _cmnd(TexImage3D).
For additional control over performance, use
_cmnd(PrioritizeTextures).
.P
_cmnd is included in display lists.
.SH NOTES
_cmnd is available only if the GL version is 1.1 or greater.
.SH ERRORS
_const(INVALID_ENUM) is generated if _param1 is not one of the allowable
values.
.P
_const(INVALID_OPERATION) is generated if _param2 has a dimensionality
that doesn't match that of _param1.
.P
_const(INVALID_OPERATION) is generated if _cmnd is executed
between the execution of _cmnd(Begin) and the corresponding
execution of _cmnd(End).
.SH ASSOCIATED GETS
_cmnd(Get) with argument _const(TEXTURE_BINDING_1D)
.br
_cmnd(Get) with argument _const(TEXTURE_BINDING_2D)
.br
_cmnd(Get) with argument _const(TEXTURE_BINDING_3D)
.SH SEE ALSO
_cmnd(AreTexturesResident),
_cmnd(DeleteTextures),
_cmnd(GenTextures),
_cmnd(Get),
.br
_cmnd(GetTexParameter),
_cmnd(IsTexture),
_cmnd(PrioritizeTextures),
_cmnd(TexImage1D),
_cmnd(TexImage2D),
_cmnd(TexParameter)
