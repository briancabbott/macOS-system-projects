_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,tbl)_C_
_header(CopyConvolutionFilter2D,copy pixels into a two-dimensional convolution filter)
_names(CopyConvolutionFilter2D)
_define(@<__target>@,@<_param1>@)_C_
_define(@<__internalformat>@,@<_param2>@)_C_
_define(@<__x>@,@<_param3>@)_C_
_define(@<__y>@,@<_param4>@)_C_
_define(@<__width>@,@<_param5>@)_C_
_define(@<__height>@,@<_param6>@)_C_
.SH PARAMETERS
_phead(__target)
Must be _const(CONVOLUTION_2D).
_phead(__internalformat)
The internal format of the convolution filter kernel.
The allowable values are
_const(ALPHA),
_const(ALPHA4),
_const(ALPHA8),
_const(ALPHA12),
_const(ALPHA16),
_const(LUMINANCE),
_const(LUMINANCE4),
_const(LUMINANCE8),
_const(LUMINANCE12),
_const(LUMINANCE16),
_const(LUMINANCE_ALPHA),
_const(LUMINANCE4_ALPHA4),
_const(LUMINANCE6_ALPHA2),
_const(LUMINANCE8_ALPHA8),
_const(LUMINANCE12_ALPHA4),
_const(LUMINANCE12_ALPHA12),
_const(LUMINANCE16_ALPHA16),
_const(INTENSITY),
_const(INTENSITY4),
_const(INTENSITY8),
_const(INTENSITY12),
_const(INTENSITY16),
_const(R3_G3_B2),
_const(RGB),
_const(RGB4),
_const(RGB5),
_const(RGB8),
_const(RGB10),
_const(RGB12),
_const(RGB16),
_const(RGBA),
_const(RGBA2),
_const(RGBA4),
_const(RGB5_A1),
_const(RGBA8),
_const(RGB10_A2),
_const(RGBA12), or
_const(RGBA16).
_phead(__x __y)
The window space coordinates of the lower-left coordinate of the
pixel array to copy.
_phead(__width)
The width of the pixel array to copy.
_phead(__height)
The height of the pixel array to copy.
.SH DESCRIPTION
_cmnd defines a two-dimensional convolution filter kernel with pixels
from the current _const(READ_BUFFER) (rather than from main memory, 
as is the case for _cmnd(ConvolutionFilter2D)).
.sp
The screen-aligned pixel rectangle with lower-left corner at (__x,\ __y),
width __width and height __height
is used to define the convolution filter. If any pixels within this
region are 
outside the window that is associated with the GL context, the 
values obtained for those pixels are undefined.
.sp
The pixels in the rectangle are processed 
exactly as if _cmnd(ReadPixels) had been called with \f2format\fP
set to RGBA, but the process stops just before final conversion.  
The R, G, B, and A components of each pixel are next scaled by the four
2D _const(CONVOLUTION_FILTER_SCALE) parameters and biased by the
four 2D _const(CONVOLUTION_FILTER_BIAS) parameters.
(The scale and bias parameters are set by _cmnd(ConvolutionParameter)
using the _const(CONVOLUTION_2D) target and the names
_const(CONVOLUTION_FILTER_SCALE) and _const(CONVOLUTION_FILTER_BIAS).
The parameters themselves are vectors of four values that are applied to red,
green, blue, and alpha, in that order.)
The R, G, B, and A values are not clamped to [0,1] at any time during this
process.
.sp
Each pixel is then converted to the internal format specified by
__internalformat.
This conversion simply maps the component values of the pixel (R, G, B,
and A) to the values included in the internal format (red, green, blue,
alpha, luminance, and intensity).  The mapping is as follows:
.sp
.TS
center;
lb cb cb cb cb cb cb
l c c c c c c.
_
Internal Format	Red	Green	Blue	Alpha	Luminance	Intensity
_
_const(ALPHA)				A
_const(LUMINANCE)				R
_const(LUMINANCE_ALPHA)			A	R
_const(INTENSITY)						R
_const(RGB)	R	G	B
_const(RGBA)	R	G	B	A
_
.TE
.sp
The red, green, blue, alpha, luminance, and/or intensity components of
the resulting pixels are stored in floating-point rather than integer
format.
.sp
Pixel ordering is such that lower x screen coordinates correspond to 
lower \f2i\fP filter image coordinates, and lower y screen coordinates 
correspond to lower \f2j\fP filter image coordinates.  
.PP
Note that after a convolution is performed, the resulting color
components are also scaled by their corresponding
_const(POST_CONVOLUTION_c_SCALE) parameters and biased by their
corresponding _const(POST_CONVOLUTION_c_BIAS) parameters (where
\f2c\fP takes on the values \f3RED\fP, \f3GREEN\fP, \f3BLUE\fP, and
\f3ALPHA\fP).
These parameters are set by _cmnd(PixelTransfer).
.SH NOTES
_cmnd is present only if _arbstring(imaging) is returned when _cmnd(GetString)
is called with an argument of _const(EXTENSIONS).
.SH ERRORS
_const(INVALID_ENUM) is generated if __target is not
_const(CONVOLUTION_2D).
.P
_const(INVALID_ENUM) is generated if __internalformat is not one of the
allowable values.
.P
_const(INVALID_VALUE) is generated if __width is less than zero or greater
than the maximum supported value.
This value may be queried with _cmnd(GetConvolutionParameter)
using target _const(CONVOLUTION_2D) and name
_const(MAX_CONVOLUTION_WIDTH).
.P
_const(INVALID_VALUE) is generated if __height is less than zero or greater
than the maximum supported value.
This value may be queried with _cmnd(GetConvolutionParameter)
using target _const(CONVOLUTION_2D) and name
_const(MAX_CONVOLUTION_HEIGHT).
.P
_const(INVALID_OPERATION) is generated if _cmnd is executed
between the execution of _cmnd(Begin) and the corresponding
execution of _cmnd(End).
.SH ASSOCIATED GETS
_cmnd(GetConvolutionParameter), _cmnd(GetConvolutionFilter)
.SH SEE ALSO
_cmnd(ConvolutionFilter2D),
_cmnd(ConvolutionParameter),
_cmnd(PixelTransfer)
