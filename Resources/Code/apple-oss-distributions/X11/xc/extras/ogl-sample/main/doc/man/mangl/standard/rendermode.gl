_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(RenderMode,set rasterization mode)
_names(RenderMode)
.SH PARAMETERS
_phead(_param1)
Specifies the rasterization mode.
Three values are accepted:
_const(RENDER),
_const(SELECT), and
_const(FEEDBACK).
The initial value is _const(RENDER).
.SH DESCRIPTION
_cmnd sets the rasterization mode.
It takes one argument,
_param1,
which can assume one of three predefined values: 
.TP 16
_const(RENDER)
Render mode. Primitives are rasterized,
producing pixel fragments,
which are written into the frame buffer.
This is the normal mode
and also the default mode.
.TP
_const(SELECT) 
Selection mode.
No pixel fragments are produced,
and no change to the frame buffer contents is made.
Instead,
a record of the names of primitives that would have been drawn
if the render mode had been _const(RENDER) is returned in a select buffer,
which must be created (see _cmnd(SelectBuffer)) before selection mode 
is entered.
.TP
_const(FEEDBACK)
Feedback mode.
No pixel fragments are produced,
and no change to the frame buffer contents is made.
Instead,
the coordinates and attributes of vertices that would have been drawn
if the render mode had been _const(RENDER) is returned in a feedback buffer,
which must be created (see _cmnd(FeedbackBuffer)) before feedback mode
is entered.
.P
The return value of _cmnd is determined by the render mode at the time
_cmnd is called,
rather than by _param1.
The values returned for the three render modes are as follows:
.TP 16
_const(RENDER)
0.
.TP
_const(SELECT)
The number of hit records transferred to the select buffer.
.TP
_const(FEEDBACK)
The number of values (not vertices) transferred to the feedback buffer.
.P
See the _cmnd(SelectBuffer) and _cmnd(FeedbackBuffer) reference pages for
more details concerning selection and feedback operation.
.SH NOTES
If an error is generated,
_cmnd returns 0 regardless of the current render mode.
.SH ERRORS
_const(INVALID_ENUM) is generated if _param1 is not one of the three
accepted values.
.P
_const(INVALID_OPERATION) is generated if _cmnd(SelectBuffer) is called
while the render mode is _const(SELECT),
or if _cmnd is called with argument _const(SELECT) before
_cmnd(SelectBuffer) is called at least once.
.P
_const(INVALID_OPERATION) is generated if _cmnd(FeedbackBuffer) is called
while the render mode is _const(FEEDBACK),
or if _cmnd is called with argument _const(FEEDBACK) before
_cmnd(FeedbackBuffer) is called at least once.
.P
_const(INVALID_OPERATION) is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
.SH ASSOCIATED GETS
_cmnd(Get) with argument _const(RENDER_MODE)
.SH SEE ALSO
_cmnd(FeedbackBuffer),
_cmnd(InitNames),
_cmnd(LoadName),
_cmnd(PassThrough),
_cmnd(PushName),
_cmnd(SelectBuffer)
