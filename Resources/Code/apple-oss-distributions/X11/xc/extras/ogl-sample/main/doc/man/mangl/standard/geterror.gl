_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,tbl|eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(GetError, return error information)
_names(GetError)
.SH DESCRIPTION
_cmnd returns the value of the error flag.
Each detectable error is assigned a numeric code and symbolic name.
When an error occurs,
the error flag is set to the appropriate error code value.
No other errors are recorded until _cmnd is called,
the error code is returned,
and the flag is reset to _const(NO_ERROR).
If a call to _cmnd returns _const(NO_ERROR),
there has been no detectable error since the last call to _cmnd,
or since the GL was initialized.
.P
To allow for distributed implementations,
there may be several error flags.
If any single error flag has recorded an error,
the value of that flag is returned
and that flag is reset to _const(NO_ERROR)
when _cmnd is called.
If more than one flag has recorded an error,
_cmnd returns and clears an arbitrary error flag value.
Thus, _cmnd should always be called in a loop,
until it returns _const(NO_ERROR),
if all error flags are to be reset.
.P
Initially, all error flags are set to _const(NO_ERROR).
.P
The following errors are currently defined:
.TP 30
_const(NO_ERROR)
No error has been recorded.
The value of this symbolic constant is guaranteed to be 0.
.TP
_const(INVALID_ENUM)
An unacceptable value is specified for an enumerated argument.
The offending command is ignored,
and has no other side effect than to set the error flag.
.TP
_const(INVALID_VALUE)
A numeric argument is out of range.
The offending command is ignored,
and has no other side effect than to set the error flag.
.TP
_const(INVALID_OPERATION)
The specified operation is not allowed in the current state.
The offending command is ignored,
and has no other side effect than to set the error flag.
.TP
_const(STACK_OVERFLOW)
This command would cause a stack overflow.
The offending command is ignored,
and has no other side effect than to set the error flag.
.TP
_const(STACK_UNDERFLOW)
This command would cause a stack underflow.
The offending command is ignored,
and has no other side effect than to set the error flag.
.TP
_const(OUT_OF_MEMORY)
There is not enough memory left to execute the command.
The state of the GL is undefined,
except for the state of the error flags,
after this error is recorded.
.TP
_const(TABLE_TOO_LARGE)
The specified table exceeds the implementation's maximum supported table 
size.  The offending command is ignored, and has no other side effect
than to set the error flag.
.P
When an error flag is set,
results of a GL operation are undefined only if _const(OUT_OF_MEMORY)
has occurred.
In all other cases,
the command generating the error is ignored and has no effect on the GL state
or frame buffer contents.
If the generating command returns a value, it returns 0.  
If _cmnd itself generates an error, it returns 0. 
.SH NOTES
_const(TABLE_TOO_LARGE) was introduced in GL version 1.2.
.SH ERRORS
_const(INVALID_OPERATION) is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
In this case _cmnd returns 0.
