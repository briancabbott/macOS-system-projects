_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_C_ A real line follows.
_define(_filters,tbl|eqn)_C_ 
_C_      eqn is automatically replaced with neqn for nroff 
_C_ Use GL not OpenGL
_C_ Don't change the ordering of the main headers.
_C_ C specification (or fortran) is handled automatically
_C_ .TH is automatically added to the top of this file.
_C_ Below, use current tense, active do not capitalize the first word and dont
_C_ use a period.
_header(DrawRangeElements, render primitives from array data)
_names(DrawRangeElements)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1)
Specifies what kind of primitives to render.
Symbolic constants
_const(POINTS),
_const(LINE_STRIP),
_const(LINE_LOOP),
_const(LINES),
_const(TRIANGLE_STRIP),
_const(TRIANGLE_FAN),
_const(TRIANGLES),
_const(QUAD_STRIP),
_const(QUADS),
and _const(POLYGON) are accepted. 
_phead(_param2)
Specifies the minimum array index contained in _param6(1).
_phead(_param3)
Specifies the maximum array index contained in _param6(1).
_phead(_param4)
Specifies the number of elements to be rendered.
_phead(_param5)
Specifies the type of the values in _param4. Must be one of
_const(UNSIGNED_BYTE), _const(UNSIGNED_SHORT), or
_const(UNSIGNED_INT). 
_phead(_param6)
Specifies a pointer to the location where the indices are stored. 
.SH DESCRIPTION
_cmnd is a restricted form of _cmnd(DrawElements). _param1, _param2, _param3,
and _param4 match the corresponding arguments to _cmnd(DrawElements), with
the additional constraint that all values in the arrays _param4 must lie
between _param2 and _param3, inclusive.
.P
Implementations denote recommended maximum amounts of vertex and
.br
index data,
which may be queried by calling _cmnd(Get) with argument 
_const(MAX_ELEMENTS_VERTICES) and _const(MAX_ELEMENTS_INDICES).
If $_eqnparam3 ~-~ _eqnparam2 ~+~ 1$ is greater than the value of
_const(MAX_ELEMENTS_VERTICES), or if _param4 is greater than the value of
_const(MAX_ELEMENTS_INDICES), then the call may operate at reduced
performance.  There is no requirement that all vertices in the range
[_param2,\ _param3] be referenced.  However, the implementation may
partially process unused vertices, reducing performance from what could 
be achieved with an optimal index set.
.P
When _cmnd is called, it uses _param2 sequential elements from an
enabled array, starting at _param4 to construct a sequence of
geometric primitives. _param1 specifies what kind of primitives are
constructed, and how the array elements construct these primitives. If
more than one array is enabled, each is used. If
_const(VERTEX_ARRAY) is not enabled, no geometric primitives are
constructed.
.P
Vertex attributes that are modified by _cmnd have an
unspecified value after _cmnd returns. For example, if
_const(COLOR_ARRAY) is enabled, the value of the current color is
undefined after _cmnd executes. Attributes that aren't
modified maintain their previous values.
.SH NOTES
_cmnd is available only if the GL version is 1.2 or greater.
.P
_cmnd is included in display lists. If _cmnd is entered into a
display list, 
the necessary array data (determined by the array pointers and
enables) is also 
entered into the display list. Because the array pointers and
enables are client-side state, their values affect display lists
when the lists are created, not when the lists are executed.
.SH ERRORS
It is an error for indices to lie outside the range [_param2,\ _param3],
but implementations may not check for this situation. Such indices
cause implementation-dependent behavior.
.P
_const(INVALID_ENUM) is generated if _param1 is not an accepted value.
.P
_const(INVALID_VALUE) is generated if _param4 is negative.
.P
_const(INVALID_VALUE) is generated if _param3 $<$ _param2.
.P
_const(INVALID_OPERATION) is generated if _cmnd is executed between
the execution of _cmnd(Begin) and the corresponding _cmnd(End).
.SH ASSOCIATED GETS
_cmnd(Get) with argument _const(MAX_ELEMENTS_VERTICES)
.P
_cmnd(Get) with argument _const(MAX_ELEMENTS_INDICES)
.SH SEE ALSO 
_cmnd(ArrayElement),
_cmnd(ColorPointer),
_cmnd(DrawArrays),
_cmnd(DrawElements),
_cmnd(EdgeFlagPointer),
_cmnd(GetPointerv),
_cmnd(IndexPointer),
_cmnd(InterleavedArrays),
_cmnd(NormalPointer),
_cmnd(TexCoordPointer),
_cmnd(VertexPointer)
