# Top level -*- makefile -*- fragment for GNU Objective-C
#   Copyright (C) 1997, 1998, 2000, 2001 Free Software Foundation, Inc.

#This file is part of GNU CC.

#GNU CC is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#GNU CC is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU CC; see the file COPYING.  If not, write to
#the Free Software Foundation, 59 Temple Place - Suite 330,
#Boston, MA 02111-1307, USA.

# This file provides the language dependent support in the main Makefile.
# Each language makefile fragment must provide the following targets:
#
# foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,
# foo.info, foo.dvi,
# foo.install-normal, foo.install-common, foo.install-info, foo.install-man,
# foo.uninstall,
# foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean,
# foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4
#
# where `foo' is the name of the language.
#
# It should also provide rules for:
#
# - making any compiler driver (eg: g++)
# - the compiler proper (eg: cc1plus)
# - define the names for selecting the language in LANGUAGES.

#
# Define the names for selecting Objective-C in LANGUAGES.
OBJC objc: cc1obj$(exeext)
OBJECTIVE-C objective-c: cc1obj$(exeext)

# Tell GNU make to ignore these if they exist.
.PHONY: objective-c objc ObjC

# Use maximal warnings for this front end.
objc-warn = $(STRICT_WARN)

# APPLE LOCAL begin PFE
ifeq ($(PFE),yes)
PFE_OBJC_OBJS      = pfe/objc-freeze-thaw.o 
OBJC_FREEZE_THAW_H = $(PFE_DIR)/objc-freeze-thaw.h
else
PFE_OBJC_OBJS      =
OBJC_FREEZE_THAW_H =
endif
# APPLE LOCAL end PFE

# APPLE LOCAL begin order files  ilr
ifeq ($(ORDER_FILES),yes)
CC1OBJ_ORDER_FLAGS = `if [ -f $(srcdir)/../order-files/cc1obj.order ]; then \
		        echo -sectorder __TEXT __text $(srcdir)/../order-files/cc1obj.order -e start ; fi`
else
CC1OBJ_ORDER_FLAGS =
endif
# APPLE LOCAL end order files  ilr

# Language-specific object files for Objective C.
# APPLE LOCAL new tree dump
# APPLE LOCAL debugging
# APPLE LOCAL PFE
# APPLE LOCAL separate outputdir
OBJC_OBJS = objc/objc-lang.o objc/objc-parse.o objc/objc-act.o $(C_AND_OBJC_OBJS) \
 objc/objc-idebug.o objc/objc-dmp-tree.o $(PFE_OBJC_OBJS)

# APPLE LOCAL order files  ilr
cc1obj$(exeext): $(OBJC_OBJS) $(BACKEND) $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(OBJC_OBJS) $(BACKEND) $(LIBS) \
	$(CC1OBJ_ORDER_FLAGS)

# Objective C language specific files.

# APPLE LOCAL separate outputdir
objc/objc-lang.o : $(srcdir)/objc/objc-lang.c \
   $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(srcdir)/c-tree.h \
   $(srcdir)/c-common.h $(srcdir)/toplev.h $(srcdir)/objc/objc-act.h \
   $(srcdir)/langhooks.h $(srcdir)/langhooks-def.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/objc \
	-c $(srcdir)/objc/objc-lang.c $(OUTPUT_OPTION)

# APPLE LOCAL parsedir
# APPLE LOCAL separate outputdir
objc/objc-parse.o : $(parsedir)/objc/objc-parse.c \
   $(CONFIG_H) $(TREE_H) $(srcdir)/toplev.h $(srcdir)/ggc.h \
   $(srcdir)/c-lex.h $(srcdir)/c-tree.h $(srcdir)/c-common.h \
   $(srcdir)/input.h $(srcdir)/flags.h $(srcdir)/output.h \
   $(srcdir)/objc/objc-act.h $(SYSTEM_H) $(CPPLIB_H)
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/objc \
	-c $(parsedir)/objc/objc-parse.c $(OUTPUT_OPTION)

# APPLE LOCAL parsedir
po-generated: $(parsedir)/objc/objc-parse.c

# APPLE LOCAL parsedir
$(parsedir)/objc/objc-parse.c : $(parsedir)/objc/objc-parse.y
	cd $(parsedir)/objc; \
	if $(BISON) $(BISONFLAGS) -o op$$$$.c objc-parse.y ; then \
	  test -f op$$$$.output && mv -f op$$$$.output objc-parse.output ; \
	  mv -f op$$$$.c objc-parse.c ; \
	else \
	  rm -f op$$$$.* ; \
	  false ; \
	fi

# APPLE LOCAL parsedir
$(parsedir)/objc/objc-parse.y: c-parse.in
	echo '/*WARNING: This file is automatically generated!*/' >tmp-objc-prs.y
	sed -e "/^ifc$$/,/^end ifc$$/d" \
	  -e "/^ifobjc$$/d" -e "/^end ifobjc$$/d" \
	  $(srcdir)/c-parse.in >>tmp-objc-prs.y
	$(SHELL) $(srcdir)/move-if-change tmp-objc-prs.y $(parsedir)/objc/objc-parse.y

# APPLE LOCAL indexing
# APPLE LOCAL separate outputdir
objc/objc-act.o : $(srcdir)/objc/objc-act.c \
   $(CONFIG_H) $(TREE_H) $(RTL_H) $(SYSTEM_H) $(EXPR_H) $(TARGET_H) \
   $(srcdir)/c-tree.h $(srcdir)/c-common.h $(srcdir)/c-lex.h \
   $(srcdir)/toplev.h $(srcdir)/flags.h $(srcdir)/objc/objc-act.h \
   $(srcdir)/input.h $(srcdir)/function.h $(srcdir)/output.h $(srcdir)/debug.h \
   $(srcdir)/langhooks.h $(srcdir)/langhooks-def.h $(srcdir)/genindex.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/objc \
	-c $(srcdir)/objc/objc-act.c $(OUTPUT_OPTION)

# APPLE LOCAL debugging
# APPLE LOCAL separate outputdir
# Suppress all warnings explicitly for the idebug builds since there can be
# many when, and if, -traditional-cpp is used.
objc/objc-idebug.o : $(srcdir)/objc/objc-idebug.c $(CONFIG_H) $(TREE_H) $(C_TREE_H) \
   $(RTL_H) $(srcdir)/objc/objc-act.h flags.h c-idebug.c idebug.c
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/objc \
	-c -w $(srcdir)/objc/objc-idebug.c $(OUTPUT_OPTION)

# APPLE LOCAL new tree dump
# APPLE LOCAL separate outputdir
objc/objc-dmp-tree.o: objc/objc-dmp-tree.c c-dmp-tree.c dmp-tree.c \
   $(CONFIG_H) $(TREE_H) $(SYSTEM_H) $(srcdir)/c-common.h \
   $(srcdir)/objc/objc-act.h \
   $(srcdir)/c-tree.h \
   $(srcdir)/dmp-tree.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/objc \
	-c $(srcdir)/objc/objc-dmp-tree.c $(OUTPUT_OPTION)

# APPLE LOCAL PFE
objc/objc-act.o : config.h $(PFE_H) $(OBJC_FREEZE_THAW_H)
objc/objc-lang.o: config.h $(OBJC_FREEZE_THAW_H)

pfe/objc-freeze-thaw.o: $(PFE_DIR)/objc-freeze-thaw.c $(PFE_H) $(PFE_HEADER_H) \
   $(PFE_DIR)/c-freeze-thaw.c $(PFE_DIR)/cp-freeze-thaw.c $(GCONFIG_H) $(SYSTEM_H) \
   $(OBJC_FREEZE_THAW_H) $(PFE_DIR)/structs-to-check.def
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) \
		$(INCLUDES) -DPFE \
		$(PFE_DIR)/objc-freeze-thaw.c $(OUTPUT_OPTION)

#
# Build hooks:

objc.all.build:
objc.all.cross:
objc.start.encap:
objc.rest.encap:

objc.info:
objc.dvi:
objc.generated-manpages:

#
# Install hooks:
# cc1obj is installed elsewhere as part of $(COMPILERS).

objc.install-normal:

objc.install-common:

objc.install-info:

objc.install-man:

objc.uninstall:
#
# Clean hooks:
# A lot of the ancillary files are deleted by the main makefile.
# We just have to delete files specific to us.
objc.mostlyclean:
	-rm -f tmp-objc-prs.y
	-rm -f objc/*$(objext) objc/xforward objc/fflags
objc.clean: objc.mostlyclean
	-rm -rf objc-headers
objc.distclean:
	-rm -f objc/Makefile objc/Make-host objc/Make-target
	-rm -f objc/config.status objc/config.cache
	-rm -f objc-parse.output
objc.extraclean:
# APPLE LOCAL: parsedir
objc.maintainer-clean:
	-rm -f $(parsedir)/objc/objc-parse.y
	-rm -f $(parsedir)/objc/objc-parse.c $(parsedir)/objc/objc-parse.output

#
# Stage hooks:

objc.stage1: stage1-start
	-mv objc/*$(objext) stage1/objc
	-mv cc1obj$(exeext) stage1
objc.stage2: stage2-start
	-mv objc/*$(objext) stage2/objc
	-mv cc1obj$(exeext) stage2
objc.stage3: stage3-start
	-mv objc/*$(objext) stage3/objc
	-mv cc1obj$(exeext) stage3
objc.stage4: stage4-start
	-mv objc/*$(objext) stage4/objc
	-mv cc1obj$(exeext) stage4
