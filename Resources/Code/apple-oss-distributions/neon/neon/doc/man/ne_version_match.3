'\" t
.\"     Title: ne_version_match
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.74.3 <http://docbook.sf.net/>
.\"      Date: 13 September 2009
.\"    Manual: neon API reference
.\"    Source: neon 0.29.0
.\"  Language: English
.\"
.TH "NE_VERSION_MATCH" "3" "13 September 2009" "neon 0.29.0" "neon API reference"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
ne_version_match, ne_version_string \- library versioning
.SH "SYNOPSIS"
.sp
.ft B
.nf
#include <ne_utils\&.h>
.fi
.ft
.HP \w'int\ ne_version_match('u
.BI "int ne_version_match(int\ " "major" ", int\ " "minor" ");"
.HP \w'const\ char\ *ne_version_string('u
.BI "const char *ne_version_string(void);"
.SH "DESCRIPTION"
.PP
The
\fBne_version_match\fR
function returns non\-zero if the library version is not of major version
\fImajor\fR, or the minor version is less than
\fIminor\fR\&. For neon versions 0\&.x, every minor version is assumed to be incompatible with every other minor version\&.
.PP
The
\fBne_version_string\fR
function returns a string giving the library version\&.
.SH "EXAMPLES"
.PP
To require neon 1\&.x, version 1\&.2 or later:
.sp
.if n \{\
.RS 4
.\}
.nf
if (ne_version_match(1, 2)) {
    printf("Library version out of date: 1\&.2 required, found %s\&.",
           ne_version_string());
    exit(1);
}
.fi
.if n \{\
.RE
.\}
.SH "AUTHOR"
.PP
\fBJoe Orton\fR <\&neon@lists.manyfish.co.uk\&>
.RS 4
Author.
.RE
.SH "COPYRIGHT"
.br
