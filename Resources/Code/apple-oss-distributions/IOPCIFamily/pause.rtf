{\rtf1\ansi\ansicpg1252\cocoartf1187
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww23820\viewh24400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs30 \cf0 PCI Pause\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ri-746\pardirnatural

\b0\fs24 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 This document assumes familiarity with the OS X power management APIs.\
\
Drivers using an IOPCIDevice as a provider, where the IOPCIDevice is hot pluggable, are expected to be compatible with new support for relocating PCI resources after driver ::start(). This support will be indicated with a property similar to kIOPCITunnelCompatibleKey, kIOPCIPauseCompatibleKey. Boolean true for supported.\
\

\f1\fs20 #define kIOPCIPauseCompatibleKey        "IOPCIPauseCompatible"\

\f0\fs24 \
The system will relocate resources for a running driver only:\
\
- if the device is already in a state other than kIOPCIDeviceOnState, or\
\
- after placing the device into the new power state kIOPCIDevicePausedState, with the standard power management APIs. This means the driver can implement state changes synchronously or asynchronously.\
\
- the new IOPCIDevice power states are as below (no existing power state has changed, so the new state is out of order). Drivers should use only the capability bits of power states, rather than the state order. The new paused state has capability bit 
\f1\fs20 kIOPMConfigRetained.
\f0\fs24 \
\

\f1\fs20 enum \{\
    kIOPCIDevicePowerStateCount = 4,\
    kIOPCIDeviceOffState        = 0,\
    kIOPCIDeviceDozeState       = 1,\
    kIOPCIDeviceOnState         = 2,\
    kIOPCIDevicePausedState     = 3,\
\};\

\f0\fs24 \
\
- for your driver, a sample power state table should look like:\
\

\f1\fs20 enum \{\
    kYourDriverPowerStateCount      = 4,\
    kYourDriverPowerOffState        = 0,\
    kYourDriverPowerDozeState       = 1,\
    kYourDriverPowerPausedState     = 2,\
    kYourDriverPowerOnState         = 3,\
\};\

\f0\fs24 \

\f1\fs20 static const IOPMPowerState powerStates[kYourDriverPowerStateCount] = \{\
\
    // version, capabilityFlags, outputPowerCharacter, inputPowerRequirement, staticPower, stateOrder\
	\{ kIOPMPowerStateVersion1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 \},\
\
	\{ kIOPMPowerStateVersion1, 0, kIOPMSoftSleep, kIOPMSoftSleep, 0, 0, 0, 0, 0, 0, 0, 0 \},\
\
	\{ kIOPMPowerStateVersion1, kIOPMConfigRetained, kIOPMConfigRetained, kIOPMConfigRetained, 0, 0, 0, 0, 0, 0, 0, 0 \}\
\
	\{ kIOPMPowerStateVersion1, kIOPMPowerOn | kIOPMUsable, kIOPMPowerOn, kIOPMPowerOn, 0, 0, 0, 0, 0, 0, 0, 0 \},\
\};\

\f0\fs24 \
\
When a driver for a IOPCIDevice provider registers for power mgt it must provide its own power state definitions to indicate which of its power states will be used for any power state of the IOPCIDevice. The inputPowerRequirement field of these power states will match masks of the PCI power states outputPowerCharacter field.\
\
An unmodified driver will be sent to its off state during pause since the pause state does not include the kIOPMPowerOn flag. Any clients of the driver in the power mgt hierarchy will then also have to change their states to match.\
\
Modified drivers can support pause explicitly by adding a power state with inputPowerRequirement kIOPMConfigRetained which will get selected by power mgt in the pause state. The outputPowerCharacter of the drivers new power state will then dictate what the drivers power mgt clients will see. Depending on this flag, clients of your driver may or may not change states.\
\
The driver pause state should be designed to be entered/exited as quickly as possible to avoid disrupting service. Since the hardware remains powered, running all of the same code as the regular kIOPCIDeviceOff/OnState transition is discouraged since it will be slower.\
\

\b\fs26 What happens during pause?\

\b0\fs24 \
The device is assumed to be quiesced due to the pause state. It should not:\
\
- be accessed by any code using memory mapped, I/O or config space transactions\
- be generating any interrupt, MSI or pin based\
- be generating any DMA \
- be the target of any DMA\
\
This would also be true of the non-kIOPCIDeviceOnState power states so the driver state should be very similar. Since the system state is not S3, the hardware will not receive the PCI broadcast messages such as PME_turn_off.\
\

\b During pause reconfiguration, the following may be changed:\

\b0 \
- device BAR registers\
\
- the devices bus number\
\
- registry properties reflecting these values ("ranges", "assigned-addresses", "reg")\
\
- device MSI block values for address and value, but not the number of MSIs allocated\
\

\b \
\
The following will not change:\

\b0 \
- the PCI power management configuration block registers of the device (ie. the device will not be put into runtime D3).\
\
- the virtual map addresses of BARs. Mappings created by the driver with IOPCIDevice::mapDeviceMemoryWithRegister/Index() for MMIO access to hardware, are remapped with the same virtual address & the new physical address\
\
- any other configuration registers\
\
- any BAR resource present at pause must be reallocated (ie. a device can't lose resources \
across reconfiguration)\
\
- the registry hierarchy of the device\
\
- the number or kind of interrupt assignments (ie. shared or MSI interrupts)\
\
The majority of drivers have few to no dependencies on the items above being changed. If they do, while entering the kIOPCIDeviceOnState (from any other state), these dependencies should be updated to the current configuration of the device.\
}