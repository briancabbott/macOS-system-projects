#!/bin/sh

#### make-dist: create an Emacs distribution tar file from the current
#### source tree.  This basically creates a duplicate directory
#### structure, and then hard links into it only those files that should
#### be distributed.  This means that if you add a file with an odd name,
#### you should make sure that this script will include it.

# Copyright (C) 1995, 1997, 1998, 2000, 2001, 2002, 2003, 2004, 2005,
#   2006, 2007  Free Software Foundation, Inc.
#
# This file is part of GNU Emacs.
#
# GNU Emacs is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# GNU Emacs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Emacs; see the file COPYING.  If not, write to the
# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301, USA.

progname="$0"

### Exit if a command fails.
#set -e

### Print out each line we read, for debugging's sake.
#set -v

LANGUAGE=C
LC_ALL=C
LC_MESSAGES=
LANG=
export LANGUAGE LC_ALL LC_MESSAGES LANG

## Don't restrict access to any files.
umask 0

update=yes
check=yes
clean_up=no
make_tar=no
newer=""

while [ $# -gt 0 ]; do
  case "$1" in
    ## This option tells make-dist to delete the staging directory
    ## when done.  It is useless to use this unless you make a tar file.
    "--clean-up" )
      clean_up=yes
    ;;
    ## This option tells make-dist to make a tar file.
    "--tar" )
      make_tar=yes
    ;;
    ## This option tells make-dist not to recompile or do analogous things.
    "--no-update" )
      update=no
    ;;
    ## This option says don't check for bad file names, etc.
    "--no-check" )
      check=no
    ;;
    ## This option tells make-dist to make the distribution normally, then
    ## remove all files older than the given timestamp file.  This is useful
    ## for creating incremental or patch distributions.
    "--newer")
      newer="$2"
      new_extension=".new"
      shift
    ;;
    ## This option tells make-dist to use `compress' instead of gzip.
    ## Normally, make-dist uses gzip whenever it is present.
    "--compress")
      default_gzip="compress"
    ;;

    "--snapshot")
      clean_up=yes
      make_tar=yes
      update=no
      check=no
     ;;

    "--help")
      echo "Usage: ${progname} [options]"
      echo ""
      echo "  --clean-up	delete staging directories when done"
      echo "  --compress	use compress instead of gzip"
      echo "  --newer=TIME	don't include files older than TIME"
      echo "  --no-check	don't check for bad file names etc."
      echo "  --no-update	don't recompile or do analogous things"
      echo "  --snapshot	same as --clean-up --no-update --tar --no-check"
      echo "  --tar		make a tar file"
      echo ""
      exit 0
    ;;

    * )
      echo "${progname}: Unrecognized argument: $1" >&2
      exit 1
    ;;
  esac
  shift
done

### Make sure we're running in the right place.
if [ ! -d src -o ! -f src/lisp.h -o ! -d lisp -o ! -f lisp/version.el ]; then
  echo "${progname}: Can't find \`src/lisp.h' and \`lisp/version.el'." >&2
  echo "${progname} must be run in the top directory of the Emacs" >&2
  echo "distribution tree.  cd to that directory and try again." >&2
  exit 1
fi

### Find where to run Emacs.
### (Accept only absolute file names.)
if [ $update = yes ];
then
  unset EMACS_UNIBYTE
  if [ -f src/emacs ];
  then
    EMACS=`pwd`/src/emacs
  else
    case $EMACS in
      /*) ;;
      *)
	if [ ! -f "$EMACS" ]; then
	  echo "$0: You must specify the EMACS environment variable " \
	       "to an absolute file name." 2>&1
	  exit 1
	fi;;
    esac
  fi
fi

### Find out which version of Emacs this is.
shortversion=`grep 'defconst[	 ]*emacs-version' lisp/version.el \
	 | sed -e 's/^.*"\([0-9][0-9]*\.[0-9][0-9]*\).*$/\1/'`
version=`grep 'defconst[	 ]*emacs-version' lisp/version.el \
	 | sed -e 's/^[^"]*"\([^"]*\)".*$/\1/'`
if [ ! "${version}" ]; then
  echo "${progname}: can't find current Emacs version in \`./lisp/version.el'" >&2
  exit 1
fi

echo Version numbers are $version and $shortversion

if [ $update = yes ];
then
  if grep -s "@set EMACSVER  *${shortversion}" ./man/emacs.texi > /dev/null; then
    true
  else
    echo "You must update the version number in \`./man/emacs.texi'"
    sleep 5
  fi
fi

### Make sure we don't already have a directory  emacs-${version}.

emacsname="emacs-${version}${new_extension}"

if [ -d ${emacsname} ]
then
  echo Directory "${emacsname}" already exists >&2
  exit 1
fi

### Make sure the subdirectory is available.
tempparent="make-dist.tmp.$$"
if [ -d ${tempparent} ]; then
  echo "${progname}: staging directory \`${tempparent}' already exists.
Perhaps a previous invocation of \`${progname}' failed to clean up after
itself.  Check that directories whose names are of the form
\`make-dist.tmp.NNNNN' don't contain any important information, remove
them, and try again." >&2
  exit 1
fi

### Find where to run Emacs.
if [ $check = yes ];
then
  ### Check for .elc files with no corresponding .el file.
  ls -1 lisp/[a-zA-Z]*.el lisp/[a-z]*/[a-zA-Z0-9]*.el \
	leim/[a-z]*/[a-z]*.el | sed 's/\.el$/.elc/' > /tmp/el
  ls -1 lisp/[a-zA-Z]*.elc lisp/[a-z]*/[a-zA-Z0-9]*.elc \
	leim/[a-z]*/[a-z]*.elc > /tmp/elc
  bogosities="`comm -13 /tmp/el /tmp/elc`"
  if [ "${bogosities}" != "" ]; then
    echo "The following .elc files have no corresponding .el files:"
    echo "${bogosities}"
  fi
  rm -f /tmp/el /tmp/elc

  ### Check for .el files with no corresponding .elc file.
  ls -1 lisp/[a-zA-Z]*.el lisp/[a-z]*/[a-zA-Z0-9]*.el \
	leim/[a-z]*/[a-z]*.el > /tmp/el
  ls -1 lisp/[a-zA-Z]*.elc lisp/[a-z]*/[a-zA-Z0-9]*.elc \
	leim/[a-z]*/[a-z]*.elc | sed 's/\.elc$/.el/' > /tmp/elc
  losers="`comm -23 /tmp/el /tmp/elc`"
  bogosities=
  for file in $losers; do
    if ! grep -q "no-byte-compile: t" $file; then
      case $file in
	site-init.el | site-load.el | site-start.el | default.el)
	  ;;
	*)
	  bogosities="$file $bogosities"
	  ;;
      esac
    fi
  done
  if [ x"${bogosities}" != x"" ]; then
    echo "The following .el files have no corresponding .elc files:"
    echo "${bogosities}"
  fi
  rm -f /tmp/el /tmp/elc
fi

### Make sure configure is newer than configure.in.
if [ "x`ls -t configure configure.in | sed q`" != "xconfigure" ]; then
  echo "\`./configure.in' is newer than \`./configure'" >&2
  echo "Running autoconf" >&2
  autoconf || { x=$?; echo Autoconf FAILED! >&2; exit $x; }
fi

### Make sure src/config-in.stamp is newer than configure.in.
if [ "x`ls -t src/stamp-h.in configure.in | sed q`" != "xsrc/stamp-h.in" ]; then
  echo "\`./configure.in' is newer than \`./src/stamp-h.in'" >&2
  echo "Running autoheader" >&2
  autoheader || { x=$?; echo Autoheader FAILED! >&2; exit $x; }
  rm -f src/stamp-h.in
  echo timestamp > src/stamp-h.in
fi

if [ $update = yes ];
then
  echo "Updating Info files"
  (cd man; make -f Makefile.in srcdir=. info)
  (cd lispref; make -f Makefile.in srcdir=. info)
  (cd lispintro; make -f Makefile.in SHELL=/bin/sh srcdir=. info VPATH=.)

  echo "Updating finder, custom and autoload data"
  (cd lisp; make updates EMACS="$EMACS")

  if test -f leim/leim-list.el; then
    echo "Updating leim-list.el"
    (cd leim; make leim-list.el EMACS="$EMACS")
  fi

  echo "Recompiling Lisp files"
  $EMACS -batch -f batch-byte-recompile-directory lisp leim
fi

echo "Making lisp/MANIFEST"

(cd lisp;
 files=`echo [!=]*.el | sed -e 's/ subdirs.el / /' -e 's/ default.el / /'`
 for dir in [!=]*; do
  if [ -d $dir ] && [ $dir != term ] && [ $dir != CVS ] && [ $dir != RCS ]
  then
    echo $dir
    thisdir=`echo $dir/[!=]*.el | sed -e 's/ subdirs.el / /'`
    files="$files $thisdir"
  fi
 done
 for file in $files
 do sed -n 's/^;;; //p; q' $file
 done | sort > MANIFEST)

echo "Creating staging directory: \`${tempparent}'"

mkdir ${tempparent}
tempdir="${tempparent}/${emacsname}"

### This trap ensures that the staging directory will be cleaned up even
### when the script is interrupted in mid-career.
if [ "${clean_up}" = yes ]; then
  trap "echo 'Interrupted...cleaning up the staging directory'; rm -rf ${tempparent}; exit 1" 1 2 15
fi

echo "Creating top directory: \`${tempdir}'"
mkdir ${tempdir}

### We copy in the top-level files before creating the subdirectories in
### hopes that this will make the top-level files appear first in the
### tar file; this means that people can start reading the INSTALL and
### README while the rest of the tar file is still unpacking.  Whoopee.
echo "Making links to top-level files"
ln AUTHORS FTP INSTALL README BUGS CONTRIBUTE move-if-change ${tempdir}
ln ChangeLog Makefile.in configure configure.in ${tempdir}
ln config.bat make-dist update-subdirs vpath.sed ${tempdir}
### Copy these files; they're cross-filesystem symlinks.
cp mkinstalldirs ${tempdir}
cp config.sub ${tempdir}
cp config.guess ${tempdir}
cp install-sh ${tempdir}

echo "Updating version number in README"
(cd ${tempdir}
 awk \
   '$1 " " $2 " " $3 " " $4 " " $5 == "This directory tree holds version" { $6 = version; print $0 }
    $1 " " $2 " " $3 " " $4 " " $5 != "This directory tree holds version"' \
   version=${version} README > tmp.README
 mv -f tmp.README README)


echo "Creating subdirectories"
for subdir in lisp site-lisp lispref lispintro \
	      leim leim/CXTERM-DIC leim/MISC-DIC \
	      leim/SKK-DIC leim/ja-dic leim/quail \
	      src src/m src/s src/bitmaps lib-src oldXMenu lwlib \
	      nt nt/inc nt/inc/sys nt/inc/arpa nt/inc/netinet nt/icons \
	      etc etc/e \
	      etc/images etc/images/ezimage etc/images/gnus etc/images/gud \
	      etc/images/icons etc/images/low-color etc/images/mail \
	      etc/images/smilies etc/tree-widget etc/tree-widget/default \
	      etc/tree-widget/folder info man m4 msdos vms mac mac/inc \
	      mac/inc/sys mac/src mac/Emacs.app mac/Emacs.app/Contents \
	      mac/Emacs.app/Contents/MacOS mac/Emacs.app/Contents/Resources \
	      mac/Emacs.app/Contents/Resources/English.lproj
do
  echo "  ${tempdir}/${subdir}"
  mkdir ${tempdir}/${subdir}
done

echo "Making links to \`lisp' and its subdirectories"
### Don't distribute TAGS, =*.el files, site-init.el, site-load.el, or default.el.
(cd lisp
 ln [a-zA-Z]*.el ../${tempdir}/lisp
 ln [a-zA-Z]*.elc ../${tempdir}/lisp
 ln [a-zA-Z]*.dat ../${tempdir}/lisp
 for img in [a-zA-Z]*.xpm [a-zA-Z]*.xbm [a-zA-Z]*.pbm; do
   # If there are no images, the shell won't expand the pattern.
   if [ -f $img ]; then
     ln $img ../${tempdir}/lisp
   fi
 done
 ## simula.el doesn't keep abbreviations in simula.defns any more.
 ## ln [a-zA-Z]*.defns ../${tempdir}/lisp
 ln ChangeLog ChangeLog.*[0-9] ../${tempdir}/lisp
 ln Makefile.in makefile.w32-in ../${tempdir}/lisp
 test -f README && ln README ../${tempdir}/lisp
 (cd ../${tempdir}/lisp
  rm -f TAGS =*
  rm -f site-init site-init.el site-init.elc
  rm -f site-load site-load.el site-load.elc
  rm -f site-start site-start.el site-start.elc
  rm -f default default.el default.elc
  )

 ## Find all subdirs of lisp dir
 for file in `find . -type d -print`; do
   case $file in
     . | .. | */Old | */CVS | */RCS | */=*)
       ;;
     *)
       if [ -d $file ]; then
	 subdirs="$file $subdirs"
       fi
       ;;
   esac
 done

 for file in $subdirs; do
   echo "  lisp/$file"
   mkdir ../${tempdir}/lisp/$file
   ln $file/[a-zA-Z0-9]*.el ../${tempdir}/lisp/$file
   ln $file/[a-zA-Z0-9]*.elc ../${tempdir}/lisp/$file
   for img in $file/[a-zA-Z]*.xpm $file/[a-zA-Z]*.xbm $file/[a-zA-Z]*.pbm; do
     if [ -f $img ]; then
       ln $img ../${tempdir}/lisp/$file
     fi
   done
   if [ -f $file/README ]; then
     ln $file/README ../${tempdir}/lisp/$file
   fi

   if [ -f $file/ChangeLog ]; then
     ln $file/ChangeLog ../${tempdir}/lisp/$file
     for f in $file/ChangeLog.*[0-9]; do
       if [ -f $f ]; then
	 ln $f ../${tempdir}/lisp/$file
       fi
     done
   fi
 done )

echo "Making links to \`leim' and its subdirectories"
### Don't distribute TAGS, or =*.el files.
(cd leim
 ln makefile.w32-in ../${tempdir}/leim
 ln ChangeLog README ../${tempdir}/leim

 ln CXTERM-DIC/*.tit ../${tempdir}/leim/CXTERM-DIC
 ln SKK-DIC/README SKK-DIC/SKK-JISYO.L ../${tempdir}/leim/SKK-DIC
 ln MISC-DIC/*.* ../${tempdir}/leim/MISC-DIC
 ln ja-dic/*.el ja-dic/*.elc ../${tempdir}/leim/ja-dic
 ln Makefile.in ../${tempdir}/leim/Makefile.in
 ln leim-ext.el ../${tempdir}/leim/leim-ext.el
 ## Lisp files that start with a capital are generated from TIT
 ## dictionaries so we don't distribute them.
 ln quail/[a-z]*.el quail/[a-z]*.elc ../${tempdir}/leim/quail
 rm -f ../${tempdir}/leim/quail/quick-b5.*
 rm -f ../${tempdir}/leim/quail/quick-cns.*
 rm -f ../${tempdir}/leim/quail/tsang-b5.*
 rm -f ../${tempdir}/leim/quail/tsang-cns.*

 cd ../${tempdir}/leim
 rm -f TAGS =* */=*)

echo "Making links to \`src'"
### Don't distribute =*.[ch] files, or the configured versions of
### config.in, paths.in, or Makefile.in, or TAGS.
(cd src
 echo "  (It is ok if ln fails in some cases.)"
 ln [a-zA-Z]*.c ../${tempdir}/src
 ln [a-zA-Z]*.h ../${tempdir}/src
 ln [a-zA-Z]*.s ../${tempdir}/src
 ln [a-zA-Z]*.in ../${tempdir}/src
 ln [a-zA-Z]*.opt ../${tempdir}/src
 ## If we ended up with a symlink, or if we did not get anything
 ## due to a cross-device symlink, copy the file.
 for file in [a-zA-Z]*.[hcs] [a-zA-Z]*.in [a-zA-Z]*.opt; do
   if test -f ../${tempdir}/src/$file; then
     # test -f appears to succeed for a symlink
     if test -L ../${tempdir}/src/$file; then
       rm ../${tempdir}/src/$file
       cp -p $file ../${tempdir}/src
       chmod a-w ../${tempdir}/src/$file
     fi
   else
     rm ../${tempdir}/src/$file
     cp -p $file ../${tempdir}/src
     chmod a-w ../${tempdir}/src/$file
   fi
 done
 ln README ChangeLog ChangeLog.*[0-9] ../${tempdir}/src
 ln makefile.w32-in ../${tempdir}/src
 ln .gdbinit .dbxinit ../${tempdir}/src
 cd ../${tempdir}/src
 rm -f config.h epaths.h Makefile Makefile.c
 rm -f =* TAGS)

echo "Making links to \`src/bitmaps'"
(cd src/bitmaps
 ln README *.xbm ../../${tempdir}/src/bitmaps)

echo "Making links to \`src/m'"
(cd src/m
 # We call files for miscellaneous input (to linker etc) .inp.
 ln README [a-zA-Z0-9]*.h *.inp ../../${tempdir}/src/m)

echo "Making links to \`src/s'"
(cd src/s
 ln README [a-zA-Z0-9]*.h ../../${tempdir}/src/s)

echo "Making links to \`lib-src'"
(cd lib-src
 ln [a-zA-Z]*.[chy] ../${tempdir}/lib-src
 ln ChangeLog Makefile.in README testfile vcdiff ../${tempdir}/lib-src
 ln grep-changelog rcs2log rcs-checkin ../${tempdir}/lib-src
 ln makefile.w32-in ../${tempdir}/lib-src
 ## If we ended up with a symlink, or if we did not get anything
 ## due to a cross-device symlink, copy the file.
 for file in [a-zA-Z]*.[chy]; do
   if test -f ../${tempdir}/lib-src/$file; then
     # test -f appears to succeed for a symlink
     if test -L ../${tempdir}/lib-src/$file; then
       rm ../${tempdir}/lib-src/$file
       cp $file ../${tempdir}/lib-src
       chmod a-w ../${tempdir}/lib-src/$file
     fi
   else
     rm ../${tempdir}/lib-src/$file
     cp $file ../${tempdir}/lib-src
     chmod a-w ../${tempdir}/lib-src/$file
   fi
 done
 cd ../${tempdir}/lib-src
 rm -f Makefile.c
 rm -f getopt.h
 rm -f =* TAGS)

echo "Making links to \`m4'"
(cd m4
 ln *.m4 ../${tempdir}/m4)

echo "Making links to \`nt'"
(cd nt
 ln emacs.rc config.nt [a-z]*.c ../${tempdir}/nt
 ln nmake.defs gmake.defs subdirs.el ../${tempdir}/nt
 ln [a-z]*.bat [a-z]*.h ../${tempdir}/nt
 ln ChangeLog INSTALL README makefile.w32-in ../${tempdir}/nt)

echo "Making links to \`nt/inc'"
(cd nt/inc
 ln [a-z]*.h ../../${tempdir}/nt/inc)

echo "Making links to \`nt/inc/sys'"
(cd nt/inc/sys
 ln [a-z]*.h ../../../${tempdir}/nt/inc/sys)

echo "Making links to \`nt/inc/arpa'"
(cd nt/inc/arpa
 ln [a-z]*.h ../../../${tempdir}/nt/inc/arpa)

echo "Making links to \`nt/inc/netinet'"
(cd nt/inc/netinet
 ln [a-z]*.h ../../../${tempdir}/nt/inc/netinet)

echo "Making links to \`nt/icons'"
(cd nt/icons
 ln [a-z]*.ico ../../${tempdir}/nt/icons
 ln [a-z]*.cur ../../${tempdir}/nt/icons)

echo "Making links to \`mac'"
(cd mac
 ln ChangeLog INSTALL README make-package *.xml *.MPW ../${tempdir}/mac)

echo "Making links to \`mac/inc'"
(cd mac/inc
 ln [a-z]*.h ../../${tempdir}/mac/inc)

echo "Making links to \`mac/inc/sys'"
(cd mac/inc/sys
 ln [a-z]*.h ../../../${tempdir}/mac/inc/sys)

echo "Making links to \`mac/src'"
(cd mac/src
 ln [a-z]*.c *.r ../../${tempdir}/mac/src)

echo "Making links to \`mac/Emacs.app/Contents'"
(cd mac/Emacs.app/Contents
 ln Info.plist PkgInfo ../../../${tempdir}/mac/Emacs.app/Contents)

echo "Making links to \`mac/Emacs.app/Contents/Resources'"
(cd mac/Emacs.app/Contents/Resources
 ln Emacs.icns ../../../../${tempdir}/mac/Emacs.app/Contents/Resources)

echo "Making links to \`mac/Emacs.app/Contents/Resources/English.lproj'"
(cd mac/Emacs.app/Contents/Resources/English.lproj
 ln InfoPlist.strings ../../../../../${tempdir}/mac/Emacs.app/Contents/Resources/English.lproj)

echo "Making links to \`msdos'"
(cd msdos
 ln  ChangeLog emacs.ico emacs.pif ../${tempdir}/msdos
 ln is_exec.c sigaction.c mainmake mainmake.v2 sed*.inp ../${tempdir}/msdos
 cd ../${tempdir}/msdos
 rm -f =*)

echo "Making links to \`oldXMenu'"
(cd oldXMenu
 ln *.c *.h *.in ../${tempdir}/oldXMenu
 ln README ChangeLog ../${tempdir}/oldXMenu
 ln compile.com descrip.mms ../${tempdir}/oldXMenu)

echo "Making links to \`lwlib'"
(cd lwlib
 ln *.c *.h *.in ../${tempdir}/lwlib
 ln README ChangeLog ../${tempdir}/lwlib)

echo "Making links to \`etc'"
### Don't distribute = files, TAGS, DOC files, backups, autosaves, or
### tex litter.
### Don't distribute gfdl.1, since no man page references it.
(cd etc
 files=`ls -d * | grep -v CVS | grep -v RCS | grep -v 'Old' | grep -v '^e$' \
        | grep -v '^images$' | grep -v '^tree-widget$'`
 ln $files ../${tempdir}/etc
 ## If we ended up with a symlink, or if we did not get anything
 ## due to a cross-device symlink, copy the file.
 for file in $files; do
   if test -f ../${tempdir}/etc/$file; then
     # test -f appears to succeed for a symlink
     if test -L ../${tempdir}/etc/$file; then
       rm ../${tempdir}/etc/$file
       cp $file ../${tempdir}/etc
       chmod a-w ../${tempdir}/etc/$file
     fi
   else
     rm ../${tempdir}/etc/$file
     cp $file ../${tempdir}/etc
     chmod a-w ../${tempdir}/etc/$file
   fi
 done
 cd ../${tempdir}/etc
 rm -f fns*.el gfdl.1
 rm -f DOC* *~ \#*\# *.dvi *.log *.orig *.rej *,v =* core
 rm -f TAGS)

echo "Making links to \`etc/e'"
(cd etc/e
 ln `ls -d * | grep -v CVS | grep -v RCS` ../../${tempdir}/etc/e
 cd ../../${tempdir}/etc/e
 rm -f *~ \#*\# *,v =* core)

echo "Making links to \`etc/images'"
(cd etc/images
 for img in README [a-zA-Z]*.xpm [a-zA-Z]*.xbm [a-zA-Z]*.pbm; do
   if [ -f $img ]; then
     ln $img ../../${tempdir}/etc/images
   fi
 done)

for dir in etc/images/ezimage etc/images/gnus etc/images/gud etc/images/icons \
           etc/images/low-color etc/images/mail etc/images/smilies \
           etc/tree-widget/default etc/tree-widget/folder ; do
    echo "Making links to \`${dir}'"
    (cd ${dir}
     ln `ls -d * | grep -v CVS | grep -v RCS` ../../../${tempdir}/${dir}
     cd ../../../${tempdir}/${dir}
     rm -f *~ \#*\# *,v =* core)
done

echo "Making links to \`info'"
# Don't distribute backups or autosaves.
(cd info
 ln `find . -type f -print | grep -v CVS | grep -v RCS | grep -v cvsignore` ../${tempdir}/info
 #ln [a-zA-Z]* ../${tempdir}/info
 cd ../${tempdir}/info
 # Avoid an error when expanding the wildcards later.
 ln emacs dummy~ ; ln emacs \#dummy\#
 rm -f *~ \#*\# core)

echo "Making links to \`man'"
(cd man
 ln *.texi *.aux *.cps *.fns *.kys *.vrs ../${tempdir}/man
 ln makefile.w32-in ../${tempdir}/man
 test -f README && ln README ../${tempdir}/man
 test -f Makefile.in && ln Makefile.in ../${tempdir}/man
 ln ChangeLog ../${tempdir}/man
 test -f split-man && ln split-man ../${tempdir}/man
 cp texinfo.tex ../${tempdir}/man
 cd ../${tempdir}/man
 rm -f \#*\# =* *~ core emacs-index* *.Z *.z xmail
 rm -f emacs.?? termcap.?? gdb.?? *.log *.toc *.dvi *.oaux)

echo "Making links to \`lispref'"
(cd lispref
 ln `ls -1 *.texi` ../${tempdir}/lispref
 ln *.aux *.cps *.fns *.kys *.vrs ../${tempdir}/lispref
 ln *.txt *.el spellfile tindex.pl ../${tempdir}/lispref
 ln makefile.w32-in ../${tempdir}/lispref
 test -f README && ln README ../${tempdir}/lispref
 test -f Makefile.in && ln Makefile.in ../${tempdir}/lispref
 ln ChangeLog ../${tempdir}/lispref
 cd ../${tempdir}/lispref
 rm -f \#*\# =* *~ core elisp-index* *.Z *.z xmail
 rm -f elisp.?? *.log *.toc *.dvi *.oaux)

echo "Making links to \`lispintro'"
(cd lispintro
 ln *.texi *.aux *.cps *.fns *.kys *.vrs *.eps ../${tempdir}/lispintro
 ln makefile.w32-in ../${tempdir}/lispintro
 test -f texinfo.tex && ln texinfo.tex ../${tempdir}/lispintro
 test -f README && ln README ../${tempdir}/lispintro
 test -f Makefile.in && ln Makefile.in ../${tempdir}/lispintro
 ln ChangeLog ../${tempdir}/lispintro
 cd ../${tempdir}/lispintro
 rm -f \#*\# =* *~ core *.Z *.z xmail
 rm -f emacs-lisp-intro.?? *.log *.toc *.dvi *.oaux)

echo "Making links to \`vms'"
(cd vms
 test -f README && ln README ../${tempdir}/vms
 cd ../${tempdir}/vms
 rm -f *~)

### It would be nice if they could all be symlinks to top-level copy, but
### you're not supposed to have any symlinks in distribution tar files.
echo "Making sure copying notices are all copies of \`COPYING'"
for subdir in . etc info leim lib-src lisp lwlib mac msdos nt src; do
  rm -f ${tempdir}/${subdir}/COPYING
  cp COPYING ${tempdir}/${subdir}
done

#### Make sure that there aren't any hard links between files in the
#### distribution; people with afs can't deal with that.  Okay,
#### actually we just re-copy anything with a link count greater
#### than two.  (Yes, strictly greater than 2 is correct; since we
#### created these files by linking them in from the original tree,
#### they'll have exactly two links normally.)
####
#### Commented out since it's not strictly necessary; it should suffice
#### to just break the link on alloca.c.
#echo "Breaking intra-tree links."
#find ${tempdir} ! -type d -links +2 \
#  -exec cp -p {} $$ \; -exec rm -f {} \; -exec mv $$ {} \;
rm -f $tempdir/lib-src/alloca.c
cp $tempdir/src/alloca.c $tempdir/lib-src/alloca.c

if [ "${newer}" ]; then
  echo "Removing files older than $newer"
  ## We remove .elc files unconditionally, on the theory that anyone picking
  ## up an incremental distribution already has a running Emacs to byte-compile
  ## them with.
  find ${tempparent} \( -name '*.elc' -o ! -newer ${newer} \) -exec rm -f {} \;
fi

if [ "${make_tar}" = yes ]; then
  if [ "${default_gzip}" = "" ]; then
    echo "Looking for gzip"
    temppath=`echo $PATH | sed 's/^:/.:/
				s/::/:.:/g
				s/:$/:./
				s/:/ /g'`
    default_gzip=`(
      for dir in ${temppath}; do
	if [ -f ${dir}/gzip ]; then echo 'gzip --best'; exit 0; fi
      done
      echo compress
    )`
  fi
  case "${default_gzip}" in
    compress* ) gzip_extension=.Z ;;
    * )         gzip_extension=.gz ;;
  esac
  echo "Creating tar file"
  (cd ${tempparent} ; tar cvf - ${emacsname} ) \
    | ${default_gzip} \
    > ${emacsname}.tar${gzip_extension}
fi

if [ "${clean_up}" = yes ]; then
  echo "Cleaning up the staging directory"
  rm -rf ${tempparent}
else
  (cd ${tempparent}; mv ${emacsname} ..)
  rm -rf ${tempparent}
fi

# arch-tag: 26e3eb50-a394-4ab2-82b2-d8e5af500de7
### make-dist ends here
