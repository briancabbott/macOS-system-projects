@c This is part of the Emacs manual.
@c Copyright (C) 1985, 1986, 1987, 1993, 1994, 1995, 1997, 2000, 2001,
@c   2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.
@c See file emacs.texi for copying conditions.
@node Basic, Minibuffer, Exiting, Top
@chapter Basic Editing Commands

@kindex C-h t
@findex help-with-tutorial
  Here we explain the basics of how to enter text, make corrections,
and save the text in a file.  If this material is new to you, we
suggest you first run the Emacs learn-by-doing tutorial, by typing
@kbd{Control-h t} inside Emacs.  (@code{help-with-tutorial}).

  To clear and redisplay the screen, type @kbd{C-l} (@code{recenter}).

@menu

* Inserting Text::      Inserting text by simply typing it.
* Moving Point::        Moving the cursor to the place where you want to
			  change something.
* Erasing::	        Deleting and killing text.
* Basic Undo::	        Undoing recent changes in the text.
* Files: Basic Files.   Visiting, creating, and saving files.
* Help: Basic Help.     Asking what a character does.
* Blank Lines::	        Making and deleting blank lines.
* Continuation Lines::  How Emacs displays lines too wide for the screen.
* Position Info::       What page, line, row, or column is point on?
* Arguments::	        Numeric arguments for repeating a command N times.
* Repeating::           Repeating the previous command quickly.
@end menu

@node Inserting Text
@section Inserting Text

@cindex insertion
@cindex graphic characters
  Typing printing characters inserts them into the text you are
editing.  It inserts them into the buffer at the cursor; more
precisely, it inserts them at @dfn{point}, but the cursor normally
shows where point is.  @xref{Point}.

  Insertion moves the cursor forward, and the following text moves
forward with the cursor.  If the text in the buffer is @samp{FOOBAR},
with the cursor before the @samp{B}, and you type @kbd{XX}, you get
@samp{FOOXXBAR}, with the cursor still before the @samp{B}.

   To @dfn{delete} text you have just inserted, use the large key
labeled @key{DEL}, @key{BACKSPACE} or @key{DELETE} which is a short
distance above the @key{RET} or @key{ENTER} key.  Regardless of the
label on that key, Emacs thinks of it as @key{DEL}, and that's what we
call it in this manual.  @key{DEL} is the key you normally use outside
Emacs to erase the last character that you typed.

  The @key{DEL} key deletes the character @emph{before} the cursor.
As a consequence, the cursor and all the characters after it move
backwards.  If you type a printing character and then type @key{DEL},
they cancel out.

  On most computers, Emacs sets up @key{DEL} automatically.  In some
cases, especially with text-only terminals, Emacs may guess wrong.  If
the key that ought to erase the last character doesn't do it in Emacs,
see @ref{DEL Does Not Delete}.

  Most PC keyboards have both a @key{BACKSPACE} key a little ways
above @key{RET} or @key{ENTER}, and a @key{DELETE} key elsewhere.  On
these keyboards, Emacs tries to set up @key{BACKSPACE} as @key{DEL}.
The @key{DELETE} key deletes ``forwards'' like @kbd{C-d} (see below),
which means it deletes the character underneath the cursor (after
point).

@kindex RET
@cindex newline
   To end a line and start typing a new one, type @key{RET}.  (This
key may be labeled @key{RETURN} or @key{ENTER}, but in Emacs we call
it @key{RET}.)  This inserts a newline character in the buffer.  If
point is at the end of the line, this creates a new blank line after
it.  If point is in the middle of a line, the effect is to split that
line.  Typing @key{DEL} when the cursor is at the beginning of a line
deletes the preceding newline character, thus joining the line with
the one before it.

  Emacs can split lines automatically when they become too long, if
you turn on a special minor mode called @dfn{Auto Fill} mode.
@xref{Filling}, for Auto Fill mode and other methods of @dfn{filling}
text.

  If you prefer printing characters to replace (overwrite) existing
text, rather than shove it to the right, you should enable Overwrite
mode, a minor mode.  @xref{Minor Modes}.

@cindex quoting
@kindex C-q
@findex quoted-insert
  Only printing characters and @key{SPC} insert themselves in Emacs.
Other characters act as editing commands and do not insert themselves.
These include control characters, and characters with codes above 200
octal.  If you need to insert one of these characters in the buffer,
you must @dfn{quote} it by typing the character @kbd{Control-q}
(@code{quoted-insert}) first.  (This character's name is normally
written @kbd{C-q} for short.)  There are two ways to use
@kbd{C-q}:

@itemize @bullet
@item
@kbd{C-q} followed by any non-graphic character (even @kbd{C-g})
inserts that character.

@item
@kbd{C-q} followed by a sequence of octal digits inserts the character
with the specified octal character code.  You can use any number of
octal digits; any non-digit terminates the sequence.  If the
terminating character is @key{RET}, it serves only to terminate the
sequence.  Any other non-digit terminates the sequence and then acts
as normal input---thus, @kbd{C-q 1 0 1 B} inserts @samp{AB}.

The use of octal sequences is disabled in ordinary non-binary
Overwrite mode, to give you a convenient way to insert a digit instead
of overwriting with it.
@end itemize

@cindex 8-bit character codes
@noindent
When multibyte characters are enabled, if you specify a code in the
range 0200 through 0377 octal, @kbd{C-q} assumes that you intend to
use some ISO 8859-@var{n} character set, and converts the specified
code to the corresponding Emacs character code.  @xref{Enabling
Multibyte}.  You select @emph{which} of the ISO 8859 character sets to
use through your choice of language environment (@pxref{Language
Environments}).

@vindex read-quoted-char-radix
To use decimal or hexadecimal instead of octal, set the variable
@code{read-quoted-char-radix} to 10 or 16.  If the radix is greater than
10, some letters starting with @kbd{a} serve as part of a character
code, just like digits.

A numeric argument tells @kbd{C-q} how many copies of the quoted
character to insert (@pxref{Arguments}).

@findex newline
@findex self-insert
  Customization information: @key{DEL} in most modes runs the command
@code{delete-backward-char}; @key{RET} runs the command
@code{newline}, and self-inserting printing characters run the command
@code{self-insert}, which inserts whatever character you typed.  Some
major modes rebind @key{DEL} to other commands.

@node Moving Point
@section Changing the Location of Point

@cindex arrow keys
@cindex moving point
@cindex movement
@cindex cursor motion
@cindex moving the cursor
  To do more than insert characters, you have to know how to move point
(@pxref{Point}).  The simplest way to do this is with arrow keys, or by
clicking the left mouse button where you want to move to.

  There are also control and meta characters for cursor motion.  Some
are equivalent to the arrow keys (it is faster to use these control
keys than move your hand over to the arrow keys).  Others do more
sophisticated things.

@kindex C-a
@kindex C-e
@kindex C-f
@kindex C-b
@kindex C-n
@kindex C-p
@kindex M->
@kindex M-<
@kindex M-r
@kindex LEFT
@kindex RIGHT
@kindex UP
@kindex DOWN
@findex move-beginning-of-line
@findex move-end-of-line
@findex forward-char
@findex backward-char
@findex next-line
@findex previous-line
@findex beginning-of-buffer
@findex end-of-buffer
@findex goto-char
@findex goto-line
@findex move-to-window-line
@table @kbd
@item C-a
Move to the beginning of the line (@code{move-beginning-of-line}).
@item C-e
Move to the end of the line (@code{move-end-of-line}).
@item C-f
Move forward one character (@code{forward-char}).  The right-arrow key
does the same thing.
@item C-b
Move backward one character (@code{backward-char}).  The left-arrow
key has the same effect.
@item M-f
Move forward one word (@code{forward-word}).
@item M-b
Move backward one word (@code{backward-word}).
@item C-n
Move down one line vertically (@code{next-line}).  This command
attempts to keep the horizontal position unchanged, so if you start in
the middle of one line, you move to the middle of the next.  The
down-arrow key does the same thing.
@item C-p
Move up one line, vertically (@code{previous-line}).  The up-arrow key
has the same effect.  This command preserves position within the line,
like @kbd{C-n}.
@item M-r
Move point to left margin, vertically centered in the window
(@code{move-to-window-line}).  Text does not move on the screen.
A numeric argument says which screen line to place point on, counting
downward from the top of the window (zero means the top line).  A
negative argument counts lines up from the bottom (@minus{}1 means the
bottom line).
@item M-<
Move to the top of the buffer (@code{beginning-of-buffer}).  With
numeric argument @var{n}, move to @var{n}/10 of the way from the top.
@xref{Arguments}, for more information on numeric arguments.@refill
@item M->
Move to the end of the buffer (@code{end-of-buffer}).
@item C-v
@itemx @key{PAGEDOWN}
@itemx @key{PRIOR}
Scroll the display one screen forward, and move point if necessary to
put it on the screen (@code{scroll-up}).  This doesn't always move
point, but it is commonly used to do so.  If your keyboard has a
@key{PAGEDOWN} or @key{PRIOR} key, it does the same thing.

Scrolling commands are described further in @ref{Scrolling}.
@item M-v
@itemx @key{PAGEUP}
@itemx @key{NEXT}
Scroll one screen backward, and move point if necessary to put it on
the screen (@code{scroll-down}).  This doesn't always move point, but
it is commonly used to do so.  If your keyboard has a @key{PAGEUP} or
@key{NEXT} key, it does the same thing.
@item M-x goto-char
Read a number @var{n} and move point to buffer position @var{n}.
Position 1 is the beginning of the buffer.
@item M-g M-g
@itemx M-g g
@itemx M-x goto-line
Read a number @var{n} and move point to the beginning of line number
@var{n}.  Line 1 is the beginning of the buffer.  If point is on or
just after a number in the buffer, and you type @key{RET} with the
minibuffer empty, that number is used for @var{n}.
@item C-x C-n
@findex set-goal-column
@kindex C-x C-n
Use the current column of point as the @dfn{semipermanent goal column}
for @kbd{C-n} and @kbd{C-p} (@code{set-goal-column}).  When a
semipermanent goal column is in effect, those commands always try to
move to this column, or as close as possible to it, after moving
vertically.  The goal column remains in effect until canceled.
@item C-u C-x C-n
Cancel the goal column.  Henceforth, @kbd{C-n} and @kbd{C-p} try to
preserve the horizontal position, as usual.
@end table

@vindex track-eol
  If you set the variable @code{track-eol} to a non-@code{nil} value,
then @kbd{C-n} and @kbd{C-p}, when starting at the end of the line, move
to the end of another line.  Normally, @code{track-eol} is @code{nil}.
@xref{Variables}, for how to set variables such as @code{track-eol}.

@vindex next-line-add-newlines
  @kbd{C-n} normally stops at the end of the buffer when you use it on
the last line of the buffer.  However, if you set the variable
@code{next-line-add-newlines} to a non-@code{nil} value, @kbd{C-n} on
the last line of a buffer creates an additional line at the end and
moves down into it.

@node Erasing
@section Erasing Text

@table @kbd
@item @key{DEL}
Delete the character before point (@code{delete-backward-char}).
@item C-d
Delete the character after point (@code{delete-char}).
@item @key{DELETE}
@itemx @key{BACKSPACE}
One of these keys, whichever is the large key above the @key{RET} or
@key{ENTER} key, deletes the character before point---it is @key{DEL}.
If @key{BACKSPACE} is @key{DEL}, and your keyboard also has @key{DELETE},
then @key{DELETE} deletes forwards, like @kbd{C-d}.
@item C-k
Kill to the end of the line (@code{kill-line}).
@item M-d
Kill forward to the end of the next word (@code{kill-word}).
@item M-@key{DEL}
Kill back to the beginning of the previous word
(@code{backward-kill-word}).
@end table

@cindex killing characters and lines
@cindex deleting characters and lines
@cindex erasing characters and lines
  You already know about the @key{DEL} key which deletes the character
before point (that is, before the cursor).  Another key, @kbd{Control-d}
(@kbd{C-d} for short), deletes the character after point (that is, the
character that the cursor is on).  This shifts the rest of the text on
the line to the left.  If you type @kbd{C-d} at the end of a line, it
joins that line with the following line.

  To erase a larger amount of text, use the @kbd{C-k} key, which
erases (kills) a line at a time.  If you type @kbd{C-k} at the
beginning or middle of a line, it kills all the text up to the end of
the line.  If you type @kbd{C-k} at the end of a line, it joins that
line with the following line.

  @xref{Killing}, for more flexible ways of killing text.

@node Basic Undo
@section Undoing Changes

  Emacs records a list of changes made in the buffer text, so you can
you can undo recent changes, as far as the records go.
Usually each editing command makes a separate entry in the undo
records, but sometimes an entry covers just part of a command, and
very simple commands may be grouped.

@table @kbd
@item C-x u
Undo one entry of the undo records---usually, one command worth
(@code{undo}).
@item C-_
@itemx C-/
The same.
@end table

  The command @kbd{C-x u} (or @kbd{C-_} or @kbd{C-/}) is how you undo.
Normally this command undoes the last change, and moves point back to
where it was before the change.

  If you repeat @kbd{C-x u} (or its aliases), each repetition undoes
another, earlier change, back to the limit of the undo information
available.  If all recorded changes have already been undone, the undo
command displays an error message and does nothing.

  The undo command applies only to changes in the buffer; you can't
use it to undo mere cursor motion.  However, some cursor motion
commands set the mark, so if you use these commands from time to time,
you can move back to the neighborhoods you have moved through by
popping the mark ring (@pxref{Mark Ring}).

@node Basic Files
@section Files

  Text that you insert in an Emacs buffer lasts only as long as the
Emacs session.  To keep any text permanently you must put it in a
@dfn{file}.  Files are named units of text which are stored by the
operating system for you to retrieve later by name.  To use the
contents of a file in any way, you must specify the file name.  That
includes editing the file with Emacs.

  Suppose there is a file named @file{test.emacs} in your home
directory.  To begin editing this file in Emacs, type

@example
C-x C-f test.emacs @key{RET}
@end example

@noindent
Here the file name is given as an @dfn{argument} to the command @kbd{C-x
C-f} (@code{find-file}).  That command uses the @dfn{minibuffer} to
read the argument, and you type @key{RET} to terminate the argument
(@pxref{Minibuffer}).

  Emacs obeys this command by @dfn{visiting} the file: it creates a
buffer, it copies the contents of the file into the buffer, and then
displays the buffer for editing.  If you alter the text, you can
@dfn{save} the new text in the file by typing @kbd{C-x C-s}
(@code{save-buffer}).  This copies the altered buffer contents back
into the file @file{test.emacs}, making them permanent.  Until you
save, the changed text exists only inside Emacs, and the file
@file{test.emacs} is unaltered.

  To create a file, just visit it with @kbd{C-x C-f} as if it already
existed.  This creates an empty buffer, in which you can insert the
text you want to put in the file.  Emacs actually creates the file the
first time you save this buffer with @kbd{C-x C-s}.

  To learn more about using files in Emacs, see @ref{Files}.

@node Basic Help
@section Help

@cindex getting help with keys
  If you forget what a key does, you can find out with the Help
character, which is @kbd{C-h} (or @key{F1}, which is an alias for
@kbd{C-h}).  Type @kbd{C-h k} followed by the key of interest; for
example, @kbd{C-h k C-n} tells you what @kbd{C-n} does.  @kbd{C-h} is
a prefix key; @kbd{C-h k} is just one of its subcommands (the command
@code{describe-key}).  The other subcommands of @kbd{C-h} provide
different kinds of help.  Type @kbd{C-h} twice to get a description of
all the help facilities.  @xref{Help}.

@node Blank Lines
@section Blank Lines

@cindex inserting blank lines
@cindex deleting blank lines
  Here are special commands and techniques for inserting and deleting
blank lines.

@table @kbd
@item C-o
Insert one or more blank lines after the cursor (@code{open-line}).
@item C-x C-o
Delete all but one of many consecutive blank lines
(@code{delete-blank-lines}).
@end table

@kindex C-o
@kindex C-x C-o
@cindex blank lines
@findex open-line
@findex delete-blank-lines
  To insert a new line of text before an existing line,
type the new line of text, followed by @key{RET}.
However, it may be easier to see what you are doing if you first make a
blank line and then insert the desired text into it.  This is easy to do
using the key @kbd{C-o} (@code{open-line}), which inserts a newline
after point but leaves point in front of the newline.  After @kbd{C-o},
type the text for the new line.  @kbd{C-o F O O} has the same effect as
@w{@kbd{F O O @key{RET}}}, except for the final location of point.

  You can make several blank lines by typing @kbd{C-o} several times, or
by giving it a numeric argument specifying how many blank lines to make.
@xref{Arguments}, for how.  If you have a fill prefix, the @kbd{C-o}
command inserts the fill prefix on the new line, if typed at the
beginning of a line.  @xref{Fill Prefix}.

  The easy way to get rid of extra blank lines is with the command
@kbd{C-x C-o} (@code{delete-blank-lines}).  @kbd{C-x C-o} in a run of
several blank lines deletes all but one of them.  @kbd{C-x C-o} on a
lone blank line deletes that one.  When point is on a nonblank line,
@kbd{C-x C-o} deletes all following blank lines (if any).

@node Continuation Lines
@section Continuation Lines

@cindex continuation line
@cindex wrapping
@cindex line wrapping
@cindex fringes, and continuation lines
  When a text line is too long to fit in one screen line, Emacs
displays it on two or more screen lines.  This is called
@dfn{continuation} or @dfn{line wrapping}.  On graphical displays,
Emacs indicates line wrapping with small bent arrows in the left and
right window fringes.  On text-only terminals, Emacs displays a
@samp{\} character at the right margin of a screen line if it is not
the last in its text line.  This @samp{\} character says that the
following screen line is not really a new text line.

  When line wrapping occurs just before a character that is wider than one
column, some columns at the end of the previous screen line may be
``empty.''  In this case, Emacs displays additional @samp{\}
characters in the ``empty'' columns before the @samp{\}
character that indicates continuation.

  Continued lines can be difficult to read, since lines can break in
the middle of a word.  If you prefer, you can make Emacs insert a
newline automatically when a line gets too long, by using Auto Fill
mode.  Or enable Long Lines mode, which ensures that wrapping only
occurs between words.  @xref{Filling}.

@cindex truncation
@cindex line truncation, and fringes
  Emacs can optionally @dfn{truncate} long lines---this means
displaying just one screen line worth, and the rest of the long line
does not appear at all.  @samp{$} in the last column or a small
straight arrow in the window's right fringe indicates a truncated
line.

  @xref{Line Truncation}, for more about line truncation,
and other variables that control how text is displayed.

@node Position Info
@section Cursor Position Information

  Here are commands to get information about the size and position of
parts of the buffer, and to count lines.

@table @kbd
@item M-x what-page
Display the page number of point, and the line number within that page.
@item M-x what-line
Display the line number of point in the whole buffer.
@item M-x line-number-mode
@itemx M-x column-number-mode
Toggle automatic display of the current line number or column number.
@xref{Optional Mode Line}.
@item M-=
Display the number of lines in the current region (@code{count-lines-region}).
@xref{Mark}, for information about the region.
@item C-x =
Display the character code of character after point, character position of
point, and column of point (@code{what-cursor-position}).
@item M-x hl-line-mode
Enable or disable highlighting of the current line.  @xref{Cursor
Display}.
@item M-x size-indication-mode
Toggle automatic display of the size of the buffer.
@xref{Optional Mode Line}.
@end table

@findex what-page
@findex what-line
@cindex line number commands
@cindex location of point
@cindex cursor location
@cindex point location
  @kbd{M-x what-line} displays the current line number
in the echo area.  You can also see the current line number in the
mode line; see @ref{Mode Line}; but if you narrow the buffer, the
line number in the mode line is relative to the accessible portion
(@pxref{Narrowing}).  By contrast, @code{what-line} shows both the
line number relative to the narrowed region and the line number
relative to the whole buffer.

  @kbd{M-x what-page} counts pages from the beginning of the file, and
counts lines within the page, showing both numbers in the echo area.
@xref{Pages}.

@kindex M-=
@findex count-lines-region
  Use @kbd{M-=} (@code{count-lines-region}) to displays the number of
lines in the region (@pxref{Mark}).  @xref{Pages}, for the command
@kbd{C-x l} which counts the lines in the current page.

@kindex C-x =
@findex what-cursor-position
  The command @kbd{C-x =} (@code{what-cursor-position}) shows what
cursor's column position, and other information about point and the
character after it.  It displays a line in the echo area that looks
like this:

@smallexample
Char: c (99, #o143, #x63) point=28062 of 36168 (78%) column=53
@end smallexample

  The four values after @samp{Char:} describe the character that follows
point, first by showing it and then by giving its character code in
decimal, octal and hex.  For a non-@acronym{ASCII} multibyte character, these are
followed by @samp{file} and the character's representation, in hex, in
the buffer's coding system, if that coding system encodes the character
safely and with a single byte (@pxref{Coding Systems}).  If the
character's encoding is longer than one byte, Emacs shows @samp{file ...}.

  However, if the character displayed is in the range 0200 through
0377 octal, it may actually stand for an invalid UTF-8 byte read from
a file.  In Emacs, that byte is represented as a sequence of 8-bit
characters, but all of them together display as the original invalid
byte, in octal code.  In this case, @kbd{C-x =} shows @samp{part of
display ...} instead of @samp{file}.

  @samp{point=} is followed by the position of point expressed as a
character count.  The start of the buffer is position 1, one character
later is position 2, and so on.  The next, larger, number is the total
number of characters in the buffer.  Afterward in parentheses comes
the position expressed as a percentage of the total size.

  @samp{column=} is followed by the horizontal position of point, in
columns from the left edge of the window.

  If the buffer has been narrowed, making some of the text at the
beginning and the end temporarily inaccessible, @kbd{C-x =} displays
additional text describing the currently accessible range.  For example, it
might display this:

@smallexample
Char: C (67, #o103, #x43) point=252 of 889 (28%) <231-599> column=0
@end smallexample

@noindent
where the two extra numbers give the smallest and largest character
position that point is allowed to assume.  The characters between those
two positions are the accessible ones.  @xref{Narrowing}.

  If point is at the end of the buffer (or the end of the accessible
part), the @w{@kbd{C-x =}} output does not describe a character after
point.  The output might look like this:

@smallexample
point=36169 of 36168 (EOB) column=0
@end smallexample

@cindex character set of character at point
@cindex font of character at point
@cindex text properties at point
  @w{@kbd{C-u C-x =}} displays the following additional information about a
character.

@itemize @bullet
@item
The character set name, and the codes that identify the character
within that character set; @acronym{ASCII} characters are identified
as belonging to the @code{ascii} character set.

@item
The character's syntax and categories.

@item
The character's encodings, both internally in the buffer, and externally
if you were to save the file.

@item
What keys to type to input the character in the current input method
(if it supports the character).

@item
If you are running Emacs on a graphical display, the font name and
glyph code for the character.  If you are running Emacs on a text-only
terminal, the code(s) sent to the terminal.

@item
The character's text properties (@pxref{Text Properties,,,
elisp, the Emacs Lisp Reference Manual}), and any overlays containing it
(@pxref{Overlays,,, elisp, the same manual}).
@end itemize

  Here's an example showing the Latin-1 character A with grave accent,
in a buffer whose coding system is @code{iso-latin-1}, whose
terminal coding system is @code{iso-latin-1} (so the terminal actually
displays the character as @samp{@`A}), and which has font-lock-mode
(@pxref{Font Lock}) enabled:

@smallexample
  character: @`A (2240, #o4300, #x8c0, U+00C0)
    charset: latin-iso8859-1
             (Right-Hand Part of Latin Alphabet 1@dots{}
 code point: #x40
     syntax: w 	which means: word
   category: l:Latin
   to input: type "`A" with latin-1-prefix
buffer code: #x81 #xC0
  file code: #xC0 (encoded by coding system iso-latin-1)
    display: terminal code #xC0

There are text properties here:
  fontified            t
@end smallexample

@node Arguments
@section Numeric Arguments
@cindex numeric arguments
@cindex prefix arguments
@cindex arguments to commands

  In mathematics and computer usage, @dfn{argument} means
``data provided to a function or operation.''  You can give any Emacs
command a @dfn{numeric argument} (also called a @dfn{prefix argument}).
Some commands interpret the argument as a repetition count.  For
example, @kbd{C-f} with an argument of ten moves forward ten characters
instead of one.  With these commands, no argument is equivalent to an
argument of one.  Negative arguments tell most such commands to move or
act in the opposite direction.

@kindex M-1
@kindex M-@t{-}
@findex digit-argument
@findex negative-argument
  If your terminal keyboard has a @key{META} key (labeled @key{ALT} on
PC keyboards), the easiest way to specify a numeric argument is to
type digits and/or a minus sign while holding down the @key{META} key.
For example,

@example
M-5 C-n
@end example

@noindent
moves down five lines.  The characters @kbd{Meta-1}, @kbd{Meta-2},
and so on, as well as @kbd{Meta--}, do this because they are keys bound
to commands (@code{digit-argument} and @code{negative-argument}) that
are defined to set up an argument for the next command.
@kbd{Meta--} without digits normally means @minus{}1.  Digits and
@kbd{-} modified with Control, or Control and Meta, also specify numeric
arguments.

@kindex C-u
@findex universal-argument
  You can also specify a numeric argument by typing @kbd{C-u}
(@code{universal-argument}) followed by the digits.  The advantage of
@kbd{C-u} is that you can type the digits without modifier keys; thus,
@kbd{C-u} works on all terminals.  For a negative argument, type a
minus sign after @kbd{C-u}.  A minus sign without digits normally
means @minus{}1.

  @kbd{C-u} alone has the special meaning of
``four times'': it multiplies the argument for the next command by
four.  @kbd{C-u C-u} multiplies it by sixteen.  Thus, @kbd{C-u C-u
C-f} moves forward sixteen characters.  This is a good way to move
forward ``fast,'' since it moves about 1/5 of a line in the usual size
screen.  Other useful combinations are @kbd{C-u C-n}, @kbd{C-u C-u
C-n} (move down a good fraction of a screen), @kbd{C-u C-u C-o} (make
``a lot'' of blank lines), and @kbd{C-u C-k} (kill four lines).

  Some commands care whether there is an argument, but ignore its
value.  For example, the command @kbd{M-q} (@code{fill-paragraph})
fills text; with an argument, it justifies the text as well.
(@xref{Filling}, for more information on @kbd{M-q}.)  Plain @kbd{C-u}
is a handy way of providing an argument for such commands.

  Some commands use the value of the argument as a repeat count, but do
something peculiar when there is no argument.  For example, the command
@kbd{C-k} (@code{kill-line}) with argument @var{n} kills @var{n} lines,
including their terminating newlines.  But @kbd{C-k} with no argument is
special: it kills the text up to the next newline, or, if point is right at
the end of the line, it kills the newline itself.  Thus, two @kbd{C-k}
commands with no arguments can kill a nonblank line, just like @kbd{C-k}
with an argument of one.  (@xref{Killing}, for more information on
@kbd{C-k}.)

  A few commands treat a plain @kbd{C-u} differently from an ordinary
argument.  A few others may treat an argument of just a minus sign
differently from an argument of @minus{}1.  These unusual cases are
described when they come up; they exist to make an individual command
more convenient, and they are documented in that command's
documentation string.

  You can use a numeric argument before a self-inserting character to
insert multiple copies of it.  This is straightforward when the
character is not a digit; for example, @kbd{C-u 6 4 a} inserts 64
copies of the character @samp{a}.  But this does not work for
inserting digits; @kbd{C-u 6 4 1} specifies an argument of 641.  You
can separate the argument from the digit to insert with another
@kbd{C-u}; for example, @kbd{C-u 6 4 C-u 1} does insert 64 copies of
the character @samp{1}.

  We use the term ``prefix argument'' as well as ``numeric argument,''
to emphasize that you type these argument before the command, and to
distinguish them from minibuffer arguments that come after the
command.

@node Repeating
@section Repeating a Command
@cindex repeating a command

  Many simple commands, such as those invoked with a single key or
with @kbd{M-x @var{command-name} @key{RET}}, can be repeated by
invoking them with a numeric argument that serves as a repeat count
(@pxref{Arguments}).  However, if the command you want to repeat
prompts for input, or uses a numeric argument in another way, that
method won't work.

@kindex C-x z
@findex repeat
  The command @kbd{C-x z} (@code{repeat}) provides another way to repeat
an Emacs command many times.  This command repeats the previous Emacs
command, whatever that was.  Repeating a command uses the same arguments
that were used before; it does not read new arguments each time.

  To repeat the command more than once, type additional @kbd{z}'s: each
@kbd{z} repeats the command one more time.  Repetition ends when you
type a character other than @kbd{z}, or press a mouse button.

  For example, suppose you type @kbd{C-u 2 0 C-d} to delete 20
characters.  You can repeat that command (including its argument) three
additional times, to delete a total of 80 characters, by typing @kbd{C-x
z z z}.  The first @kbd{C-x z} repeats the command once, and each
subsequent @kbd{z} repeats it once again.

@ignore
   arch-tag: cda8952a-c439-41c1-aecf-4bc0d6482956
@end ignore
