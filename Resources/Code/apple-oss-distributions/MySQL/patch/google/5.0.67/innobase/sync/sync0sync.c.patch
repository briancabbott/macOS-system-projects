--- base5067/innobase/sync/sync0sync.c	2008-08-04 05:19:17.000000000 -0700
+++ m5067/innobase/sync/sync0sync.c	2008-09-08 06:54:53.000000000 -0700
@@ -143,13 +143,11 @@
 /* The number of system calls made in this module. Intended for performance
 monitoring. */
 
-ulint	mutex_system_call_count		= 0;
-
 /* Number of spin waits on mutexes: for performance monitoring */
 
-ulint	mutex_spin_round_count		= 0;
-ulint	mutex_spin_wait_count		= 0;
-ulint	mutex_os_wait_count		= 0;
+ib_longlong	mutex_spin_round_count		= 0;
+ib_longlong	mutex_spin_wait_count		= 0;
+ib_longlong	mutex_os_wait_count		= 0;
 ulint	mutex_exit_count		= 0;
 
 /* The global array of wait cells for implementation of the database's own
@@ -240,6 +238,8 @@
 {
 #if defined(_WIN32) && defined(UNIV_CAN_USE_X86_ASSEMBLER)
 	mutex_reset_lock_word(mutex);
+#elif defined(HAVE_ATOMIC_BUILTINS)
+	mutex_reset_lock_word(mutex);
 #else	
 	os_fast_mutex_init(&(mutex->os_fast_mutex));
 	mutex->lock_word = 0;
@@ -325,7 +325,9 @@
 
 	os_event_free(mutex->event);
 
-#if !defined(_WIN32) || !defined(UNIV_CAN_USE_X86_ASSEMBLER) 
+#if defined(_WIN32) && defined(UNIV_CAN_USE_X86_ASSEMBLER) 
+#elif defined(HAVE_ATOMIC_BUILTINS)
+#else
 	os_fast_mutex_free(&(mutex->os_fast_mutex));
 #endif
 	/* If we free the mutex protecting the mutex list (freeing is
@@ -421,6 +423,12 @@
 #endif /* UNIV_DEBUG && !UNIV_HOTBACKUP */
   ut_ad(mutex);
 
+  /* This update is not thread safe, but we don't mind if the count isn't
+   * exact. Moved out of ifdef that follows because we are willing to sacrifice
+   * the cost of counting this as the data is valuable. Count the number of
+   * calls to mutex_spin_wait. */
+  mutex_spin_wait_count++;
+
 mutex_loop:
 
   i = 0;
@@ -433,7 +441,6 @@
 
 spin_loop:
 #if defined UNIV_DEBUG && !defined UNIV_HOTBACKUP
-  mutex_spin_wait_count++;
   mutex->count_spin_loop++;
 #endif /* UNIV_DEBUG && !UNIV_HOTBACKUP */
 
@@ -502,8 +509,6 @@
   sync_array_reserve_cell(sync_primary_wait_array, mutex,
                           SYNC_MUTEX, file_name, line, &index);
 
-  mutex_system_call_count++;
-
   /* The memory order of the array reservation and the change in the
   waiters field is important: when we suspend a thread, we first
   reserve the cell and then set waiters field to 1. When threads are
@@ -551,7 +556,6 @@
             mutex->cfile_name, (ulong) mutex->cline, (ulong) i);
 #endif
 
-  mutex_system_call_count++;
   mutex_os_wait_count++;
 
 #ifndef UNIV_HOTBACKUP
@@ -1360,20 +1364,30 @@
 	FILE*	file)		/* in: file where to print */
 {
 #ifdef UNIV_SYNC_DEBUG
-	fprintf(stderr, "Mutex exits %lu, rws exits %lu, rwx exits %lu\n",
+	fprintf(stderr, "Mutex exits %llu, rws exits %llu, rwx exits %llu\n",
 		mutex_exit_count, rw_s_exit_count, rw_x_exit_count);
 #endif
 
 	fprintf(file,
-"Mutex spin waits %lu, rounds %lu, OS waits %lu\n"
-"RW-shared spins %lu, OS waits %lu; RW-excl spins %lu, OS waits %lu\n",
-			(ulong) mutex_spin_wait_count,
-		        (ulong) mutex_spin_round_count,
-			(ulong) mutex_os_wait_count,
-			(ulong) rw_s_spin_wait_count,
-		        (ulong) rw_s_os_wait_count,
-			(ulong) rw_x_spin_wait_count,
-		        (ulong) rw_x_os_wait_count);
+"Mutex spin waits %llu, rounds %llu, OS waits %llu\n"
+"RW-shared spins %llu, OS waits %llu; RW-excl spins %llu, OS waits %llu\n",
+                mutex_spin_wait_count,
+                mutex_spin_round_count,
+                mutex_os_wait_count,
+                rw_s_spin_wait_count,
+                rw_s_os_wait_count,
+                rw_x_spin_wait_count,
+                rw_x_os_wait_count);
+
+	fprintf(file,
+                "Spin rounds per wait: %.2f mutex, %.2f RW-shared, "
+                "%.2f RW-excl\n",
+                (double) mutex_spin_round_count /
+                (mutex_spin_wait_count ? mutex_spin_wait_count : 1),
+                (double) rw_s_spin_round_count /
+                (rw_s_spin_wait_count ? rw_s_spin_wait_count : 1),
+                (double) rw_x_spin_round_count /
+                (rw_x_spin_wait_count ? rw_x_spin_wait_count : 1));
 }
 
 /***********************************************************************
