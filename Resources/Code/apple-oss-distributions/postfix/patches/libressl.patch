diff -ur a/src/global/mail_params.h b/src/global/mail_params.h
--- a/src/global/mail_params.h	2017-07-25 13:38:54.000000000 -0700
+++ b/src/global/mail_params.h	2017-07-25 12:18:17.000000000 -0700
@@ -1350,7 +1350,7 @@
 extern char *var_smtpd_tls_dh1024_param_file;
 
 #define VAR_SMTPD_TLS_EECDH	"smtpd_tls_eecdh_grade"
-#if OPENSSL_VERSION_NUMBER >= 0x1000200fUL
+#if OPENSSL_VERSION_NUMBER >= 0x1000200fUL && !defined(LIBRESSL_VERSION_NUMBER)
 #define DEF_SMTPD_TLS_EECDH	"auto"
 #else
 #define DEF_SMTPD_TLS_EECDH	"strong"
@@ -3152,7 +3152,7 @@
   * TLS cipherlists
   */
 #ifdef USE_TLS
-#if OPENSSL_VERSION_NUMBER >= 0x1000000fUL
+#if OPENSSL_VERSION_NUMBER >= 0x1000000fUL && !defined(LIBRESSL_VERSION_NUMBER)
 #define PREFER_aNULL "aNULL:-aNULL:"
 #else
 #define PREFER_aNULL ""
@@ -3233,8 +3233,8 @@
 
  /* The tweak for CVE-2010-4180 is needed in some versions prior to 1.0.1 */
  /* The tweak for CVE-2005-2969 is needed in some versions prior to 1.0.0 */
-#if defined(USE_TLS) && (OPENSSL_VERSION_NUMBER < 0x1000100fUL)
-#if (OPENSSL_VERSION_NUMBER < 0x1000000fUL)
+#if defined(USE_TLS) && (OPENSSL_VERSION_NUMBER < 0x1000100fUL) || defined(LIBRESSL_VERSION_NUMBER)
+#if (OPENSSL_VERSION_NUMBER < 0x1000000fUL) || defined(LIBRESSL_VERSION_NUMBER)
 #define TLS_BUG_TWEAKS		"CVE-2005-2969 CVE-2010-4180"
 #else
 #define TLS_BUG_TWEAKS		"CVE-2010-4180"
diff -ur a/src/posttls-finger/posttls-finger.c b/src/posttls-finger/posttls-finger.c
--- a/src/posttls-finger/posttls-finger.c	2017-07-25 13:38:54.000000000 -0700
+++ b/src/posttls-finger/posttls-finger.c	2017-07-25 12:22:23.000000000 -0700
@@ -1513,13 +1513,13 @@
     return (0);
 }
 
-#if defined(USE_TLS) && OPENSSL_VERSION_NUMBER < 0x10100000L
+#if defined(USE_TLS) && OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 
 /* ssl_cleanup - free memory allocated in the OpenSSL library */
 
 static void ssl_cleanup(void)
 {
-#if OPENSSL_VERSION_NUMBER >= 0x10000000L
+#if OPENSSL_VERSION_NUMBER >= 0x10000000L && !defined(LIBRESSL_VERSION_NUMBER)
     ERR_remove_thread_state(0);		/* Thread-id is now a pointer */
 #else
     ERR_remove_state(0);		/* Deprecated with OpenSSL 1.0.0 */
@@ -1966,7 +1966,7 @@
     cleanup(&state);
 
     /* OpenSSL 1.1.0 and later (de)initialization is implicit */
-#if defined(USE_TLS) && OPENSSL_VERSION_NUMBER < 0x10100000L
+#if defined(USE_TLS) && OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
     ssl_cleanup();
 #endif
 
diff -ur a/src/tls/tls.h b/src/tls/tls.h
--- a/src/tls/tls.h	2017-07-25 13:38:54.000000000 -0700
+++ b/src/tls/tls.h	2017-07-25 12:25:22.000000000 -0700
@@ -89,7 +89,7 @@
 #endif
 
  /* Backwards compatibility with OpenSSL < 1.1.0 */
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 #define OpenSSL_version_num SSLeay
 #define OpenSSL_version SSLeay_version
 #define OPENSSL_VERSION SSLEAY_VERSION
diff -ur a/src/tls/tls_certkey.c b/src/tls/tls_certkey.c
--- a/src/tls/tls_certkey.c	2017-07-25 13:38:54.000000000 -0700
+++ b/src/tls/tls_certkey.c	2017-07-25 12:25:56.000000000 -0700
@@ -171,7 +171,7 @@
 	return (-1);			/* logged */
     if (*dcert_file && !set_cert_stuff(ctx, "DSA", dcert_file, dkey_file))
 	return (-1);				/* logged */
-#if OPENSSL_VERSION_NUMBER >= 0x1000000fL && !defined(OPENSSL_NO_ECDH)
+#if OPENSSL_VERSION_NUMBER >= 0x1000000fL && !defined(LIBRESSL_VERSION_NUMBER) && !defined(OPENSSL_NO_ECDH)
     if (*eccert_file && !set_cert_stuff(ctx, "ECDSA", eccert_file, eckey_file))
 	return (-1);				/* logged */
 #else
diff -ur a/src/tls/tls_client.c b/src/tls/tls_client.c
--- a/src/tls/tls_client.c	2017-07-25 13:38:54.000000000 -0700
+++ b/src/tls/tls_client.c	2017-07-25 12:26:24.000000000 -0700
@@ -299,7 +299,7 @@
      */
     tls_check_version();
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 
     /*
      * Initialize the OpenSSL library by the book! To start with, we must
@@ -433,7 +433,7 @@
     /*
      * 2015-12-05: Ephemeral RSA removed from OpenSSL 1.1.0-dev
      */
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 
     /*
      * According to the OpenSSL documentation, temporary RSA key is needed
diff -ur a/src/tls/tls_dane.c b/src/tls/tls_dane.c
--- a/src/tls/tls_dane.c	2017-07-25 13:38:54.000000000 -0700
+++ b/src/tls/tls_dane.c	2017-07-25 12:27:18.000000000 -0700
@@ -204,7 +204,7 @@
 #undef DANE_TLSA_SUPPORT
 #undef WRAP_SIGNED
 
-#if OPENSSL_VERSION_NUMBER >= 0x1000000fL && \
+#if OPENSSL_VERSION_NUMBER >= 0x1000000fL && !defined(LIBRESSL_VERSION_NUMBER) &&\
 	(defined(X509_V_FLAG_PARTIAL_CHAIN) || !defined(OPENSSL_NO_ECDH))
 #define TRUST_ANCHOR_SUPPORT
 
@@ -2125,7 +2125,7 @@
     tls_param_init();
     tls_check_version();
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
     SSL_load_error_strings();
     SSL_library_init();
 #endif
diff -ur a/src/tls/tls_dh.c b/src/tls/tls_dh.c
--- a/src/tls/tls_dh.c	2017-07-25 13:38:54.000000000 -0700
+++ b/src/tls/tls_dh.c	2017-07-25 12:29:08.000000000 -0700
@@ -94,7 +94,7 @@
 #define TLS_INTERNAL
 #include <tls.h>
 #include <openssl/dh.h>
-#if OPENSSL_VERSION_NUMBER >= 0x1000200fUL && !defined(OPENSSL_NO_ECDH)
+#if OPENSSL_VERSION_NUMBER >= 0x1000200fUL && !defined(OPENSSL_NO_ECDH) && !defined(LIBRESSL_VERSION_NUMBER)
 #include <openssl/ec.h>
 #endif
 
@@ -244,7 +244,7 @@
 
 void    tls_auto_eecdh_curves(SSL_CTX *ctx)
 {
-#if OPENSSL_VERSION_NUMBER >= 0x1000200fUL && !defined(OPENSSL_NO_ECDH)
+#if OPENSSL_VERSION_NUMBER >= 0x1000200fUL && !defined(LIBRESSL_VERSION_NUMBER) && !defined(OPENSSL_NO_ECDH)
     SSL_CTX *tmpctx;
     int    *nids;
     int     space = 5;
@@ -314,7 +314,7 @@
      * This is a NOP in OpenSSL 1.1.0 and later, where curves are always
      * auto-negotiated.
      */
-#if OPENSSL_VERSION_NUMBER < 0x10100000UL
+#if OPENSSL_VERSION_NUMBER < 0x10100000UL || defined(LIBRESSL_VERSION_NUMBER)
     if (SSL_CTX_set_ecdh_auto(ctx, 1) <= 0) {
 	msg_warn("failed to enable automatic ECDHE curve selection");
 	tls_print_errors();
@@ -327,7 +327,7 @@
 
 void    tls_set_eecdh_curve(SSL_CTX *server_ctx, const char *grade)
 {
-#if OPENSSL_VERSION_NUMBER >= 0x1000000fUL && !defined(OPENSSL_NO_ECDH)
+#if OPENSSL_VERSION_NUMBER >= 0x1000000fUL && !defined(LIBRESSL_VERSION_NUMBER) && !defined(OPENSSL_NO_ECDH)
     int     nid;
     EC_KEY *ecdh;
     const char *curve;
@@ -337,14 +337,14 @@
 #define TLS_EECDH_NONE		1
 #define TLS_EECDH_STRONG	2
 #define TLS_EECDH_ULTRA		3
-#if OPENSSL_VERSION_NUMBER >= 0x1000200fUL
+#if OPENSSL_VERSION_NUMBER >= 0x1000200fUL && !defined(LIBRESSL_VERSION_NUMBER)
 #define TLS_EECDH_AUTO		4
 #endif
     static NAME_CODE eecdh_table[] = {
 	"none", TLS_EECDH_NONE,
 	"strong", TLS_EECDH_STRONG,
 	"ultra", TLS_EECDH_ULTRA,
-#if OPENSSL_VERSION_NUMBER >= 0x1000200fUL
+#if OPENSSL_VERSION_NUMBER >= 0x1000200fUL && !defined(LIBRESSL_VERSION_NUMBER)
 	"auto", TLS_EECDH_AUTO,
 #endif
 	0, TLS_EECDH_INVALID,
@@ -364,7 +364,7 @@
     case TLS_EECDH_ULTRA:
 	curve = var_tls_eecdh_ultra;
 	break;
-#if OPENSSL_VERSION_NUMBER >= 0x1000200fUL
+#if OPENSSL_VERSION_NUMBER >= 0x1000200fUL && !defined(LIBRESSL_VERSION_NUMBER)
     case TLS_EECDH_AUTO:
 	tls_auto_eecdh_curves(server_ctx);
 	return;
diff -ur a/src/tls/tls_misc.c b/src/tls/tls_misc.c
--- a/src/tls/tls_misc.c	2017-07-25 13:38:54.000000000 -0700
+++ b/src/tls/tls_misc.c	2017-07-25 12:30:35.000000000 -0700
@@ -1010,7 +1010,7 @@
 #ifndef OPENSSL_NO_DSA
 	"dsa",
 #endif
-#if OPENSSL_VERSION_NUMBER >= 0x10000000L && !defined(OPENSSL_NO_ECDSA)
+#if OPENSSL_VERSION_NUMBER >= 0x10000000L && !defined(LIBRESSL_VERSION_NUMBER) && !defined(OPENSSL_NO_ECDSA)
 	"ecdsa",
 #endif
 #ifndef OPENSSL_NO_RSA
@@ -1029,7 +1029,7 @@
     long    bits = SSL_OP_ALL;		/* Work around all known bugs */
 
 #if OPENSSL_VERSION_NUMBER >= 0x00908000L && \
-	OPENSSL_VERSION_NUMBER < 0x10000000L
+	OPENSSL_VERSION_NUMBER < 0x10000000L || defined(LIBRESSL_VERSION_NUMBER)
     long    lib_version = OpenSSL_version_num();
 
     /*
diff -ur a/src/tls/tls_rsa.c b/src/tls/tls_rsa.c
--- a/src/tls/tls_rsa.c	2017-07-25 13:38:54.000000000 -0700
+++ b/src/tls/tls_rsa.c	2017-07-25 12:31:47.000000000 -0700
@@ -57,7 +57,7 @@
  /*
   * 2015-12-05: Ephemeral RSA removed from OpenSSL 1.1.0-dev
   */
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 
 /* tls_tmp_rsa_cb - call-back to generate ephemeral RSA key */
 
@@ -76,7 +76,7 @@
 		 export ? "" : "non-", keylength);
 	return 0;
     }
-#if OPENSSL_VERSION_NUMBER >= 0x10000000L
+#if OPENSSL_VERSION_NUMBER >= 0x10000000L && !defined(LIBRESSL_VERSION_NUMBER)
     if (rsa_tmp == 0) {
 	BIGNUM *e = BN_new();
 
@@ -109,7 +109,7 @@
     /*
      * 2015-12-05: Ephemeral RSA removed from OpenSSL 1.1.0-dev
      */
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
     RSA    *rsa;
 
     msg_vstream_init(argv[0], VSTREAM_ERR);
diff -ur a/src/tls/tls_server.c b/src/tls/tls_server.c
--- a/src/tls/tls_server.c	2017-07-25 13:38:54.000000000 -0700
+++ b/src/tls/tls_server.c	2017-07-25 12:32:57.000000000 -0700
@@ -164,7 +164,7 @@
   */
 static const char server_session_id_context[] = "Postfix/TLS";
 
-#if OPENSSL_VERSION_NUMBER >= 0x1000000fL
+#if OPENSSL_VERSION_NUMBER >= 0x1000000fL && !defined(LIBRESSL_VERSION_NUMBER)
 #define GET_SID(s, v, lptr)	((v) = SSL_SESSION_get_id((s), (lptr)))
 
 #else					/* Older OpenSSL releases */
@@ -174,7 +174,7 @@
 #endif					/* OPENSSL_VERSION_NUMBER */
 
  /* OpenSSL 1.1.0 bitrot */
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
 typedef const unsigned char *session_id_t;
 
 #else
@@ -377,7 +377,7 @@
      */
     tls_check_version();
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 
     /*
      * Initialize the OpenSSL library by the book! To start with, we must
@@ -580,7 +580,7 @@
     /*
      * 2015-12-05: Ephemeral RSA removed from OpenSSL 1.1.0-dev
      */
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 
     /*
      * According to OpenSSL documentation, a temporary RSA key is needed when

