/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvs/repository/wo/WebObjects/NewModeler/graphviz/graphviz/dynagraph/graphsearch/gsscan.cpp,v 1.1 2004/05/04 21:50:49 yakimoto Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define gs_yyconst const
#else
#define gs_yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN gs_yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((gs_yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE gs_yyrestart( gs_yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct gs_yy_buffer_state *YY_BUFFER_STATE;

extern int gs_yyleng;
extern FILE *gs_yyin, *gs_yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		gs_yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the gs_yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define gs_yyless(n) \
	do \
		{ \
		/* Undo effects of setting up gs_yytext. */ \
		*gs_yy_cp = gs_yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		gs_yy_c_buf_p = gs_yy_cp = gs_yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up gs_yytext again */ \
		} \
	while ( 0 )

#define unput(c) gs_yyunput( c, gs_yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int gs_yy_size_t;


struct gs_yy_buffer_state
	{
	FILE *gs_yy_input_file;

	char *gs_yy_ch_buf;		/* input buffer */
	char *gs_yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	gs_yy_size_t gs_yy_buf_size;

	/* Number of characters read into gs_yy_ch_buf, not including EOB
	 * characters.
	 */
	int gs_yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int gs_yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int gs_yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int gs_yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int gs_yy_fill_buffer;

	int gs_yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via gs_yyrestart()), so that the user can continue scanning by
	 * just pointing gs_yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE gs_yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER gs_yy_current_buffer


/* gs_yy_hold_char holds the character lost when gs_yytext is formed. */
static char gs_yy_hold_char;

static int gs_yy_n_chars;		/* number of characters read into gs_yy_ch_buf */


int gs_yyleng;

/* Points to current character in buffer. */
static char *gs_yy_c_buf_p = (char *) 0;
static int gs_yy_init = 1;		/* whether we need to initialize */
static int gs_yy_start = 0;	/* start state number */

/* Flag which is used to allow gs_yywrap()'s to do buffer switches
 * instead of setting up a fresh gs_yyin.  A bit of a hack ...
 */
static int gs_yy_did_buffer_switch_on_eof;

void gs_yyrestart YY_PROTO(( FILE *input_file ));

void gs_yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void gs_yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE gs_yy_create_buffer YY_PROTO(( FILE *file, int size ));
void gs_yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void gs_yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void gs_yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER gs_yy_flush_buffer( gs_yy_current_buffer )

YY_BUFFER_STATE gs_yy_scan_buffer YY_PROTO(( char *base, gs_yy_size_t size ));
YY_BUFFER_STATE gs_yy_scan_string YY_PROTO(( gs_yyconst char *gs_yy_str ));
YY_BUFFER_STATE gs_yy_scan_bytes YY_PROTO(( gs_yyconst char *bytes, int len ));

static void *gs_yy_flex_alloc YY_PROTO(( gs_yy_size_t ));
static void *gs_yy_flex_realloc YY_PROTO(( void *, gs_yy_size_t ));
static void gs_yy_flex_free YY_PROTO(( void * ));

#define gs_yy_new_buffer gs_yy_create_buffer

#define gs_yy_set_interactive(is_interactive) \
	{ \
	if ( ! gs_yy_current_buffer ) \
		gs_yy_current_buffer = gs_yy_create_buffer( gs_yyin, YY_BUF_SIZE ); \
	gs_yy_current_buffer->gs_yy_is_interactive = is_interactive; \
	}

#define gs_yy_set_bol(at_bol) \
	{ \
	if ( ! gs_yy_current_buffer ) \
		gs_yy_current_buffer = gs_yy_create_buffer( gs_yyin, YY_BUF_SIZE ); \
	gs_yy_current_buffer->gs_yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (gs_yy_current_buffer->gs_yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *gs_yyin = (FILE *) 0, *gs_yyout = (FILE *) 0;
typedef int gs_yy_state_type;
extern char *gs_yytext;
#define gs_yytext_ptr gs_yytext

static gs_yy_state_type gs_yy_get_previous_state YY_PROTO(( void ));
static gs_yy_state_type gs_yy_try_NUL_trans YY_PROTO(( gs_yy_state_type current_state ));
static int gs_yy_get_next_buffer YY_PROTO(( void ));
static void gs_yy_fatal_error YY_PROTO(( gs_yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up gs_yytext.
 */
#define YY_DO_BEFORE_ACTION \
	gs_yytext_ptr = gs_yy_bp; \
	gs_yyleng = (int) (gs_yy_cp - gs_yy_bp); \
	gs_yy_hold_char = *gs_yy_cp; \
	*gs_yy_cp = '\0'; \
	gs_yy_c_buf_p = gs_yy_cp;

#define YY_NUM_RULES 35
#define YY_END_OF_BUFFER 36
static gs_yyconst short int gs_yy_accept[129] =
    {   0,
        0,    0,    5,    5,   33,   33,   36,   34,   10,    2,
       30,    9,   34,   34,   34,   29,    1,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,    5,    3,    6,   33,    3,   31,   35,    9,   28,
        0,   29,   29,    4,    8,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,    5,    6,    6,    7,   33,   33,   32,    8,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       12,   29,   29,   29,   24,   29,   11,   21,   29,   29,

       29,   29,   29,   23,   22,   29,   29,   13,   17,   29,
       29,   29,   29,   26,   29,   29,   27,   18,   19,   20,
       29,   16,   29,   25,   15,   29,   14,    0
    } ;

static gs_yyconst int gs_yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    1,    1,
        1,    6,    1,    1,    7,    8,    9,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    1,    1,    1,
        1,   11,    1,   12,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        1,   14,    1,    1,   13,    1,   15,   16,   17,   18,

       19,   20,   21,   22,   23,   13,   24,   25,   26,   27,
       28,   29,   13,   30,   31,   32,   33,   34,   35,   13,
       36,   13,    1,    1,    1,    1,    1,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13
    } ;

static gs_yyconst int gs_yy_meta[37] =
    {   0,
        1,    1,    2,    3,    1,    4,    1,    1,    1,    5,
        1,    1,    5,    3,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5
    } ;

static gs_yyconst short int gs_yy_base[138] =
    {   0,
        0,    0,   34,   35,   39,   41,  175,  176,  176,  176,
      176,    0,   39,  164,   42,   44,  176,    0,  148,  153,
      153,  140,  142,  140,  139,  138,  136,  149,   37,  136,
      139,    0,  176,   51,    0,    0,  176,  158,    0,  176,
      150,   51,  149,  176,    0,  148,    0,  129,   38,  135,
      140,   33,  137,  135,  134,  132,  118,   50,  133,  123,
      128,    0,   60,   66,  176,    0,  176,  176,    0,  136,
      114,  121,  124,  123,  112,  107,  120,  114,  114,  117,
      108,  102,  103,   99,  110,  102,   94,  109,  100,   94,
        0,  103,   92,   93,    0,  102,    0,    0,  102,  103,

      100,   88,  100,    0,    0,   97,   93,    0,    0,   71,
       61,   64,   70,    0,   72,   50,    0,    0,    0,    0,
       46,    0,   39,    0,    0,   45,    0,  176,   75,   80,
       85,   34,   90,   95,  100,  105,  110
    } ;

static gs_yyconst short int gs_yy_def[138] =
    {   0,
      128,    1,  129,  129,  130,  130,  128,  128,  128,  128,
      128,  131,  128,  128,  128,  128,  128,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  133,  128,  134,  135,  135,  128,  136,  131,  128,
      128,  128,  128,  128,  137,  128,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  133,  134,  134,  128,  135,  128,  128,  137,  128,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,

      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,    0,  128,  128,
      128,  128,  128,  128,  128,  128,  128
    } ;

static gs_yyconst short int gs_yy_nxt[213] =
    {   0,
        8,    9,   10,   11,   12,    8,   13,   14,   15,   16,
        8,   17,   18,    8,   18,   18,   19,   20,   21,   18,
       22,   18,   23,   18,   24,   25,   26,   27,   28,   18,
       29,   18,   30,   31,   18,   18,   33,   33,   47,   34,
       34,   36,   37,   36,   37,   40,   41,   44,   42,   40,
       45,   46,   38,   42,   38,   58,   64,   72,   46,   65,
       42,   76,   73,   77,   83,  128,  127,  126,  128,   59,
       84,   64,  125,  124,   65,   32,   32,   32,   32,   32,
       35,   35,   35,   35,   35,   39,  123,   39,   39,   39,
       62,  122,   62,  121,   62,   63,  120,   63,   63,   63,

       66,   66,  119,   66,   66,   67,   67,   67,   67,   67,
       69,  118,   69,   69,   69,  117,  116,  115,  114,  113,
      112,  111,  110,  109,  108,  107,  106,  105,  104,  103,
      102,  101,  100,   99,   98,   97,   96,   95,   94,   93,
       92,   91,   90,   89,   88,   70,   87,   86,   85,   82,
       81,   80,   79,   78,   75,   74,   71,   70,   43,   43,
       68,   61,   60,   57,   56,   55,   54,   53,   52,   51,
       50,   49,   48,   43,  128,    7,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,

      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128
    } ;

static gs_yyconst short int gs_yy_chk[213] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    4,  132,    3,
        4,    5,    5,    6,    6,   13,   13,   15,   13,   13,
       15,   16,    5,   16,    6,   29,   34,   49,   42,   34,
       42,   52,   49,   52,   58,   63,  126,  123,   63,   29,
       58,   64,  121,  116,   64,  129,  129,  129,  129,  129,
      130,  130,  130,  130,  130,  131,  115,  131,  131,  131,
      133,  113,  133,  112,  133,  134,  111,  134,  134,  134,

      135,  135,  110,  135,  135,  136,  136,  136,  136,  136,
      137,  107,  137,  137,  137,  106,  103,  102,  101,  100,
       99,   96,   94,   93,   92,   90,   89,   88,   87,   86,
       85,   84,   83,   82,   81,   80,   79,   78,   77,   76,
       75,   74,   73,   72,   71,   70,   61,   60,   59,   57,
       56,   55,   54,   53,   51,   50,   48,   46,   43,   41,
       38,   31,   30,   28,   27,   26,   25,   24,   23,   22,
       21,   20,   19,   14,    7,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,

      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128
    } ;

static gs_yy_state_type gs_yy_last_accepting_state;
static char *gs_yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define gs_yymore() gs_yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *gs_yytext;
#line 1 "gsscan.lpp"
#define INITIAL 0
/* requires flex (i.e. not lex)  */
#line 3 "gsscan.lpp"
#pragma prototyped
#include <stdio.h>
extern "C" {
#include "agraph.h"
}
#include "graphsearch/gsgram.h"
#include "common/StringDict.h"
#include "graphsearch/gsxep.h"

#define isatty(x)	1

#define GRAPH_EOF_TOKEN		'@'		/* lex class must be defined below */
	/* this is a workaround for linux flex */
#ifndef gs_yywrap
#define gs_yywrap() 1
#endif
static int line_num = 1;

/* buffer for arbitrary length strings (longer than BUFSIZ) */
static char	*Sbuf,*Sptr,*Send;
static void beginstr(void) {
	if (Sbuf == NIL(char*)) {
		Sbuf = (char*)malloc(BUFSIZ);
		Send = Sbuf + BUFSIZ;
	}
	Sptr = Sbuf;
	*Sptr = 0; // for ""
}
static void addstr(char *src) {
	char	c;
	if (Sptr > Sbuf) Sptr--;
	do {
		do {c = *Sptr++ = *src++;} while (c && (Sptr < Send));
		if (c) {
			long	sz = Send - Sbuf;
			long	off = Sptr - Sbuf;
			sz *= 2;
			Sbuf = (char*)realloc(Sbuf,sz);
			Send = Sbuf + sz;
			Sptr = Sbuf + off;
		}
	} while (c);
}
static void endstr(void) {
	gs_yylval.str = (char*)agstrdup(NIL(Agraph_t*),Sbuf);
}
#define comment 1

#define qstring 2

#line 505 "lex.gs_yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int gs_yywrap YY_PROTO(( void ));
#else
extern int gs_yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void gs_yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef gs_yytext_ptr
static void gs_yy_flex_strncpy YY_PROTO(( char *, gs_yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int gs_yy_flex_strlen YY_PROTO(( gs_yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int gs_yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int gs_yy_start_stack_ptr = 0;
static int gs_yy_start_stack_depth = 0;
static int *gs_yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void gs_yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void gs_yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int gs_yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( gs_yytext, gs_yyleng, 1, gs_yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( gs_yy_current_buffer->gs_yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( gs_yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( gs_yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, gs_yyin )) == 0) \
		  && ferror( gs_yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "gs_yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef gs_yyterminate
#define gs_yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) gs_yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int gs_yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after gs_yytext and gs_yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register gs_yy_state_type gs_yy_current_state;
	register char *gs_yy_cp = NULL, *gs_yy_bp = NULL;
	register int gs_yy_act;

#line 58 "gsscan.lpp"

#line 658 "lex.gs_yy.c"

	if ( gs_yy_init )
		{
		gs_yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! gs_yy_start )
			gs_yy_start = 1;	/* first start state */

		if ( ! gs_yyin )
			gs_yyin = stdin;

		if ( ! gs_yyout )
			gs_yyout = stdout;

		if ( ! gs_yy_current_buffer )
			gs_yy_current_buffer =
				gs_yy_create_buffer( gs_yyin, YY_BUF_SIZE );

		gs_yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		gs_yy_cp = gs_yy_c_buf_p;

		/* Support of gs_yytext. */
		*gs_yy_cp = gs_yy_hold_char;

		/* gs_yy_bp points to the position in gs_yy_ch_buf of the start of
		 * the current run.
		 */
		gs_yy_bp = gs_yy_cp;

		gs_yy_current_state = gs_yy_start;
gs_yy_match:
		do
			{
			register YY_CHAR gs_yy_c = gs_yy_ec[YY_SC_TO_UI(*gs_yy_cp)];
			if ( gs_yy_accept[gs_yy_current_state] )
				{
				gs_yy_last_accepting_state = gs_yy_current_state;
				gs_yy_last_accepting_cpos = gs_yy_cp;
				}
			while ( gs_yy_chk[gs_yy_base[gs_yy_current_state] + gs_yy_c] != gs_yy_current_state )
				{
				gs_yy_current_state = (int) gs_yy_def[gs_yy_current_state];
				if ( gs_yy_current_state >= 129 )
					gs_yy_c = gs_yy_meta[(unsigned int) gs_yy_c];
				}
			gs_yy_current_state = gs_yy_nxt[gs_yy_base[gs_yy_current_state] + (unsigned int) gs_yy_c];
			++gs_yy_cp;
			}
		while ( gs_yy_base[gs_yy_current_state] != 176 );

gs_yy_find_action:
		gs_yy_act = gs_yy_accept[gs_yy_current_state];
		if ( gs_yy_act == 0 )
			{ /* have to back up */
			gs_yy_cp = gs_yy_last_accepting_cpos;
			gs_yy_current_state = gs_yy_last_accepting_state;
			gs_yy_act = gs_yy_accept[gs_yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( gs_yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*gs_yy_cp = gs_yy_hold_char;
			gs_yy_cp = gs_yy_last_accepting_cpos;
			gs_yy_current_state = gs_yy_last_accepting_state;
			goto gs_yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "gsscan.lpp"
return(EOF);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "gsscan.lpp"
{line_num++; return(gs_yytext[0]);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 61 "gsscan.lpp"
line_num++;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 62 "gsscan.lpp"
BEGIN(comment);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 63 "gsscan.lpp"
/* eat anything not a '*' */
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 64 "gsscan.lpp"
/* eat up '*'s not followed by '/'s */
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 65 "gsscan.lpp"
BEGIN(INITIAL);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 66 "gsscan.lpp"
/* ignore C++-style comments */
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 67 "gsscan.lpp"
/* ignore shell-like comments */
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 68 "gsscan.lpp"
/* ignore whitespace */
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 69 "gsscan.lpp"
return(T_node);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 70 "gsscan.lpp"
return(T_edge);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 71 "gsscan.lpp"
return(T_graph);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 72 "gsscan.lpp"
return(T_subgraph);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 73 "gsscan.lpp"
return(T_pattern);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 74 "gsscan.lpp"
return(T_search);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 75 "gsscan.lpp"
return(T_input);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 77 "gsscan.lpp"
return(T_delete);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 78 "gsscan.lpp"
return(T_insert);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 79 "gsscan.lpp"
return(T_modify);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 80 "gsscan.lpp"
return(T_open);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 81 "gsscan.lpp"
return(T_close);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 82 "gsscan.lpp"
return(T_view);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 83 "gsscan.lpp"
return(T_lock);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 84 "gsscan.lpp"
return(T_unlock);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 85 "gsscan.lpp"
return(T_segue);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 86 "gsscan.lpp"
return(T_define);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 89 "gsscan.lpp"
return(T_edgeop);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 90 "gsscan.lpp"
{ gs_yylval.str = agstrdup(NIL(Agraph_t*),gs_yytext); return(T_id); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 91 "gsscan.lpp"
BEGIN(qstring); beginstr();
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 92 "gsscan.lpp"
BEGIN(INITIAL); endstr(); return (T_id);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 93 "gsscan.lpp"
line_num++; /* ignore escaped newlines */
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 94 "gsscan.lpp"
addstr(gs_yytext);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 95 "gsscan.lpp"
return (gs_yytext[0]);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 96 "gsscan.lpp"
ECHO;
	YY_BREAK
#line 916 "lex.gs_yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(qstring):
	gs_yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int gs_yy_amount_of_matched_text = (int) (gs_yy_cp - gs_yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*gs_yy_cp = gs_yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( gs_yy_current_buffer->gs_yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed gs_yyin at a new source and called
			 * gs_yylex().  If so, then we have to assure
			 * consistency between gs_yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			gs_yy_n_chars = gs_yy_current_buffer->gs_yy_n_chars;
			gs_yy_current_buffer->gs_yy_input_file = gs_yyin;
			gs_yy_current_buffer->gs_yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for gs_yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since gs_yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( gs_yy_c_buf_p <= &gs_yy_current_buffer->gs_yy_ch_buf[gs_yy_n_chars] )
			{ /* This was really a NUL. */
			gs_yy_state_type gs_yy_next_state;

			gs_yy_c_buf_p = gs_yytext_ptr + gs_yy_amount_of_matched_text;

			gs_yy_current_state = gs_yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * gs_yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			gs_yy_next_state = gs_yy_try_NUL_trans( gs_yy_current_state );

			gs_yy_bp = gs_yytext_ptr + YY_MORE_ADJ;

			if ( gs_yy_next_state )
				{
				/* Consume the NUL. */
				gs_yy_cp = ++gs_yy_c_buf_p;
				gs_yy_current_state = gs_yy_next_state;
				goto gs_yy_match;
				}

			else
				{
				gs_yy_cp = gs_yy_c_buf_p;
				goto gs_yy_find_action;
				}
			}

		else switch ( gs_yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				gs_yy_did_buffer_switch_on_eof = 0;

				if ( gs_yywrap() )
					{
					/* Note: because we've taken care in
					 * gs_yy_get_next_buffer() to have set up
					 * gs_yytext, we can now set up
					 * gs_yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					gs_yy_c_buf_p = gs_yytext_ptr + YY_MORE_ADJ;

					gs_yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! gs_yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				gs_yy_c_buf_p =
					gs_yytext_ptr + gs_yy_amount_of_matched_text;

				gs_yy_current_state = gs_yy_get_previous_state();

				gs_yy_cp = gs_yy_c_buf_p;
				gs_yy_bp = gs_yytext_ptr + YY_MORE_ADJ;
				goto gs_yy_match;

			case EOB_ACT_LAST_MATCH:
				gs_yy_c_buf_p =
				&gs_yy_current_buffer->gs_yy_ch_buf[gs_yy_n_chars];

				gs_yy_current_state = gs_yy_get_previous_state();

				gs_yy_cp = gs_yy_c_buf_p;
				gs_yy_bp = gs_yytext_ptr + YY_MORE_ADJ;
				goto gs_yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of gs_yylex */


/* gs_yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int gs_yy_get_next_buffer()
	{
	register char *dest = gs_yy_current_buffer->gs_yy_ch_buf;
	register char *source = gs_yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( gs_yy_c_buf_p > &gs_yy_current_buffer->gs_yy_ch_buf[gs_yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( gs_yy_current_buffer->gs_yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( gs_yy_c_buf_p - gs_yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (gs_yy_c_buf_p - gs_yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( gs_yy_current_buffer->gs_yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		gs_yy_current_buffer->gs_yy_n_chars = gs_yy_n_chars = 0;

	else
		{
		int num_to_read =
			gs_yy_current_buffer->gs_yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = gs_yy_current_buffer;

			int gs_yy_c_buf_p_offset =
				(int) (gs_yy_c_buf_p - b->gs_yy_ch_buf);

			if ( b->gs_yy_is_our_buffer )
				{
				int new_size = b->gs_yy_buf_size * 2;

				if ( new_size <= 0 )
					b->gs_yy_buf_size += b->gs_yy_buf_size / 8;
				else
					b->gs_yy_buf_size *= 2;

				b->gs_yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					gs_yy_flex_realloc( (void *) b->gs_yy_ch_buf,
							 b->gs_yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->gs_yy_ch_buf = 0;

			if ( ! b->gs_yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			gs_yy_c_buf_p = &b->gs_yy_ch_buf[gs_yy_c_buf_p_offset];

			num_to_read = gs_yy_current_buffer->gs_yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&gs_yy_current_buffer->gs_yy_ch_buf[number_to_move]),
			gs_yy_n_chars, num_to_read );

		gs_yy_current_buffer->gs_yy_n_chars = gs_yy_n_chars;
		}

	if ( gs_yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			gs_yyrestart( gs_yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			gs_yy_current_buffer->gs_yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	gs_yy_n_chars += number_to_move;
	gs_yy_current_buffer->gs_yy_ch_buf[gs_yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	gs_yy_current_buffer->gs_yy_ch_buf[gs_yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	gs_yytext_ptr = &gs_yy_current_buffer->gs_yy_ch_buf[0];

	return ret_val;
	}


/* gs_yy_get_previous_state - get the state just before the EOB char was reached */

static gs_yy_state_type gs_yy_get_previous_state()
	{
	register gs_yy_state_type gs_yy_current_state;
	register char *gs_yy_cp;

	gs_yy_current_state = gs_yy_start;

	for ( gs_yy_cp = gs_yytext_ptr + YY_MORE_ADJ; gs_yy_cp < gs_yy_c_buf_p; ++gs_yy_cp )
		{
		register YY_CHAR gs_yy_c = (*gs_yy_cp ? gs_yy_ec[YY_SC_TO_UI(*gs_yy_cp)] : 1);
		if ( gs_yy_accept[gs_yy_current_state] )
			{
			gs_yy_last_accepting_state = gs_yy_current_state;
			gs_yy_last_accepting_cpos = gs_yy_cp;
			}
		while ( gs_yy_chk[gs_yy_base[gs_yy_current_state] + gs_yy_c] != gs_yy_current_state )
			{
			gs_yy_current_state = (int) gs_yy_def[gs_yy_current_state];
			if ( gs_yy_current_state >= 129 )
				gs_yy_c = gs_yy_meta[(unsigned int) gs_yy_c];
			}
		gs_yy_current_state = gs_yy_nxt[gs_yy_base[gs_yy_current_state] + (unsigned int) gs_yy_c];
		}

	return gs_yy_current_state;
	}


/* gs_yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = gs_yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static gs_yy_state_type gs_yy_try_NUL_trans( gs_yy_state_type gs_yy_current_state )
#else
static gs_yy_state_type gs_yy_try_NUL_trans( gs_yy_current_state )
gs_yy_state_type gs_yy_current_state;
#endif
	{
	register int gs_yy_is_jam;
	register char *gs_yy_cp = gs_yy_c_buf_p;

	register YY_CHAR gs_yy_c = 1;
	if ( gs_yy_accept[gs_yy_current_state] )
		{
		gs_yy_last_accepting_state = gs_yy_current_state;
		gs_yy_last_accepting_cpos = gs_yy_cp;
		}
	while ( gs_yy_chk[gs_yy_base[gs_yy_current_state] + gs_yy_c] != gs_yy_current_state )
		{
		gs_yy_current_state = (int) gs_yy_def[gs_yy_current_state];
		if ( gs_yy_current_state >= 129 )
			gs_yy_c = gs_yy_meta[(unsigned int) gs_yy_c];
		}
	gs_yy_current_state = gs_yy_nxt[gs_yy_base[gs_yy_current_state] + (unsigned int) gs_yy_c];
	gs_yy_is_jam = (gs_yy_current_state == 128);

	return gs_yy_is_jam ? 0 : gs_yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void gs_yyunput( int c, register char *gs_yy_bp )
#else
static void gs_yyunput( c, gs_yy_bp )
int c;
register char *gs_yy_bp;
#endif
	{
	register char *gs_yy_cp = gs_yy_c_buf_p;

	/* undo effects of setting up gs_yytext */
	*gs_yy_cp = gs_yy_hold_char;

	if ( gs_yy_cp < gs_yy_current_buffer->gs_yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = gs_yy_n_chars + 2;
		register char *dest = &gs_yy_current_buffer->gs_yy_ch_buf[
					gs_yy_current_buffer->gs_yy_buf_size + 2];
		register char *source =
				&gs_yy_current_buffer->gs_yy_ch_buf[number_to_move];

		while ( source > gs_yy_current_buffer->gs_yy_ch_buf )
			*--dest = *--source;

		gs_yy_cp += (int) (dest - source);
		gs_yy_bp += (int) (dest - source);
		gs_yy_current_buffer->gs_yy_n_chars =
			gs_yy_n_chars = gs_yy_current_buffer->gs_yy_buf_size;

		if ( gs_yy_cp < gs_yy_current_buffer->gs_yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--gs_yy_cp = (char) c;


	gs_yytext_ptr = gs_yy_bp;
	gs_yy_hold_char = *gs_yy_cp;
	gs_yy_c_buf_p = gs_yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int gs_yyinput()
#else
static int input()
#endif
	{
	int c;

	*gs_yy_c_buf_p = gs_yy_hold_char;

	if ( *gs_yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* gs_yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( gs_yy_c_buf_p < &gs_yy_current_buffer->gs_yy_ch_buf[gs_yy_n_chars] )
			/* This was really a NUL. */
			*gs_yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = gs_yy_c_buf_p - gs_yytext_ptr;
			++gs_yy_c_buf_p;

			switch ( gs_yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because gs_yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					gs_yyrestart( gs_yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( gs_yywrap() )
						return EOF;

					if ( ! gs_yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return gs_yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					gs_yy_c_buf_p = gs_yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) gs_yy_c_buf_p;	/* cast for 8-bit char's */
	*gs_yy_c_buf_p = '\0';	/* preserve gs_yytext */
	gs_yy_hold_char = *++gs_yy_c_buf_p;


	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void gs_yyrestart( FILE *input_file )
#else
void gs_yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! gs_yy_current_buffer )
		gs_yy_current_buffer = gs_yy_create_buffer( gs_yyin, YY_BUF_SIZE );

	gs_yy_init_buffer( gs_yy_current_buffer, input_file );
	gs_yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void gs_yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void gs_yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( gs_yy_current_buffer == new_buffer )
		return;

	if ( gs_yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*gs_yy_c_buf_p = gs_yy_hold_char;
		gs_yy_current_buffer->gs_yy_buf_pos = gs_yy_c_buf_p;
		gs_yy_current_buffer->gs_yy_n_chars = gs_yy_n_chars;
		}

	gs_yy_current_buffer = new_buffer;
	gs_yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (gs_yywrap()) processing, but the only time this flag
	 * is looked at is after gs_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	gs_yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void gs_yy_load_buffer_state( void )
#else
void gs_yy_load_buffer_state()
#endif
	{
	gs_yy_n_chars = gs_yy_current_buffer->gs_yy_n_chars;
	gs_yytext_ptr = gs_yy_c_buf_p = gs_yy_current_buffer->gs_yy_buf_pos;
	gs_yyin = gs_yy_current_buffer->gs_yy_input_file;
	gs_yy_hold_char = *gs_yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE gs_yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE gs_yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) gs_yy_flex_alloc( sizeof( struct gs_yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in gs_yy_create_buffer()" );

	b->gs_yy_buf_size = size;

	/* gs_yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->gs_yy_ch_buf = (char *) gs_yy_flex_alloc( b->gs_yy_buf_size + 2 );
	if ( ! b->gs_yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in gs_yy_create_buffer()" );

	b->gs_yy_is_our_buffer = 1;

	gs_yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void gs_yy_delete_buffer( YY_BUFFER_STATE b )
#else
void gs_yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == gs_yy_current_buffer )
		gs_yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->gs_yy_is_our_buffer )
		gs_yy_flex_free( (void *) b->gs_yy_ch_buf );

	gs_yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void gs_yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void gs_yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	gs_yy_flush_buffer( b );

	b->gs_yy_input_file = file;
	b->gs_yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->gs_yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->gs_yy_is_interactive = 0;
#else
	b->gs_yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void gs_yy_flush_buffer( YY_BUFFER_STATE b )
#else
void gs_yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->gs_yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->gs_yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->gs_yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->gs_yy_buf_pos = &b->gs_yy_ch_buf[0];

	b->gs_yy_at_bol = 1;
	b->gs_yy_buffer_status = YY_BUFFER_NEW;

	if ( b == gs_yy_current_buffer )
		gs_yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE gs_yy_scan_buffer( char *base, gs_yy_size_t size )
#else
YY_BUFFER_STATE gs_yy_scan_buffer( base, size )
char *base;
gs_yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) gs_yy_flex_alloc( sizeof( struct gs_yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in gs_yy_scan_buffer()" );

	b->gs_yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->gs_yy_buf_pos = b->gs_yy_ch_buf = base;
	b->gs_yy_is_our_buffer = 0;
	b->gs_yy_input_file = 0;
	b->gs_yy_n_chars = b->gs_yy_buf_size;
	b->gs_yy_is_interactive = 0;
	b->gs_yy_at_bol = 1;
	b->gs_yy_fill_buffer = 0;
	b->gs_yy_buffer_status = YY_BUFFER_NEW;

	gs_yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE gs_yy_scan_string( gs_yyconst char *gs_yy_str )
#else
YY_BUFFER_STATE gs_yy_scan_string( gs_yy_str )
gs_yyconst char *gs_yy_str;
#endif
	{
	int len;
	for ( len = 0; gs_yy_str[len]; ++len )
		;

	return gs_yy_scan_bytes( gs_yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE gs_yy_scan_bytes( gs_yyconst char *bytes, int len )
#else
YY_BUFFER_STATE gs_yy_scan_bytes( bytes, len )
gs_yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	gs_yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) gs_yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in gs_yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = gs_yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in gs_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->gs_yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void gs_yy_push_state( int new_state )
#else
static void gs_yy_push_state( new_state )
int new_state;
#endif
	{
	if ( gs_yy_start_stack_ptr >= gs_yy_start_stack_depth )
		{
		gs_yy_size_t new_size;

		gs_yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = gs_yy_start_stack_depth * sizeof( int );

		if ( ! gs_yy_start_stack )
			gs_yy_start_stack = (int *) gs_yy_flex_alloc( new_size );

		else
			gs_yy_start_stack = (int *) gs_yy_flex_realloc(
					(void *) gs_yy_start_stack, new_size );

		if ( ! gs_yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	gs_yy_start_stack[gs_yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void gs_yy_pop_state()
	{
	if ( --gs_yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(gs_yy_start_stack[gs_yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int gs_yy_top_state()
	{
	return gs_yy_start_stack[gs_yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void gs_yy_fatal_error( gs_yyconst char msg[] )
#else
static void gs_yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine gs_yyless() so it works in section 3 code. */

#undef gs_yyless
#define gs_yyless(n) \
	do \
		{ \
		/* Undo effects of setting up gs_yytext. */ \
		gs_yytext[gs_yyleng] = gs_yy_hold_char; \
		gs_yy_c_buf_p = gs_yytext + n; \
		gs_yy_hold_char = *gs_yy_c_buf_p; \
		*gs_yy_c_buf_p = '\0'; \
		gs_yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef gs_yytext_ptr
#ifdef YY_USE_PROTOS
static void gs_yy_flex_strncpy( char *s1, gs_yyconst char *s2, int n )
#else
static void gs_yy_flex_strncpy( s1, s2, n )
char *s1;
gs_yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int gs_yy_flex_strlen( gs_yyconst char *s )
#else
static int gs_yy_flex_strlen( s )
gs_yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *gs_yy_flex_alloc( gs_yy_size_t size )
#else
static void *gs_yy_flex_alloc( size )
gs_yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *gs_yy_flex_realloc( void *ptr, gs_yy_size_t size )
#else
static void *gs_yy_flex_realloc( ptr, size )
void *ptr;
gs_yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void gs_yy_flex_free( void *ptr )
#else
static void gs_yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	gs_yylex();
	return 0;
	}
#endif
#line 96 "gsscan.lpp"

void gs_yyerror(char *str)
{
	fprintf(stderr,"graphsearch: %s in line %d near '%s'\n",str,line_num,gs_yytext);
	throw ParseError();
}
/* must be here to see flex's macro defns */
void lexeof() { unput(GRAPH_EOF_TOKEN); }
