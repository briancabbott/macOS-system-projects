'\" t
.\"     Title: git-worktree
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 11/04/2019
.\"    Manual: Git Manual
.\"    Source: Git 2.24.0
.\"  Language: English
.\"
.TH "GIT\-WORKTREE" "1" "11/04/2019" "Git 2\&.24\&.0" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-worktree \- Manage multiple working trees
.SH "SYNOPSIS"
.sp
.nf
\fIgit worktree add\fR [\-f] [\-\-detach] [\-\-checkout] [\-\-lock] [\-b <new\-branch>] <path> [<commit\-ish>]
\fIgit worktree list\fR [\-\-porcelain]
\fIgit worktree lock\fR [\-\-reason <string>] <worktree>
\fIgit worktree move\fR <worktree> <new\-path>
\fIgit worktree prune\fR [\-n] [\-v] [\-\-expire <expire>]
\fIgit worktree remove\fR [\-f] <worktree>
\fIgit worktree unlock\fR <worktree>
.fi
.sp
.SH "DESCRIPTION"
.sp
Manage multiple working trees attached to the same repository\&.
.sp
A git repository can support multiple working trees, allowing you to check out more than one branch at a time\&. With \fBgit worktree add\fR a new working tree is associated with the repository\&. This new working tree is called a "linked working tree" as opposed to the "main working tree" prepared by "git init" or "git clone"\&. A repository has one main working tree (if it\(cqs not a bare repository) and zero or more linked working trees\&. When you are done with a linked working tree, remove it with \fBgit worktree remove\fR\&.
.sp
If a working tree is deleted without using \fBgit worktree remove\fR, then its associated administrative files, which reside in the repository (see "DETAILS" below), will eventually be removed automatically (see \fBgc\&.worktreePruneExpire\fR in \fBgit-config\fR(1)), or you can run \fBgit worktree prune\fR in the main or any linked working tree to clean up any stale administrative files\&.
.sp
If a linked working tree is stored on a portable device or network share which is not always mounted, you can prevent its administrative files from being pruned by issuing the \fBgit worktree lock\fR command, optionally specifying \fB\-\-reason\fR to explain why the working tree is locked\&.
.SH "COMMANDS"
.PP
add <path> [<commit\-ish>]
.RS 4
Create
\fB<path>\fR
and checkout
\fB<commit\-ish>\fR
into it\&. The new working directory is linked to the current repository, sharing everything except working directory specific files such as HEAD, index, etc\&.
\fB\-\fR
may also be specified as
\fB<commit\-ish>\fR; it is synonymous with
\fB@{\-1}\fR\&.
.sp
If <commit\-ish> is a branch name (call it
\fB<branch>\fR) and is not found, and neither
\fB\-b\fR
nor
\fB\-B\fR
nor
\fB\-\-detach\fR
are used, but there does exist a tracking branch in exactly one remote (call it
\fB<remote>\fR) with a matching name, treat as equivalent to:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git worktree add \-\-track \-b <branch> <path> <remote>/<branch>
.fi
.if n \{\
.RE
.\}
.sp
If the branch exists in multiple remotes and one of them is named by the
\fBcheckout\&.defaultRemote\fR
configuration variable, we\(cqll use that one for the purposes of disambiguation, even if the
\fB<branch>\fR
isn\(cqt unique across all remotes\&. Set it to e\&.g\&.
\fBcheckout\&.defaultRemote=origin\fR
to always checkout remote branches from there if
\fB<branch>\fR
is ambiguous but exists on the
\fIorigin\fR
remote\&. See also
\fBcheckout\&.defaultRemote\fR
in
\fBgit-config\fR(1)\&.
.sp
If
\fB<commit\-ish>\fR
is omitted and neither
\fB\-b\fR
nor
\fB\-B\fR
nor
\fB\-\-detach\fR
used, then, as a convenience, the new worktree is associated with a branch (call it
\fB<branch>\fR) named after
\fB$(basename <path>)\fR\&. If
\fB<branch>\fR
doesn\(cqt exist, a new branch based on HEAD is automatically created as if
\fB\-b <branch>\fR
was given\&. If
\fB<branch>\fR
does exist, it will be checked out in the new worktree, if it\(cqs not checked out anywhere else, otherwise the command will refuse to create the worktree (unless
\fB\-\-force\fR
is used)\&.
.RE
.PP
list
.RS 4
List details of each worktree\&. The main worktree is listed first, followed by each of the linked worktrees\&. The output details include if the worktree is bare, the revision currently checked out, and the branch currently checked out (or
\fIdetached HEAD\fR
if none)\&.
.RE
.PP
lock
.RS 4
If a working tree is on a portable device or network share which is not always mounted, lock it to prevent its administrative files from being pruned automatically\&. This also prevents it from being moved or deleted\&. Optionally, specify a reason for the lock with
\fB\-\-reason\fR\&.
.RE
.PP
move
.RS 4
Move a working tree to a new location\&. Note that the main working tree or linked working trees containing submodules cannot be moved\&.
.RE
.PP
prune
.RS 4
Prune working tree information in $GIT_DIR/worktrees\&.
.RE
.PP
remove
.RS 4
Remove a working tree\&. Only clean working trees (no untracked files and no modification in tracked files) can be removed\&. Unclean working trees or ones with submodules can be removed with
\fB\-\-force\fR\&. The main working tree cannot be removed\&.
.RE
.PP
unlock
.RS 4
Unlock a working tree, allowing it to be pruned, moved or deleted\&.
.RE
.SH "OPTIONS"
.PP
\-f, \-\-force
.RS 4
By default,
\fBadd\fR
refuses to create a new working tree when
\fB<commit\-ish>\fR
is a branch name and is already checked out by another working tree, or if
\fB<path>\fR
is already assigned to some working tree but is missing (for instance, if
\fB<path>\fR
was deleted manually)\&. This option overrides these safeguards\&. To add a missing but locked working tree path, specify
\fB\-\-force\fR
twice\&.
.sp
\fBmove\fR
refuses to move a locked working tree unless
\fB\-\-force\fR
is specified twice\&.
.sp
\fBremove\fR
refuses to remove an unclean working tree unless
\fB\-\-force\fR
is used\&. To remove a locked working tree, specify
\fB\-\-force\fR
twice\&.
.RE
.PP
\-b <new\-branch>, \-B <new\-branch>
.RS 4
With
\fBadd\fR, create a new branch named
\fB<new\-branch>\fR
starting at
\fB<commit\-ish>\fR, and check out
\fB<new\-branch>\fR
into the new working tree\&. If
\fB<commit\-ish>\fR
is omitted, it defaults to HEAD\&. By default,
\fB\-b\fR
refuses to create a new branch if it already exists\&.
\fB\-B\fR
overrides this safeguard, resetting
\fB<new\-branch>\fR
to
\fB<commit\-ish>\fR\&.
.RE
.PP
\-\-detach
.RS 4
With
\fBadd\fR, detach HEAD in the new working tree\&. See "DETACHED HEAD" in
\fBgit-checkout\fR(1)\&.
.RE
.PP
\-\-[no\-]checkout
.RS 4
By default,
\fBadd\fR
checks out
\fB<commit\-ish>\fR, however,
\fB\-\-no\-checkout\fR
can be used to suppress checkout in order to make customizations, such as configuring sparse\-checkout\&. See "Sparse checkout" in
\fBgit-read-tree\fR(1)\&.
.RE
.PP
\-\-[no\-]guess\-remote
.RS 4
With
\fBworktree add <path>\fR, without
\fB<commit\-ish>\fR, instead of creating a new branch from HEAD, if there exists a tracking branch in exactly one remote matching the basename of
\fB<path>\fR, base the new branch on the remote\-tracking branch, and mark the remote\-tracking branch as "upstream" from the new branch\&.
.sp
This can also be set up as the default behaviour by using the
\fBworktree\&.guessRemote\fR
config option\&.
.RE
.PP
\-\-[no\-]track
.RS 4
When creating a new branch, if
\fB<commit\-ish>\fR
is a branch, mark it as "upstream" from the new branch\&. This is the default if
\fB<commit\-ish>\fR
is a remote\-tracking branch\&. See "\-\-track" in
\fBgit-branch\fR(1)
for details\&.
.RE
.PP
\-\-lock
.RS 4
Keep the working tree locked after creation\&. This is the equivalent of
\fBgit worktree lock\fR
after
\fBgit worktree add\fR, but without race condition\&.
.RE
.PP
\-n, \-\-dry\-run
.RS 4
With
\fBprune\fR, do not remove anything; just report what it would remove\&.
.RE
.PP
\-\-porcelain
.RS 4
With
\fBlist\fR, output in an easy\-to\-parse format for scripts\&. This format will remain stable across Git versions and regardless of user configuration\&. See below for details\&.
.RE
.PP
\-q, \-\-quiet
.RS 4
With
\fIadd\fR, suppress feedback messages\&.
.RE
.PP
\-v, \-\-verbose
.RS 4
With
\fBprune\fR, report all removals\&.
.RE
.PP
\-\-expire <time>
.RS 4
With
\fBprune\fR, only expire unused working trees older than <time>\&.
.RE
.PP
\-\-reason <string>
.RS 4
With
\fBlock\fR, an explanation why the working tree is locked\&.
.RE
.PP
<worktree>
.RS 4
Working trees can be identified by path, either relative or absolute\&.
.sp
If the last path components in the working tree\(cqs path is unique among working trees, it can be used to identify worktrees\&. For example if you only have two working trees, at "/abc/def/ghi" and "/abc/def/ggg", then "ghi" or "def/ghi" is enough to point to the former working tree\&.
.RE
.SH "REFS"
.sp
In multiple working trees, some refs may be shared between all working trees, some refs are local\&. One example is HEAD is different for all working trees\&. This section is about the sharing rules and how to access refs of one working tree from another\&.
.sp
In general, all pseudo refs are per working tree and all refs starting with "refs/" are shared\&. Pseudo refs are ones like HEAD which are directly under GIT_DIR instead of inside GIT_DIR/refs\&. There is one exception to this: refs inside refs/bisect and refs/worktree is not shared\&.
.sp
Refs that are per working tree can still be accessed from another working tree via two special paths, main\-worktree and worktrees\&. The former gives access to per\-worktree refs of the main working tree, while the latter to all linked working trees\&.
.sp
For example, main\-worktree/HEAD or main\-worktree/refs/bisect/good resolve to the same value as the main working tree\(cqs HEAD and refs/bisect/good respectively\&. Similarly, worktrees/foo/HEAD or worktrees/bar/refs/bisect/bad are the same as GIT_COMMON_DIR/worktrees/foo/HEAD and GIT_COMMON_DIR/worktrees/bar/refs/bisect/bad\&.
.sp
To access refs, it\(cqs best not to look inside GIT_DIR directly\&. Instead use commands such as \fBgit-rev-parse\fR(1) or \fBgit-update-ref\fR(1) which will handle refs correctly\&.
.SH "CONFIGURATION FILE"
.sp
By default, the repository "config" file is shared across all working trees\&. If the config variables \fBcore\&.bare\fR or \fBcore\&.worktree\fR are already present in the config file, they will be applied to the main working trees only\&.
.sp
In order to have configuration specific to working trees, you can turn on "worktreeConfig" extension, e\&.g\&.:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git config extensions\&.worktreeConfig true
.fi
.if n \{\
.RE
.\}
.sp
.sp
In this mode, specific configuration stays in the path pointed by \fBgit rev\-parse \-\-git\-path config\&.worktree\fR\&. You can add or update configuration in this file with \fBgit config \-\-worktree\fR\&. Older Git versions will refuse to access repositories with this extension\&.
.sp
Note that in this file, the exception for \fBcore\&.bare\fR and \fBcore\&.worktree\fR is gone\&. If you have them in $GIT_DIR/config before, you must move them to the \fBconfig\&.worktree\fR of the main working tree\&. You may also take this opportunity to review and move other configuration that you do not want to share to all working trees:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBcore\&.worktree\fR
and
\fBcore\&.bare\fR
should never be shared
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBcore\&.sparseCheckout\fR
is recommended per working tree, unless you are sure you always use sparse checkout for all working trees\&.
.RE
.SH "DETAILS"
.sp
Each linked working tree has a private sub\-directory in the repository\(cqs $GIT_DIR/worktrees directory\&. The private sub\-directory\(cqs name is usually the base name of the linked working tree\(cqs path, possibly appended with a number to make it unique\&. For example, when \fB$GIT_DIR=/path/main/\&.git\fR the command \fBgit worktree add /path/other/test\-next next\fR creates the linked working tree in \fB/path/other/test\-next\fR and also creates a \fB$GIT_DIR/worktrees/test\-next\fR directory (or \fB$GIT_DIR/worktrees/test\-next1\fR if \fBtest\-next\fR is already taken)\&.
.sp
Within a linked working tree, $GIT_DIR is set to point to this private directory (e\&.g\&. \fB/path/main/\&.git/worktrees/test\-next\fR in the example) and $GIT_COMMON_DIR is set to point back to the main working tree\(cqs $GIT_DIR (e\&.g\&. \fB/path/main/\&.git\fR)\&. These settings are made in a \fB\&.git\fR file located at the top directory of the linked working tree\&.
.sp
Path resolution via \fBgit rev\-parse \-\-git\-path\fR uses either $GIT_DIR or $GIT_COMMON_DIR depending on the path\&. For example, in the linked working tree \fBgit rev\-parse \-\-git\-path HEAD\fR returns \fB/path/main/\&.git/worktrees/test\-next/HEAD\fR (not \fB/path/other/test\-next/\&.git/HEAD\fR or \fB/path/main/\&.git/HEAD\fR) while \fBgit rev\-parse \-\-git\-path refs/heads/master\fR uses $GIT_COMMON_DIR and returns \fB/path/main/\&.git/refs/heads/master\fR, since refs are shared across all working trees, except refs/bisect and refs/worktree\&.
.sp
See \fBgitrepository-layout\fR(5) for more information\&. The rule of thumb is do not make any assumption about whether a path belongs to $GIT_DIR or $GIT_COMMON_DIR when you need to directly access something inside $GIT_DIR\&. Use \fBgit rev\-parse \-\-git\-path\fR to get the final path\&.
.sp
If you manually move a linked working tree, you need to update the \fIgitdir\fR file in the entry\(cqs directory\&. For example, if a linked working tree is moved to \fB/newpath/test\-next\fR and its \fB\&.git\fR file points to \fB/path/main/\&.git/worktrees/test\-next\fR, then update \fB/path/main/\&.git/worktrees/test\-next/gitdir\fR to reference \fB/newpath/test\-next\fR instead\&.
.sp
To prevent a $GIT_DIR/worktrees entry from being pruned (which can be useful in some situations, such as when the entry\(cqs working tree is stored on a portable device), use the \fBgit worktree lock\fR command, which adds a file named \fIlocked\fR to the entry\(cqs directory\&. The file contains the reason in plain text\&. For example, if a linked working tree\(cqs \fB\&.git\fR file points to \fB/path/main/\&.git/worktrees/test\-next\fR then a file named \fB/path/main/\&.git/worktrees/test\-next/locked\fR will prevent the \fBtest\-next\fR entry from being pruned\&. See \fBgitrepository-layout\fR(5) for details\&.
.sp
When extensions\&.worktreeConfig is enabled, the config file \fB\&.git/worktrees/<id>/config\&.worktree\fR is read after \fB\&.git/config\fR is\&.
.SH "LIST OUTPUT FORMAT"
.sp
The worktree list command has two output formats\&. The default format shows the details on a single line with columns\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git worktree list
/path/to/bare\-source            (bare)
/path/to/linked\-worktree        abcd1234 [master]
/path/to/other\-linked\-worktree  1234abc  (detached HEAD)
.fi
.if n \{\
.RE
.\}
.sp
.SS "Porcelain Format"
.sp
The porcelain format has a line per attribute\&. Attributes are listed with a label and value separated by a single space\&. Boolean attributes (like \fIbare\fR and \fIdetached\fR) are listed as a label only, and are only present if and only if the value is true\&. The first attribute of a worktree is always \fBworktree\fR, an empty line indicates the end of the record\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git worktree list \-\-porcelain
worktree /path/to/bare\-source
bare

worktree /path/to/linked\-worktree
HEAD abcd1234abcd1234abcd1234abcd1234abcd1234
branch refs/heads/master

worktree /path/to/other\-linked\-worktree
HEAD 1234abc1234abc1234abc1234abc1234abc1234a
detached
.fi
.if n \{\
.RE
.\}
.sp
.SH "EXAMPLES"
.sp
You are in the middle of a refactoring session and your boss comes in and demands that you fix something immediately\&. You might typically use \fBgit-stash\fR(1) to store your changes away temporarily, however, your working tree is in such a state of disarray (with new, moved, and removed files, and other bits and pieces strewn around) that you don\(cqt want to risk disturbing any of it\&. Instead, you create a temporary linked working tree to make the emergency fix, remove it when done, and then resume your earlier refactoring session\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$ git worktree add \-b emergency\-fix \&.\&./temp master
$ pushd \&.\&./temp
# \&.\&.\&. hack hack hack \&.\&.\&.
$ git commit \-a \-m \(aqemergency fix for boss\(aq
$ popd
$ git worktree remove \&.\&./temp
.fi
.if n \{\
.RE
.\}
.sp
.SH "BUGS"
.sp
Multiple checkout in general is still experimental, and the support for submodules is incomplete\&. It is NOT recommended to make multiple checkouts of a superproject\&.
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
