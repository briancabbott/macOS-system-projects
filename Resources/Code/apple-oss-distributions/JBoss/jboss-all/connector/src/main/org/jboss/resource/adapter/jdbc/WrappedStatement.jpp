/*
 * JBoss, the OpenSource J2EE webOS
 *
 * Distributable under LGPL license.
 * See terms of license at gnu.org.
 */

package org.jboss.resource.adapter.jdbc;

import org.jboss.tm.TransactionTimeout;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;


/**
 * WrappedStatement.java
 *
 *
 * Created: Sat Apr 20 14:29:19 2002
 *
 * @author <a href="mailto:d_jencks@users.sourceforge.net">David Jencks</a>
 * @version
 */

public class WrappedStatement 
   implements Statement, org.jboss.ejb.plugins.cmp.jdbc.WrappedStatement 
{

   private final WrappedConnection lc;
   private final Statement s;
   private boolean queryTimeoutSet = false;
   private boolean setQueryTimeoutEnabled = false;

   public WrappedStatement(final WrappedConnection lc, Statement s, boolean doQueryTimeout)
   {
      this.lc = lc;
      this.s = s;
      setQueryTimeoutEnabled = doQueryTimeout;
      lc.registerStatement(this);
   }
   // implementation of java.sql.Statement interface

   /**
    *
    * @exception java.sql.SQLException <description>
    */
   public void close() throws SQLException
   {
      queryTimeoutSet = false;
      lc.unregisterStatement(this);
      try 
      {
         s.close();
      }
      catch (SQLException e)
      {
         checkException(e);
      } // end of try-catch
   }

   protected void setQueryTimeout() throws SQLException
   {
      if (setQueryTimeoutEnabled == false) return;
      try
      {
         if (queryTimeoutSet) return;
         long timeLeft = TransactionTimeout.getTimeLeftInTransaction();
         if (timeLeft < 1) return;
         int timeout = (int)(timeLeft / 1000);
         if (timeout == 0) timeout = 1;
         s.setQueryTimeout(timeout);
      }
      catch (TransactionTimeout.TransactionTimeoutException tte)
      {
         throw new SQLException("JBoss Transaction has timed out.  Cannot execute query");
      }
   }

   /**
    *
    * @param param1 <description>
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public boolean execute(String sql) throws SQLException
   {
      checkTransaction();
      try
      {
         setQueryTimeout();
         return s.execute(sql);
      }
      catch (SQLException e)
      {
         checkException(e);
         return false;
      } // end of try-catch
   }

   /**
    *
    * @param param1 <description>
    * @param param2 <description>
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public boolean execute(String sql, int autoGeneratedKeys) throws SQLException
   {
@JDK1.4START@
      checkTransaction();
      try 
      {
         setQueryTimeout();
         return s.execute(sql, autoGeneratedKeys);
      }
      catch (SQLException e)
      {
         checkException(e);
         return false;
      } // end of try-catch
@JDK1.4END@
@JDK1.3START@
   throw new SQLException("JDK1.4 method not available in JDK1.3");
@JDK1.3END@
   }

   /**
    *
    * @param param1 <description>
    * @param param2 <description>
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public boolean execute(String sql, int[] columnIndexes) throws SQLException
   {
@JDK1.4START@
      checkTransaction();
      try 
      {
         setQueryTimeout();
         return s.execute(sql, columnIndexes);
      }
      catch (SQLException e)
      {
         checkException(e);
         return false;
      } // end of try-catch
@JDK1.4END@
@JDK1.3START@
   throw new SQLException("JDK1.4 method not available in JDK1.3");
@JDK1.3END@
   }

   /**
    *
    * @param param1 <description>
    * @param param2 <description>
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public boolean execute(String sql, String[]columnNames ) throws SQLException
   {
@JDK1.4START@
      checkTransaction();
      try 
      {
         setQueryTimeout();
         return s.execute(sql, columnNames);
      }
      catch (SQLException e)
      {
         checkException(e);
         return false;
      } // end of try-catch
@JDK1.4END@
@JDK1.3START@
   throw new SQLException("JDK1.4 method not available in JDK1.3");
@JDK1.3END@
   }

   /**
    *
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public Connection getConnection() throws SQLException
   {
      return lc;
   }

   /**
    *
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public SQLWarning getWarnings() throws SQLException
   {
      try 
      {
         return s.getWarnings();
      }
      catch (SQLException e)
      {
         checkException(e);
         return null;
      } // end of try-catch
   }

   /**
    *
    * @exception java.sql.SQLException <description>
    */
   public void clearWarnings() throws SQLException
   {
      try 
      {
         s.clearWarnings();
      }
      catch (SQLException e)
      {
         checkException(e);
      } // end of try-catch
   }

   /**
    *
    * @param param1 <description>
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public ResultSet executeQuery(String sql) throws SQLException
   {
      checkTransaction();
      try 
      {
         setQueryTimeout();
         return s.executeQuery(sql);
      }
      catch (SQLException e)
      {
         checkException(e);
         return null;
      } // end of try-catch
   }

   /**
    *
    * @param param1 <description>
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public int executeUpdate(String sql) throws SQLException
   {
      checkTransaction();
      try 
      {
         setQueryTimeout();
         return s.executeUpdate(sql);
      }
      catch (SQLException e)
      {
         checkException(e);
         return 0;
      } // end of try-catch
   }

   /**
    *
    * @param param1 <description>
    * @param param2 <description>
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException
   {
@JDK1.4START@
      checkTransaction();
      try 
      {
         setQueryTimeout();
         return s.executeUpdate(sql, autoGeneratedKeys);
      }
      catch (SQLException e)
      {
         checkException(e);
         return 0;
      } // end of try-catch
@JDK1.4END@
@JDK1.3START@
   throw new SQLException("JDK1.4 method not available in JDK1.3");
@JDK1.3END@
   }

   /**
    *
    * @param param1 <description>
    * @param param2 <description>
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public int executeUpdate(String sql, int[] columnIndexes) throws SQLException
   {
@JDK1.4START@
      checkTransaction();
      try 
      {
         setQueryTimeout();
         return s.executeUpdate(sql, columnIndexes);
      }
      catch (SQLException e)
      {
         checkException(e);
         return 0;
      } // end of try-catch
@JDK1.4END@
@JDK1.3START@
   throw new SQLException("JDK1.4 method not available in JDK1.3");
@JDK1.3END@
   }

   /**
    *
    * @param param1 <description>
    * @param param2 <description>
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public int executeUpdate(String sql, String[] columnNames) throws SQLException
   {
@JDK1.4START@
      checkTransaction();
      try 
      {
         setQueryTimeout();
         return s.executeUpdate(sql, columnNames);
      }
      catch (SQLException e)
      {
         checkException(e);
         return 0;
      } // end of try-catch
@JDK1.4END@
@JDK1.3START@
   throw new SQLException("JDK1.4 method not available in JDK1.3");
@JDK1.3END@
   }

   /**
    *
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public int getMaxFieldSize() throws SQLException
   {
      try 
      {
         return s.getMaxFieldSize();
      }
      catch (SQLException e)
      {
         checkException(e);
         return 0;
      } // end of try-catch
   }

   /**
    *
    * @param param1 <description>
    * @exception java.sql.SQLException <description>
    */
   public void setMaxFieldSize(int max) throws SQLException
   {
      try 
      {
         s.setMaxFieldSize(max);
      }
      catch (SQLException e)
      {
         checkException(e);
      } // end of try-catch
   }

   /**
    *
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public int getMaxRows() throws SQLException
   {
      try 
      {
         return s.getMaxRows();
      }
      catch (SQLException e)
      {
         checkException(e);
         return 0;
      } // end of try-catch
   }

   /**
    *
    * @param param1 <description>
    * @exception java.sql.SQLException <description>
    */
   public void setMaxRows(int max) throws SQLException
   {
      try 
      {
         s.setMaxRows(max);
      }
      catch (SQLException e)
      {
         checkException(e);
      } // end of try-catch
   }

   /**
    *
    * @param param1 <description>
    * @exception java.sql.SQLException <description>
    */
   public void setEscapeProcessing(boolean enable) throws SQLException
   {
      try 
      {
         s.setEscapeProcessing(enable);
      }
      catch (SQLException e)
      {
         checkException(e);
      } // end of try-catch
   }

   /**
    *
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public int getQueryTimeout() throws SQLException
   {
      try 
      {
         return s.getQueryTimeout();
      }
      catch (SQLException e)
      {
         checkException(e);
         return 0;
      } // end of try-catch
   }

   /**
    *
    * @param param1 <description>
    * @exception java.sql.SQLException <description>
    */
   public void setQueryTimeout(int timeout) throws SQLException
   {
      try 
      {
         s.setQueryTimeout(timeout);
         queryTimeoutSet = true;
      }
      catch (SQLException e)
      {
         checkException(e);
      } // end of try-catch
   }

   /**
    *
    * @exception java.sql.SQLException <description>
    */
   public void cancel() throws SQLException
   {
      try 
      {
         s.cancel();
      }
      catch (SQLException e)
      {
         checkException(e);
      } // end of try-catch
   }

   /**
    *
    * @param param1 <description>
    * @exception java.sql.SQLException <description>
    */
   public void setCursorName(String name) throws SQLException
   {
      try 
      {
         s.setCursorName(name);
      }
      catch (SQLException e)
      {
         checkException(e);
      } // end of try-catch
   }

   /**
    *
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public ResultSet getResultSet() throws SQLException
   {
      try 
      {
         return s.getResultSet();
      }
      catch (SQLException e)
      {
         checkException(e);
         return null;
      } // end of try-catch
   }

   /**
    *
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public int getUpdateCount() throws SQLException
   {
      try 
      {
         return s.getUpdateCount();
      }
      catch (SQLException e)
      {
         checkException(e);
         return 0;
      } // end of try-catch
   }

   /**
    *
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public boolean getMoreResults() throws SQLException
   {
      try 
      {
         return s.getMoreResults();
      }
      catch (SQLException e)
      {
         checkException(e);
         return false;
      } // end of try-catch
   }

   /**
    *
    * @param param1 <description>
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public boolean getMoreResults(int current) throws SQLException
   {
@JDK1.4START@
      try 
      {
         return s.getMoreResults(current);
      }
      catch (SQLException e)
      {
         checkException(e);
         return false;
      } // end of try-catch
@JDK1.4END@
@JDK1.3START@
   throw new SQLException("JDK1.4 method not available in JDK1.3");
@JDK1.3END@
   }

   /**
    *
    * @param param1 <description>
    * @exception java.sql.SQLException <description>
    */
   public void setFetchDirection(int direction) throws SQLException
   {
      try 
      {
         s.setFetchDirection(direction);
      }
      catch (SQLException e)
      {
         checkException(e);
      } // end of try-catch
   }

   /**
    *
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public int getFetchDirection() throws SQLException
   {
      try 
      {
         return s.getFetchDirection();
      }
      catch (SQLException e)
      {
         checkException(e);
         return 0;
      } // end of try-catch
   }

   /**
    *
    * @param param1 <description>
    * @exception java.sql.SQLException <description>
    */
   public void setFetchSize(int rows) throws SQLException
   {
      try 
      {
         s.setFetchSize(rows);
      }
      catch (SQLException e)
      {
         checkException(e);
      } // end of try-catch
   }

   /**
    *
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public int getFetchSize() throws SQLException
   {
      try 
      {
         return s.getFetchSize();
      }
      catch (SQLException e)
      {
         checkException(e);
         return 0;
      } // end of try-catch
   }

   /**
    *
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public int getResultSetConcurrency() throws SQLException
   {
      try 
      {
         return s.getResultSetConcurrency();
      }
      catch (SQLException e)
      {
         checkException(e);
         return 0;
      } // end of try-catch
   }

   /**
    *
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public int getResultSetType() throws SQLException
   {
      try 
      {
         return s.getResultSetType();
      }
      catch (SQLException e)
      {
         checkException(e);
         return 0;
      } // end of try-catch
   }

   /**
    *
    * @param param1 <description>
    * @exception java.sql.SQLException <description>
    */
   public void addBatch(String sql) throws SQLException
   {
      try 
      {
         s.addBatch(sql);
      }
      catch (SQLException e)
      {
         checkException(e);
      } // end of try-catch
   }

   /**
    *
    * @exception java.sql.SQLException <description>
    */
   public void clearBatch() throws SQLException
   {
      try 
      {
         s.clearBatch();
      }
      catch (SQLException e)
      {
         checkException(e);
      } // end of try-catch
   }

   /**
    *
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public int[] executeBatch() throws SQLException
   {
      checkTransaction();
      try 
      {
         setQueryTimeout();
         return s.executeBatch();
      }
      catch (SQLException e)
      {
         checkException(e);
         return null;
      } // end of try-catch
   }

   /**
    *
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public ResultSet getGeneratedKeys() throws SQLException
   {
@JDK1.4START@
      try 
      {
         return s.getGeneratedKeys();
      }
      catch (SQLException e)
      {
         checkException(e);
         return null;
      } // end of try-catch
@JDK1.4END@
@JDK1.3START@
   throw new SQLException("JDK1.4 method not available in JDK1.3");
@JDK1.3END@
   }

   /**
    *
    * @return <description>
    * @exception java.sql.SQLException <description>
    */
   public int getResultSetHoldability() throws SQLException
   {
@JDK1.4START@
      try 
      {
         return s.getResultSetHoldability();
      }
      catch (SQLException e)
      {
         checkException(e);
         return 0;
      } // end of try-catch
@JDK1.4END@
@JDK1.3START@
   throw new SQLException("JDK1.4 method not available in JDK1.3");
@JDK1.3END@
   }

   //Public non-jdbc methods
   public Statement getUnderlyingStatement()
   {
      return s;
   }

   //Protected methods

   protected void checkException(SQLException e)
      throws SQLException
   {
      lc.checkException(e);
   }

   protected void checkTransaction()
      throws SQLException
   {
      lc.checkTransaction();
   }

}// LocalStatement
