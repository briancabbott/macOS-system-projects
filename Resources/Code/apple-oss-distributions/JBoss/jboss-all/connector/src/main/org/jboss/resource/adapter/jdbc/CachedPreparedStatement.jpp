package org.jboss.resource.adapter.jdbc;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Ref;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Array;
import java.sql.ResultSetMetaData;
import java.sql.ParameterMetaData;
import java.sql.SQLWarning;
import java.sql.Connection;
import java.math.BigDecimal;
import java.util.Calendar;

/**
 * Wrapper class for cached PreparedStatements.
 * It is closed when it is aged out or the underlying connection is closed.
 * Note that any returned ResultSet instances should be manually closed, rather
 * than relying on the (somewhat dubious) feature that prepared statements <a
 * href="http://java.sun.com/j2se/1.4.1/docs/api/java/sql/Statement.html#close()">
 * close their associated result set </a> when closed themselves.
 *
 * Created: Mon Aug 12 21:53:02 2002
 *
 * @author <a href="mailto:bill@jboss.org">Bill Burke</a>
 * @version $Revision: 1.1.2.3 $
 */
public class CachedPreparedStatement implements PreparedStatement
{
   private PreparedStatement ps;

   public CachedPreparedStatement(PreparedStatement ps)
   {
      this.ps = ps;
   }

   public PreparedStatement getUnderlyingPreparedStatement()
   {
      return ps;
   }

   public ResultSet executeQuery() throws SQLException
   {
      return ps.executeQuery();
   }

   public int executeUpdate() throws SQLException
   {
      return ps.executeUpdate();
   }

   public void setNull(int parameterIndex, int sqlType) throws SQLException
   {
      ps.setNull(parameterIndex, sqlType);
   }

   public void setBoolean(int parameterIndex, boolean x) throws SQLException
   {
      ps.setBoolean(parameterIndex, x);
   }

   public void setByte(int parameterIndex, byte x) throws SQLException
   {
      ps.setByte(parameterIndex, x);
   }

   public void setShort(int parameterIndex, short x) throws SQLException
   {
      ps.setShort(parameterIndex, x);
   }

   public void setInt(int parameterIndex, int x) throws SQLException
   {
      ps.setInt(parameterIndex, x);
   }

   public void setLong(int parameterIndex, long x) throws SQLException
   {
      ps.setLong(parameterIndex, x);
   }

   public void setFloat(int parameterIndex, float x) throws SQLException
   {
      ps.setFloat(parameterIndex, x);
   }

   public void setDouble(int parameterIndex, double x) throws SQLException
   {
      ps.setDouble(parameterIndex, x);
   }

   public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException
   {
      ps.setBigDecimal(parameterIndex, x);
   }

   public void setString(int parameterIndex, String x) throws SQLException
   {
      ps.setString(parameterIndex, x);
   }

   public void setBytes(int parameterIndex, byte x[]) throws SQLException
   {
      ps.setBytes(parameterIndex, x);
   }

   public void setDate(int parameterIndex, java.sql.Date x)
           throws SQLException
   {
      ps.setDate(parameterIndex, x);
   }

   public void setTime(int parameterIndex, java.sql.Time x)
           throws SQLException
   {
      ps.setTime(parameterIndex, x);
   }

   public void setTimestamp(int parameterIndex, java.sql.Timestamp x)
           throws SQLException
   {
      ps.setTimestamp(parameterIndex, x);
   }

   public void setAsciiStream(int parameterIndex, java.io.InputStream x, int length)
           throws SQLException
   {
      ps.setAsciiStream(parameterIndex, x, length);
   }

   public void setUnicodeStream(int parameterIndex, java.io.InputStream x,
                                int length) throws SQLException
   {
      @JDK1.4START@
      ps.setUnicodeStream(parameterIndex, x, length);
      @JDK1.4END@
      @JDK1.3START@
         throw new SQLException("JDK1.4 method not available in JDK1.3");
      @JDK1.3END@
   }

   public void setBinaryStream(int parameterIndex, java.io.InputStream x,
                               int length) throws SQLException
   {
      ps.setBinaryStream(parameterIndex, x, length);
   }

   public void clearParameters() throws SQLException
   {
      ps.clearParameters();
   }

   public void setObject(int parameterIndex, Object x, int targetSqlType, int scale)
           throws SQLException
   {
      ps.setObject(parameterIndex, x, targetSqlType, scale);
   }

   public void setObject(int parameterIndex, Object x, int targetSqlType)
           throws SQLException
   {
      ps.setObject(parameterIndex, x, targetSqlType);
   }

   public void setObject(int parameterIndex, Object x) throws SQLException
   {
      ps.setObject(parameterIndex, x);
   }

   public boolean execute() throws SQLException
   {
      return ps.execute();
   }

   public void addBatch() throws SQLException
   {
      ps.addBatch();
   }

   public void setCharacterStream(int parameterIndex,
                                  java.io.Reader reader,
                                  int length) throws SQLException
   {
      ps.setCharacterStream(parameterIndex, reader, length);
   }

   public void setRef(int i, Ref x) throws SQLException
   {
      ps.setRef(i, x);
   }

   public void setBlob(int i, Blob x) throws SQLException
   {
      ps.setBlob(i, x);
   }

   public void setClob(int i, Clob x) throws SQLException
   {
      ps.setClob(i, x);
   }

   public void setArray(int i, Array x) throws SQLException
   {
      ps.setArray(i, x);
   }

   public ResultSetMetaData getMetaData() throws SQLException
   {
      return ps.getMetaData();
   }

   public void setDate(int parameterIndex, java.sql.Date x, Calendar cal)
           throws SQLException
   {
      ps.setDate(parameterIndex, x, cal);
   }

   public void setTime(int parameterIndex, java.sql.Time x, Calendar cal)
           throws SQLException
   {
      ps.setTime(parameterIndex, x, cal);
   }

   public void setTimestamp(int parameterIndex, java.sql.Timestamp x, Calendar cal)
           throws SQLException
   {
      ps.setTimestamp(parameterIndex, x, cal);
   }

   public void setNull(int paramIndex, int sqlType, String typeName)
           throws SQLException
   {
      ps.setNull(paramIndex, sqlType, typeName);
   }

   public void setURL(int parameterIndex, java.net.URL x) throws SQLException
   {
      @JDK1.4START@
      ps.setURL(parameterIndex, x);
      @JDK1.4END@
      @JDK1.3START@
         throw new SQLException("JDK1.4 method not available in JDK1.3");
      @JDK1.3END@
   }

   public ParameterMetaData getParameterMetaData() throws SQLException
   {
      @JDK1.4START@
      return ps.getParameterMetaData();
      @JDK1.4END@
      @JDK1.3START@
         throw new SQLException("JDK1.4 method not available in JDK1.3");
      @JDK1.3END@
   }

   public ResultSet executeQuery(String sql) throws SQLException
   {
      return ps.executeQuery(sql);
   }

   public int executeUpdate(String sql) throws SQLException
   {
      return ps.executeUpdate(sql);
   }

   /** 
    * Does nothing; this statement is only closed when the connection is closed
    * or PreparedStatementCache.ageOut() closes the underlying connection.
    */
   public void close() throws SQLException
   {
   }

   public int getMaxFieldSize() throws SQLException
   {
      return ps.getMaxFieldSize();
   }

   public void setMaxFieldSize(int max) throws SQLException
   {
      ps.setMaxFieldSize(max);
   }

   public int getMaxRows() throws SQLException
   {
      return ps.getMaxRows();
   }

   public void setMaxRows(int max) throws SQLException
   {
      ps.setMaxRows(max);
   }

   public void setEscapeProcessing(boolean enable) throws SQLException
   {
      ps.setEscapeProcessing(enable);
   }

   public int getQueryTimeout() throws SQLException
   {
      return ps.getQueryTimeout();
   }

   public void setQueryTimeout(int seconds) throws SQLException
   {
      ps.setQueryTimeout(seconds);
   }

   public void cancel() throws SQLException
   {
      ps.cancel();
   }

   public SQLWarning getWarnings() throws SQLException
   {
      return ps.getWarnings();
   }

   public void clearWarnings() throws SQLException
   {
      ps.clearWarnings();
   }

   public void setCursorName(String name) throws SQLException
   {
      ps.setCursorName(name);
   }

   public boolean execute(String sql) throws SQLException
   {
      return ps.execute(sql);
   }

   public ResultSet getResultSet() throws SQLException
   {
      return ps.getResultSet();
   }

   public int getUpdateCount() throws SQLException
   {
      return ps.getUpdateCount();
   }

   public boolean getMoreResults() throws SQLException
   {
      return ps.getMoreResults();
   }

   public void setFetchDirection(int direction) throws SQLException
   {
      ps.setFetchDirection(direction);
   }

   public int getFetchDirection() throws SQLException
   {
      return ps.getFetchDirection();
   }

   public void setFetchSize(int rows) throws SQLException
   {
      ps.setFetchSize(rows);
   }

   public int getFetchSize() throws SQLException
   {
      return ps.getFetchSize();
   }

   public int getResultSetConcurrency() throws SQLException
   {
      return ps.getResultSetConcurrency();
   }

   public int getResultSetType() throws SQLException
   {
      return ps.getResultSetType();
   }

   public void addBatch(String sql) throws SQLException
   {
      ps.addBatch(sql);
   }

   public void clearBatch() throws SQLException
   {
      ps.clearBatch();
   }

   public int[] executeBatch() throws SQLException
   {
      return ps.executeBatch();
   }

   public Connection getConnection() throws SQLException
   {
      return ps.getConnection();
   }

   public boolean getMoreResults(int current) throws SQLException
   {
      @JDK1.4START@
      return ps.getMoreResults(current);
      @JDK1.4END@
      @JDK1.3START@
         throw new SQLException("JDK1.4 method not available in JDK1.3");
      @JDK1.3END@
   }

   public ResultSet getGeneratedKeys() throws SQLException
   {
      @JDK1.4START@
      return ps.getGeneratedKeys();
      @JDK1.4END@
      @JDK1.3START@
         throw new SQLException("JDK1.4 method not available in JDK1.3");
      @JDK1.3END@
   }

   public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException
   {
      @JDK1.4START@
      return ps.executeUpdate(sql, autoGeneratedKeys);
      @JDK1.4END@
      @JDK1.3START@
         throw new SQLException("JDK1.4 method not available in JDK1.3");
      @JDK1.3END@
   }

   public int executeUpdate(String sql, int columnIndexes[]) throws SQLException
   {
      @JDK1.4START@
      return ps.executeUpdate(sql, columnIndexes);
      @JDK1.4END@
      @JDK1.3START@
         throw new SQLException("JDK1.4 method not available in JDK1.3");
      @JDK1.3END@
   }

   public int executeUpdate(String sql, String columnNames[]) throws SQLException
   {
      @JDK1.4START@
      return ps.executeUpdate(sql, columnNames);
      @JDK1.4END@
      @JDK1.3START@
         throw new SQLException("JDK1.4 method not available in JDK1.3");
      @JDK1.3END@
   }

   public boolean execute(String sql, int autoGeneratedKeys) throws SQLException
   {
      @JDK1.4START@
      return ps.execute(sql, autoGeneratedKeys);
      @JDK1.4END@
      @JDK1.3START@
         throw new SQLException("JDK1.4 method not available in JDK1.3");
      @JDK1.3END@
   }

   public boolean execute(String sql, int columnIndexes[]) throws SQLException
   {
      @JDK1.4START@
      return ps.execute(sql, columnIndexes);
      @JDK1.4END@
      @JDK1.3START@
         throw new SQLException("JDK1.4 method not available in JDK1.3");
      @JDK1.3END@
   }

   public boolean execute(String sql, String columnNames[]) throws SQLException
   {
      @JDK1.4START@
      return ps.execute(sql, columnNames);
      @JDK1.4END@
      @JDK1.3START@
         throw new SQLException("JDK1.4 method not available in JDK1.3");
      @JDK1.3END@
   }

   public int getResultSetHoldability() throws SQLException
   {
      @JDK1.4START@
      return ps.getResultSetHoldability();
      @JDK1.4END@
      @JDK1.3START@
         throw new SQLException("JDK1.4 method not available in JDK1.3");
      @JDK1.3END@

   }

}
