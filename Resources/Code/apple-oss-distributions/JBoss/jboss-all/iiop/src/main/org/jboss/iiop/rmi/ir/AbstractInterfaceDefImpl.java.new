/*
* JBoss, the OpenSource EJB server
*
* Distributable under LGPL license.
* See terms of license at gnu.org.
*/
package org.jboss.iiop.rmi.ir;

import org.omg.CORBA.InterfaceDefOperations;
import org.omg.CORBA.InterfaceDefPOATie;
import org.omg.CORBA.InterfaceDefHelper;
import org.omg.CORBA.Any;
import org.omg.CORBA.TypeCode;
import org.omg.CORBA.IRObject;
import org.omg.CORBA.Contained;
import org.omg.CORBA.ContainedPackage.Description;
import org.omg.CORBA.Container;
import org.omg.CORBA.DefinitionKind;
import org.omg.CORBA.IDLType;
import org.omg.CORBA.StructMember;
import org.omg.CORBA.UnionMember;
import org.omg.CORBA.InterfaceDef;
import org.omg.CORBA.ConstantDef;
import org.omg.CORBA.EnumDef;
import org.omg.CORBA.ValueDef;
import org.omg.CORBA.ValueBoxDef;
import org.omg.CORBA.Initializer;
import org.omg.CORBA.StructDef;
import org.omg.CORBA.UnionDef;
import org.omg.CORBA.ModuleDef;
import org.omg.CORBA.AliasDef;
import org.omg.CORBA.NativeDef;
import org.omg.CORBA.OperationDef;
import org.omg.CORBA.OperationMode;
import org.omg.CORBA.ParameterDescription;
import org.omg.CORBA.AttributeDef;
import org.omg.CORBA.AttributeMode;
import org.omg.CORBA.ExceptionDef;
import org.omg.CORBA.OperationDescription;
import org.omg.CORBA.AttributeDescription;
import org.omg.CORBA.InterfaceDescription;
import org.omg.CORBA.InterfaceDescriptionHelper;
import org.omg.CORBA.BAD_INV_ORDER;
import org.omg.PortableServer.POA;
import org.omg.CORBA.InterfaceDefPackage.FullInterfaceDescription;

/**
 *  Abstract interface IR object.
 *
 *  @author <a href="mailto:osh@sparre.dk">Ole Husgaard</a>
 *  @version $Revision: 1.1.1.1 $
 */
class AbstractInterfaceDefImpl
   extends InterfaceDefImpl
   implements AbstractInterfaceDefOperations
{
   // Constants -----------------------------------------------------

   // Attributes ----------------------------------------------------

   // Static --------------------------------------------------------

   // Constructors --------------------------------------------------

   AbstractInterfaceDefImpl(String id, String name, String version,
                            LocalContainer defined_in,
                            String[] base_interfaces,
                            RepositoryImpl repository)
   {
      super(id, name, version, defined_in, base_interfaces, repository);

      // Check that all the base interfaces are abstract
      InterfaceDef[] bases = base_interfaces
      for (int i = 0; i < bases.length; ++i) {
         if (AbstraceInterfaceDef.narrow(bases[i]) == null)
            TODO: throw exception.
      }
   }

   // Public --------------------------------------------------------

   // LocalContainer implementation overrides -----------------------

   public void add(String name, LocalContained contained)
      throws IRConstructionException
   {
      delegate.add(name, contained);
   }

   // LocalIRObject implementation overrides ------------------------

   public IRObject getReference()
   {
      if (ref == null) {
         ref = org.omg.CORBA.AbstractInterfaceDefHelper.narrow(
                    servantToReference(new AbstractInterfaceDefPOATie(this)) );
      }
      return ref;
   }


   // ContainerOperations implementation ----------------------------


   // InterfaceDefOperations implementation -------------------------

   public InterfaceDef[] base_interfaces()
   {
      if (base_interfaces_ref == null) {
         base_interfaces_ref = new InterfaceDef[base_interfaces.length];
         for (int i = 0; i < base_interfaces_ref.length; ++i) {
System.err.println("InterfaceDefImpl.base_interfaces(): " +
                   "looking up \""+base_interfaces[i]+"\".");
            Contained c = repository.lookup_id(base_interfaces[i]);
System.err.println("InterfaceDefImpl.base_interfaces(): " +
                   "Got: " + ((c==null)?"null":c.id()) );
            base_interfaces_ref[i] = InterfaceDefHelper.narrow(c);
System.err.println("InterfaceDefImpl.base_interfaces(): " +
                   "ref: " + ((c==null)?"null":"not null") );
         }
      }

      return base_interfaces_ref;
   }

   public boolean is_abstract()
   {
      return true;
   }


   // IDLTypeOperations implementation override ---------------------

   public TypeCode type()
   {
      if (typeCode == null)
         typeCode = getORB().create_abstract_interface_tc(id, name);
      return typeCode;
   }


   // ContainedImpl implementation override -------------------------

   public Description describe()
   {
      Description desc = super.describe();

      desc.kind = DefinitionKind.dk_AbstractInterface;

      return desc;
   }


   // Y overrides ---------------------------------------------------

   // Package protected ---------------------------------------------

   // Protected -----------------------------------------------------

   // Private -------------------------------------------------------

   // Inner classes -------------------------------------------------
}

