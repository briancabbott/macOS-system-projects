<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
   <!ENTITY buildmagic SYSTEM "../tools/etc/buildmagic/buildmagic.ent">
   <!ENTITY libraries SYSTEM "../tools/etc/buildmagic/libraries.ent">
   <!ENTITY modules SYSTEM "../tools/etc/buildmagic/modules.ent">
]>

<!-- ====================================================================== -->
<!--                                                                        -->
<!--  JBoss, the OpenSource J2EE webOS                                      -->
<!--                                                                        -->
<!--  Distributable under LGPL license.                                     -->
<!--  See terms of license at http://www.gnu.org.                           -->
<!--                                                                        -->
<!-- ====================================================================== -->

<!-- $Id: build.xml,v 1.37.2.7 2003/11/10 06:45:54 starksm Exp $ -->

<project default="main" name="JBoss/Messaging">

  <!-- ================================================================== -->
  <!-- Setup                                                              -->
  <!-- ================================================================== -->

  <!--
     | Include the common Buildmagic elements.
     |
     | This defines several different targets, properties and paths.
     | It also sets up the basic extention tasks amoung other things.
   -->

  &buildmagic;


  <!-- ================================================================== -->
  <!-- Initialization                                                     -->
  <!-- ================================================================== -->

  <!--
     | Initialize the build system.  Must depend on '_buildmagic:init'.  
     | Other targets should depend on 'init' or things will mysteriously fail.
   -->

  <target name="init" unless="init.disable" depends="_buildmagic:init">
  </target>


  <!-- ================================================================== -->
  <!-- Configuration                                                      -->
  <!-- ================================================================== -->

  <!--
     | Configure the build system.  
     |
     | This target is invoked by the Buildmagic initialization logic and 
     | should contain module specific configuration elements.
   -->

  <target name="configure" unless="configure.disable">

    <!-- =================== -->
    <!-- Basic Configuration -->
    <!-- =================== -->

    <!-- Module name(s) & version -->
    <property name="module.name" value="messaging"/>
    <property name="module.Name" value="JBoss Messaging"/>
    <property name="module.version" value="DEV"/>

    <!-- ========= -->
    <!-- Libraries -->
    <!-- ========= -->
    &libraries;
    <!-- The combined library classpath -->
    <path id="library.classpath">
      <path refid="apache.crimson.classpath"/>
      <path refid="apache.log4j.classpath"/>
      <path refid="apache.commons.classpath"/>
      <path refid="sun.jaas.classpath"/>
      <path refid="sun.jsse.classpath"/>
      <path refid="oswego.concurrent.classpath"/>
      <path refid="junit.junit.classpath"/>
      <path refid="gnu.regexp.classpath"/>
    </path>

    <!-- ======= -->
    <!-- Modules -->
    <!-- ======= -->
    &modules;
    <!-- The combined depedant module classpath -->
    <path id="dependentmodule.classpath">
      <path refid="jboss.j2ee.classpath"/>
      <path refid="jboss.common.classpath"/>
      <path refid="jboss.system.classpath"/>
      <path refid="jboss.naming.classpath"/>
      <path refid="jboss.server.classpath"/>
      <path refid="jboss.jmx.classpath"/>
      <path refid="jboss.security.classpath"/>
      <path refid="jboss.transaction.classpath"/>
    </path>

    <!-- ===== -->
    <!-- Tasks -->
    <!-- ===== -->

    <!-- Where source files live -->
    <property name="source.java" value="${module.source}/main"/>
    <property name="source.etc" value="${module.source}/etc"/>
    <property name="source.docs" value="${module.source}/docs"/>
    <property name="source.resources" value="${module.source}/resources"/>
    <property name="source.examples" value="${module.source}/examples"/>

    <!-- Where build generated files will go -->
    <property name="build.classes" value="${module.output}/classes"/>
    <property name="build.lib" value="${module.output}/lib"/>
    <property name="build.api" value="${module.output}/api"/>
    <property name="build.etc" value="${module.output}/etc"/>
    <property name="build.bin" value="${module.output}/bin"/>
    <property name="build.docs" value="${module.output}/docs"/>
    <property name="build.parsers" value="${module.output}/parsers"/>
    <property name="build.resources" value="${module.output}/resources"/>
    <property name="build.examples" value="${module.output}/examples"/>
    <property name="build.reports" value="${module.output}/reports"/>
    <property name="build.gen-src" value="${module.output}/gen-src"/>
    <property name="build.todo" value="${module.output}/todo"/>

    <!-- Install/Release structure -->
    <property name="install.id" value="${module.name}-${module.version}"/>
    <property name="release.id" value="${install.id}"/>
    <property name="install.root" value="${module.output}/${install.id}"/>

    <!-- The combined thirdparty classpath -->
    <path id="thirdparty.classpath">
      <path refid="library.classpath"/>
      <path refid="dependentmodule.classpath"/>
    </path>

    <!-- This module is based on Java 1.2 -->
    <property name="javac.target" value="1.2"/>

    <!-- RMIC should generate stubs compatible with Java 1.2+ -->
    <property name="rmic.stubVersion" value="1.2"/>

    <!-- classpath and local.classpath must have a value using with a path -->
    <property name="classpath" value=""/>
    <property name="local.classpath" value=""/>

    <!-- The classpath required to build classes. -->
    <path id="javac.classpath">
      <pathelement path="${classpath}"/>
      <pathelement path="${local.classpath}"/>
      <path refid="thirdparty.classpath"/>
    </path>

    <!-- The classpath required to build javadocs. -->
    <path id="javadoc.classpath">
      <path refid="javac.classpath"/>
    </path>

    <!-- Packages to include when generating api documentation -->
    <property name="javadoc.packages" value="org.jboss.*"/>
  </target>


  <!-- ================================================================== -->
  <!-- Compile                                                            -->
  <!-- ================================================================== -->

  <!-- 
     |  Compile everything.
     |
     |  This target should depend on other compile-* targets for each 
     |  different type of compile that needs to be performed, short of
     |  documentation compiles.
    -->
  <target name="compile" 
	  depends="compile-mbean-sources, compile-parsers, compile-classes, compile-rmi, compile-resources, compile-etc"
	  description="Compile all source files."/>

  <!-- Compile mbeans with XDoclet -->
  <target name="compile-mbean-sources" depends="init">
    <taskdef name="jmxdoclet" classname="xdoclet.modules.jmx.JMXDocletTask" classpathref="xdoclet.task.classpath"/>

    <mkdir dir="${build.gen-src}"/>
    <jmxdoclet
	     destdir="${build.gen-src}"
	     excludedtags="@version,@author">
      <fileset dir="${source.java}">
        <include name="**/il/ServerILJMXService.java"/>
        <include name="**/il/**/*ServerILService.java"/>
        <include name="**/pm/**/*.java"/>
        <include name="**/sm/**/*.java"/>
        <include name="**/jmx/*.java"/>
        <include name="**/server/*.java"/>
      </fileset>
      <mbeaninterface mergedir="${project.tools}/etc/xdoclet/templates"/>
    </jmxdoclet>
  </target>

  <!-- Compile parsers -->
  <target name="compile-parsers" depends="init">
    <mkdir dir="${build.parsers}/org/jboss/mq/selectors"/>

    <!-- message selector parser -->
    <javacc target="${source.java}/org/jboss/mq/selectors/SelectorParser.jj" 
	    outputdirectory="${build.parsers}/org/jboss/mq/selectors"
	    javacchome="${sun.javacc.lib}"
	    static="false"/>

    <!-- compile them now -->
    <mkdir dir="${build.classes}"/>
    <javac destdir="${build.classes}"
           optimize="${javac.optimize}"
	   target="${javac.target}"
	   source="1.4"
           debug="${javac.debug}"
	   depend="${javac.depend}"
	   verbose="${javac.verbose}"
	   deprecation="${javac.deprecation}"
	   includeAntRuntime="${javac.include.ant.runtime}"
	   includeJavaRuntime="${javac.include.java.runtime}"
	   failonerror="${javac.fail.onerror}">
       <classpath refid="javac.classpath"/>

       <!-- 
          | Ant really pissses me off!  Why can't I create a fileset
          | and list the includes/excludes there?  Why the *uck do I have
          | to use this src crap...
        -->
     
       <!-- JavaCC creates output in a flat namespace -->
       <src path="${build.parsers}"/>
       <!--
       <include name="*.java"/>
	-->
       <!-- Only want to build required the bits under selectors.* here -->
       <src path="${source.java}"/>
       <include name="org/jboss/mq/selectors/ASCII_CharStream.java"/>
       <include name="org/jboss/mq/selectors/ParserException.java"/>
       <include name="org/jboss/mq/selectors/SelectorParser.java"/>
       <include name="org/jboss/mq/selectors/SelectorParserConstants.java"/>
       <include name="org/jboss/mq/selectors/SelectorParserTokenManager.java"/>
       <include name="org/jboss/mq/selectors/Token.java"/>
       <include name="org/jboss/mq/selectors/TokenMgrError.java"/>
       <include name="org/jboss/mq/selectors/Operator.java"/>
       <include name="org/jboss/mq/selectors/Identifier.java"/>
    </javac>
  </target>

  <!-- Compile all class files -->
  <target name="compile-classes" depends="init">
    <mkdir dir="${build.classes}"/>
    <javac destdir="${build.classes}"
           optimize="${javac.optimize}"
	   target="${javac.target}"
	   source="1.4"
           debug="${javac.debug}"
	   depend="${javac.depend}"
	   verbose="${javac.verbose}"
	   deprecation="${javac.deprecation}"
	   includeAntRuntime="${javac.include.ant.runtime}"
	   includeJavaRuntime="${javac.include.java.runtime}"
	   failonerror="${javac.fail.onerror}">
       <src path="${source.java}"/>
       <src path="${build.gen-src}"/>
       <classpath refid="javac.classpath"/>
       <include name="${javac.includes}"/>
       <exclude name="${javac.excludes}"/>
    </javac>
  </target>

  <!-- Compile RMI stubs -->
  <target name="compile-rmi" depends="compile-classes">
    <rmic base="${build.classes}"
	  verify="${rmic.verify}"
	  iiop="${rmic.iiop}"
	  iiopopts="${rmic.iiopops}"
	  idl="${rmic.idl}"
	  idlopts="${rmic.idlops}"
	  debug="${rmic.debug}"
          stubVersion="${rmic.stubVersion}">
      <classpath refid="javac.classpath"/>
      <include name="${rmic.includes}"/>
      <exclude name="${rmic.excludes}"/>

      <include name="org/jboss/mq/il/rmi/RMIServerIL.class"/>
      <include name="org/jboss/mq/il/rmi/RMIClientIL.class"/>
    </rmic>
  </target>

  <!-- Compile resource files -->
  <target name="compile-resources" depends="init">
    <mkdir dir="${build.resources}"/>
    <copy todir="${build.resources}" filtering="yes">
      <fileset dir="${source.resources}">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- Compile manifests -->
  <target name="compile-etc" depends="init">
    <mkdir dir="${build.etc}"/>
    <copy todir="${build.etc}" filtering="yes">
      <fileset dir="${source.etc}">
         <include name="**"/>
      </fileset>
    </copy>
  </target>


  <!-- ================================================================== -->
  <!-- Archives                                                           -->
  <!-- ================================================================== -->

  <!-- 
     |  Build all jar files.
    -->
  <target name="jars" description="Builds all jar files."
          depends="_buildmagic:build-bypass-check"
	  unless="build-bypass.on">

    <call target="compile"/>

    <mkdir dir="${build.lib}"/>

    <!-- Build jbossmq.jar -->
    <jar jarfile="${build.lib}/jbossmq.jar"
         manifest="${build.etc}/default.mf">
      <fileset dir="${build.classes}">
        <include name="**"/>
      </fileset>
    </jar>

    <!-- Build jbossmq-client.jar -->
    <jar jarfile="${build.lib}/jbossmq-client.jar"
         manifest="${build.etc}/default.mf">
      <fileset dir="${build.classes}">
        <include name="log4j.properties"/>
        <include name="org/jboss/mq/*"/>
        <include name="org/jboss/mq/referenceable/**"/>
	<include name="org/jboss/mq/il/**"/>
	<include name="org/jboss/mq/cluster/**"/>
	<include name="org/jboss/mq/xml/**"/>
	<include name="org/jboss/mq/selectors/**"/>
      </fileset>
      <fileset dir="${build.resources}">
         <include name="**"/>
      </fileset>
    </jar>

    <!-- Update the build marker to allow bypassing -->
    <touch file="${build-bypass.marker}"/>

  </target>

  <!-- Compile static documents -->
  <target name="docs-static" depends="init">
    <mkdir dir="${build.docs}"/>
    <copy todir="${build.docs}" filtering="yes">
      <fileset dir="${source.docs}">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- Generate examples files -->
  <!-- Should really place these in a package, compile, then include source -->
  <target name="docs-examples" depends="init">
    <mkdir dir="${build.examples}"/>
    <copy todir="${build.examples}" filtering="yes">
      <fileset dir="${source.examples}">
         <include name="**/*"/>
      </fileset>
    </copy>

  </target>

  <!-- ================================================================== -->
  <!-- Install & Release                                                  -->
  <!-- ================================================================== -->

  <target name="install" 
	  description="Install the structure for a release."
	  depends="all, _buildmagic:install:default"/>

  <target name="release" depends="install"/>

  <target name="release-zip" 
	  description="Builds a ZIP distribution."
	  depends="release, _buildmagic:release:zip"/>

  <target name="release-tar" 
	  description="Builds a TAR distribution."
	  depends="release, _buildmagic:release:tar"/>

  <target name="release-tgz" 
	  description="Builds a TAR-GZ distribution."
	  depends="release, _buildmagic:release:tgz"/>

  <target name="release-all"
	  description="Builds a distribution for each archive type."
	  depends="release-zip, release-tgz"/>


  <!-- ================================================================== -->
  <!-- Cleaning                                                           -->
  <!-- ================================================================== -->

  <!-- Clean up all build output -->
  <target name="clean" 
	  description="Cleans up most generated files."
	  depends="_buildmagic:clean">
  </target>

  <!-- Clean up all generated files -->
  <target name="clobber" 
	  description="Cleans up all generated files."
	  depends="_buildmagic:clobber, clean">
  </target>


  <!-- ================================================================== -->
  <!-- Misc.                                                              -->
  <!-- ================================================================== -->

  <target name="main"
	  description="Executes the default target (most)."
	  depends="most"/>
    
  <target name="all"
	  description="Builds everything."
	  depends="jars, docs"/>

  <target name="most" 
	  description="Builds almost everything."
	  depends="jars"/>

  <target name="help" 
          description="Show this help message."
	  depends="_buildmagic:help:standard"/>

</project>
