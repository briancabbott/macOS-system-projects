{\rtf0\ansi{\fonttbl\f0\fswiss Helvetica;\f1\fmodern Ohlfs;}
\paperw9840
\paperh8400
\margl120
\margr120
{\colortbl;\red0\green0\blue0;}
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\f0\b0\i0\ulnone\fs24\fc0\cf0 obcp-parse.y:\
	| delete objc_openbracket.expr objc_closebracket cast_expr %prec UNARY\
		\{ $$ = delete_sanity ($4, $2, 2,
\b  $1
\b0 );\
		  if (yychar == YYEMPTY)\
		    yychar = YYLEX; \}\
\
The 
\b  $1 
\b0 in
\b  
\b0 delete_sanity wasnot in 2.5.8, so it may be wrong.\
\
\

\fs36 Files modified to fix problems with Objective-C++ (cc-723):\

\fs24 \

\ul\fs32\fc1\cf1 typeck.c:\

\ulnone\fs24\fc0\cf0 \
convert_for_assignment():\
\
	Bug: ttr was uninitialized. \
	Result: compiler would crash during type checking.\
	Test case: NSConnection.m.  Unable to reproduce in a small test case.\
	Fix: Move the clause down a couple statements.\
\
convert_for_assignment():\
\
	Annoyance: stupid warning about implicit casting from "void *"\
	Fix: Shutup if compiling ObjC code.\
\

\ul\fs32\fc1\cf1 decl.c:\

\ulnone\fs24\fc0\cf0 \
warn_extern_redeclared_static():\
\
	Bug: extern/static errors during ObjC code generation.\
	Result: compiler would refuse to generate code.\
	Test case:\
\
		// considered illegal by C++\
		extern int a;\
		static int a = 5;\
\
	Fix: Ignore "artificial" (i.e. internally generated) decls.\
\
grokdeclarator():\
\
	Bug:  C++ constructors were totally broken.\
	Result: the basics didn't work.\
\

\fi1100 class foo\
\{\
public:\
        foo(int);\
\};\
\
foo bar(5);\

\fi0 \

\fi-540\li540 	Fix: Put the code back where it belongs. John removed this while experimenting with another bug (I believe).\

\fi0\li0 \
grokparms():\
\
	Bug: Very complex declarators causes grokparms to fail.\
	Result: The compiler would consciously about.\
\

\fi1100 @interface Bug\
- sortedArrayUsingFunction: compare ;\
@end\
\
@implementation Bug\
- sortedArrayUsingFunction:(int (*)(void *))compare  \{ \}\
@end\

\fi0 \

\fi-540\li540 	Fix: Return! As the comment in the code indicates, I don't feel great about this fix. Nevertheless, I believe it is valid (see code for more details). The bottom line is "grokparms" is subtly different between the two front ends (and I don't have the time to dig any deeper). If a new wave a "grokparms" bugs appears, this should be revisited.\

\fi0\li0 \

\ul\fs32 lex.c:
\ulnone \

\fs24 \
init_lex():\
\
	Annoyance:  Remove C++ keywords when compiling straight ObjC (for testing purposes)\
\
\
do_identifier():\
\
	Bug: Scoping mechanism for sending ObjC messages is broken.\
	Result: The compiler wouldn't "see" the argument (resulting in an error).\
\

\fi1100 struct exception \{\};\
\
@interface Foo\
- (void)reply:(int)exception;\
@end\
\
static void func(int exception)\
\{\
        id obj;\
        [obj reply:exception];\
\}\

\fi0 \
	Fix: Last argument to lookup_name() needs to be 0, not 1.\
\
real_yylex():\
\
	Bug: ObjC string constants didn't work.\
	Result: Couldn't use a string constant (at all).\
\

\fi1100 NSString *foo = @"xx";\
\

\fi0 	Fix: Missing a "break" statement. Wrong token was being returned.\

\fi1100 \

\ul\fs32\fi0 lex.h:
\ulnone \

\fs24 \

\fi-540\li540 	Bug: Objective-C type qualifiers (in, out, etc) are broken.\
	Result: Parse error.\

\fi0\li0 \

\fi1100 @interface NSString\
-(oneway void)addConversation:(int *)conversation;\
@end\

\fi0 \
	Fix: RID_LAST_MODIFIER needs to be our last modifier, not C++'s.\
\

\ul\fs32 objc-act.c:
\ulnone \

\fs24 \
xref_tag():\
\

\fi-540\li540 	Bug: Static typing/scoping mechanism for looking up types (from ObjC) is broken.\
	Result: ObjC types and internally synthesized types were being added to the wrong scope. This resulted in bogus type errors in both user code and internally generated code (for example, this also caused "super" code generation to fail).\
\

\fi1100\li0 struct _NSStringBuffer \{\
  	NSString *string;\
\};\
\
void func(struct _NSStringBuffer *b, NSString *s)\
\{\
	b->string = s;\
\}\

\fi0 \
	Fix: The last argument to xref_tag needs to be 1, not 0.\
\

\fi-540\li540 	Bug: Static typing/scoping mechanism for looking up types (from ObjC) is broken.\
	Result: ObjC types and internally synthesized types were being added to the wrong scope. This resulted in bogus type errors in both user code and internally generated code (for example, this also caused "super" code generation to fail).\

\fi0\li0 \
create_builtin_decl():\
\

\fi-540\li540 	Bug: Errors during Objective-C code generation for categories.\
	Result: Module wouldn't compile because of "redefinition" errors.\

\fi0\li0 \

\fi1100\fc1\cf1 @interface Object (cat)\
@end\
\
@implementation Object (cat)\
@end\

\fi0\fc0\cf0 \
synth_module_prologue ():\
\

\fi-540\li540 	Bug: @protocol() didn't work.\
	Result: type errors.\
	Fix: install correct type.\

\fi0\li0 \
build_module_descriptor():\
\

\fi-540\li540 	Bug: ObjC constructor generation fails.\
	Result: \
\
	NSConnection.m: At top level:\
	variable or field `_GLOBAL_$I$NSConnectionReplyMode' declared void\
	parse errors have confused me too much\
\

\fi0\li0 build_objc_string_decl():\
\

\fi-540\li540 	Bug: Extern/static warning (also changed decl.c, see above).\

\fi0\li0 \
start_method_def():\
\

\fi-540\li540 	Bug: ObjC arguments very broken. Only primitive/simple types worked.\
	Result: \

\fi0\li0 \

\fi1100 @interface NSString\
-(void)simple:(int *)conversation;\
@end\
\
@implementation NSString\
-(void)simple:(int *)conversation \{ conversation; \}\
@end\

\fi0 \

\fi1100 a.cpp: In function `void -[NSString simple:](struct NSString *, struct objc_selector *)':\
a.cpp:7: warning: conflicting types for `-(void)simple:(int *)conversation'\
a.cpp: In function `':\
a.cpp:3: warning: previous declaration of `-(void)simple:(int *)conversation'\
a.cpp: In function `void -[NSString simple:](struct NSString *, struct objc_selector *)':\
a.cpp:7: `conversation' undeclared (first use this function)\
a.cpp:7: (Each undeclared identifier is reported only once\
a.cpp:7: for each function it appears in.)\

\fi0 \

\fi-540\li540 	Fix: The C++ parse tree for arguments is shallow (remove a "level" of tree node).\

\fi0\li0 \
really_start_method():\
\

\fi-540\li540 	Bug: Unused warnings for "self" and "_cmd".\

\fi0\li0 	Fix: Set the "used" bit.\
\

\ul\fs32 parse.y:
\ulnone \

\fs24 \
initlist:\
\

\fi-540\li540 	Bug: "labeled" inititializers (a GNU extension) cause ambiquity with message expressions. \

\fi0\li0 \

\fi1100 void func() \{\
   struct foo aFoo =  \{ [obj bar] \};\
\}\

\fi0 \

\fi-540\li540 	Fix: Remove the GNU feature. This is what we did in the previous release of the compiler. This also removes quite a few shift/reduce errors in the yacc grammar.\

\fi0\li0 \

\fi-540\li540 	Bug: "labeled" inititializers (a GNU extension) cause ambiquity with message expressions. \

\fi0\li0 \
opt.component_decl_list:\
\

\fi-540\li540 	Bug: C++ is not allowing a semi-colon after @defs. \

\fi0\li0 \

\fi1100 @interface Object \{ int a; \} @end\
\
struct foo \{ @defs(Object); \};\

\fi0 \

\fi-540\li540 	Fix: Add an explicit rule in the grammar. To localize the effect, I just made a duplicate clause...there might be a more elegant solution, however I didn't want to risk screwing up the mainline C++ grammar.\

}
