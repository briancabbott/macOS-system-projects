diff --git a/setup.py b/setup.py
index abf45df..18c4573 100644
--- a/setup.py
+++ b/setup.py
@@ -68,6 +68,11 @@ def macosx_sdk_root():
     if MACOS_SDK_ROOT:
         return MACOS_SDK_ROOT
 
+    sdkroot = os.environ.get('SDKROOT')
+    if sdkroot is not None:
+        MACOS_SDK_ROOT = sdkroot
+        return MACOS_SDK_ROOT
+
     cflags = sysconfig.get_config_var('CFLAGS')
     m = re.search(r'-isysroot\s+(\S+)', cflags)
     if m is not None:
@@ -140,7 +145,8 @@ def find_file(filename, std_dirs, paths):
         f = os.path.join(dir, filename)
 
         if host_platform == 'darwin' and is_macosx_sdk_path(dir):
-            f = os.path.join(sysroot, dir[1:], filename)
+            dir = os.path.join(sysroot, dir[1:])
+            f = os.path.join(dir, filename)
 
         if os.path.exists(f):
             return [dir]
@@ -192,8 +198,9 @@ def find_library_file(compiler, libname, std_dirs, paths):
         p = p.rstrip(os.sep)
 
         if host_platform == 'darwin' and is_macosx_sdk_path(p):
-            if os.path.join(sysroot, p[1:]) == dirname:
-                return [ p ]
+            sp = os.path.join(sysroot, p[1:])
+            if sp == dirname:
+                return [ sp ]
 
         if p == dirname:
             return [p]
@@ -365,7 +372,7 @@ class PyBuildExt(build_ext):
             return
 
         if host_platform == 'darwin' and (
-                sys.maxint > 2**32 and '-arch' in ext.extra_link_args):
+                sys.maxint > 2**32 and '-no64' in ext.extra_link_args):
             # Don't bother doing an import check when an extension was
             # build with an explicit '-arch' flag on OSX. That's currently
             # only used to build 32-bit only extensions in a 4-way
@@ -500,10 +507,10 @@ class PyBuildExt(build_ext):
             os.unlink(tmpfile)
 
     def detect_modules(self):
-        # Ensure that /usr/local is always used
-        if not cross_compiling:
-            add_dir_to_list(self.compiler.library_dirs, '/usr/local/lib')
-            add_dir_to_list(self.compiler.include_dirs, '/usr/local/include')
+#        # Ensure that /usr/local is always used
+#        if not cross_compiling:
+#            add_dir_to_list(self.compiler.library_dirs, '/usr/local/lib')
+#            add_dir_to_list(self.compiler.include_dirs, '/usr/local/include')
         if cross_compiling:
             self.add_gcc_paths()
         self.add_multiarch_paths()
@@ -562,7 +569,13 @@ class PyBuildExt(build_ext):
         # if a file is found in one of those directories, it can
         # be assumed that no additional -I,-L directives are needed.
         inc_dirs = self.compiler.include_dirs[:]
+        for d in ('/usr/local/include', '/usr/include',):
+            if d not in inc_dirs:
+                inc_dirs.insert(0, d)
         lib_dirs = self.compiler.library_dirs[:]
+        for d in ('/usr/local/lib',):
+            if d not in lib_dirs:
+                lib_dirs.append(d)
         if not cross_compiling:
             for d in (
                 '/usr/include',
@@ -762,7 +775,7 @@ class PyBuildExt(build_ext):
         exts.append( Extension('audioop', ['audioop.c']) )
 
         # Disabled on 64-bit platforms
-        if sys.maxsize != 9223372036854775807L:
+        if True:
             # Operations on images
             exts.append( Extension('imageop', ['imageop.c']) )
         else:
@@ -798,27 +811,27 @@ class PyBuildExt(build_ext):
         elif self.compiler.find_library_file(lib_dirs, 'curses'):
             curses_library = 'curses'
 
-        if host_platform == 'darwin':
-            os_release = int(os.uname()[2].split('.')[0])
-            dep_target = sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET')
-            if (dep_target and
-                    (tuple(int(n) for n in dep_target.split('.')[0:2])
-                        < (10, 5) ) ):
-                os_release = 8
-            if os_release < 9:
-                # MacOSX 10.4 has a broken readline. Don't try to build
-                # the readline module unless the user has installed a fixed
-                # readline package
-                if find_file('readline/rlconf.h', inc_dirs, []) is None:
-                    do_readline = False
+#        if host_platform == 'darwin':
+#            os_release = int(os.uname()[2].split('.')[0])
+#            dep_target = sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET')
+#            if (dep_target and
+#                    (tuple(int(n) for n in dep_target.split('.')[0:2])
+#                        < (10, 5) ) ):
+#                os_release = 8
+#            if os_release < 9:
+#                # MacOSX 10.4 has a broken readline. Don't try to build
+#                # the readline module unless the user has installed a fixed
+#                # readline package
+#                if find_file('readline/rlconf.h', inc_dirs, []) is None:
+#                    do_readline = False
         if do_readline:
-            if host_platform == 'darwin' and os_release < 9:
+            if True:
                 # In every directory on the search path search for a dynamic
                 # library and then a static library, instead of first looking
                 # for dynamic libraries on the entire path.
                 # This way a statically linked custom readline gets picked up
                 # before the (possibly broken) dynamic library in /usr/lib.
-                readline_extra_link_args = ('-Wl,-search_paths_first',)
+                readline_extra_link_args = ()
             else:
                 readline_extra_link_args = ()
 
@@ -832,7 +845,7 @@ class PyBuildExt(build_ext):
                                                      'termcap'):
                 readline_libs.append('termcap')
             exts.append( Extension('readline', ['readline.c'],
-                                   library_dirs=['/usr/lib/termcap'],
+#                                   library_dirs=['/usr/lib/termcap'],
                                    extra_link_args=readline_extra_link_args,
                                    libraries=readline_libs) )
         else:
@@ -1248,7 +1261,7 @@ class PyBuildExt(build_ext):
                 # for dynamic libraries on the entire path.
                 # This way a statically linked custom sqlite gets picked up
                 # before the dynamic library in /usr/lib.
-                sqlite_extra_link_args = ('-Wl,-search_paths_first',)
+                sqlite_extra_link_args = ()
             else:
                 sqlite_extra_link_args = ()
 
@@ -1468,7 +1481,7 @@ class PyBuildExt(build_ext):
             if version >= version_req:
                 if (self.compiler.find_library_file(lib_dirs, 'z')):
                     if host_platform == "darwin":
-                        zlib_extra_link_args = ('-Wl,-search_paths_first',)
+                        zlib_extra_link_args = ()
                     else:
                         zlib_extra_link_args = ()
                     exts.append( Extension('zlib', ['zlibmodule.c'],
@@ -1500,7 +1513,7 @@ class PyBuildExt(build_ext):
         # Gustavo Niemeyer's bz2 module.
         if (self.compiler.find_library_file(lib_dirs, 'bz2')):
             if host_platform == "darwin":
-                bz2_extra_link_args = ('-Wl,-search_paths_first',)
+                bz2_extra_link_args = ()
             else:
                 bz2_extra_link_args = ()
             exts.append( Extension('bz2', ['bz2module.c'],
@@ -1588,7 +1601,7 @@ class PyBuildExt(build_ext):
                 missing.append('_codecs_%s' % loc)
 
         # Dynamic loading module
-        if sys.maxint == 0x7fffffff:
+        if True:
             # This requires sizeof(int) == sizeof(long) == sizeof(char*)
             dl_inc = find_file('dlfcn.h', [], inc_dirs)
             if (dl_inc is not None) and (host_platform not in ['atheos']):
@@ -1753,22 +1766,22 @@ class PyBuildExt(build_ext):
                            '_Dlg', '_Drag', '_Evt', '_File', '_Folder', '_Fm',
                            '_Help', '_Icn', '_IBCarbon', '_List',
                            '_Menu', '_Mlte', '_OSA', '_Res', '_Qd', '_Qdoffs',
-                           '_Scrap', '_Snd', '_TE',
+                           '_Scrap', '_Snd', '_TE', '_Win'
                           ]
             for name in CARBON_EXTS:
                 addMacExtension(name, carbon_kwds)
 
-            # Workaround for a bug in the version of gcc shipped with Xcode 3.
-            # The _Win extension should build just like the other Carbon extensions, but
-            # this actually results in a hard crash of the linker.
-            #
-            if '-arch ppc64' in cflags and '-arch ppc' in cflags:
-                win_kwds = {'extra_compile_args': carbon_extra_compile_args + ['-arch', 'i386', '-arch', 'ppc'],
-                               'extra_link_args': ['-framework', 'Carbon', '-arch', 'i386', '-arch', 'ppc'],
-                           }
-                addMacExtension('_Win', win_kwds)
-            else:
-                addMacExtension('_Win', carbon_kwds)
+#            # Workaround for a bug in the version of gcc shipped with Xcode 3.
+#            # The _Win extension should build just like the other Carbon extensions, but
+#            # this actually results in a hard crash of the linker.
+#            #
+#            if '-arch ppc64' in cflags and '-arch ppc' in cflags:
+#                win_kwds = {'extra_compile_args': carbon_extra_compile_args + ['-arch', 'i386', '-arch', 'ppc'],
+#                               'extra_link_args': ['-framework', 'Carbon', '-arch', 'i386', '-arch', 'ppc'],
+#                           }
+#                addMacExtension('_Win', win_kwds)
+#            else:
+#                addMacExtension('_Win', carbon_kwds)
 
 
             # Application Services & QuickTime
@@ -1780,8 +1793,7 @@ class PyBuildExt(build_ext):
 
             exts.append( Extension('_Qt', ['qt/_Qtmodule.c'],
                         extra_compile_args=carbon_extra_compile_args,
-                        extra_link_args=['-framework', 'QuickTime',
-                                     '-framework', 'Carbon']) )
+                        extra_link_args=['-framework', 'Carbon']) )
 
 
         self.extensions.extend(exts)
@@ -1854,7 +1866,8 @@ class PyBuildExt(build_ext):
 
             for fw in 'Tcl', 'Tk':
                 if is_macosx_sdk_path(F):
-                    if not exists(join(sysroot, F[1:], fw + '.framework')):
+                    F = join(sysroot, F[1:])
+                    if not exists(join(F, fw + '.framework')):
                         break
                 else:
                     if not exists(join(F, fw + '.framework')):
@@ -1881,29 +1894,29 @@ class PyBuildExt(build_ext):
         # For 8.4a2, the X11 headers are not included. Rather than include a
         # complicated search, this is a hard-coded path. It could bail out
         # if X11 libs are not found...
-        include_dirs.append('/usr/X11R6/include')
+#        include_dirs.append('/usr/X11R6/include')
         frameworks = ['-framework', 'Tcl', '-framework', 'Tk']
 
-        # All existing framework builds of Tcl/Tk don't support 64-bit
-        # architectures.
-        cflags = sysconfig.get_config_vars('CFLAGS')[0]
-        archs = re.findall('-arch\s+(\w+)', cflags)
-
-        if is_macosx_sdk_path(F):
-            fp = os.popen("file %s/Tk.framework/Tk | grep 'for architecture'"%(os.path.join(sysroot, F[1:]),))
-        else:
-            fp = os.popen("file %s/Tk.framework/Tk | grep 'for architecture'"%(F,))
-
-        detected_archs = []
-        for ln in fp:
-            a = ln.split()[-1]
-            if a in archs:
-                detected_archs.append(ln.split()[-1])
-        fp.close()
-
-        for a in detected_archs:
-            frameworks.append('-arch')
-            frameworks.append(a)
+#        # All existing framework builds of Tcl/Tk don't support 64-bit
+#        # architectures.
+#        cflags = sysconfig.get_config_vars('CFLAGS')[0]
+#        archs = re.findall('-arch\s+(\w+)', cflags)
+#
+#        if is_macosx_sdk_path(F):
+#            fp = os.popen("file %s/Tk.framework/Tk | grep 'for architecture'"%(os.path.join(sysroot, F[1:]),))
+#        else:
+#            fp = os.popen("file %s/Tk.framework/Tk | grep 'for architecture'"%(F,))
+#
+#        detected_archs = []
+#        for ln in fp:
+#            a = ln.split()[-1]
+#            if a in archs:
+#                detected_archs.append(ln.split()[-1])
+#        fp.close()
+#
+#        for a in detected_archs:
+#            frameworks.append('-arch')
+#            frameworks.append(a)
 
         ext = Extension('_tkinter', ['_tkinter.c', 'tkappinit.c'],
                         define_macros=[('WITH_APPINIT', 1)],
@@ -1976,21 +1989,21 @@ class PyBuildExt(build_ext):
             if dir not in include_dirs:
                 include_dirs.append(dir)
 
-        # Check for various platform-specific directories
-        if host_platform == 'sunos5':
-            include_dirs.append('/usr/openwin/include')
-            added_lib_dirs.append('/usr/openwin/lib')
-        elif os.path.exists('/usr/X11R6/include'):
-            include_dirs.append('/usr/X11R6/include')
-            added_lib_dirs.append('/usr/X11R6/lib64')
-            added_lib_dirs.append('/usr/X11R6/lib')
-        elif os.path.exists('/usr/X11R5/include'):
-            include_dirs.append('/usr/X11R5/include')
-            added_lib_dirs.append('/usr/X11R5/lib')
-        else:
-            # Assume default location for X11
-            include_dirs.append('/usr/X11/include')
-            added_lib_dirs.append('/usr/X11/lib')
+#        # Check for various platform-specific directories
+#        if host_platform == 'sunos5':
+#            include_dirs.append('/usr/openwin/include')
+#            added_lib_dirs.append('/usr/openwin/lib')
+#        elif os.path.exists('/usr/X11R6/include'):
+#            include_dirs.append('/usr/X11R6/include')
+#            added_lib_dirs.append('/usr/X11R6/lib64')
+#            added_lib_dirs.append('/usr/X11R6/lib')
+#        elif os.path.exists('/usr/X11R5/include'):
+#            include_dirs.append('/usr/X11R5/include')
+#            added_lib_dirs.append('/usr/X11R5/lib')
+#        else:
+#            # Assume default location for X11
+#            include_dirs.append('/usr/X11/include')
+#            added_lib_dirs.append('/usr/X11/lib')
 
         # If Cygwin, then verify that X is installed before proceeding
         if host_platform == 'cygwin':
@@ -2128,7 +2141,7 @@ class PyBuildExt(build_ext):
         depends = ['_ctypes/ctypes.h']
 
         if host_platform == 'darwin':
-            sources.append('_ctypes/malloc_closure.c')
+#            sources.append('_ctypes/malloc_closure.c')
             sources.append('_ctypes/darwin/dlfcn_simple.c')
             extra_compile_args.append('-DMACOSX')
             include_dirs.append('_ctypes/darwin')
