diff --git a/Python/import.c b/Python/import.c
index ccbd949..9899529 100644
--- a/Python/import.c
+++ b/Python/import.c
@@ -27,6 +27,14 @@ extern "C" {
 typedef unsigned short mode_t;
 #endif
 
+#ifdef __APPLE__
+#include <System/sys/fsctl.h>
+#include <sys/ioctl.h>
+#ifndef FSCTL_EVAL_ROOTAUTH
+#define FSIOC_EVAL_ROOTAUTH                              _IO('h', 50)
+#define FSCTL_EVAL_ROOTAUTH                              IOCBASECMD(FSIOC_EVAL_ROOTAUTH)
+#endif
+#endif
 
 /* Magic word to reject .pyc files generated by other Python versions.
    It should change for each incompatible change to the bytecode.
@@ -797,6 +805,13 @@ make_compiled_pathname(char *pathname, char *buf, size_t buflen)
     return buf;
 }
 
+#ifdef __APPLE__
+static bool
+is_on_sealed_volume(const char *cpathname)
+{
+    return (fsctl(cpathname, FSIOC_EVAL_ROOTAUTH, NULL, 0) == 0);
+}
+#endif
 
 /* Given a pathname for a Python source file, its time of last
    modification, and a pathname for a compiled file, check whether the
@@ -824,6 +839,17 @@ check_compiled_module(char *pathname, time_t mtime, char *cpathname)
     }
     pyc_mtime = PyMarshal_ReadLongFromFile(fp);
     if (pyc_mtime != mtime) {
+#ifdef __APPLE__
+        /* For files on a sealed volume, we implicitly trust that they're up to date.
+         * We have to do this because their timestamp might have been altered by the
+         * sealing process.
+         */
+        if (is_on_sealed_volume(cpathname)) {
+            if (Py_VerboseFlag)
+                PySys_WriteStderr("# %s is on a sealed volume, skip mtime check\n", cpathname);
+            return fp;
+        }
+#endif
         if (Py_VerboseFlag)
             PySys_WriteStderr("# %s has bad mtime\n", cpathname);
         fclose(fp);
