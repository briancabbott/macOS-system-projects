#!/bin/bash -norc
dnl	This file is an input file used by the GNU "autoconf" program to
dnl	generate the file "configure", which is run during Tcl installation
dnl	to configure the system for the local environment.
#
# RCS: @(#) $Id: configure.in,v 1.47 2007/02/09 19:06:47 hobbs Exp $

#-----------------------------------------------------------------------
# Set your package name and version numbers here.
#
# This initializes the environment with PACKAGE_NAME and PACKAGE_VERSION
# set as provided.  These will also be added as -D defs in your Makefile
# so you can encode the package version directly into the source files.
#-----------------------------------------------------------------------

AC_INIT([Ffidl], [0.6.1])

AC_PREREQ(2.60)

#-----------------------------------------------------------------------
# Ffidl TEA configure
#
# Copyright (c) 2005-2008 Daniel A. Steffen.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#-----------------------------------------------------------------------

AC_DEFINE_UNQUOTED([FFIDL_VERSION], ["$PACKAGE_VERSION"], [Ffidl version])

if test "`uname -s`" != "Darwin" -o "`uname -r | cut -f 1 -d .`" -lt 9; then
    AC_MSG_ERROR([Mac OS X 10.5 or later required!])
fi

#--------------------------------------------------------------------
# Call TEA_INIT as the first TEA_ macro to set up initial vars.
# This will define a ${TEA_PLATFORM} variable == "unix" or "windows"
# as well as PKG_LIB_FILE and PKG_STUB_LIB_FILE.
#--------------------------------------------------------------------

TEA_INIT([3.9])

AC_CONFIG_AUX_DIR(tclconfig)

#--------------------------------------------------------------------
# ffidl autoheader
#--------------------------------------------------------------------

AC_CONFIG_HEADERS([ffidlConfig.h])
TEA_ADD_INCLUDES([-imacros ffidlConfig.h])
CONFIG_CLEAN_FILES=ffidlConfig.h
AC_SUBST(CONFIG_CLEAN_FILES)

AH_BOTTOM([
/* override */ #undef WORDS_BIGENDIAN
#if defined(__BIG_ENDIAN__)
/* override */ #define WORDS_BIGENDIAN 1
#endif
/* override */ #undef SIZEOF_LONG
/* override */ #undef ALIGNOF_LONG
/* override */ #undef SIZEOF_VOID_P
/* override */ #undef ALIGNOF_VOID_P
/* override */ #undef ALIGNOF_LONG_LONG
/* override */ #undef ALIGNOF_DOUBLE
#if defined(__LP64__)
/* override */ #define SIZEOF_LONG 8
/* override */ #define ALIGNOF_LONG 8
/* override */ #define SIZEOF_VOID_P 8
/* override */ #define ALIGNOF_VOID_P 8
/* override */ #define ALIGNOF_LONG_LONG 8
/* override */ #define ALIGNOF_DOUBLE 8
#else
/* override */ #define SIZEOF_LONG 4
/* override */ #define ALIGNOF_LONG 4
/* override */ #define SIZEOF_VOID_P 4
/* override */ #define ALIGNOF_VOID_P 4
/* override */ #define ALIGNOF_LONG_LONG 4
/* override */ #define ALIGNOF_DOUBLE 4
#endif
/* override */ #undef PACKAGE_BUGREPORT
/* override */ #undef PACKAGE_NAME
/* override */ #undef PACKAGE_STRING
/* override */ #undef PACKAGE_TARNAME
/* override */ #undef PACKAGE_VERSION
])

#--------------------------------------------------------------------
# Load the tclConfig.sh file
#--------------------------------------------------------------------

TEA_PATH_TCLCONFIG
TEA_LOAD_TCLCONFIG

#-----------------------------------------------------------------------
# Handle the --prefix=... option by defaulting to what Tcl gave.
# Must be called after TEA_LOAD_TCLCONFIG and before TEA_SETUP_COMPILER.
#-----------------------------------------------------------------------

TEA_PREFIX

#-----------------------------------------------------------------------
# Standard compiler checks.
# This sets up CC by using the CC env var, or looks for gcc otherwise.
# This also calls AC_PROG_CC, AC_PROG_INSTALL and a few others to create
# the basic setup necessary to compile executables.
#-----------------------------------------------------------------------

TEA_SETUP_COMPILER

#-----------------------------------------------------------------------
# Specify the C source files to compile in TEA_ADD_SOURCES,
# public headers that need to be installed in TEA_ADD_HEADERS,
# stub library C source files to compile in TEA_ADD_STUB_SOURCES,
# and runtime Tcl library files in TEA_ADD_TCL_SOURCES.
# This defines PKG(_STUB)_SOURCES, PKG(_STUB)_OBJECTS, PKG_HEADERS
# and PKG_TCL_SOURCES.
#-----------------------------------------------------------------------

TEA_ADD_SOURCES([ffidl.c])
TEA_ADD_HEADERS([])
TEA_ADD_INCLUDES([])
TEA_ADD_LIBS([])
TEA_ADD_CFLAGS([-DMACOSX])
TEA_ADD_STUB_SOURCES([])
TEA_ADD_TCL_SOURCES([library/ffidlrt.tcl])
AC_DEFINE(LOOKUP_TK_STUBS, 1, 
    [ffidl::stubsymbol can lookup in Tk stubs tables])

#--------------------------------------------------------------------
# TEA_ADD_* any platform specific compiler/build info here.
#--------------------------------------------------------------------

AC_SUBST(CLEANFILES)

#--------------------------------------------------------------------
# Choose which headers you need.  Extension authors should try very
# hard to only rely on the Tcl public header files.  Internal headers
# contain private data structures and are subject to change without
# notice.
# This MUST be called after TEA_LOAD_TCLCONFIG / TEA_LOAD_TKCONFIG
#--------------------------------------------------------------------

#TEA_PUBLIC_TCL_HEADERS
TEA_PRIVATE_TCL_HEADERS

#--------------------------------------------------------------------
# ffidl specific configuration
#--------------------------------------------------------------------

AC_ARG_WITH(libffi-include,
    AC_HELP_STRING([--with-libffi-include],
	[directory containing libffi headers]),
    [with_libffi_include=${withval}])
AC_CACHE_CHECK([for directory with ffi.h], tcl_cv_path_ffi_h, [
    l="$with_libffi_include $prefix/include $prefix/include/ffi /usr/local/include /usr/local/include/ffi /usr/include /usr/include/ffi"
    for d in $l; do if test -r "$d/ffi.h"; then
	tcl_cv_path_ffi_h="$d"; break; fi; done])
if test -n "$tcl_cv_path_ffi_h"; then
    TEA_ADD_INCLUDES([-I$tcl_cv_path_ffi_h])
else
    AC_MSG_ERROR([ffi.h not found!])
fi

AC_ARG_WITH(libffi-lib,
    AC_HELP_STRING([--with-libffi-lib],
	[directory containing libffi library]),
    [with_libffi_lib=${withval}])
AC_CACHE_CHECK([for directory with libffi library], tcl_cv_path_libffi, [
    l="$with_libffi_lib $exec_prefix/lib $prefix/lib /usr/local/lib /usr/lib"
    for d in $l; do if test -r "$d/libffi.tbd" -o -r "$d/libffi.dylib" -o -r "$d/libffi.a"; then
	tcl_cv_path_libffi="$d"; break; fi; done])
if test "$tcl_cv_path_libffi" != "built-in"; then
    TEA_ADD_LIBS([-L$tcl_cv_path_libffi -lffi])
else
    AC_MSG_ERROR([libffi not found!])
fi

AC_MSG_CHECKING([whether to implement callbacks])
AC_ARG_ENABLE(callbacks, 
    AC_HELP_STRING([--enable-callbacks],
        [implement callbacks, if possible (default: on)]), 
    [tcl_ok=$enableval], [tcl_ok=yes])
AC_MSG_RESULT([$tcl_ok])
if test "$tcl_ok" = "yes"; then
    AC_DEFINE(USE_CALLBACKS, 1, [Implement callbacks])
fi

AC_MSG_CHECKING([whether to build ffidl test functions])
AC_ARG_ENABLE(test, 
    AC_HELP_STRING([--enable-test],
        [build ffidl test functions (default: off)]), 
    [tcl_ok=$enableval], [tcl_ok=no])
AC_MSG_RESULT([$tcl_ok])
if test "$tcl_ok" = "yes"; then
    TEA_ADD_SOURCES([ffidl_test.c])
    FFIDL_TEST=1
fi
AC_SUBST(FFIDL_TEST)

AC_C_CHAR_UNSIGNED
AC_CHECK_SIZEOF(char)
AC_CHECK_ALIGNOF(char)
AC_CHECK_SIZEOF(short)
AC_CHECK_ALIGNOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_ALIGNOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_ALIGNOF(long)
AC_CHECK_TYPES(long long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_ALIGNOF(long long)
AC_CHECK_SIZEOF(float)
AC_CHECK_ALIGNOF(float)
AC_CHECK_SIZEOF(double)
AC_CHECK_ALIGNOF(double)
AC_C_LONG_DOUBLE
AC_CHECK_SIZEOF(long double)
AC_CHECK_ALIGNOF(long double)
AC_CHECK_SIZEOF(void *)
AC_CHECK_ALIGNOF(void *)

AC_CANONICAL_HOST
eval AC_DEFINE_UNQUOTED(CANONICAL_HOST, "${host}", 
    [Canonical host name])

#--------------------------------------------------------------------
# Check whether --enable-threads or --disable-threads was given.
# This auto-enables if Tcl was compiled threaded.
#--------------------------------------------------------------------

TEA_ENABLE_THREADS

#--------------------------------------------------------------------
# The statement below defines a collection of symbols related to
# building as a shared library instead of a static library.
#--------------------------------------------------------------------

TEA_ENABLE_SHARED

#--------------------------------------------------------------------
# This macro figures out what flags to use with the compiler/linker
# when building shared/static debug/optimized objects.  This information
# can be taken from the tclConfig.sh file, but this figures it all out.
#--------------------------------------------------------------------

TEA_CONFIG_CFLAGS

#--------------------------------------------------------------------
# Set the default compiler switches based on the --enable-symbols option.
#--------------------------------------------------------------------

TEA_ENABLE_SYMBOLS

#--------------------------------------------------------------------
# Everyone should be linking against the Tcl stub library.  If you
# can't for some reason, remove this definition.  If you aren't using
# stubs, you also need to modify the SHLIB_LD_LIBS setting below to
# link against the non-stubbed Tcl library.  Add Tk too if necessary.
#--------------------------------------------------------------------

AC_DEFINE(USE_TCL_STUBS, 1, [Use Tcl stubs])

#--------------------------------------------------------------------
# This macro generates a line to use when building a library.  It
# depends on values set by the TEA_ENABLE_SHARED, TEA_ENABLE_SYMBOLS,
# and TEA_LOAD_TCLCONFIG macros above.
#--------------------------------------------------------------------

TEA_MAKE_LIB

#--------------------------------------------------------------------
# Determine the name of the tclsh and/or wish executables in the
# Tcl and Tk build directories or the location they were installed
# into. These paths are used to support running test cases only,
# the Makefile should not be making use of these paths to generate
# a pkgIndex.tcl file or anything else at extension build time.
#--------------------------------------------------------------------

TEA_PROG_TCLSH

#--------------------------------------------------------------------
# Finally, substitute all of the various values into the Makefile.
# You may alternatively have a special pkgIndex.tcl.in or other files
# which require substituting th AC variables in.  Include these here.
#--------------------------------------------------------------------

AC_OUTPUT([GNUmakefile pkgIndex.tcl])
