/*
 * -*- tcl -*-
 * Parsing Expression Grammar 'TEMPLATE'.
 * Generated for unknown, from file 'TEST'
 */

/*
 * Declaring the parse functions
 */

<<attributes>> void <<ns>>sym_Expression (<<STATE>> <<state>>);
<<attributes>> void <<ns>>sym_Function (<<STATE>> <<state>>);
<<attributes>> void <<ns>>sequence_9 (<<STATE>> <<state>>);
<<attributes>> void <<ns>>sym_Sinus (<<STATE>> <<state>>);

/*
 * Precomputed table of strings (symbols, error messages, etc.).
 */

static char const* <<string-table>> [8] = {
    /*        0 = */   "n Expression",
    /*        1 = */   "Expression",
    /*        2 = */   "n Function",
    /*        3 = */   "Function",
    /*        4 = */   "str 'sin\50'",
    /*        5 = */   "t \51",
    /*        6 = */   "n Sinus",
    /*        7 = */   "Sinus"
};

/*
 * Grammar Start Expression
 */

<<attributes>> void <<ns>><<main>> (<<STATE>> <<state>>) { <<prelude>>
    <<self>> <<ns>>sym_Expression (<<state>>);
    return;
}

/*
 * value Symbol 'Expression'
 */

<<attributes>> void <<ns>>sym_Expression (<<STATE>> <<state>>) { <<prelude>>
   /*
    * (Function)
    */

    if (rde_param_i_symbol_start_d (<<state>>, 1)) return ;
    <<self>> <<ns>>sym_Function (<<state>>);
    rde_param_i_symbol_done_d_reduce (<<state>>, 1, 0);
    return;
}

/*
 * value Symbol 'Function'
 */

<<attributes>> void <<ns>>sym_Function (<<STATE>> <<state>>) { <<prelude>>
   /*
    * (Sinus)
    */

    if (rde_param_i_symbol_start_d (<<state>>, 3)) return ;
    <<self>> <<ns>>sym_Sinus (<<state>>);
    rde_param_i_symbol_done_d_reduce (<<state>>, 3, 2);
    return;
}

/*
 * value Symbol 'Sinus'
 */

<<attributes>> void <<ns>>sym_Sinus (<<STATE>> <<state>>) { <<prelude>>
   /*
    * x
    *     "sin\("
    *     (Expression)
    *     '\)'
    */

    if (rde_param_i_symbol_start_d (<<state>>, 7)) return ;
    <<self>> <<ns>>sequence_9 (<<state>>);
    rde_param_i_symbol_done_d_reduce (<<state>>, 7, 6);
    return;
}

<<attributes>> void <<ns>>sequence_9 (<<STATE>> <<state>>) { <<prelude>>
   /*
    * x
    *     "sin\("
    *     (Expression)
    *     '\)'
    */

    rde_param_i_state_push_void (<<state>>);
    rde_param_i_next_str (<<state>>, "sin\50", 4);
    if (rde_param_i_seq_void2value(<<state>>)) return;
    <<self>> <<ns>>sym_Expression (<<state>>);
    if (rde_param_i_seq_value2value(<<state>>)) return;
    rde_param_i_next_char (<<state>>, "\51", 5);
    rde_param_i_state_merge_value (<<state>>);
    return;
}

/*
 */
