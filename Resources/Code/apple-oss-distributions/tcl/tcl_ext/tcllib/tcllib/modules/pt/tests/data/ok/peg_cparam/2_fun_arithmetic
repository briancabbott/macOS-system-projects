/*
 * -*- tcl -*-
 * Parsing Expression Grammar 'TEMPLATE'.
 * Generated for unknown, from file 'TEST'
 */

/*
 * Declaring the parse functions
 */

<<attributes>> void <<ns>>sym_AddOp (<<STATE>> <<state>>);
<<attributes>> void <<ns>>sym_Digit (<<STATE>> <<state>>);
<<attributes>> void <<ns>>sequence_10 (<<STATE>> <<state>>);
<<attributes>> void <<ns>>sequence_15 (<<STATE>> <<state>>);
<<attributes>> void <<ns>>kleene_17 (<<STATE>> <<state>>);
<<attributes>> void <<ns>>sequence_19 (<<STATE>> <<state>>);
<<attributes>> void <<ns>>choice_21 (<<STATE>> <<state>>);
<<attributes>> void <<ns>>sym_Expression (<<STATE>> <<state>>);
<<attributes>> void <<ns>>sequence_27 (<<STATE>> <<state>>);
<<attributes>> void <<ns>>kleene_29 (<<STATE>> <<state>>);
<<attributes>> void <<ns>>sequence_31 (<<STATE>> <<state>>);
<<attributes>> void <<ns>>sym_Factor (<<STATE>> <<state>>);
<<attributes>> void <<ns>>sym_Function (<<STATE>> <<state>>);
<<attributes>> void <<ns>>sym_MulOp (<<STATE>> <<state>>);
<<attributes>> void <<ns>>optional_39 (<<STATE>> <<state>>);
<<attributes>> void <<ns>>poskleene_42 (<<STATE>> <<state>>);
<<attributes>> void <<ns>>sequence_44 (<<STATE>> <<state>>);
<<attributes>> void <<ns>>sym_Number (<<STATE>> <<state>>);
<<attributes>> void <<ns>>sym_Sign (<<STATE>> <<state>>);
<<attributes>> void <<ns>>sequence_52 (<<STATE>> <<state>>);
<<attributes>> void <<ns>>sym_Sinus (<<STATE>> <<state>>);
<<attributes>> void <<ns>>sym_Term (<<STATE>> <<state>>);

/*
 * Precomputed table of strings (symbols, error messages, etc.).
 */

static char const* <<string-table>> [26] = {
    /*        0 = */   "cl '-+'",
    /*        1 = */   "n AddOp",
    /*        2 = */   "AddOp",
    /*        3 = */   "cl '0123456789'",
    /*        4 = */   "n Digit",
    /*        5 = */   "Digit",
    /*        6 = */   "t \50",
    /*        7 = */   "t \51",
    /*        8 = */   "n Expression",
    /*        9 = */   "Expression",
    /*       10 = */   "n Factor",
    /*       11 = */   "Factor",
    /*       12 = */   "n Function",
    /*       13 = */   "Function",
    /*       14 = */   "cl '*/'",
    /*       15 = */   "n MulOp",
    /*       16 = */   "MulOp",
    /*       17 = */   "n Number",
    /*       18 = */   "Number",
    /*       19 = */   "n Sign",
    /*       20 = */   "Sign",
    /*       21 = */   "str 'sin\50'",
    /*       22 = */   "n Sinus",
    /*       23 = */   "Sinus",
    /*       24 = */   "n Term",
    /*       25 = */   "Term"
};

/*
 * Grammar Start Expression
 */

<<attributes>> void <<ns>><<main>> (<<STATE>> <<state>>) { <<prelude>>
    <<self>> <<ns>>sym_Expression (<<state>>);
    return;
}

/*
 * value Symbol 'AddOp'
 */

<<attributes>> void <<ns>>sym_AddOp (<<STATE>> <<state>>) { <<prelude>>
   /*
    * [-+]
    */

    if (rde_param_i_symbol_start (<<state>>, 2)) return ;
    rde_param_i_next_class (<<state>>, "-+", 0);
    rde_param_i_symbol_done_leaf (<<state>>, 2, 1);
    return;
}

/*
 * value Symbol 'Digit'
 */

<<attributes>> void <<ns>>sym_Digit (<<STATE>> <<state>>) { <<prelude>>
   /*
    * [0123456789]
    */

    if (rde_param_i_symbol_start (<<state>>, 5)) return ;
    rde_param_i_next_class (<<state>>, "0123456789", 3);
    rde_param_i_symbol_done_leaf (<<state>>, 5, 4);
    return;
}

/*
 * value Symbol 'Expression'
 */

<<attributes>> void <<ns>>sym_Expression (<<STATE>> <<state>>) { <<prelude>>
   /*
    * /
    *     (Function)
    *     x
    *         '\('
    *         (Expression)
    *         '\)'
    *     x
    *         (Factor)
    *         *
    *             x
    *                 (MulOp)
    *                 (Factor)
    */

    if (rde_param_i_symbol_start_d (<<state>>, 9)) return ;
    <<self>> <<ns>>choice_21 (<<state>>);
    rde_param_i_symbol_done_d_reduce (<<state>>, 9, 8);
    return;
}

<<attributes>> void <<ns>>choice_21 (<<STATE>> <<state>>) { <<prelude>>
   /*
    * /
    *     (Function)
    *     x
    *         '\('
    *         (Expression)
    *         '\)'
    *     x
    *         (Factor)
    *         *
    *             x
    *                 (MulOp)
    *                 (Factor)
    */

    rde_param_i_state_push_value (<<state>>);
    <<self>> <<ns>>sym_Function (<<state>>);
    if (rde_param_i_bra_value2value(<<state>>)) return;
    <<self>> <<ns>>sequence_10 (<<state>>);
    if (rde_param_i_bra_value2value(<<state>>)) return;
    <<self>> <<ns>>sequence_19 (<<state>>);
    rde_param_i_state_merge_value (<<state>>);
    return;
}

<<attributes>> void <<ns>>sequence_10 (<<STATE>> <<state>>) { <<prelude>>
   /*
    * x
    *     '\('
    *     (Expression)
    *     '\)'
    */

    rde_param_i_state_push_void (<<state>>);
    rde_param_i_next_char (<<state>>, "\50", 6);
    if (rde_param_i_seq_void2value(<<state>>)) return;
    <<self>> <<ns>>sym_Expression (<<state>>);
    if (rde_param_i_seq_value2value(<<state>>)) return;
    rde_param_i_next_char (<<state>>, "\51", 7);
    rde_param_i_state_merge_value (<<state>>);
    return;
}

<<attributes>> void <<ns>>sequence_19 (<<STATE>> <<state>>) { <<prelude>>
   /*
    * x
    *     (Factor)
    *     *
    *         x
    *             (MulOp)
    *             (Factor)
    */

    rde_param_i_state_push_value (<<state>>);
    <<self>> <<ns>>sym_Factor (<<state>>);
    if (rde_param_i_seq_value2value(<<state>>)) return;
    <<self>> <<ns>>kleene_17 (<<state>>);
    rde_param_i_state_merge_value (<<state>>);
    return;
}

<<attributes>> void <<ns>>kleene_17 (<<STATE>> <<state>>) { <<prelude>>
   /*
    * *
    *     x
    *         (MulOp)
    *         (Factor)
    */

    while (1) {
        rde_param_i_state_push_2 (<<state>>);
        <<self>> <<ns>>sequence_15 (<<state>>);
        if (rde_param_i_kleene_close(<<state>>)) return;
    }
    return;
}

<<attributes>> void <<ns>>sequence_15 (<<STATE>> <<state>>) { <<prelude>>
   /*
    * x
    *     (MulOp)
    *     (Factor)
    */

    rde_param_i_state_push_value (<<state>>);
    <<self>> <<ns>>sym_MulOp (<<state>>);
    if (rde_param_i_seq_value2value(<<state>>)) return;
    <<self>> <<ns>>sym_Factor (<<state>>);
    rde_param_i_state_merge_value (<<state>>);
    return;
}

/*
 * value Symbol 'Factor'
 */

<<attributes>> void <<ns>>sym_Factor (<<STATE>> <<state>>) { <<prelude>>
   /*
    * x
    *     (Term)
    *     *
    *         x
    *             (AddOp)
    *             (Term)
    */

    if (rde_param_i_symbol_start_d (<<state>>, 11)) return ;
    <<self>> <<ns>>sequence_31 (<<state>>);
    rde_param_i_symbol_done_d_reduce (<<state>>, 11, 10);
    return;
}

<<attributes>> void <<ns>>sequence_31 (<<STATE>> <<state>>) { <<prelude>>
   /*
    * x
    *     (Term)
    *     *
    *         x
    *             (AddOp)
    *             (Term)
    */

    rde_param_i_state_push_value (<<state>>);
    <<self>> <<ns>>sym_Term (<<state>>);
    if (rde_param_i_seq_value2value(<<state>>)) return;
    <<self>> <<ns>>kleene_29 (<<state>>);
    rde_param_i_state_merge_value (<<state>>);
    return;
}

<<attributes>> void <<ns>>kleene_29 (<<STATE>> <<state>>) { <<prelude>>
   /*
    * *
    *     x
    *         (AddOp)
    *         (Term)
    */

    while (1) {
        rde_param_i_state_push_2 (<<state>>);
        <<self>> <<ns>>sequence_27 (<<state>>);
        if (rde_param_i_kleene_close(<<state>>)) return;
    }
    return;
}

<<attributes>> void <<ns>>sequence_27 (<<STATE>> <<state>>) { <<prelude>>
   /*
    * x
    *     (AddOp)
    *     (Term)
    */

    rde_param_i_state_push_value (<<state>>);
    <<self>> <<ns>>sym_AddOp (<<state>>);
    if (rde_param_i_seq_value2value(<<state>>)) return;
    <<self>> <<ns>>sym_Term (<<state>>);
    rde_param_i_state_merge_value (<<state>>);
    return;
}

/*
 * value Symbol 'Function'
 */

<<attributes>> void <<ns>>sym_Function (<<STATE>> <<state>>) { <<prelude>>
   /*
    * (Sinus)
    */

    if (rde_param_i_symbol_start_d (<<state>>, 13)) return ;
    <<self>> <<ns>>sym_Sinus (<<state>>);
    rde_param_i_symbol_done_d_reduce (<<state>>, 13, 12);
    return;
}

/*
 * value Symbol 'MulOp'
 */

<<attributes>> void <<ns>>sym_MulOp (<<STATE>> <<state>>) { <<prelude>>
   /*
    * [*/]
    */

    if (rde_param_i_symbol_start (<<state>>, 16)) return ;
    rde_param_i_next_class (<<state>>, "*/", 14);
    rde_param_i_symbol_done_leaf (<<state>>, 16, 15);
    return;
}

/*
 * value Symbol 'Number'
 */

<<attributes>> void <<ns>>sym_Number (<<STATE>> <<state>>) { <<prelude>>
   /*
    * x
    *     ?
    *         (Sign)
    *     +
    *         (Digit)
    */

    if (rde_param_i_symbol_start_d (<<state>>, 18)) return ;
    <<self>> <<ns>>sequence_44 (<<state>>);
    rde_param_i_symbol_done_d_reduce (<<state>>, 18, 17);
    return;
}

<<attributes>> void <<ns>>sequence_44 (<<STATE>> <<state>>) { <<prelude>>
   /*
    * x
    *     ?
    *         (Sign)
    *     +
    *         (Digit)
    */

    rde_param_i_state_push_value (<<state>>);
    <<self>> <<ns>>optional_39 (<<state>>);
    if (rde_param_i_seq_value2value(<<state>>)) return;
    <<self>> <<ns>>poskleene_42 (<<state>>);
    rde_param_i_state_merge_value (<<state>>);
    return;
}

<<attributes>> void <<ns>>optional_39 (<<STATE>> <<state>>) { <<prelude>>
   /*
    * ?
    *     (Sign)
    */

    rde_param_i_state_push_2 (<<state>>);
    <<self>> <<ns>>sym_Sign (<<state>>);
    rde_param_i_state_merge_ok (<<state>>);
    return;
}

<<attributes>> void <<ns>>poskleene_42 (<<STATE>> <<state>>) { <<prelude>>
   /*
    * +
    *     (Digit)
    */

    rde_param_i_loc_push (<<state>>);
    <<self>> <<ns>>sym_Digit (<<state>>);
    if (rde_param_i_kleene_abort(<<state>>)) return;
    while (1) {
        rde_param_i_state_push_2 (<<state>>);
        <<self>> <<ns>>sym_Digit (<<state>>);
        if (rde_param_i_kleene_close(<<state>>)) return;
    }
    return;
}

/*
 * value Symbol 'Sign'
 */

<<attributes>> void <<ns>>sym_Sign (<<STATE>> <<state>>) { <<prelude>>
   /*
    * [-+]
    */

    if (rde_param_i_symbol_start (<<state>>, 20)) return ;
    rde_param_i_next_class (<<state>>, "-+", 0);
    rde_param_i_symbol_done_leaf (<<state>>, 20, 19);
    return;
}

/*
 * value Symbol 'Sinus'
 */

<<attributes>> void <<ns>>sym_Sinus (<<STATE>> <<state>>) { <<prelude>>
   /*
    * x
    *     "sin\("
    *     (Expression)
    *     '\)'
    */

    if (rde_param_i_symbol_start_d (<<state>>, 23)) return ;
    <<self>> <<ns>>sequence_52 (<<state>>);
    rde_param_i_symbol_done_d_reduce (<<state>>, 23, 22);
    return;
}

<<attributes>> void <<ns>>sequence_52 (<<STATE>> <<state>>) { <<prelude>>
   /*
    * x
    *     "sin\("
    *     (Expression)
    *     '\)'
    */

    rde_param_i_state_push_void (<<state>>);
    rde_param_i_next_str (<<state>>, "sin\50", 21);
    if (rde_param_i_seq_void2value(<<state>>)) return;
    <<self>> <<ns>>sym_Expression (<<state>>);
    if (rde_param_i_seq_value2value(<<state>>)) return;
    rde_param_i_next_char (<<state>>, "\51", 7);
    rde_param_i_state_merge_value (<<state>>);
    return;
}

/*
 * value Symbol 'Term'
 */

<<attributes>> void <<ns>>sym_Term (<<STATE>> <<state>>) { <<prelude>>
   /*
    * (Number)
    */

    if (rde_param_i_symbol_start_d (<<state>>, 25)) return ;
    <<self>> <<ns>>sym_Number (<<state>>);
    rde_param_i_symbol_done_d_reduce (<<state>>, 25, 24);
    return;
}

/*
 */
