#!/usr/bin/perl
use strict;

# This script expects the directory ~/samba-rsync-ftp to exist and to
# be a copy of the /home/ftp/pub/rsync dir on samba.org.  If it is run
# in test mode, it instead expects a dir named ~/tmp/samba-rsync-ftp
# (e.g. copy ~/samba-rsync-ftp into ~/tmp and you can do a trial-run of
# a release without affecting the files in the ~/samba-rsync-ftp dir).
#
# Run this as "release-rsync live" to affect ~/samba-rsync-ftp instead
# of ~/tmp/samba-rsync-ftp.

use Date::Format;

my $dest = $ENV{HOME} . '/samba-rsync-ftp';
my $releasedir = $ENV{HOME} . '/release';
my $cvsroot = $ENV{CVSROOT} = 'samba.org:/data/cvs';

my $ztoday = time2str('%d %b %Y', time);
my $today = $ztoday;
$today =~ s/^0//;

my $break = <<EOT;
==========================================================================
EOT
my $note = <<EOT;
== Note: type "-a u,n" if you want to auto-accept the U,N suggestions.  ==
EOT

my $live = shift;
my $skipping = '';

print $break;
if ($live) {
    print <<EOT;
== This will release a new version of rsync onto an unsuspecting world. ==
EOT
} else {
    print <<EOT;
==     **** TESTMODE ****    (Add "live" arg to avoid this.)            ==
EOT
    $dest =~ s#([^/]+$)#tmp/$1#;
    $skipping = ' ** SKIPPING **';
}
die "$dest does not exist\n" unless -d $dest;

print $break, "\nChecking out the latest rsync into $releasedir ...\n";

mkdir($releasedir, 0755) or die $! unless -d $releasedir;
chdir($releasedir) or die $!;

system 'rm -rf rsync';

my(%dirs, @files);
open(CVS, '-|', 'cvs checkout -P rsync') or die $!;
while (<CVS>) {
    print $_;
    next if /\.(cvs)?ignore$/;
    if (m#^[UP] rsync/(.*)#) {
	my $fn = $1;
	my($dir) = $fn =~ m#^(.+)/#;
	push(@files, $dir) if defined($dir) && !$dirs{$1}++;
	push(@files, $fn);
    }
}

chdir('rsync') or die $!;

my($version, $lastversion);
open(IN, 'configure.in') or die $!;
while (<IN>) {
    if (/^RSYNC_VERSION=(.*)/) {
	$version = $lastversion = $1;
	last;
    }
}
close IN;

$lastversion =~ s/(\d+)cvs$/ $1 - 1 /e;
$version =~ s/cvs/pre1/ || $version =~ s/pre(\d+)/ 'pre' . ($1 + 1) /e;

print $break, "\nPlease enter the version number of this release: [$version] ";
chomp($_ = <STDIN>);
if ($_ eq '.') {
    $version =~ s/pre\d+//;
} elsif ($_ ne '') {
    $version = $_;
}
$version =~ s/[-.]*pre[-.]*/pre/;

$lastversion =~ s/(\d+)pre\d+$/ $1 - 1 /e unless $version =~ /pre/;

my $cvstag = "release-$version";
$cvstag =~ s/[.]/-/g;
$cvstag =~ s/pre/-pre/;

print "Enter the previous version to produce a patch against: [$lastversion] ";
chomp($_ = <STDIN>);
$lastversion = $_ if $_ ne '';
$lastversion =~ s/[-.]*pre[-.]*/pre/;

my $release = 1;
print "Please enter the RPM release number of this release: [$release] ";
chomp($_ = <STDIN>);
$release = $_ if $_ ne '';

my $diffdir;
my $skipping2;
if ($lastversion =~ /pre/) {
    if ($version !~ /pre/) {
	die "You should not diff a release version against a pre-release version.\n";
    }
    $diffdir = "$dest/old-previews";
    $skipping2 = ' ** SKIPPING **';
} elsif ($version =~ /pre/) {
    $diffdir = $dest;
    $skipping2 = ' ** SKIPPING **';
} else {
    $diffdir = "$dest/old-versions";
    $skipping2 = '';
}

print "\n", $break, <<EOT;
\$version is "$version"
\$lastversion is "$lastversion"
\$cvstag is "$cvstag"
\$dest is "$dest"
\$releasedir is "$releasedir"
\$diffdir is "$diffdir"
\$release is "$release"

About to:
    - make sure that configure, config.h.in, and proto.h are updated
    - tweak the version in configure.in, configure, and the spec files
    - tweak NEWS and OLDNEWS to update the release date$skipping2
    - tweak the date in the *.yo files and re-generate the man pages
    - make sure that the patches dir has been updated
    - page through the "cvs diff" output

EOT
print "<Press Enter to continue> ";
$_ = <STDIN>;
my $f_opt = /f/ ? ' -f' : '';

print $break;
system "./prepare-source && touch proto.h";

my @tweak_files = ( glob('packaging/*.spec'), glob('packaging/*/*.spec'),
		    glob('*.yo'), qw( configure.in configure ) );
if ($version !~ /pre/) {
    push(@tweak_files, qw( NEWS OLDNEWS ));
}
foreach my $fn (@tweak_files) {
    open(IN, '<', $fn) or die $!;
    undef $/; $_ = <IN>; $/ = "\n";
    close IN;
    if ($fn =~ /configure/) {
	s/^RSYNC_VERSION=.*/RSYNC_VERSION=$version/m;
    } elsif ($fn =~ /\.spec/) {
	s/^(Version:) .*/$1 $version/m;
	s/^(Release:) .*/$1 $release/m;
    } elsif ($fn =~ /\.yo/) {
	s/^(manpage\([^)]+\)\(\d+\)\()[^)]+(\).*)/$1$today$2/m;
	s/^(This man ?page is current for version) \S+ (of rsync)/$1 $version $2/m;
    } elsif ($fn eq 'NEWS') {
	s/^(NEWS for rsync \Q$version\E) \(UNRELEASED\)\s*\n/$1 ($today)\n/mi
	    or die "Couldn't update NEWS file with release date!\n";
    } elsif ($fn eq 'OLDNEWS') {
	s/^\t\S\S\s\S\S\S\s\d\d\d\d(\t\Q$version\E)/\t$ztoday$1/m
	    or die "Couldn't update OLDNEWS file with release date!\n";
    } else {
	die "Unrecognized file in \@tweak_files: $fn\n";
    }
    open(OUT, '>', $fn) or die $!;
    print OUT $_;
    close OUT;
}

system "yodl2man -o rsync.1 rsync.yo; ./tweak_manpage_dashes rsync.1";
system "yodl2man -o rsyncd.conf.5 rsyncd.conf.yo; ./tweak_manpage_dashes rsyncd.conf.5";

mkdir('patches/tmp') or die $!;
system "rsync -a --exclude=patches/ --exclude-from=.cvsignore . patches/tmp/cvsdir/";

print "\n", $break, $note, $break;
system "patches/verify-patches -n -an$f_opt";

print $break;
system "cvs -q diff | egrep -v '^(===============|RCS file: |retrieving revision |Index: )' | less -p '^diff .*'";

print $break, <<EOT;

About to:
    - "cvs commit" all changes$skipping
    - "cvs tag" this release as $cvstag$skipping
    - change the diffs in the patches dir to include generated files

EOT
print "<Press Enter to continue> ";
$_ = <STDIN>;

if ($live) {
    system "cvs commit -m 'Preparing for release of $version'";
    system "cvs tag -F $cvstag .";
}

if (!/skip/i) {
    print "\n", $break, $note, $break;
    system "patches/verify-patches -pun -an";
}

my $tar_name = "rsync-$version.tar.gz";
my $diff_name = "rsync-$lastversion-$version.diffs.gz";
my $tar_file = "$dest/$tar_name";
my $diff_file = "$dest/$diff_name";

print $break, <<EOT;

About to do the following in the samba-rsync-ftp dir:
    - move the old tar/diff files into the appropriate old-* dirs
    - hard-link the moved tar/diff files on samba.org$skipping
    - create release tar, "$tar_name"
    - create release diffs, "$diff_name"
    - update README, *NEWS, TODO, and cvs.log
    - update rsync*.html man pages
    - gpg-sign the release files$skipping

EOT
print "<Press Enter to continue> ";
$_ = <STDIN>;

chdir($releasedir) or die $!;

print $break;
system "rm -rf rsync-$version";
rename('rsync', "rsync-$version") or die $!;

# When creating a pre-release after a normal release, there's nothing to move.
if ($diffdir ne $dest) {
    chdir($dest) or die $!;

    print "Shuffling old files ...\n";

    # We need to run this regardless of $lastversion's "pre"ness.
    my @moved_files;
    foreach my $fn (glob('rsync*pre*.tar.gz*'), glob('rsync*pre*-NEWS')) {
	link($fn, "old-previews/$fn") or die $!;
	push(@moved_files, $fn);
    }

    if ($version !~ /pre/) {
	foreach my $fn (glob('rsync*.tar.gz*'), glob('rsync*-NEWS')) {
	    next if $fn =~ /^rsync.*pre/;
	    link($fn, "old-versions/$fn") or die $!;
	    push(@moved_files, $fn);
	}

	foreach my $fn (glob('rsync*pre*.diffs.gz*')) {
	    unlink($fn);
	}

	foreach my $fn (glob('rsync*.diffs.gz*')) {
	    link($fn, "old-patches/$fn") or die $!;
	    push(@moved_files, $fn);
	}
    }

    # Optimize our future upload (in the absence of --detect-renamed) by
    # using rsync to hard-link the above files on samba.org.
    if ($live) {
	system "rsync -avHOC --include='rsync*.gz*' --include='old-*/' --exclude='*' . samba.org:/home/ftp/pub/rsync";
    }
    foreach (@moved_files) {
	unlink($_);
    }

    chdir($releasedir) or die $!;
}

print "Creating $tar_file ...\n";
system "fakeroot tar czf $tar_file rsync-$version";
open(TAR, '|-', "fakeroot tar --files-from=- --no-recursion --mode=g+w -czf $tar_file rsync-$version") or die $!;
foreach (@files) {
    print TAR "rsync-$version/$_\n";
}
close TAR;

print "Creating $diff_file ...\n";
system "rm -rf rsync-$version rsync-$lastversion";
system "tar xzf $tar_file; tar xzf $diffdir/rsync-$lastversion.tar.gz";
## TWEAK THE VERSIONS AS DESIRED HERE ##
#mkdir("rsync-$lastversion/support", 0755) or die $!;
#rename("rsync-$lastversion/rsyncstats", "rsync-$lastversion/support/rsyncstats");
#unlink("rsync-$lastversion/.ignore");
## END ##
system "diff -urN --exclude=patches rsync-$lastversion rsync-$version| gzip -9 >$diff_file";

print "Updating the other files in $dest ...\n";
system "rsync -a rsync-$version/{README,NEWS,OLDNEWS,TODO} $dest";
unlink("$dest/rsync-$version-NEWS");
link("$dest/NEWS", "$dest/rsync-$version-NEWS");
system "rsync -a $cvsroot/CVSROOT/rsync.updates $dest/cvs.log";

system "yodl2html -o $dest/rsync.html rsync-$version/rsync.yo";
system "yodl2html -o $dest/rsyncd.conf.html rsync-$version/rsyncd.conf.yo";

system "rm -rf rsync-*";

if ($live) {
    chdir($dest) or die $!;
    system "gpg -ba $tar_name; gpg -ba $diff_name";
    print $break, <<EOT;

All done.  Remember to announce the release on *BOTH*
rsync-announce\@lists.samba.org and rsync\@lists.samba.org!
EOT
} else {
    print $break, "All done.\n";
}
