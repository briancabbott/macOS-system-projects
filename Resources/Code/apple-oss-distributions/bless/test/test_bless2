#! /usr/bin/python3
#
# Copyright (c) 2020 Apple Inc. All rights reserved.
#
# Updated from Python 2 to Python 3 by Casey Hafley
#
# This program tests libbless2 API via 'bless2cli' Command Line Interface.
#
# To add a new test case:
#    (1) create a test_<testname> routine
#    (2) update TestListDictionary with the new test information
#
# libbless2 API is being used by these applications:
#    kmutil(K), bootabilityutil(B), PurpleRestore(P), bless2cli(C)
#
# Here is a summary of which API is being used by these applications,
# and this test program uses 'bless2cli' to access libbless2 API.
#
# ...C int bless2_summarize(const char *disk, vol_summary_t **s) __result_use_check;
# ...C void bless2_summary_free(vol_summary_t *s);
# .B.C int bless2_isc_preboot(vol_summary_t *s, char *preboot, size_t len);
# .B.C int bless2_os_preboot(vol_summary_t *s, char *preboot, size_t len);
# ...C int bless2_os_recovery(vol_summary_t *s, char *recovery, size_t len);
# K..C int bless2_bootobjects_path(vol_summary_t *s, CFDictionaryRef args,
#                                  char *out_relative_path, size_t path_size);
# .BPC int bless2_boot_with_args(vol_summary_t *s, CFDictionaryRef args);
# ...C int bless2_verify_with_args(vol_summary_t *s, CFDictionaryRef args);
# .BPC int bless2_install_with_args(vol_summary_t *s, CFDictionaryRef args);
# .B.C int bless2_gc_with_args(vol_summary_t *s, CFDictionaryRef args);
# K..C int bless2_install_custom_obj(vol_summary_t *s, CFDictionaryRef args);
# .B.C int bless2_update_all_custom_objs(bless2_update_function_t fn, void *ctxt,
#                                       CFDictionaryRef args);
#

import sys
import os
import logging
import re
import glob
from subprocess import Popen, PIPE

import ShareVars
from ShareModule import Source
from ShareModule import TYPE_SRC_ROSV
from ShareModule import FLAG_SRC_SSV
from ShareModule import OSDIR, OSDIR_GOLDENGATE, OSDIR_JAZZ, OSDIR_LIB
from ShareModule import SWEDMGname, DMGDIR
from ShareModule import Startup, Teardown, testBegin, testEnd
from ShareModule import docmd, docmd_common, check_arm
from ShareModule import DeviceToMntpt, getSystemVolumeDev, get_nvram_value
from ShareModule import seal_source, log_cleanup

Debug = False
ErrorPause = False
root_nvram_boot = ''
root_nvram_altboot = ''


# ================================================
#    HELPER FUNCTIONS
# ================================================

#
# test_bless2 program usage
#
def usage():
    print('Usage:')
    print('    test_bless2 all | presubmit | remote <option> (Run all or a subset of tests)')
    print('    test_bless2 <testname> <option> (Run a given <testname>)')
    print('    <option>')
    print('        -debug        (Exit right after bless command to debug)')
    print('        -errorpause   (Pause the process on error before clean up)')
    print('        -localmacos   (Get OS image from $HOME/Downloads/test_bless/)')
    print('    test_bless2 -l     (list all <testname>s)')
    print('    test_bless2 -c     (clean up all log directories)')
    print('')


# ================================================
#    CLASS: TEST
# ================================================

#
#  TEST CLASS
#
TESTFLAG_SetBoot = 1 << 1
TESTFLAG_Install = 1 << 2
TESTFLAG_GetIscPreboot = 1 << 3
TESTFLAG_GetOsPreboot = 1 << 4
TESTFLAG_GarbageCollect = 1 << 5
TESTFLAG_CustomInstall = 1 << 6
TESTFLAG_CustomUpdate = 1 << 7
TESTFLAG_GetBootpath = 1 << 8
TESTFLAG_BootOnce = 1 << 9


class Test:
    def __init__(self, testname, testflag, srcopts):
        self.testname = testname
        self.testflag = testflag
        self.srcopts = srcopts

    def do_bless2(self, src):
        cmd = ['/AppleInternal/CoreOS/tests/bless/bless2cli', '--device', src.apfsVdev]

        if self.testflag & TESTFLAG_SetBoot:
            cmd = cmd + ['--setboot']
        if self.testflag & TESTFLAG_BootOnce:
            cmd = cmd + ['--bootonce']
        if self.testflag & TESTFLAG_Install:
            prebmntpt = DeviceToMntpt(ShareVars.bless2_prebVdev)
            srcdirpath = prebmntpt + ShareVars.bless2_srcdirpath
            osmanifestpath = prebmntpt + ShareVars.bless2_osmanifestpath
            if srcdirpath == '' or osmanifestpath == '':
                logging.error('Fail at getting pathnames for bless2cli')
                print('Fail at getting pathnames for bless2cli')
                return 1
            cmd = cmd + ['--install', '--srcdirpath', srcdirpath, '--osmanifestpath', osmanifestpath]
        if self.testflag & TESTFLAG_GetIscPreboot:
            cmd = cmd + ['--getiscpreboot']
        if self.testflag & TESTFLAG_GetOsPreboot:
            cmd = cmd + ['--getospreboot']
        if self.testflag & TESTFLAG_GarbageCollect:
            cmd = cmd + ['--garbagecollect']
        if self.testflag & TESTFLAG_CustomInstall:
            cmd = cmd + ['--custominstall']
        if self.testflag & TESTFLAG_CustomUpdate:
            cmd = cmd + ['--customupdate']
        if self.testflag & TESTFLAG_GetBootpath:
            cmd = cmd + ['--getbootpath']

        err = docmd(cmd)
        return err

    def setbootRoot(self):
        #
        # --setboot/--bootonce on the root system volume
        # i.e. revert nvram value to the original root volume
        #      . --setboot sets nvram boot-volume
        #      . --setboot --bootonce sets nvram alt-boot-volume
        #
        # If the root volume is a snapshot, need to get the System Volume device
        # of the snapshot for bless2 to process on.
        # APFS internals know if it should root from a snapshot on the system volume.
        #
        root_sysVdev = getSystemVolumeDev(ShareVars.bless2_rootCdev, ShareVars.bless2_rootVdev)
        if root_sysVdev == '':
            logging.error('getSystemVolumeDev Fail')
            print('getSystemVolumeDev Fail')
            return 1

        if self.testflag & TESTFLAG_BootOnce:
            err = docmd(
                ['/AppleInternal/CoreOS/tests/bless/bless2cli', '--device', root_sysVdev, '--setboot', '--bootonce'])
        else:
            err = docmd(['/AppleInternal/CoreOS/tests/bless/bless2cli', '--device', root_sysVdev, '--setboot'])

        if err:
            logging.error('Fail to setboot to the original root %s on %s', ShareVars.bless2_rootVdev, root_sysVdev)
            print('Fail to setboot to the original root ' + ShareVars.bless2_rootVdev + ' on ' + root_sysVdev)
        return err

    #
    # Verify the result of running --install by checking if

    # (1) boot/<nsih#> direcotry is created in /System/Volumes/iSCPreboot/<TestVolumeGUUID>/
    #
    # (2) dump LocalPolicy img4 file to see if it has the matched nsih# % img4dump.py < /S/V/iSCPreboot/<TestVolumeGUUID>/LocalPolicy/<img4-file> | grep <lowercase-nsih#>
    #
    def verify_install(self):

        guuidPath = '/System/Volumes/iSCPreboot/' + ShareVars.bless2_guuid
        bootDir = guuidPath + '/boot/'
        localPolicyDir = guuidPath + '/LocalPolicy/'

        def logMessage(mssg):
            message = 'verify_install: {}'.format(mssg)
            print(message)
            logging.info(message)

        def logError(err):
            error = 'verify_install: {}'.format(err)
            print(error)
            logging.error(error)

        try:
            nsih = os.listdir(bootDir)[0]
            nsih = nsih.lower()
            logMessage('Found nsih {}'.format(nsih))
        except:
            logError('Could not find nsih directory in {}'.format(bootDir))
            return 1

        try:
            img4file = glob.glob(localPolicyDir + '/*.img4')[0]
            logMessage('Found LocalPolicy {}'.format(img4file))
        except:
            logError('Could not find {}'.format(img4file))
            return 1

        command = '/usr/local/bin/img4dump.py < ' + img4file
        logging.info('call: {}'.format(command))
        print('call: {}'.format(command))
        process = Popen(command, stdout=PIPE, shell=True)
        (img4dump, err) = process.communicate()
        returnCode = process.returncode
        if returnCode != 0:
            logError(err)
            return 1

        if re.search(nsih, img4dump):
            logMessage('Found nsih in LocalPolicy')
        else:
            logError('Could not find nsih in LocalPolicy')
            pattern = 'nsih\s+=\s+(.+)'
            results = re.findall(pattern, img4dump, re.MULTILINE)[0]
            logError('nsih value in LocalPolicy is {}'.format(results))
            return 1

        return 0

    #
    # Verify setboot by comparing nvram values with root's:
    #    --setboot : nvram 'boot-volume'
    #    --setboot --bootonce: nvram 'alt-boot-volume'
    #
    def verify_setboot(self):
        global root_nvram_boot, root_nvram_altboot

        if self.testflag & TESTFLAG_BootOnce:
            alt_bootvol = get_nvram_value('alt-boot-volume')
            if alt_bootvol == root_nvram_altboot:
                logging.error('Verifying setboot bootonce Fail')
                print('Verifying setboot bootonce Fail')
                return 1
        else:
            bootvol = get_nvram_value('boot-volume')
            if bootvol == root_nvram_boot:
                logging.error('Verifying setboot Fail')
                print('Verifying setboot Fail')
                return 1
        return 0

    def verify(self, src):
        logging.info('Verifying ...')
        print('Verifying ...')

        err = 0
        if self.testflag & TESTFLAG_SetBoot:
            err = self.verify_setboot()
            if err:
                return err

        if self.testflag & TESTFLAG_Install:
            err = self.verify_install()
            if err:
                return err

        #
        # XXX TBD
        # garbagecollect - check newly installed boot dir is removed?
        # Verify others?
        #
        return 0

    def run(self):
        global Debug, ErrorPause
        global root_nvram_boot, root_nvram_altboot

        testBegin(self.testname)
        src = Source(self.srcopts)
        err = src.setup()
        if err:
            testEnd(self.testname, src, '', err, ErrorPause)
            return err

    if src.flag & FLAG_SRC_SSV:
        err = seal_source(src)
        if err:
            return err
        docmd(['/usr/sbin/diskutil', 'mount', src.apfsVdev])

        #
        # Do --install first for testing
        # setboot/garbagecollect/customupdate
        #
        if (self.testflag & TESTFLAG_SetBoot) or \
                (self.testflag & TESTFLAG_GetBootpath) or \
                (self.testflag & TESTFLAG_GarbageCollect) or \
                (self.testflag & TESTFLAG_CustomUpdate):
            save_flag = self.testflag
            self.testflag = TESTFLAG_Install
            err = self.do_bless2(src)
            self.testflag = save_flag
            if err:
                testEnd(self.testname, src, '', err, ErrorPause)
                return err

        # Save the root's nvram values for boot-volume and alt-boot-volume
        root_nvram_boot = get_nvram_value('boot-volume')
        root_nvram_altboot = get_nvram_value('alt-boot-volume')

        # do the test
        err = self.do_bless2(src)

        if Debug:
            exit(err)

    if err == 0 and not self.testname.startswith('neg_'):
        err = self.verify(src)

        #
        # For --setboot or --setboot --bootonce,
        # revert nvram value to the original root volume
        # XXX whatif setbootRoot fails? can't block err from self.verify,
        #     move this to testEnd?
        #
        if self.testflag & TESTFLAG_SetBoot:
            self.setbootRoot()

        # XXX cleanup?
        # docmd(['/AppleInternal/CoreOS/tests/bless/bless2cli', '--device', src.apfsVdev, '--garbagecollect'])

        testEnd(self.testname, src, '', err, ErrorPause)
        return err


# ===========================================================
#  BLESS2CLI FUNCTIONS TO TEST
#
#  bless2cli --setboot --device <device> [--bootonce] [--noverify]
#  bless2cli --install --device <device>  [--bootcachesfile <file>] [--srcdirpath <path>] [--dstdirpath <path>] [--osmanifestpath <path>]  [--variant <option>] [--overrideuuid]
#  bless2cli --getiscpreboot --device <device>
#  bless2cli --getospreboot --device <device>
#  bless2cli --garbagecollect --device <device>
#  bless2cli --custominstall --device <device> --bootobjectpayload <file>
#  bless2cli --customupdate --device <device>
#  bless2cli --getbootpath --device <device>
#
# For --install --srcdirpath <path>:
#    The source directory is the restore bundle, so it would typically be
#    the "restore" directory inside the UUID directory in the preboot volume
#    that's associated with the given system (same container as volume group,
#    whether internal or external).
# For --install --dstdirpath <path>:
#    The destination directory is the mount point for the preboot volume that
#    will contain the boot objects, so preboot in same container for internal,
#    iSC preboot for external.
# For --install --osmanifestpath:
#    This needs to be the AP ticket to stitch to the boot objects.
#    It will typically be in the restore bundle folder, and named something like
#    apticket.<model>.im4m (for a global manifest) or
#    apticket.<model>.<ECID>.im4m (for a personalized manifest).
#
# For --garbagecollect:
#    It will delete all nsih dirs that aren't either currently booted from,
#    or aren't currently referenced by the volume's local policy.
#    If you're operating on a non-boot volume that doesn't have a local policy
#    set for it, then gc will delete all nsih dirs it can find.
#
#    'nsih' numbers are the hex digits of the next-stage-image-hash (nsih).
#    The nsih can be calculated by bless2_install_with_args API, but it can also
#    be retrieved from libbootpolicy.
#    e.g. the 9F6EF6B*9979 is the nsih number in
#    "/System/Volumes/Preboot/<guuid>/boot/9F6EF6B2088BA3887881B67056F54F9BC64B7DFF4D97C1BC0BCFC3CBCF480DBF3FA206F9B8B8D318768F59AB969979"
#    The nsih is literally just a SHA-384 hash of the OS manifest which is used
#    to stitch the boot objects. So if you take the manifest that pass to
#    bless2_install_with_args and do a shasum -a 384 on it, then the result
#    should match the directory name inside the boot directory.
#
# XXX TBD
# For --custominstall --bootobjectpayload <file>:
#    The usage for --custominstall is that KernelManagement will be creating
#    a payload as part of the kcgen workflow.  KM then hands it to this
#    bless2 API, bless2_install_custom_obj(), in order to get it stitched
#    and installed.  It's not clear how this test program can actually trigger
#    this workflow? Can not just hand it some dummy im4p, because that won't be
#    part of the local policy, so bless2 will fail when it tries to get the
#    manifest for it.
#
# ===========================================================

#
#  bless2cli --setboot --device <device>
#  On a dummy ARV (Sealed System Volume)
#
def test_setboot_arv(testname):
    srcopts = ['', TYPE_SRC_ROSV, '', FLAG_SRC_SSV]
    testflag = TESTFLAG_SetBoot
    test = Test(testname, testflag, srcopts)
    test.run()


#
#  bless2cli --setboot --bootonce --device <device>
#  On a dummy ARV (Sealed System Volume)
#
def test_setbootonce_arv(testname):
    srcopts = ['', TYPE_SRC_ROSV, '', FLAG_SRC_SSV]
    testflag = TESTFLAG_SetBoot | TESTFLAG_BootOnce
    test = Test(testname, testflag, srcopts)
    test.run()


#
#  bless2cli --setboot --device <device>
#  On a dummy non-ARV
#
def test_setboot_rosv(testname):
    srcopts = ['', TYPE_SRC_ROSV, '', 0]
    testflag = TESTFLAG_SetBoot
    test = Test(testname, testflag, srcopts)
    test.run()


#
#  bless2cli --install --device <device>  [--bootcachesfile <file>]
#        [--srcdirpath <path>] [--dstdirpath <path>] [--osmanifestpath <path>]
#        [--variant <option>] [--overrideuuid]
#  On a dummy ARV (Sealed System Volume)
#
def test_install_arv(testname):
    srcopts = ['', TYPE_SRC_ROSV, '', FLAG_SRC_SSV]
    testflag = TESTFLAG_Install
    test = Test(testname, testflag, srcopts)
    test.run()


#
#  bless2cli --getiscpreboot --device <device>
#  On a dummy ARV (Sealed System Volume)
#
#  XXX verify with "ioreg -l"?
#
def test_getiscpreboot_arv(testname):
    srcopts = ['', TYPE_SRC_ROSV, '', FLAG_SRC_SSV]
    testflag = TESTFLAG_GetIscPreboot
    test = Test(testname, testflag, srcopts)
    test.run()


#
#  bless2cli --getospreboot --device <device>
#  On a dummy ARV (Sealed System Volume)
#
def test_getospreboot_arv(testname):
    srcopts = ['', TYPE_SRC_ROSV, '', FLAG_SRC_SSV]
    testflag = TESTFLAG_GetOsPreboot
    test = Test(testname, testflag, srcopts)
    test.run()


#
#  bless2cli --garbagecollect --device <device>
#  On a dummy ARV (Sealed System Volume)
#
def test_garbagecollect_arv(testname):
    srcopts = ['', TYPE_SRC_ROSV, '', FLAG_SRC_SSV]
    testflag = TESTFLAG_GarbageCollect
    test = Test(testname, testflag, srcopts)
    test.run()


#
#  bless2cli --customupdate --device <device>
#  On a dummy ARV (Sealed System Volume)
#
def test_customupdate_arv(testname):
    srcopts = ['', TYPE_SRC_ROSV, '', FLAG_SRC_SSV]
    testflag = TESTFLAG_CustomUpdate
    test = Test(testname, testflag, srcopts)
    test.run()


#
#  bless2cli --getbootpath --device <device>
#  On a dummy ARV (Sealed System Volume)
#
def test_getbootpath_arv(testname):
    srcopts = ['', TYPE_SRC_ROSV, '', FLAG_SRC_SSV]
    testflag = TESTFLAG_GetBootpath
    test = Test(testname, testflag, srcopts)
    test.run()


# ======================================
#    NEGATIVE TEST CASES
# ======================================


# ======================================
#    USING REAL OS
# ======================================
#
# XXX Attach a real OS dmg, and test with bless2cli
#
# XXX ASR an OS system to an internal disk partition,
#     use /usr/local/bin/bootabilityutil (which uses libbless2)
#     to make it bootable, then reboot
#

# ====================================================
#    MAIN
# ====================================================

#
# The list of avaiable test cases/suite
#
#    key = <testname>
#    value = (test function, flag, test description)
#
TestListDictionary = {
    'setboot_arv': (test_setboot_arv, 'presubmit',
                    'bless2 setboot on a dummy ARV (Sealed System Volume)'),
    'setbootonce_arv': (test_setbootonce_arv, 'presubmit',
                        'bless2 setboot once on a dummy ARV (Sealed System Volume)'),
    'setboot_rosv': (test_setboot_rosv, 'presubmit',
                     'bless2 setboot on a dummy ROSV, non-ARV (not sealed volume group)'),
    'install_arv': (test_install_arv, 'presubmit',
                    'bless2 install on a dummy ARV (Sealed System Volume)'),
    'getiscpreboot_arv': (test_getiscpreboot_arv, 'presubmit',
                          'bless2 getiscpreboot on a dummy ARV (Sealed System Volume)'),
    'getospreboot_arv': (test_getospreboot_arv, 'presubmit',
                         'bless2 getospreboot on a dummy ARV (Sealed System Volume)'),
    'garbagecollect_arv': (test_garbagecollect_arv, 'presubmit',
                           'bless2 garbagecollect on a dummy ARV (Sealed System Volume)'),
    'customupdate_arv': (test_customupdate_arv, 'presubmit',
                         'bless2 customupdate on a dummy ARV (Sealed System Volume)'),
    'getbootpath_arv': (test_getbootpath_arv, 'presubmit',
                        'bless2 getbootpath on a dummy ARV (Sealed System Volume)'),
}


#
# For 'test_bless2 -l' command
#
def list_tests():
    print('')
    print('<testname>')
    count = 0
    for key in sorted(TestListDictionary):
        value = TestListDictionary[key]
        print(key + ' : ' + value[2] + ' (' + value[1] + ')')
        count = count + 1
    print('')
    print('Use ending "*" to run a subset of tests')
    print('e.g. "neg_*" ...etc')
    print('')
    print('Total number of test cases : %d' % count)
    print('')


#
# Run test cases with wildcard
#
def run_wildcard(tname):
    count = 0
    match_dict = {}

    tname_r = tname.replace("*", ".")
    regex = re.compile(tname_r)
    for key in TestListDictionary:
        if re.match(regex, key):
            match_dict[key] = TestListDictionary[key]
            count = count + 1
    if count == 0:
        return count

    Startup()
    for key in match_dict:
        func = match_dict[key][0]
        func(key)
    return count


#
# Run sub-group test cases
#
def run_subgroup(subgp):
    for key in TestListDictionary:
        value = TestListDictionary[key]
        if value[1] == subgp:
            func = value[0]
            func(key)


#
# Run all test cases
#
def run_all():
    for key in TestListDictionary:
        func = TestListDictionary[key][0]
        func(key)


def main():
    global TestListDictionary
    global Debug
    global LocalMacOS
    global ErrorPause
    global OSDIR, OSDIR_GOLDENGATE, OSDIR_JAZZ, OSDIR_LIB
    global SWEDMGname, DMGDIR

    LocalMacOS = False
    # XXX use getopt/argparse in Python?
    argcnt = len(sys.argv)
    if argcnt >= 3:
        for x in range(2, argcnt):
            if sys.argv[x] == '-debug':
                Debug = True
            elif sys.argv[x] == '-localmacos':
                LocalMacOS = True
            elif sys.argv[x] == '-errorpause':
                ErrorPause = True
            else:
                print('Unrecognized option ' + sys.argv[x])
                usage()
                exit(1)

    elif argcnt < 2:
        usage()
        exit(1)

    if sys.argv[1] == '-l':
        list_tests()
        exit(0)

    isArm = check_arm()
    if not isArm:
        print('This program is for testing libbless2 on Apple Silicon systems.')
        print('Please try again on an Apple Silicon system.')
        exit(1)

    if os.getuid() != 0:
        print('Need to run as a super user')
        exit(1)

    if sys.argv[1] == '-c':
        log_cleanup()
        exit(0)

    # Make sure logging is setup before using it
    Startup()
    testname = sys.argv[1]

    # XXX TBD
    # if LocalMacOS == False and (testname == 'all' or testname == 'remote'):
    #
    # Copy remote dmg files to local location first.
    # If not enough space, let it skip and do it individually later.
    #
    # for dir in SWEDMGname.keys():
    #     if dir == XCODEDIR:
    #         continue
    #     SWEDMGname[dir] = get_dmg_name(testname, dir)
    #     if SWEDMGname[dir] == '':
    #         exit(1)

    # XXX add tests using local Mac OS image
    if LocalMacOS == True:
        home = expanduser("~")
        OSDIR = home + '/Downloads/test_bless/'
        OSDIR_GOLDENGATE = OSDIR + 'GoldenGate/'
        OSDIR_JAZZ = OSDIR + 'macOSJazz/'
        OSDIR_LIB = OSDIR + 'macOSLiberty/'
        DMGDIR = OSDIR
        SWEDMGname = {OSDIR_GOLDENGATE: '', OSDIR_JAZZ: '', OSDIR_LIB: ''}
        print('Get macOS images from:')
        print(OSDIR_GOLDEN)
        print(OSDIR_JAZZ)
        print(OSDIR_LIB)
        print(XCODEDIR)

    # For Code Coverage output file name
    os.environ["LLVM_PROFILE_FILE"] = "test.%p.profraw"

    # Run tests
    if testname == 'all':
        run_all()
    elif testname == 'presubmit' or testname == 'remote':
        run_subgroup(testname)
    elif testname.endswith('*'):
        count = run_wildcard(testname)
        if count == 0:
            print('No matched test name')
            exit(1)
    elif testname in TestListDictionary:
        func = TestListDictionary[testname][0]
        func(testname)
    else:
        print('Unknown test name : ' + testname)
        exit(1)

    Teardown()


#
# Run Program
#
main()
