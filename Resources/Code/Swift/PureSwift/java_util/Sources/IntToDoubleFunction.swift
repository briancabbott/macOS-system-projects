
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.util.function.IntToDoubleFunction ///

public protocol IntToDoubleFunction: JavaProtocol {

    /// public abstract double java.util.function.IntToDoubleFunction.applyAsDouble(int)

    func applyAsDouble( value: Int ) -> Double

}


open class IntToDoubleFunctionForward: JNIObjectForward, IntToDoubleFunction {

    private static var IntToDoubleFunctionJNIClass: jclass?

    /// public abstract double java.util.function.IntToDoubleFunction.applyAsDouble(int)

    private static var applyAsDouble_MethodID_2: jmethodID?

    open func applyAsDouble( value: Int ) -> Double {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(value) )
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "applyAsDouble", methodSig: "(I)D", methodCache: &IntToDoubleFunctionForward.applyAsDouble_MethodID_2, args: &__args, locals: &__locals )
        return __return
    }

    open func applyAsDouble( _ _value: Int ) -> Double {
        return applyAsDouble( value: _value )
    }

}

