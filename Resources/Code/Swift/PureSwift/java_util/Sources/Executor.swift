
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.util.concurrent.Executor ///

public protocol Executor: JavaProtocol {

    /// public abstract void java.util.concurrent.Executor.execute(java.lang.Runnable)

    func execute( command: java_swift.Runnable? )

}


open class ExecutorForward: JNIObjectForward, Executor {

    private static var ExecutorJNIClass: jclass?

    /// public abstract void java.util.concurrent.Executor.execute(java.lang.Runnable)

    private static var execute_MethodID_2: jmethodID?

    open func execute( command: java_swift.Runnable? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: command, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "execute", methodSig: "(Ljava/lang/Runnable;)V", methodCache: &ExecutorForward.execute_MethodID_2, args: &__args, locals: &__locals )
    }

    open func execute( _ _command: java_swift.Runnable? ) {
        execute( command: _command )
    }

}

