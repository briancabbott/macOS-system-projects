
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.util.function.IntPredicate ///

public protocol IntPredicate: JavaProtocol {

    /// public default java.util.function.IntPredicate java.util.function.IntPredicate.and(java.util.function.IntPredicate)

    func and( other: IntPredicate? ) -> IntPredicate!

    /// private boolean java.util.function.IntPredicate.lambda$and$0(java.util.function.IntPredicate,int)

    /// private boolean java.util.function.IntPredicate.lambda$negate$1(int)

    /// private boolean java.util.function.IntPredicate.lambda$or$2(java.util.function.IntPredicate,int)

    /// public default java.util.function.IntPredicate java.util.function.IntPredicate.negate()

    func negate() -> IntPredicate!

    /// public default java.util.function.IntPredicate java.util.function.IntPredicate.or(java.util.function.IntPredicate)

    func or( other: IntPredicate? ) -> IntPredicate!

    /// public abstract boolean java.util.function.IntPredicate.test(int)

    func test( value: Int ) -> Bool

}


open class IntPredicateForward: JNIObjectForward, IntPredicate {

    private static var IntPredicateJNIClass: jclass?

    /// public default java.util.function.IntPredicate java.util.function.IntPredicate.and(java.util.function.IntPredicate)

    private static var and_MethodID_5: jmethodID?

    open func and( other: IntPredicate? ) -> IntPredicate! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: other, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "and", methodSig: "(Ljava/util/function/IntPredicate;)Ljava/util/function/IntPredicate;", methodCache: &IntPredicateForward.and_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? IntPredicateForward( javaObject: __return ) : nil
    }

    open func and( _ _other: IntPredicate? ) -> IntPredicate! {
        return and( other: _other )
    }

    /// public default java.util.function.IntPredicate java.util.function.IntPredicate.negate()

    private static var negate_MethodID_6: jmethodID?

    open func negate() -> IntPredicate! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "negate", methodSig: "()Ljava/util/function/IntPredicate;", methodCache: &IntPredicateForward.negate_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? IntPredicateForward( javaObject: __return ) : nil
    }


    /// public default java.util.function.IntPredicate java.util.function.IntPredicate.or(java.util.function.IntPredicate)

    private static var or_MethodID_7: jmethodID?

    open func or( other: IntPredicate? ) -> IntPredicate! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: other, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "or", methodSig: "(Ljava/util/function/IntPredicate;)Ljava/util/function/IntPredicate;", methodCache: &IntPredicateForward.or_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? IntPredicateForward( javaObject: __return ) : nil
    }

    open func or( _ _other: IntPredicate? ) -> IntPredicate! {
        return or( other: _other )
    }

    /// public abstract boolean java.util.function.IntPredicate.test(int)

    private static var test_MethodID_8: jmethodID?

    open func test( value: Int ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(value) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "test", methodSig: "(I)Z", methodCache: &IntPredicateForward.test_MethodID_8, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func test( _ _value: Int ) -> Bool {
        return test( value: _value )
    }

}

