
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.util.NavigableMap ///

public protocol NavigableMap: JavaProtocol {

    /// public abstract java.util.Map$Entry java.util.NavigableMap.ceilingEntry(java.lang.Object)

    // Skipping method: false false true false false 

    /// public abstract java.lang.Object java.util.NavigableMap.ceilingKey(java.lang.Object)

    func ceilingKey( key: java_swift.JavaObject? ) -> java_swift.JavaObject!

    /// public abstract java.util.NavigableSet java.util.NavigableMap.descendingKeySet()

    func descendingKeySet() -> NavigableSet!

    /// public abstract java.util.NavigableMap java.util.NavigableMap.descendingMap()

    func descendingMap() -> NavigableMap!

    /// public abstract java.util.Map$Entry java.util.NavigableMap.firstEntry()

    // Skipping method: false false true false false 

    /// public abstract java.util.Map$Entry java.util.NavigableMap.floorEntry(java.lang.Object)

    // Skipping method: false false true false false 

    /// public abstract java.lang.Object java.util.NavigableMap.floorKey(java.lang.Object)

    func floorKey( key: java_swift.JavaObject? ) -> java_swift.JavaObject!

    /// public abstract java.util.SortedMap java.util.NavigableMap.headMap(java.lang.Object)

    func headMap( toKey: java_swift.JavaObject? ) -> SortedMap!

    /// public abstract java.util.NavigableMap java.util.NavigableMap.headMap(java.lang.Object,boolean)

    func headMap( toKey: java_swift.JavaObject?, inclusive: Bool ) -> NavigableMap!

    /// public abstract java.util.Map$Entry java.util.NavigableMap.higherEntry(java.lang.Object)

    // Skipping method: false false true false false 

    /// public abstract java.lang.Object java.util.NavigableMap.higherKey(java.lang.Object)

    func higherKey( key: java_swift.JavaObject? ) -> java_swift.JavaObject!

    /// public abstract java.util.Map$Entry java.util.NavigableMap.lastEntry()

    // Skipping method: false false true false false 

    /// public abstract java.util.Map$Entry java.util.NavigableMap.lowerEntry(java.lang.Object)

    // Skipping method: false false true false false 

    /// public abstract java.lang.Object java.util.NavigableMap.lowerKey(java.lang.Object)

    func lowerKey( key: java_swift.JavaObject? ) -> java_swift.JavaObject!

    /// public abstract java.util.NavigableSet java.util.NavigableMap.navigableKeySet()

    func navigableKeySet() -> NavigableSet!

    /// public abstract java.util.Map$Entry java.util.NavigableMap.pollFirstEntry()

    // Skipping method: false false true false false 

    /// public abstract java.util.Map$Entry java.util.NavigableMap.pollLastEntry()

    // Skipping method: false false true false false 

    /// public abstract java.util.NavigableMap java.util.NavigableMap.subMap(java.lang.Object,boolean,java.lang.Object,boolean)

    func subMap( fromKey: java_swift.JavaObject?, fromInclusive: Bool, toKey: java_swift.JavaObject?, toInclusive: Bool ) -> NavigableMap!

    /// public abstract java.util.SortedMap java.util.NavigableMap.subMap(java.lang.Object,java.lang.Object)

    func subMap( fromKey: java_swift.JavaObject?, toKey: java_swift.JavaObject? ) -> SortedMap!

    /// public abstract java.util.SortedMap java.util.NavigableMap.tailMap(java.lang.Object)

    func tailMap( fromKey: java_swift.JavaObject? ) -> SortedMap!

    /// public abstract java.util.NavigableMap java.util.NavigableMap.tailMap(java.lang.Object,boolean)

    func tailMap( fromKey: java_swift.JavaObject?, inclusive: Bool ) -> NavigableMap!

}


open class NavigableMapForward: SortedMapForward, NavigableMap {

    private static var NavigableMapJNIClass: jclass?

    /// public abstract java.util.Map$Entry java.util.NavigableMap.ceilingEntry(java.lang.Object)

    // Skipping method: false false true false false 

    /// public abstract java.lang.Object java.util.NavigableMap.ceilingKey(java.lang.Object)

    private static var ceilingKey_MethodID_14: jmethodID?

    open func ceilingKey( key: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: key, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "ceilingKey", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &NavigableMapForward.ceilingKey_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func ceilingKey( _ _key: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return ceilingKey( key: _key )
    }

    /// public abstract void java.util.Map.clear()

    private static var clear_MethodID_15: jmethodID?

    override open func clear() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clear", methodSig: "()V", methodCache: &NavigableMapForward.clear_MethodID_15, args: &__args, locals: &__locals )
    }


    /// public abstract java.util.Comparator java.util.SortedMap.comparator()

    private static var comparator_MethodID_16: jmethodID?

    override open func comparator() -> JavaComparator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "comparator", methodSig: "()Ljava/util/Comparator;", methodCache: &NavigableMapForward.comparator_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaComparatorForward( javaObject: __return ) : nil
    }


    /// public default java.lang.Object java.util.Map.compute(java.lang.Object,java.util.function.BiFunction)

    private static var compute_MethodID_17: jmethodID?

    override open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "compute", methodSig: "(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;", methodCache: &NavigableMapForward.compute_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func compute( _ _arg0: java_swift.JavaObject?, _ _arg1: BiFunction? ) -> java_swift.JavaObject! {
        return compute( arg0: _arg0, arg1: _arg1 )
    }

    /// public default java.lang.Object java.util.Map.computeIfAbsent(java.lang.Object,java.util.function.Function)

    private static var computeIfAbsent_MethodID_18: jmethodID?

    override open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "computeIfAbsent", methodSig: "(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;", methodCache: &NavigableMapForward.computeIfAbsent_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func computeIfAbsent( _ _arg0: java_swift.JavaObject?, _ _arg1: Function? ) -> java_swift.JavaObject! {
        return computeIfAbsent( arg0: _arg0, arg1: _arg1 )
    }

    /// public default java.lang.Object java.util.Map.computeIfPresent(java.lang.Object,java.util.function.BiFunction)

    private static var computeIfPresent_MethodID_19: jmethodID?

    override open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "computeIfPresent", methodSig: "(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;", methodCache: &NavigableMapForward.computeIfPresent_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func computeIfPresent( _ _arg0: java_swift.JavaObject?, _ _arg1: BiFunction? ) -> java_swift.JavaObject! {
        return computeIfPresent( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract boolean java.util.Map.containsKey(java.lang.Object)

    private static var containsKey_MethodID_20: jmethodID?

    override open func containsKey( arg0: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "containsKey", methodSig: "(Ljava/lang/Object;)Z", methodCache: &NavigableMapForward.containsKey_MethodID_20, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func containsKey( _ _arg0: java_swift.JavaObject? ) -> Bool {
        return containsKey( arg0: _arg0 )
    }

    /// public abstract boolean java.util.Map.containsValue(java.lang.Object)

    private static var containsValue_MethodID_21: jmethodID?

    override open func containsValue( arg0: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "containsValue", methodSig: "(Ljava/lang/Object;)Z", methodCache: &NavigableMapForward.containsValue_MethodID_21, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func containsValue( _ _arg0: java_swift.JavaObject? ) -> Bool {
        return containsValue( arg0: _arg0 )
    }

    /// public abstract java.util.NavigableSet java.util.NavigableMap.descendingKeySet()

    private static var descendingKeySet_MethodID_22: jmethodID?

    open func descendingKeySet() -> NavigableSet! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "descendingKeySet", methodSig: "()Ljava/util/NavigableSet;", methodCache: &NavigableMapForward.descendingKeySet_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NavigableSetForward( javaObject: __return ) : nil
    }


    /// public abstract java.util.NavigableMap java.util.NavigableMap.descendingMap()

    private static var descendingMap_MethodID_23: jmethodID?

    open func descendingMap() -> NavigableMap! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "descendingMap", methodSig: "()Ljava/util/NavigableMap;", methodCache: &NavigableMapForward.descendingMap_MethodID_23, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: NavigableMapForward.self, from: __return )
    }


    /// public abstract java.util.Set java.util.SortedMap.entrySet()

    private static var entrySet_MethodID_24: jmethodID?

    override open func entrySet() -> java_swift.JavaSet! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "entrySet", methodSig: "()Ljava/util/Set;", methodCache: &NavigableMapForward.entrySet_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaSetForward( javaObject: __return ) : nil
    }


    /// public abstract boolean java.util.Map.equals(java.lang.Object)

    private static var equals_MethodID_25: jmethodID?

    override open func equals( arg0: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &NavigableMapForward.equals_MethodID_25, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
        return equals( arg0: _arg0 )
    }

    /// public abstract java.util.Map$Entry java.util.NavigableMap.firstEntry()

    // Skipping method: false false true false false 

    /// public abstract java.lang.Object java.util.SortedMap.firstKey()

    private static var firstKey_MethodID_26: jmethodID?

    override open func firstKey() -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "firstKey", methodSig: "()Ljava/lang/Object;", methodCache: &NavigableMapForward.firstKey_MethodID_26, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public abstract java.util.Map$Entry java.util.NavigableMap.floorEntry(java.lang.Object)

    // Skipping method: false false true false false 

    /// public abstract java.lang.Object java.util.NavigableMap.floorKey(java.lang.Object)

    private static var floorKey_MethodID_27: jmethodID?

    open func floorKey( key: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: key, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "floorKey", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &NavigableMapForward.floorKey_MethodID_27, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func floorKey( _ _key: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return floorKey( key: _key )
    }

    /// public default void java.util.Map.forEach(java.util.function.BiConsumer)

    private static var forEach_MethodID_28: jmethodID?

    override open func forEach( arg0: BiConsumer? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "forEach", methodSig: "(Ljava/util/function/BiConsumer;)V", methodCache: &NavigableMapForward.forEach_MethodID_28, args: &__args, locals: &__locals )
    }

    override open func forEach( _ _arg0: BiConsumer? ) {
        forEach( arg0: _arg0 )
    }

    /// public abstract java.lang.Object java.util.Map.get(java.lang.Object)

    private static var get_MethodID_29: jmethodID?

    override open func get( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "get", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &NavigableMapForward.get_MethodID_29, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func get( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return get( arg0: _arg0 )
    }

    /// public default java.lang.Object java.util.Map.getOrDefault(java.lang.Object,java.lang.Object)

    private static var getOrDefault_MethodID_30: jmethodID?

    override open func getOrDefault( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getOrDefault", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &NavigableMapForward.getOrDefault_MethodID_30, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func getOrDefault( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return getOrDefault( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract int java.util.Map.hashCode()

    private static var hashCode_MethodID_31: jmethodID?

    override open func hashCode() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "hashCode", methodSig: "()I", methodCache: &NavigableMapForward.hashCode_MethodID_31, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public abstract java.util.SortedMap java.util.NavigableMap.headMap(java.lang.Object)

    private static var headMap_MethodID_32: jmethodID?

    override open func headMap( toKey: java_swift.JavaObject? ) -> SortedMap! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: toKey, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "headMap", methodSig: "(Ljava/lang/Object;)Ljava/util/SortedMap;", methodCache: &NavigableMapForward.headMap_MethodID_32, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: SortedMapForward.self, from: __return )
    }

    override open func headMap( _ _toKey: java_swift.JavaObject? ) -> SortedMap! {
        return headMap( toKey: _toKey )
    }

    /// public abstract java.util.NavigableMap java.util.NavigableMap.headMap(java.lang.Object,boolean)

    private static var headMap_MethodID_33: jmethodID?

    open func headMap( toKey: java_swift.JavaObject?, inclusive: Bool ) -> NavigableMap! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: toKey, locals: &__locals )
        __args[1] = jvalue( z: jboolean(inclusive ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "headMap", methodSig: "(Ljava/lang/Object;Z)Ljava/util/NavigableMap;", methodCache: &NavigableMapForward.headMap_MethodID_33, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: NavigableMapForward.self, from: __return )
    }

    open func headMap( _ _toKey: java_swift.JavaObject?, _ _inclusive: Bool ) -> NavigableMap! {
        return headMap( toKey: _toKey, inclusive: _inclusive )
    }

    /// public abstract java.util.Map$Entry java.util.NavigableMap.higherEntry(java.lang.Object)

    // Skipping method: false false true false false 

    /// public abstract java.lang.Object java.util.NavigableMap.higherKey(java.lang.Object)

    private static var higherKey_MethodID_34: jmethodID?

    open func higherKey( key: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: key, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "higherKey", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &NavigableMapForward.higherKey_MethodID_34, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func higherKey( _ _key: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return higherKey( key: _key )
    }

    /// public abstract boolean java.util.Map.isEmpty()

    private static var isEmpty_MethodID_35: jmethodID?

    override open func isEmpty() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isEmpty", methodSig: "()Z", methodCache: &NavigableMapForward.isEmpty_MethodID_35, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public abstract java.util.Set java.util.SortedMap.keySet()

    private static var keySet_MethodID_36: jmethodID?

    override open func keySet() -> java_swift.JavaSet! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "keySet", methodSig: "()Ljava/util/Set;", methodCache: &NavigableMapForward.keySet_MethodID_36, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaSetForward( javaObject: __return ) : nil
    }


    /// public abstract java.util.Map$Entry java.util.NavigableMap.lastEntry()

    // Skipping method: false false true false false 

    /// public abstract java.lang.Object java.util.SortedMap.lastKey()

    private static var lastKey_MethodID_37: jmethodID?

    override open func lastKey() -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "lastKey", methodSig: "()Ljava/lang/Object;", methodCache: &NavigableMapForward.lastKey_MethodID_37, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public abstract java.util.Map$Entry java.util.NavigableMap.lowerEntry(java.lang.Object)

    // Skipping method: false false true false false 

    /// public abstract java.lang.Object java.util.NavigableMap.lowerKey(java.lang.Object)

    private static var lowerKey_MethodID_38: jmethodID?

    open func lowerKey( key: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: key, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "lowerKey", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &NavigableMapForward.lowerKey_MethodID_38, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func lowerKey( _ _key: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return lowerKey( key: _key )
    }

    /// public default java.lang.Object java.util.Map.merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)

    private static var merge_MethodID_39: jmethodID?

    override open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "merge", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;", methodCache: &NavigableMapForward.merge_MethodID_39, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func merge( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: BiFunction? ) -> java_swift.JavaObject! {
        return merge( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract java.util.NavigableSet java.util.NavigableMap.navigableKeySet()

    private static var navigableKeySet_MethodID_40: jmethodID?

    open func navigableKeySet() -> NavigableSet! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "navigableKeySet", methodSig: "()Ljava/util/NavigableSet;", methodCache: &NavigableMapForward.navigableKeySet_MethodID_40, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NavigableSetForward( javaObject: __return ) : nil
    }


    /// public abstract java.util.Map$Entry java.util.NavigableMap.pollFirstEntry()

    // Skipping method: false false true false false 

    /// public abstract java.util.Map$Entry java.util.NavigableMap.pollLastEntry()

    // Skipping method: false false true false false 

    /// public abstract java.lang.Object java.util.Map.put(java.lang.Object,java.lang.Object)

    private static var put_MethodID_41: jmethodID?

    override open func put( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "put", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &NavigableMapForward.put_MethodID_41, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func put( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return put( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.util.Map.putAll(java.util.Map)

    private static var putAll_MethodID_42: jmethodID?

    override open func putAll( arg0: java_swift.JavaMap? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, mapClass: "java/util/Map", locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "putAll", methodSig: "(Ljava/util/Map;)V", methodCache: &NavigableMapForward.putAll_MethodID_42, args: &__args, locals: &__locals )
    }

    override open func putAll( _ _arg0: java_swift.JavaMap? ) {
        putAll( arg0: _arg0 )
    }

    /// public default java.lang.Object java.util.Map.putIfAbsent(java.lang.Object,java.lang.Object)

    private static var putIfAbsent_MethodID_43: jmethodID?

    override open func putIfAbsent( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "putIfAbsent", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &NavigableMapForward.putIfAbsent_MethodID_43, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func putIfAbsent( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return putIfAbsent( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.lang.Object java.util.Map.remove(java.lang.Object)

    private static var remove_MethodID_44: jmethodID?

    override open func remove( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "remove", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &NavigableMapForward.remove_MethodID_44, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func remove( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return remove( arg0: _arg0 )
    }

    /// public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)

    private static var remove_MethodID_45: jmethodID?

    override open func remove( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "remove", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Z", methodCache: &NavigableMapForward.remove_MethodID_45, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func remove( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> Bool {
        return remove( arg0: _arg0, arg1: _arg1 )
    }

    /// public default java.lang.Object java.util.Map.replace(java.lang.Object,java.lang.Object)

    private static var replace_MethodID_46: jmethodID?

    override open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "replace", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &NavigableMapForward.replace_MethodID_46, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return replace( arg0: _arg0, arg1: _arg1 )
    }

    /// public default boolean java.util.Map.replace(java.lang.Object,java.lang.Object,java.lang.Object)

    private static var replace_MethodID_47: jmethodID?

    override open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "replace", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z", methodCache: &NavigableMapForward.replace_MethodID_47, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: java_swift.JavaObject? ) -> Bool {
        return replace( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public default void java.util.Map.replaceAll(java.util.function.BiFunction)

    private static var replaceAll_MethodID_48: jmethodID?

    override open func replaceAll( arg0: BiFunction? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "replaceAll", methodSig: "(Ljava/util/function/BiFunction;)V", methodCache: &NavigableMapForward.replaceAll_MethodID_48, args: &__args, locals: &__locals )
    }

    override open func replaceAll( _ _arg0: BiFunction? ) {
        replaceAll( arg0: _arg0 )
    }

    /// public abstract int java.util.Map.size()

    private static var size_MethodID_49: jmethodID?

    override open func size() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "size", methodSig: "()I", methodCache: &NavigableMapForward.size_MethodID_49, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public abstract java.util.NavigableMap java.util.NavigableMap.subMap(java.lang.Object,boolean,java.lang.Object,boolean)

    private static var subMap_MethodID_50: jmethodID?

    open func subMap( fromKey: java_swift.JavaObject?, fromInclusive: Bool, toKey: java_swift.JavaObject?, toInclusive: Bool ) -> NavigableMap! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        __args[0] = JNIType.toJava( value: fromKey, locals: &__locals )
        __args[1] = jvalue( z: jboolean(fromInclusive ? JNI_TRUE : JNI_FALSE) )
        __args[2] = JNIType.toJava( value: toKey, locals: &__locals )
        __args[3] = jvalue( z: jboolean(toInclusive ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "subMap", methodSig: "(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableMap;", methodCache: &NavigableMapForward.subMap_MethodID_50, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: NavigableMapForward.self, from: __return )
    }

    open func subMap( _ _fromKey: java_swift.JavaObject?, _ _fromInclusive: Bool, _ _toKey: java_swift.JavaObject?, _ _toInclusive: Bool ) -> NavigableMap! {
        return subMap( fromKey: _fromKey, fromInclusive: _fromInclusive, toKey: _toKey, toInclusive: _toInclusive )
    }

    /// public abstract java.util.SortedMap java.util.NavigableMap.subMap(java.lang.Object,java.lang.Object)

    private static var subMap_MethodID_51: jmethodID?

    override open func subMap( fromKey: java_swift.JavaObject?, toKey: java_swift.JavaObject? ) -> SortedMap! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: fromKey, locals: &__locals )
        __args[1] = JNIType.toJava( value: toKey, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "subMap", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;", methodCache: &NavigableMapForward.subMap_MethodID_51, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: SortedMapForward.self, from: __return )
    }

    override open func subMap( _ _fromKey: java_swift.JavaObject?, _ _toKey: java_swift.JavaObject? ) -> SortedMap! {
        return subMap( fromKey: _fromKey, toKey: _toKey )
    }

    /// public abstract java.util.SortedMap java.util.NavigableMap.tailMap(java.lang.Object)

    private static var tailMap_MethodID_52: jmethodID?

    override open func tailMap( fromKey: java_swift.JavaObject? ) -> SortedMap! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: fromKey, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "tailMap", methodSig: "(Ljava/lang/Object;)Ljava/util/SortedMap;", methodCache: &NavigableMapForward.tailMap_MethodID_52, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: SortedMapForward.self, from: __return )
    }

    override open func tailMap( _ _fromKey: java_swift.JavaObject? ) -> SortedMap! {
        return tailMap( fromKey: _fromKey )
    }

    /// public abstract java.util.NavigableMap java.util.NavigableMap.tailMap(java.lang.Object,boolean)

    private static var tailMap_MethodID_53: jmethodID?

    open func tailMap( fromKey: java_swift.JavaObject?, inclusive: Bool ) -> NavigableMap! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: fromKey, locals: &__locals )
        __args[1] = jvalue( z: jboolean(inclusive ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "tailMap", methodSig: "(Ljava/lang/Object;Z)Ljava/util/NavigableMap;", methodCache: &NavigableMapForward.tailMap_MethodID_53, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: NavigableMapForward.self, from: __return )
    }

    open func tailMap( _ _fromKey: java_swift.JavaObject?, _ _inclusive: Bool ) -> NavigableMap! {
        return tailMap( fromKey: _fromKey, inclusive: _inclusive )
    }

    /// public abstract java.util.Collection java.util.SortedMap.values()

    private static var values_MethodID_54: jmethodID?

    override open func values() -> Collection! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "values", methodSig: "()Ljava/util/Collection;", methodCache: &NavigableMapForward.values_MethodID_54, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? CollectionForward( javaObject: __return ) : nil
    }


}

