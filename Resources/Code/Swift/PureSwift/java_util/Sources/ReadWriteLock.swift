
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.util.concurrent.locks.ReadWriteLock ///

public protocol ReadWriteLock: JavaProtocol {

    /// public abstract java.util.concurrent.locks.Lock java.util.concurrent.locks.ReadWriteLock.readLock()

    func readLock() -> Lock!

    /// public abstract java.util.concurrent.locks.Lock java.util.concurrent.locks.ReadWriteLock.writeLock()

    func writeLock() -> Lock!

}


open class ReadWriteLockForward: JNIObjectForward, ReadWriteLock {

    private static var ReadWriteLockJNIClass: jclass?

    /// public abstract java.util.concurrent.locks.Lock java.util.concurrent.locks.ReadWriteLock.readLock()

    private static var readLock_MethodID_3: jmethodID?

    open func readLock() -> Lock! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "readLock", methodSig: "()Ljava/util/concurrent/locks/Lock;", methodCache: &ReadWriteLockForward.readLock_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LockForward( javaObject: __return ) : nil
    }


    /// public abstract java.util.concurrent.locks.Lock java.util.concurrent.locks.ReadWriteLock.writeLock()

    private static var writeLock_MethodID_4: jmethodID?

    open func writeLock() -> Lock! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "writeLock", methodSig: "()Ljava/util/concurrent/locks/Lock;", methodCache: &ReadWriteLockForward.writeLock_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LockForward( javaObject: __return ) : nil
    }


}

