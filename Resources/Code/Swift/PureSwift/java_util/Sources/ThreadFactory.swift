
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.util.concurrent.ThreadFactory ///

public protocol ThreadFactory: JavaProtocol {

    /// public abstract java.lang.Thread java.util.concurrent.ThreadFactory.newThread(java.lang.Runnable)

    func newThread( r: java_swift.Runnable? ) -> java_swift.JavaThread!

}


open class ThreadFactoryForward: JNIObjectForward, ThreadFactory {

    private static var ThreadFactoryJNIClass: jclass?

    /// public abstract java.lang.Thread java.util.concurrent.ThreadFactory.newThread(java.lang.Runnable)

    private static var newThread_MethodID_2: jmethodID?

    open func newThread( r: java_swift.Runnable? ) -> java_swift.JavaThread! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: r, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "newThread", methodSig: "(Ljava/lang/Runnable;)Ljava/lang/Thread;", methodCache: &ThreadFactoryForward.newThread_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaThread( javaObject: __return ) : nil
    }

    open func newThread( _ _r: java_swift.Runnable? ) -> java_swift.JavaThread! {
        return newThread( r: _r )
    }

}

