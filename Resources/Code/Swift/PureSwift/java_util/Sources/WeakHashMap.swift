
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.WeakHashMap ///

open class WeakHashMap: AbstractMap {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var WeakHashMapJNIClass: jclass?

    /// private static final int java.util.WeakHashMap.DEFAULT_INITIAL_CAPACITY

    /// private static final float java.util.WeakHashMap.DEFAULT_LOAD_FACTOR

    /// private static final int java.util.WeakHashMap.MAXIMUM_CAPACITY

    /// private static final java.lang.Object java.util.WeakHashMap.NULL_KEY

    /// private transient java.util.Set java.util.WeakHashMap.entrySet

    /// private final float java.util.WeakHashMap.loadFactor

    /// int java.util.WeakHashMap.modCount

    // Skipping field: true false false false false false 

    /// private final java.lang.ref.ReferenceQueue java.util.WeakHashMap.queue

    /// private int java.util.WeakHashMap.size

    /// java.util.WeakHashMap$Entry[] java.util.WeakHashMap.table

    // Skipping field: true false false false false false 

    /// private int java.util.WeakHashMap.threshold

    /// transient java.util.Set java.util.AbstractMap.keySet

    // Skipping field: true false false false true false 

    /// transient java.util.Collection java.util.AbstractMap.values

    // Skipping field: true false false false true false 

    /// public java.util.WeakHashMap()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "java/util/WeakHashMap", classCache: &WeakHashMap.WeakHashMapJNIClass, methodSig: "()V", methodCache: &WeakHashMap.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.util.WeakHashMap(int)

    private static var new_MethodID_2: jmethodID?

    public convenience init( initialCapacity: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(initialCapacity) )
        let __object = JNIMethod.NewObject( className: "java/util/WeakHashMap", classCache: &WeakHashMap.WeakHashMapJNIClass, methodSig: "(I)V", methodCache: &WeakHashMap.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _initialCapacity: Int ) {
        self.init( initialCapacity: _initialCapacity )
    }

    /// public java.util.WeakHashMap(int,float)

    private static var new_MethodID_3: jmethodID?

    public convenience init( initialCapacity: Int, loadFactor: Float ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(initialCapacity) )
        __args[1] = jvalue( f: loadFactor )
        let __object = JNIMethod.NewObject( className: "java/util/WeakHashMap", classCache: &WeakHashMap.WeakHashMapJNIClass, methodSig: "(IF)V", methodCache: &WeakHashMap.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _initialCapacity: Int, _ _loadFactor: Float ) {
        self.init( initialCapacity: _initialCapacity, loadFactor: _loadFactor )
    }

    /// public java.util.WeakHashMap(java.util.Map)

    private static var new_MethodID_4: jmethodID?

    public convenience init( m: java_swift.JavaMap? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: m, mapClass: "java/util/Map", locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/WeakHashMap", classCache: &WeakHashMap.WeakHashMapJNIClass, methodSig: "(Ljava/util/Map;)V", methodCache: &WeakHashMap.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _m: java_swift.JavaMap? ) {
        self.init( m: _m )
    }

    /// private static boolean java.util.WeakHashMap.eq(java.lang.Object,java.lang.Object)

    /// private static int java.util.WeakHashMap.indexFor(int,int)

    /// private static java.lang.Object java.util.WeakHashMap.maskNull(java.lang.Object)

    /// static java.lang.Object java.util.WeakHashMap.unmaskNull(java.lang.Object)

    // Skipping method: true false false false false 

    /// public void java.util.WeakHashMap.clear()

    // Skipping method: false true false false false 

    /// public boolean java.util.WeakHashMap.containsKey(java.lang.Object)

    // Skipping method: false true false false false 

    /// private boolean java.util.WeakHashMap.containsNullValue()

    /// public boolean java.util.WeakHashMap.containsValue(java.lang.Object)

    // Skipping method: false true false false false 

    /// public java.util.Set java.util.WeakHashMap.entrySet()

    // Skipping method: false true false false false 

    /// private void java.util.WeakHashMap.expungeStaleEntries()

    /// public void java.util.WeakHashMap.forEach(java.util.function.BiConsumer)

    private static var forEach_MethodID_5: jmethodID?

    override open func forEach( arg0: BiConsumer? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "forEach", methodSig: "(Ljava/util/function/BiConsumer;)V", methodCache: &WeakHashMap.forEach_MethodID_5, args: &__args, locals: &__locals )
    }

    override open func forEach( _ _arg0: BiConsumer? ) {
        forEach( arg0: _arg0 )
    }

    /// public java.lang.Object java.util.WeakHashMap.get(java.lang.Object)

    // Skipping method: false true false false false 

    /// java.util.WeakHashMap$Entry java.util.WeakHashMap.getEntry(java.lang.Object)

    // Skipping method: true false false false false 

    /// private java.util.WeakHashMap$Entry[] java.util.WeakHashMap.getTable()

    /// final int java.util.WeakHashMap.hash(java.lang.Object)

    // Skipping method: true false false false false 

    /// public boolean java.util.WeakHashMap.isEmpty()

    // Skipping method: false true false false false 

    /// public java.util.Set java.util.WeakHashMap.keySet()

    // Skipping method: false true false false false 

    /// private java.util.WeakHashMap$Entry[] java.util.WeakHashMap.newTable(int)

    /// public java.lang.Object java.util.WeakHashMap.put(java.lang.Object,java.lang.Object)

    // Skipping method: false true false false false 

    /// public void java.util.WeakHashMap.putAll(java.util.Map)

    // Skipping method: false true false false false 

    /// public java.lang.Object java.util.WeakHashMap.remove(java.lang.Object)

    // Skipping method: false true false false false 

    /// boolean java.util.WeakHashMap.removeMapping(java.lang.Object)

    // Skipping method: true false false false false 

    /// public void java.util.WeakHashMap.replaceAll(java.util.function.BiFunction)

    private static var replaceAll_MethodID_6: jmethodID?

    override open func replaceAll( arg0: BiFunction? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "replaceAll", methodSig: "(Ljava/util/function/BiFunction;)V", methodCache: &WeakHashMap.replaceAll_MethodID_6, args: &__args, locals: &__locals )
    }

    override open func replaceAll( _ _arg0: BiFunction? ) {
        replaceAll( arg0: _arg0 )
    }

    /// void java.util.WeakHashMap.resize(int)

    // Skipping method: true false false false false 

    /// public int java.util.WeakHashMap.size()

    // Skipping method: false true false false false 

    /// private void java.util.WeakHashMap.transfer(java.util.WeakHashMap$Entry[],java.util.WeakHashMap$Entry[])

    /// public java.util.Collection java.util.WeakHashMap.values()

    // Skipping method: false true false false false 

    /// In declared protocol but not defined.. ///

    /// public abstract void java.util.Map.clear()

    // Skipping method: false true false false false 

    /// public default java.lang.Object java.util.Map.compute(java.lang.Object,java.util.function.BiFunction)

    // Skipping method: false true false false false 

    /// public default java.lang.Object java.util.Map.computeIfAbsent(java.lang.Object,java.util.function.Function)

    // Skipping method: false true false false false 

    /// public default java.lang.Object java.util.Map.computeIfPresent(java.lang.Object,java.util.function.BiFunction)

    // Skipping method: false true false false false 

    /// public abstract boolean java.util.Map.containsKey(java.lang.Object)

    private static var containsKey_MethodID_7: jmethodID?

    override open func containsKey( arg0: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "containsKey", methodSig: "(Ljava/lang/Object;)Z", methodCache: &WeakHashMap.containsKey_MethodID_7, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func containsKey( _ _arg0: java_swift.JavaObject? ) -> Bool {
        return containsKey( arg0: _arg0 )
    }

    /// public abstract boolean java.util.Map.containsValue(java.lang.Object)

    private static var containsValue_MethodID_8: jmethodID?

    override open func containsValue( arg0: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "containsValue", methodSig: "(Ljava/lang/Object;)Z", methodCache: &WeakHashMap.containsValue_MethodID_8, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func containsValue( _ _arg0: java_swift.JavaObject? ) -> Bool {
        return containsValue( arg0: _arg0 )
    }

    /// public abstract java.util.Set java.util.Map.entrySet()

    // Skipping method: false true false false false 

    /// public abstract boolean java.util.Map.equals(java.lang.Object)

    private static var equals_MethodID_9: jmethodID?

    override open func equals( arg0: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &WeakHashMap.equals_MethodID_9, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
        return equals( arg0: _arg0 )
    }

    /// public abstract java.lang.Object java.util.Map.get(java.lang.Object)

    private static var get_MethodID_10: jmethodID?

    override open func get( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "get", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &WeakHashMap.get_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func get( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return get( arg0: _arg0 )
    }

    /// public default java.lang.Object java.util.Map.getOrDefault(java.lang.Object,java.lang.Object)

    // Skipping method: false true false false false 

    /// public abstract int java.util.Map.hashCode()

    // Skipping method: false true false false false 

    /// public abstract boolean java.util.Map.isEmpty()

    // Skipping method: false true false false false 

    /// public abstract java.util.Set java.util.Map.keySet()

    // Skipping method: false true false false false 

    /// public default java.lang.Object java.util.Map.merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)

    // Skipping method: false true false false false 

    /// public abstract java.lang.Object java.util.Map.put(java.lang.Object,java.lang.Object)

    private static var put_MethodID_11: jmethodID?

    override open func put( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "put", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &WeakHashMap.put_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func put( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return put( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.util.Map.putAll(java.util.Map)

    private static var putAll_MethodID_12: jmethodID?

    override open func putAll( arg0: java_swift.JavaMap? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, mapClass: "java/util/Map", locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "putAll", methodSig: "(Ljava/util/Map;)V", methodCache: &WeakHashMap.putAll_MethodID_12, args: &__args, locals: &__locals )
    }

    override open func putAll( _ _arg0: java_swift.JavaMap? ) {
        putAll( arg0: _arg0 )
    }

    /// public default java.lang.Object java.util.Map.putIfAbsent(java.lang.Object,java.lang.Object)

    // Skipping method: false true false false false 

    /// public abstract java.lang.Object java.util.Map.remove(java.lang.Object)

    private static var remove_MethodID_13: jmethodID?

    override open func remove( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "remove", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &WeakHashMap.remove_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func remove( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return remove( arg0: _arg0 )
    }

    /// public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)

    // Skipping method: false true false false false 

    /// public default java.lang.Object java.util.Map.replace(java.lang.Object,java.lang.Object)

    // Skipping method: false true false false false 

    /// public default boolean java.util.Map.replace(java.lang.Object,java.lang.Object,java.lang.Object)

    // Skipping method: false true false false false 

    /// public abstract int java.util.Map.size()

    // Skipping method: false true false false false 

    /// public abstract java.util.Collection java.util.Map.values()

    // Skipping method: false true false false false 

}

