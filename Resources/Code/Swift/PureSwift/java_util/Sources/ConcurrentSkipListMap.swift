
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.concurrent.ConcurrentSkipListMap ///

open class ConcurrentSkipListMap: AbstractMap, java_lang.Cloneable, /* interface java.io.Serializable */ UnavailableProtocol {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.util.concurrent.ConcurrentSkipListMap", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ConcurrentSkipListMapJNIClass: jclass?

    /// private static final java.lang.Object java.util.concurrent.ConcurrentSkipListMap.BASE_HEADER

    /// private static final int java.util.concurrent.ConcurrentSkipListMap.EQ

    /// private static final int java.util.concurrent.ConcurrentSkipListMap.GT

    /// private static final int java.util.concurrent.ConcurrentSkipListMap.LT

    /// private static final long java.util.concurrent.ConcurrentSkipListMap.SECONDARY

    /// private static final sun.misc.Unsafe java.util.concurrent.ConcurrentSkipListMap.UNSAFE

    /// private static final long java.util.concurrent.ConcurrentSkipListMap.headOffset

    /// private static final long java.util.concurrent.ConcurrentSkipListMap.serialVersionUID

    /// final java.util.Comparator java.util.concurrent.ConcurrentSkipListMap.comparator

    // Skipping field: true false false false true false 

    /// private transient java.util.concurrent.ConcurrentNavigableMap java.util.concurrent.ConcurrentSkipListMap.descendingMap

    /// private transient java.util.concurrent.ConcurrentSkipListMap$EntrySet java.util.concurrent.ConcurrentSkipListMap.entrySet

    /// private transient volatile java.util.concurrent.ConcurrentSkipListMap$HeadIndex java.util.concurrent.ConcurrentSkipListMap.head

    /// private transient java.util.concurrent.ConcurrentSkipListMap$KeySet java.util.concurrent.ConcurrentSkipListMap.keySet

    /// private transient java.util.concurrent.ConcurrentSkipListMap$Values java.util.concurrent.ConcurrentSkipListMap.values

    /// transient java.util.Set java.util.AbstractMap.keySet

    // Skipping field: true false false false true false 

    /// transient java.util.Collection java.util.AbstractMap.values

    // Skipping field: true false false false true false 

    /// public java.util.concurrent.ConcurrentSkipListMap()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/ConcurrentSkipListMap", classCache: &ConcurrentSkipListMap.ConcurrentSkipListMapJNIClass, methodSig: "()V", methodCache: &ConcurrentSkipListMap.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.util.concurrent.ConcurrentSkipListMap(java.util.Comparator)

    private static var new_MethodID_2: jmethodID?

    public convenience init( comparator: JavaComparator? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: comparator, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/ConcurrentSkipListMap", classCache: &ConcurrentSkipListMap.ConcurrentSkipListMapJNIClass, methodSig: "(Ljava/util/Comparator;)V", methodCache: &ConcurrentSkipListMap.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _comparator: JavaComparator? ) {
        self.init( comparator: _comparator )
    }

    /// public java.util.concurrent.ConcurrentSkipListMap(java.util.SortedMap)

    private static var new_MethodID_3: jmethodID?

    public convenience init( m: SortedMap? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: m, mapClass: "java/util/SortedMap", locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/ConcurrentSkipListMap", classCache: &ConcurrentSkipListMap.ConcurrentSkipListMapJNIClass, methodSig: "(Ljava/util/SortedMap;)V", methodCache: &ConcurrentSkipListMap.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _m: SortedMap? ) {
        self.init( m: _m )
    }

    /// public java.util.concurrent.ConcurrentSkipListMap(java.util.Map)

    private static var new_MethodID_4: jmethodID?

    public convenience init( m: java_swift.JavaMap? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: m, mapClass: "java/util/Map", locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/ConcurrentSkipListMap", classCache: &ConcurrentSkipListMap.ConcurrentSkipListMapJNIClass, methodSig: "(Ljava/util/Map;)V", methodCache: &ConcurrentSkipListMap.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _m: java_swift.JavaMap? ) {
        self.init( m: _m )
    }

    /// static java.lang.Object java.util.concurrent.ConcurrentSkipListMap.access$000()

    // Skipping method: true false false false false 

    /// static final int java.util.concurrent.ConcurrentSkipListMap.cpr(java.util.Comparator,java.lang.Object,java.lang.Object)

    // Skipping method: true false false false false 

    /// static final java.util.List java.util.concurrent.ConcurrentSkipListMap.toList(java.util.Collection)

    // Skipping method: true false false false false 

    /// private void java.util.concurrent.ConcurrentSkipListMap.buildFromSorted(java.util.SortedMap)

    /// private boolean java.util.concurrent.ConcurrentSkipListMap.casHead(java.util.concurrent.ConcurrentSkipListMap$HeadIndex,java.util.concurrent.ConcurrentSkipListMap$HeadIndex)

    /// public java.util.Map$Entry java.util.concurrent.ConcurrentSkipListMap.ceilingEntry(java.lang.Object)

    private static var ceilingEntry_MethodID_5: jmethodID?

    open func ceilingEntry( key: java_swift.JavaObject? ) -> /* interface java.util.Map$Entry */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: key, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "ceilingEntry", methodSig: "(Ljava/lang/Object;)Ljava/util/Map$Entry;", methodCache: &ConcurrentSkipListMap.ceilingEntry_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface java.util.Map$Entry */ UnavailableProtocolForward( javaObject: __return ) : nil
    }

    open func ceilingEntry( _ _key: java_swift.JavaObject? ) -> /* interface java.util.Map$Entry */ UnavailableProtocol! {
        return ceilingEntry( key: _key )
    }

    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListMap.ceilingKey(java.lang.Object)

    private static var ceilingKey_MethodID_6: jmethodID?

    open func ceilingKey( key: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: key, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "ceilingKey", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &ConcurrentSkipListMap.ceilingKey_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func ceilingKey( _ _key: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return ceilingKey( key: _key )
    }

    /// public void java.util.concurrent.ConcurrentSkipListMap.clear()

    // Skipping method: false true false false false 

    /// private void java.util.concurrent.ConcurrentSkipListMap.clearIndexToFirst()

    /// public java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentSkipListMap.clone()

    private static var clone_MethodID_7: jmethodID?

    override open func clone() -> ConcurrentSkipListMap! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "clone", methodSig: "()Ljava/util/concurrent/ConcurrentSkipListMap;", methodCache: &ConcurrentSkipListMap.clone_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: ConcurrentSkipListMap.self, from: __return )
    }


    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListMap.clone() throws java.lang.CloneNotSupportedException

//    private static var clone_MethodID_8: jmethodID?
//
//    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
//        var __locals = [jobject]()
//        var __args = [jvalue]( repeating: jvalue(), count: 1 )
//        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "clone", methodSig: "()Ljava/lang/Object;", methodCache: &ConcurrentSkipListMap.clone_MethodID_8, args: &__args, locals: &__locals )
//        defer { JNI.DeleteLocalRef( __return ) }
//        if let throwable = JNI.ExceptionCheck() {
//            defer { JNI.DeleteLocalRef( throwable ) }
//            throw java_lang.CloneNotSupportedException( javaObject: throwable )
//        }
//        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
//    }


    /// public java.util.Comparator java.util.concurrent.ConcurrentSkipListMap.comparator()

    private static var comparator_MethodID_9: jmethodID?

    open func comparator() -> JavaComparator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "comparator", methodSig: "()Ljava/util/Comparator;", methodCache: &ConcurrentSkipListMap.comparator_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaComparatorForward( javaObject: __return ) : nil
    }


    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListMap.compute(java.lang.Object,java.util.function.BiFunction)

    private static var compute_MethodID_10: jmethodID?

    override open func compute( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "compute", methodSig: "(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;", methodCache: &ConcurrentSkipListMap.compute_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func compute( _ _arg0: java_swift.JavaObject?, _ _arg1: BiFunction? ) -> java_swift.JavaObject! {
        return compute( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListMap.computeIfAbsent(java.lang.Object,java.util.function.Function)

    private static var computeIfAbsent_MethodID_11: jmethodID?

    override open func computeIfAbsent( arg0: java_swift.JavaObject?, arg1: Function? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "computeIfAbsent", methodSig: "(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;", methodCache: &ConcurrentSkipListMap.computeIfAbsent_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func computeIfAbsent( _ _arg0: java_swift.JavaObject?, _ _arg1: Function? ) -> java_swift.JavaObject! {
        return computeIfAbsent( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListMap.computeIfPresent(java.lang.Object,java.util.function.BiFunction)

    private static var computeIfPresent_MethodID_12: jmethodID?

    override open func computeIfPresent( arg0: java_swift.JavaObject?, arg1: BiFunction? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "computeIfPresent", methodSig: "(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;", methodCache: &ConcurrentSkipListMap.computeIfPresent_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func computeIfPresent( _ _arg0: java_swift.JavaObject?, _ _arg1: BiFunction? ) -> java_swift.JavaObject! {
        return computeIfPresent( arg0: _arg0, arg1: _arg1 )
    }

    /// public boolean java.util.concurrent.ConcurrentSkipListMap.containsKey(java.lang.Object)

    // Skipping method: false true false false false 

    /// public boolean java.util.concurrent.ConcurrentSkipListMap.containsValue(java.lang.Object)

    // Skipping method: false true false false false 

    /// public java.util.NavigableSet java.util.concurrent.ConcurrentSkipListMap.descendingKeySet()

    private static var descendingKeySet_MethodID_13: jmethodID?

    open func descendingKeySet() -> NavigableSet! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "descendingKeySet", methodSig: "()Ljava/util/NavigableSet;", methodCache: &ConcurrentSkipListMap.descendingKeySet_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NavigableSetForward( javaObject: __return ) : nil
    }


    /// public java.util.NavigableMap java.util.concurrent.ConcurrentSkipListMap.descendingMap()

    private static var descendingMap_MethodID_14: jmethodID?

    open func descendingMap() -> NavigableMap! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "descendingMap", methodSig: "()Ljava/util/NavigableMap;", methodCache: &ConcurrentSkipListMap.descendingMap_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: NavigableMapForward.self, from: __return )
    }


    /// public java.util.concurrent.ConcurrentNavigableMap java.util.concurrent.ConcurrentSkipListMap.descendingMap()

    /// private java.lang.Object java.util.concurrent.ConcurrentSkipListMap.doGet(java.lang.Object)

    /// private java.lang.Object java.util.concurrent.ConcurrentSkipListMap.doPut(java.lang.Object,java.lang.Object,boolean)

    /// final java.lang.Object java.util.concurrent.ConcurrentSkipListMap.doRemove(java.lang.Object,java.lang.Object)

    // Skipping method: true false false false false 

    /// private java.util.Map$Entry java.util.concurrent.ConcurrentSkipListMap.doRemoveFirstEntry()

    /// private java.util.Map$Entry java.util.concurrent.ConcurrentSkipListMap.doRemoveLastEntry()

    /// java.util.Iterator java.util.concurrent.ConcurrentSkipListMap.entryIterator()

    // Skipping method: true false false false false 

    /// public java.util.Set java.util.concurrent.ConcurrentSkipListMap.entrySet()

    // Skipping method: false true false false false 

    /// final java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator java.util.concurrent.ConcurrentSkipListMap.entrySpliterator()

    // Skipping method: true false false false false 

    /// public boolean java.util.concurrent.ConcurrentSkipListMap.equals(java.lang.Object)

    // Skipping method: false true false false false 

    /// final java.util.concurrent.ConcurrentSkipListMap$Node java.util.concurrent.ConcurrentSkipListMap.findFirst()

    // Skipping method: true false false false false 

    /// final java.util.concurrent.ConcurrentSkipListMap$Node java.util.concurrent.ConcurrentSkipListMap.findLast()

    // Skipping method: true false false false false 

    /// final java.util.concurrent.ConcurrentSkipListMap$Node java.util.concurrent.ConcurrentSkipListMap.findNear(java.lang.Object,int,java.util.Comparator)

    // Skipping method: true false false false false 

    /// private java.util.concurrent.ConcurrentSkipListMap$Node java.util.concurrent.ConcurrentSkipListMap.findNode(java.lang.Object)

    /// private java.util.concurrent.ConcurrentSkipListMap$Node java.util.concurrent.ConcurrentSkipListMap.findPredecessor(java.lang.Object,java.util.Comparator)

    /// private java.util.concurrent.ConcurrentSkipListMap$Node java.util.concurrent.ConcurrentSkipListMap.findPredecessorOfLast()

    /// public java.util.Map$Entry java.util.concurrent.ConcurrentSkipListMap.firstEntry()

    private static var firstEntry_MethodID_15: jmethodID?

    open func firstEntry() -> /* interface java.util.Map$Entry */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "firstEntry", methodSig: "()Ljava/util/Map$Entry;", methodCache: &ConcurrentSkipListMap.firstEntry_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface java.util.Map$Entry */ UnavailableProtocolForward( javaObject: __return ) : nil
    }


    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListMap.firstKey()

    private static var firstKey_MethodID_16: jmethodID?

    open func firstKey() -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "firstKey", methodSig: "()Ljava/lang/Object;", methodCache: &ConcurrentSkipListMap.firstKey_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public java.util.Map$Entry java.util.concurrent.ConcurrentSkipListMap.floorEntry(java.lang.Object)

    private static var floorEntry_MethodID_17: jmethodID?

    open func floorEntry( key: java_swift.JavaObject? ) -> /* interface java.util.Map$Entry */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: key, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "floorEntry", methodSig: "(Ljava/lang/Object;)Ljava/util/Map$Entry;", methodCache: &ConcurrentSkipListMap.floorEntry_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface java.util.Map$Entry */ UnavailableProtocolForward( javaObject: __return ) : nil
    }

    open func floorEntry( _ _key: java_swift.JavaObject? ) -> /* interface java.util.Map$Entry */ UnavailableProtocol! {
        return floorEntry( key: _key )
    }

    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListMap.floorKey(java.lang.Object)

    private static var floorKey_MethodID_18: jmethodID?

    open func floorKey( key: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: key, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "floorKey", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &ConcurrentSkipListMap.floorKey_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func floorKey( _ _key: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return floorKey( key: _key )
    }

    /// public void java.util.concurrent.ConcurrentSkipListMap.forEach(java.util.function.BiConsumer)

    private static var forEach_MethodID_19: jmethodID?

    override open func forEach( arg0: BiConsumer? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "forEach", methodSig: "(Ljava/util/function/BiConsumer;)V", methodCache: &ConcurrentSkipListMap.forEach_MethodID_19, args: &__args, locals: &__locals )
    }

    override open func forEach( _ _arg0: BiConsumer? ) {
        forEach( arg0: _arg0 )
    }

    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListMap.get(java.lang.Object)

    // Skipping method: false true false false false 

    /// final java.util.AbstractMap$SimpleImmutableEntry java.util.concurrent.ConcurrentSkipListMap.getNear(java.lang.Object,int)

    // Skipping method: true false false false false 

    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListMap.getOrDefault(java.lang.Object,java.lang.Object)

    private static var getOrDefault_MethodID_20: jmethodID?

    override open func getOrDefault( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getOrDefault", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &ConcurrentSkipListMap.getOrDefault_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func getOrDefault( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return getOrDefault( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.util.SortedMap java.util.concurrent.ConcurrentSkipListMap.headMap(java.lang.Object)

    private static var headMap_MethodID_21: jmethodID?

    open func headMap( toKey: java_swift.JavaObject? ) -> SortedMap! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: toKey, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "headMap", methodSig: "(Ljava/lang/Object;)Ljava/util/SortedMap;", methodCache: &ConcurrentSkipListMap.headMap_MethodID_21, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: SortedMapForward.self, from: __return )
    }

    open func headMap( _ _toKey: java_swift.JavaObject? ) -> SortedMap! {
        return headMap( toKey: _toKey )
    }

    /// public java.util.concurrent.ConcurrentNavigableMap java.util.concurrent.ConcurrentSkipListMap.headMap(java.lang.Object)

    /// public java.util.NavigableMap java.util.concurrent.ConcurrentSkipListMap.headMap(java.lang.Object,boolean)

    private static var headMap_MethodID_22: jmethodID?

    open func headMap( toKey: java_swift.JavaObject?, inclusive: Bool ) -> NavigableMap! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: toKey, locals: &__locals )
        __args[1] = jvalue( z: jboolean(inclusive ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "headMap", methodSig: "(Ljava/lang/Object;Z)Ljava/util/NavigableMap;", methodCache: &ConcurrentSkipListMap.headMap_MethodID_22, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: NavigableMapForward.self, from: __return )
    }

    open func headMap( _ _toKey: java_swift.JavaObject?, _ _inclusive: Bool ) -> NavigableMap! {
        return headMap( toKey: _toKey, inclusive: _inclusive )
    }

    /// public java.util.concurrent.ConcurrentNavigableMap java.util.concurrent.ConcurrentSkipListMap.headMap(java.lang.Object,boolean)

    /// public java.util.Map$Entry java.util.concurrent.ConcurrentSkipListMap.higherEntry(java.lang.Object)

    private static var higherEntry_MethodID_23: jmethodID?

    open func higherEntry( key: java_swift.JavaObject? ) -> /* interface java.util.Map$Entry */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: key, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "higherEntry", methodSig: "(Ljava/lang/Object;)Ljava/util/Map$Entry;", methodCache: &ConcurrentSkipListMap.higherEntry_MethodID_23, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface java.util.Map$Entry */ UnavailableProtocolForward( javaObject: __return ) : nil
    }

    open func higherEntry( _ _key: java_swift.JavaObject? ) -> /* interface java.util.Map$Entry */ UnavailableProtocol! {
        return higherEntry( key: _key )
    }

    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListMap.higherKey(java.lang.Object)

    private static var higherKey_MethodID_24: jmethodID?

    open func higherKey( key: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: key, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "higherKey", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &ConcurrentSkipListMap.higherKey_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func higherKey( _ _key: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return higherKey( key: _key )
    }

    /// private void java.util.concurrent.ConcurrentSkipListMap.initialize()

    /// public boolean java.util.concurrent.ConcurrentSkipListMap.isEmpty()

    // Skipping method: false true false false false 

    /// java.util.Iterator java.util.concurrent.ConcurrentSkipListMap.keyIterator()

    // Skipping method: true false false false false 

    /// public java.util.NavigableSet java.util.concurrent.ConcurrentSkipListMap.keySet()

    // Skipping method: false true false false false 

    /// public java.util.Set java.util.concurrent.ConcurrentSkipListMap.keySet()

    // Skipping method: false true false false false 

    /// final java.util.concurrent.ConcurrentSkipListMap$KeySpliterator java.util.concurrent.ConcurrentSkipListMap.keySpliterator()

    // Skipping method: true false false false false 

    /// public java.util.Map$Entry java.util.concurrent.ConcurrentSkipListMap.lastEntry()

    private static var lastEntry_MethodID_25: jmethodID?

    open func lastEntry() -> /* interface java.util.Map$Entry */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "lastEntry", methodSig: "()Ljava/util/Map$Entry;", methodCache: &ConcurrentSkipListMap.lastEntry_MethodID_25, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface java.util.Map$Entry */ UnavailableProtocolForward( javaObject: __return ) : nil
    }


    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListMap.lastKey()

    private static var lastKey_MethodID_26: jmethodID?

    open func lastKey() -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "lastKey", methodSig: "()Ljava/lang/Object;", methodCache: &ConcurrentSkipListMap.lastKey_MethodID_26, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public java.util.Map$Entry java.util.concurrent.ConcurrentSkipListMap.lowerEntry(java.lang.Object)

    private static var lowerEntry_MethodID_27: jmethodID?

    open func lowerEntry( key: java_swift.JavaObject? ) -> /* interface java.util.Map$Entry */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: key, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "lowerEntry", methodSig: "(Ljava/lang/Object;)Ljava/util/Map$Entry;", methodCache: &ConcurrentSkipListMap.lowerEntry_MethodID_27, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface java.util.Map$Entry */ UnavailableProtocolForward( javaObject: __return ) : nil
    }

    open func lowerEntry( _ _key: java_swift.JavaObject? ) -> /* interface java.util.Map$Entry */ UnavailableProtocol! {
        return lowerEntry( key: _key )
    }

    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListMap.lowerKey(java.lang.Object)

    private static var lowerKey_MethodID_28: jmethodID?

    open func lowerKey( key: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: key, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "lowerKey", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &ConcurrentSkipListMap.lowerKey_MethodID_28, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func lowerKey( _ _key: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return lowerKey( key: _key )
    }

    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListMap.merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)

    private static var merge_MethodID_29: jmethodID?

    override open func merge( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: BiFunction? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "merge", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;", methodCache: &ConcurrentSkipListMap.merge_MethodID_29, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func merge( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: BiFunction? ) -> java_swift.JavaObject! {
        return merge( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.util.NavigableSet java.util.concurrent.ConcurrentSkipListMap.navigableKeySet()

    private static var navigableKeySet_MethodID_30: jmethodID?

    open func navigableKeySet() -> NavigableSet! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "navigableKeySet", methodSig: "()Ljava/util/NavigableSet;", methodCache: &ConcurrentSkipListMap.navigableKeySet_MethodID_30, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NavigableSetForward( javaObject: __return ) : nil
    }


    /// public java.util.Map$Entry java.util.concurrent.ConcurrentSkipListMap.pollFirstEntry()

    private static var pollFirstEntry_MethodID_31: jmethodID?

    open func pollFirstEntry() -> /* interface java.util.Map$Entry */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "pollFirstEntry", methodSig: "()Ljava/util/Map$Entry;", methodCache: &ConcurrentSkipListMap.pollFirstEntry_MethodID_31, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface java.util.Map$Entry */ UnavailableProtocolForward( javaObject: __return ) : nil
    }


    /// public java.util.Map$Entry java.util.concurrent.ConcurrentSkipListMap.pollLastEntry()

    private static var pollLastEntry_MethodID_32: jmethodID?

    open func pollLastEntry() -> /* interface java.util.Map$Entry */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "pollLastEntry", methodSig: "()Ljava/util/Map$Entry;", methodCache: &ConcurrentSkipListMap.pollLastEntry_MethodID_32, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface java.util.Map$Entry */ UnavailableProtocolForward( javaObject: __return ) : nil
    }


    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListMap.put(java.lang.Object,java.lang.Object)

    // Skipping method: false true false false false 

    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListMap.putIfAbsent(java.lang.Object,java.lang.Object)

    private static var putIfAbsent_MethodID_33: jmethodID?

    override open func putIfAbsent( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "putIfAbsent", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &ConcurrentSkipListMap.putIfAbsent_MethodID_33, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func putIfAbsent( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return putIfAbsent( arg0: _arg0, arg1: _arg1 )
    }

    /// private void java.util.concurrent.ConcurrentSkipListMap.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException

    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListMap.remove(java.lang.Object)

    // Skipping method: false true false false false 

    /// public boolean java.util.concurrent.ConcurrentSkipListMap.remove(java.lang.Object,java.lang.Object)

    private static var remove_MethodID_34: jmethodID?

    override open func remove( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "remove", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Z", methodCache: &ConcurrentSkipListMap.remove_MethodID_34, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func remove( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> Bool {
        return remove( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.lang.Object java.util.concurrent.ConcurrentSkipListMap.replace(java.lang.Object,java.lang.Object)

    private static var replace_MethodID_35: jmethodID?

    override open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "replace", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &ConcurrentSkipListMap.replace_MethodID_35, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return replace( arg0: _arg0, arg1: _arg1 )
    }

    /// public boolean java.util.concurrent.ConcurrentSkipListMap.replace(java.lang.Object,java.lang.Object,java.lang.Object)

    private static var replace_MethodID_36: jmethodID?

    override open func replace( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject?, arg2: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "replace", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z", methodCache: &ConcurrentSkipListMap.replace_MethodID_36, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func replace( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject?, _ _arg2: java_swift.JavaObject? ) -> Bool {
        return replace( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.util.concurrent.ConcurrentSkipListMap.replaceAll(java.util.function.BiFunction)

    private static var replaceAll_MethodID_37: jmethodID?

    override open func replaceAll( arg0: BiFunction? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "replaceAll", methodSig: "(Ljava/util/function/BiFunction;)V", methodCache: &ConcurrentSkipListMap.replaceAll_MethodID_37, args: &__args, locals: &__locals )
    }

    override open func replaceAll( _ _arg0: BiFunction? ) {
        replaceAll( arg0: _arg0 )
    }

    /// public int java.util.concurrent.ConcurrentSkipListMap.size()

    // Skipping method: false true false false false 

    /// public java.util.NavigableMap java.util.concurrent.ConcurrentSkipListMap.subMap(java.lang.Object,boolean,java.lang.Object,boolean)

    private static var subMap_MethodID_38: jmethodID?

    open func subMap( fromKey: java_swift.JavaObject?, fromInclusive: Bool, toKey: java_swift.JavaObject?, toInclusive: Bool ) -> NavigableMap! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        __args[0] = JNIType.toJava( value: fromKey, locals: &__locals )
        __args[1] = jvalue( z: jboolean(fromInclusive ? JNI_TRUE : JNI_FALSE) )
        __args[2] = JNIType.toJava( value: toKey, locals: &__locals )
        __args[3] = jvalue( z: jboolean(toInclusive ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "subMap", methodSig: "(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableMap;", methodCache: &ConcurrentSkipListMap.subMap_MethodID_38, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: NavigableMapForward.self, from: __return )
    }

    open func subMap( _ _fromKey: java_swift.JavaObject?, _ _fromInclusive: Bool, _ _toKey: java_swift.JavaObject?, _ _toInclusive: Bool ) -> NavigableMap! {
        return subMap( fromKey: _fromKey, fromInclusive: _fromInclusive, toKey: _toKey, toInclusive: _toInclusive )
    }

    /// public java.util.concurrent.ConcurrentNavigableMap java.util.concurrent.ConcurrentSkipListMap.subMap(java.lang.Object,boolean,java.lang.Object,boolean)

    /// public java.util.SortedMap java.util.concurrent.ConcurrentSkipListMap.subMap(java.lang.Object,java.lang.Object)

    private static var subMap_MethodID_39: jmethodID?

    open func subMap( fromKey: java_swift.JavaObject?, toKey: java_swift.JavaObject? ) -> SortedMap! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: fromKey, locals: &__locals )
        __args[1] = JNIType.toJava( value: toKey, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "subMap", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;", methodCache: &ConcurrentSkipListMap.subMap_MethodID_39, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: SortedMapForward.self, from: __return )
    }

    open func subMap( _ _fromKey: java_swift.JavaObject?, _ _toKey: java_swift.JavaObject? ) -> SortedMap! {
        return subMap( fromKey: _fromKey, toKey: _toKey )
    }

    /// public java.util.concurrent.ConcurrentNavigableMap java.util.concurrent.ConcurrentSkipListMap.subMap(java.lang.Object,java.lang.Object)

    /// public java.util.SortedMap java.util.concurrent.ConcurrentSkipListMap.tailMap(java.lang.Object)

    private static var tailMap_MethodID_40: jmethodID?

    open func tailMap( fromKey: java_swift.JavaObject? ) -> SortedMap! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: fromKey, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "tailMap", methodSig: "(Ljava/lang/Object;)Ljava/util/SortedMap;", methodCache: &ConcurrentSkipListMap.tailMap_MethodID_40, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: SortedMapForward.self, from: __return )
    }

    open func tailMap( _ _fromKey: java_swift.JavaObject? ) -> SortedMap! {
        return tailMap( fromKey: _fromKey )
    }

    /// public java.util.concurrent.ConcurrentNavigableMap java.util.concurrent.ConcurrentSkipListMap.tailMap(java.lang.Object)

    /// public java.util.NavigableMap java.util.concurrent.ConcurrentSkipListMap.tailMap(java.lang.Object,boolean)

    private static var tailMap_MethodID_41: jmethodID?

    open func tailMap( fromKey: java_swift.JavaObject?, inclusive: Bool ) -> NavigableMap! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: fromKey, locals: &__locals )
        __args[1] = jvalue( z: jboolean(inclusive ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "tailMap", methodSig: "(Ljava/lang/Object;Z)Ljava/util/NavigableMap;", methodCache: &ConcurrentSkipListMap.tailMap_MethodID_41, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: NavigableMapForward.self, from: __return )
    }

    open func tailMap( _ _fromKey: java_swift.JavaObject?, _ _inclusive: Bool ) -> NavigableMap! {
        return tailMap( fromKey: _fromKey, inclusive: _inclusive )
    }

    /// public java.util.concurrent.ConcurrentNavigableMap java.util.concurrent.ConcurrentSkipListMap.tailMap(java.lang.Object,boolean)

    /// private void java.util.concurrent.ConcurrentSkipListMap.tryReduceLevel()

    /// java.util.Iterator java.util.concurrent.ConcurrentSkipListMap.valueIterator()

    // Skipping method: true false false false false 

    /// final java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator java.util.concurrent.ConcurrentSkipListMap.valueSpliterator()

    // Skipping method: true false false false false 

    /// public java.util.Collection java.util.concurrent.ConcurrentSkipListMap.values()

    // Skipping method: false true false false false 

    /// private void java.util.concurrent.ConcurrentSkipListMap.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// In declared protocol but not defined.. ///

    /// public abstract void java.util.Map.clear()

    // Skipping method: false true false false false 

    /// public abstract boolean java.util.Map.containsKey(java.lang.Object)

    private static var containsKey_MethodID_42: jmethodID?

    override open func containsKey( arg0: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "containsKey", methodSig: "(Ljava/lang/Object;)Z", methodCache: &ConcurrentSkipListMap.containsKey_MethodID_42, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func containsKey( _ _arg0: java_swift.JavaObject? ) -> Bool {
        return containsKey( arg0: _arg0 )
    }

    /// public abstract boolean java.util.Map.containsValue(java.lang.Object)

    private static var containsValue_MethodID_43: jmethodID?

    override open func containsValue( arg0: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "containsValue", methodSig: "(Ljava/lang/Object;)Z", methodCache: &ConcurrentSkipListMap.containsValue_MethodID_43, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func containsValue( _ _arg0: java_swift.JavaObject? ) -> Bool {
        return containsValue( arg0: _arg0 )
    }

    /// public abstract java.util.Set java.util.Map.entrySet()

    // Skipping method: false true false false false 

    /// public abstract boolean java.util.Map.equals(java.lang.Object)

    private static var equals_MethodID_44: jmethodID?

    override open func equals( arg0: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &ConcurrentSkipListMap.equals_MethodID_44, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func equals( _ _arg0: java_swift.JavaObject? ) -> Bool {
        return equals( arg0: _arg0 )
    }

    /// public abstract java.lang.Object java.util.Map.get(java.lang.Object)

    private static var get_MethodID_45: jmethodID?

    override open func get( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "get", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &ConcurrentSkipListMap.get_MethodID_45, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func get( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return get( arg0: _arg0 )
    }

    /// public abstract int java.util.Map.hashCode()

    // Skipping method: false true false false false 

    /// public abstract boolean java.util.Map.isEmpty()

    // Skipping method: false true false false false 

    /// public abstract java.util.Set java.util.Map.keySet()

    // Skipping method: false true false false false 

    /// public abstract java.lang.Object java.util.Map.put(java.lang.Object,java.lang.Object)

    private static var put_MethodID_46: jmethodID?

    override open func put( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "put", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &ConcurrentSkipListMap.put_MethodID_46, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func put( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return put( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.util.Map.putAll(java.util.Map)

    private static var putAll_MethodID_47: jmethodID?

    override open func putAll( arg0: java_swift.JavaMap? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, mapClass: "java/util/Map", locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "putAll", methodSig: "(Ljava/util/Map;)V", methodCache: &ConcurrentSkipListMap.putAll_MethodID_47, args: &__args, locals: &__locals )
    }

    override open func putAll( _ _arg0: java_swift.JavaMap? ) {
        putAll( arg0: _arg0 )
    }

    /// public abstract java.lang.Object java.util.Map.remove(java.lang.Object)

    private static var remove_MethodID_48: jmethodID?

    override open func remove( arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "remove", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &ConcurrentSkipListMap.remove_MethodID_48, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func remove( _ _arg0: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return remove( arg0: _arg0 )
    }

    /// public abstract int java.util.Map.size()

    // Skipping method: false true false false false 

    /// public abstract java.util.Collection java.util.Map.values()

    // Skipping method: false true false false false 

}

