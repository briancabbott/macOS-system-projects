
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.logging.SimpleFormatter ///

open class SimpleFormatter: logging_Formatter {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var SimpleFormatterJNIClass: jclass?

    /// private static final java.lang.String java.util.logging.SimpleFormatter.format

    /// private final java.util.Date java.util.logging.SimpleFormatter.dat

    /// public java.util.logging.SimpleFormatter()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "java/util/logging/SimpleFormatter", classCache: &SimpleFormatter.SimpleFormatterJNIClass, methodSig: "()V", methodCache: &SimpleFormatter.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public synchronized java.lang.String java.util.logging.SimpleFormatter.format(java.util.logging.LogRecord)

    private static var format_MethodID_2: jmethodID?

    open func format( arg0: LogRecord? ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "format", methodSig: "(Ljava/util/logging/LogRecord;)Ljava/lang/String;", methodCache: &SimpleFormatter.format_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    override open func format( _ _arg0: LogRecord? ) -> String! {
        return format( arg0: _arg0 )
    }

}

