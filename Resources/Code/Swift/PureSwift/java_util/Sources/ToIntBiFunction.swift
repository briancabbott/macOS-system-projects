
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.util.function.ToIntBiFunction ///

public protocol ToIntBiFunction: JavaProtocol {

    /// public abstract int java.util.function.ToIntBiFunction.applyAsInt(java.lang.Object,java.lang.Object)

    func applyAsInt( t: java_swift.JavaObject?, u: java_swift.JavaObject? ) -> Int

}


open class ToIntBiFunctionForward: JNIObjectForward, ToIntBiFunction {

    private static var ToIntBiFunctionJNIClass: jclass?

    /// public abstract int java.util.function.ToIntBiFunction.applyAsInt(java.lang.Object,java.lang.Object)

    private static var applyAsInt_MethodID_2: jmethodID?

    open func applyAsInt( t: java_swift.JavaObject?, u: java_swift.JavaObject? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: t, locals: &__locals )
        __args[1] = JNIType.toJava( value: u, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "applyAsInt", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)I", methodCache: &ToIntBiFunctionForward.applyAsInt_MethodID_2, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func applyAsInt( _ _t: java_swift.JavaObject?, _ _u: java_swift.JavaObject? ) -> Int {
        return applyAsInt( t: _t, u: _u )
    }

}

