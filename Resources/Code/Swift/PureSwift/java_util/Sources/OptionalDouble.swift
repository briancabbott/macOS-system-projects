
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.OptionalDouble ///

open class OptionalDouble: java_swift.JavaObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var OptionalDoubleJNIClass: jclass?

    /// private static final java.util.OptionalDouble java.util.OptionalDouble.EMPTY

    /// private final boolean java.util.OptionalDouble.isPresent

    /// private final double java.util.OptionalDouble.value

    /// private java.util.OptionalDouble()

    /// private java.util.OptionalDouble(double)

    /// public static java.util.OptionalDouble java.util.OptionalDouble.empty()

    private static var empty_MethodID_1: jmethodID?

    open class func empty() -> OptionalDouble! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/OptionalDouble", classCache: &OptionalDoubleJNIClass, methodName: "empty", methodSig: "()Ljava/util/OptionalDouble;", methodCache: &empty_MethodID_1, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? OptionalDouble( javaObject: __return ) : nil
    }


    /// public static java.util.OptionalDouble java.util.OptionalDouble.of(double)

    private static var of_MethodID_2: jmethodID?

    open class func of( value: Double ) -> OptionalDouble! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( d: value )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/OptionalDouble", classCache: &OptionalDoubleJNIClass, methodName: "of", methodSig: "(D)Ljava/util/OptionalDouble;", methodCache: &of_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? OptionalDouble( javaObject: __return ) : nil
    }

    open class func of( _ _value: Double ) -> OptionalDouble! {
        return of( value: _value )
    }

    /// public boolean java.util.OptionalDouble.equals(java.lang.Object)

    private static var equals_MethodID_3: jmethodID?

    open func equals( obj: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: obj, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &OptionalDouble.equals_MethodID_3, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
        return equals( obj: _obj )
    }

    /// public double java.util.OptionalDouble.getAsDouble()

    private static var getAsDouble_MethodID_4: jmethodID?

    open func getAsDouble() -> Double {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getAsDouble", methodSig: "()D", methodCache: &OptionalDouble.getAsDouble_MethodID_4, args: &__args, locals: &__locals )
        return __return
    }


    /// public int java.util.OptionalDouble.hashCode()

    // Skipping method: false true false false false 

    /// public void java.util.OptionalDouble.ifPresent(java.util.function.DoubleConsumer)

    private static var ifPresent_MethodID_5: jmethodID?

    open func ifPresent( consumer: DoubleConsumer? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: consumer, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "ifPresent", methodSig: "(Ljava/util/function/DoubleConsumer;)V", methodCache: &OptionalDouble.ifPresent_MethodID_5, args: &__args, locals: &__locals )
    }

    open func ifPresent( _ _consumer: DoubleConsumer? ) {
        ifPresent( consumer: _consumer )
    }

    /// public boolean java.util.OptionalDouble.isPresent()

    private static var isPresent_MethodID_6: jmethodID?

    open func isPresent() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isPresent", methodSig: "()Z", methodCache: &OptionalDouble.isPresent_MethodID_6, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public double java.util.OptionalDouble.orElse(double)

    private static var orElse_MethodID_7: jmethodID?

    open func orElse( other: Double ) -> Double {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( d: other )
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "orElse", methodSig: "(D)D", methodCache: &OptionalDouble.orElse_MethodID_7, args: &__args, locals: &__locals )
        return __return
    }

    open func orElse( _ _other: Double ) -> Double {
        return orElse( other: _other )
    }

    /// public double java.util.OptionalDouble.orElseGet(java.util.function.DoubleSupplier)

    private static var orElseGet_MethodID_8: jmethodID?

    open func orElseGet( other: DoubleSupplier? ) -> Double {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: other, locals: &__locals )
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "orElseGet", methodSig: "(Ljava/util/function/DoubleSupplier;)D", methodCache: &OptionalDouble.orElseGet_MethodID_8, args: &__args, locals: &__locals )
        return __return
    }

    open func orElseGet( _ _other: DoubleSupplier? ) -> Double {
        return orElseGet( other: _other )
    }

    /// public double java.util.OptionalDouble.orElseThrow(java.util.function.Supplier) throws java.lang.Throwable

    private static var orElseThrow_MethodID_9: jmethodID?

    open func orElseThrow( exceptionSupplier: Supplier? ) throws /* java.lang.Throwable */ -> Double {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: exceptionSupplier, locals: &__locals )
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "orElseThrow", methodSig: "(Ljava/util/function/Supplier;)D", methodCache: &OptionalDouble.orElseThrow_MethodID_9, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw java_swift.Throwable( javaObject: throwable )
        }
        return __return
    }

    open func orElseThrow( _ _exceptionSupplier: Supplier? ) throws /* java.lang.Throwable */ -> Double {
        return try orElseThrow( exceptionSupplier: _exceptionSupplier )
    }

    /// public java.lang.String java.util.OptionalDouble.toString()

    // Skipping method: false true false false false 

}

