
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.util.function.DoubleFunction ///

public protocol DoubleFunction: JavaProtocol {

    /// public abstract java.lang.Object java.util.function.DoubleFunction.apply(double)

    func apply( value: Double ) -> java_swift.JavaObject!

}


open class DoubleFunctionForward: JNIObjectForward, DoubleFunction {

    private static var DoubleFunctionJNIClass: jclass?

    /// public abstract java.lang.Object java.util.function.DoubleFunction.apply(double)

    private static var apply_MethodID_2: jmethodID?

    open func apply( value: Double ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( d: value )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "apply", methodSig: "(D)Ljava/lang/Object;", methodCache: &DoubleFunctionForward.apply_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func apply( _ _value: Double ) -> java_swift.JavaObject! {
        return apply( value: _value )
    }

}

