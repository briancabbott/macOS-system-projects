
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.util.Observer ///

public protocol Observer: JavaProtocol {

    /// public abstract void java.util.Observer.update(java.util.Observable,java.lang.Object)

    func update( o: Observable?, arg: java_swift.JavaObject? )

}


open class ObserverForward: JNIObjectForward, Observer {

    private static var ObserverJNIClass: jclass?

    /// public abstract void java.util.Observer.update(java.util.Observable,java.lang.Object)

    private static var update_MethodID_2: jmethodID?

    open func update( o: Observable?, arg: java_swift.JavaObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: o, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "update", methodSig: "(Ljava/util/Observable;Ljava/lang/Object;)V", methodCache: &ObserverForward.update_MethodID_2, args: &__args, locals: &__locals )
    }

    open func update( _ _o: Observable?, _ _arg: java_swift.JavaObject? ) {
        update( o: _o, arg: _arg )
    }

}

