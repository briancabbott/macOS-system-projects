
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.util.function.BinaryOperator ///

public protocol BinaryOperator: BiFunction {

    /// private static java.lang.Object java.util.function.BinaryOperator.lambda$maxBy$1(java.util.Comparator,java.lang.Object,java.lang.Object)

    /// private static java.lang.Object java.util.function.BinaryOperator.lambda$minBy$0(java.util.Comparator,java.lang.Object,java.lang.Object)

    /// public static java.util.function.BinaryOperator java.util.function.BinaryOperator.maxBy(java.util.Comparator)

    //    class func maxBy( comparator: JavaComparator? ) -> BinaryOperator!

    /// public static java.util.function.BinaryOperator java.util.function.BinaryOperator.minBy(java.util.Comparator)

    //    class func minBy( comparator: JavaComparator? ) -> BinaryOperator!

}


open class BinaryOperatorForward: BiFunctionForward, BinaryOperator {

    private static var BinaryOperatorJNIClass: jclass?

    /// public static java.util.function.BinaryOperator java.util.function.BinaryOperator.maxBy(java.util.Comparator)

    private static var maxBy_MethodID_3: jmethodID?

    open class func maxBy( comparator: JavaComparator? ) -> BinaryOperator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: comparator, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/function/BinaryOperator", classCache: &BinaryOperatorJNIClass, methodName: "maxBy", methodSig: "(Ljava/util/Comparator;)Ljava/util/function/BinaryOperator;", methodCache: &maxBy_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BinaryOperatorForward( javaObject: __return ) : nil
    }

    open class func maxBy( _ _comparator: JavaComparator? ) -> BinaryOperator! {
        return maxBy( comparator: _comparator )
    }

    /// public static java.util.function.BinaryOperator java.util.function.BinaryOperator.minBy(java.util.Comparator)

    private static var minBy_MethodID_4: jmethodID?

    open class func minBy( comparator: JavaComparator? ) -> BinaryOperator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: comparator, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/function/BinaryOperator", classCache: &BinaryOperatorJNIClass, methodName: "minBy", methodSig: "(Ljava/util/Comparator;)Ljava/util/function/BinaryOperator;", methodCache: &minBy_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BinaryOperatorForward( javaObject: __return ) : nil
    }

    open class func minBy( _ _comparator: JavaComparator? ) -> BinaryOperator! {
        return minBy( comparator: _comparator )
    }

    /// public default java.util.function.BiFunction java.util.function.BiFunction.andThen(java.util.function.Function)

    private static var andThen_MethodID_5: jmethodID?

    override open func andThen( after: Function? ) -> BiFunction! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: after, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "andThen", methodSig: "(Ljava/util/function/Function;)Ljava/util/function/BiFunction;", methodCache: &BinaryOperatorForward.andThen_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BiFunctionForward( javaObject: __return ) : nil
    }

    override open func andThen( _ _after: Function? ) -> BiFunction! {
        return andThen( after: _after )
    }

    /// public abstract java.lang.Object java.util.function.BiFunction.apply(java.lang.Object,java.lang.Object)

    private static var apply_MethodID_6: jmethodID?

    override open func apply( t: java_swift.JavaObject?, u: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: t, locals: &__locals )
        __args[1] = JNIType.toJava( value: u, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "apply", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &BinaryOperatorForward.apply_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    override open func apply( _ _t: java_swift.JavaObject?, _ _u: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return apply( t: _t, u: _u )
    }

}

