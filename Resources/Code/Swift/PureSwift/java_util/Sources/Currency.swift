
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.Currency ///

open class Currency: java_swift.JavaObject, /* interface java.io.Serializable */ UnavailableProtocol {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var CurrencyJNIClass: jclass?

    /// private static final int java.util.Currency.A_TO_Z

    /// private static final int java.util.Currency.COUNTRY_TYPE_MASK

    /// private static final int java.util.Currency.COUNTRY_WITHOUT_CURRENCY_ENTRY

    /// private static final int java.util.Currency.DISPLAYNAME

    /// private static final int java.util.Currency.INVALID_COUNTRY_ENTRY

    /// private static final int java.util.Currency.MAGIC_NUMBER

    /// private static final int java.util.Currency.NUMERIC_CODE_MASK

    /// private static final int java.util.Currency.NUMERIC_CODE_SHIFT

    /// private static final int java.util.Currency.SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_MASK

    /// private static final int java.util.Currency.SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_SHIFT

    /// private static final int java.util.Currency.SIMPLE_CASE_COUNTRY_FINAL_CHAR_MASK

    /// private static final int java.util.Currency.SIMPLE_CASE_COUNTRY_MASK

    /// private static final int java.util.Currency.SIMPLE_CASE_COUNTRY_MAX_DEFAULT_DIGITS

    /// private static final int java.util.Currency.SPECIAL_CASE_COUNTRY_INDEX_DELTA

    /// private static final int java.util.Currency.SPECIAL_CASE_COUNTRY_INDEX_MASK

    /// private static final int java.util.Currency.SPECIAL_CASE_COUNTRY_MASK

    /// private static final int java.util.Currency.SYMBOL

    /// private static final int java.util.Currency.VALID_FORMAT_VERSION

    /// private static java.util.HashSet java.util.Currency.available

    /// static int java.util.Currency.dataVersion

    // Skipping field: true false false false false false 

    /// static int java.util.Currency.formatVersion

    // Skipping field: true false false false false false 

    /// private static java.util.concurrent.ConcurrentMap java.util.Currency.instances

    /// static int[] java.util.Currency.mainTable

    // Skipping field: true false false false false false 

    /// static java.lang.String java.util.Currency.otherCurrencies

    // Skipping field: true false false false false false 

    /// static int[] java.util.Currency.otherCurrenciesDFD

    // Skipping field: true false false false false false 

    /// static int[] java.util.Currency.otherCurrenciesNumericCode

    // Skipping field: true false false false false false 

    /// static long[] java.util.Currency.scCutOverTimes

    // Skipping field: true false false false false false 

    /// static java.lang.String[] java.util.Currency.scNewCurrencies

    // Skipping field: true false false false false false 

    /// static int[] java.util.Currency.scNewCurrenciesDFD

    // Skipping field: true false false false false false 

    /// static int[] java.util.Currency.scNewCurrenciesNumericCode

    // Skipping field: true false false false false false 

    /// static java.lang.String[] java.util.Currency.scOldCurrencies

    // Skipping field: true false false false false false 

    /// static int[] java.util.Currency.scOldCurrenciesDFD

    // Skipping field: true false false false false false 

    /// static int[] java.util.Currency.scOldCurrenciesNumericCode

    // Skipping field: true false false false false false 

    /// private static final long java.util.Currency.serialVersionUID

    /// private final java.lang.String java.util.Currency.currencyCode

    /// private final transient int java.util.Currency.defaultFractionDigits

    /// private final transient int java.util.Currency.numericCode

    /// private java.util.Currency(java.lang.String,int,int)

    /// static int[] java.util.Currency.access$000(java.io.DataInputStream,int) throws java.io.IOException

    // Skipping method: true false false false false 

    /// static long[] java.util.Currency.access$100(java.io.DataInputStream,int) throws java.io.IOException

    // Skipping method: true false false false false 

    /// static java.lang.String[] java.util.Currency.access$200(java.io.DataInputStream,int) throws java.io.IOException

    // Skipping method: true false false false false 

    /// static void java.util.Currency.access$300(java.util.regex.Pattern,java.lang.String,java.lang.String)

    // Skipping method: true false false false false 

    /// static void java.util.Currency.access$400(java.lang.String,java.lang.Throwable)

    // Skipping method: true false false false false 

    /// private static int java.util.Currency.countOccurrences(java.lang.String,char)

    /// public static java.util.Set java.util.Currency.getAvailableCurrencies()

    private static var getAvailableCurrencies_MethodID_1: jmethodID?

    open class func getAvailableCurrencies() -> java_swift.JavaSet! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/Currency", classCache: &CurrencyJNIClass, methodName: "getAvailableCurrencies", methodSig: "()Ljava/util/Set;", methodCache: &getAvailableCurrencies_MethodID_1, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaSetForward( javaObject: __return ) : nil
    }


    /// public static java.util.Currency java.util.Currency.getInstance(java.util.Locale)

    private static var getInstance_MethodID_2: jmethodID?

    open class func getInstance( arg0: JavaLocale? ) -> Currency! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/Currency", classCache: &CurrencyJNIClass, methodName: "getInstance", methodSig: "(Ljava/util/Locale;)Ljava/util/Currency;", methodCache: &getInstance_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Currency( javaObject: __return ) : nil
    }

    open class func getInstance( _ _arg0: JavaLocale? ) -> Currency! {
        return getInstance( arg0: _arg0 )
    }

    /// public static java.util.Currency java.util.Currency.getInstance(java.lang.String)

    private static var getInstance_MethodID_3: jmethodID?

    open class func getInstance( arg0: String? ) -> Currency! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/Currency", classCache: &CurrencyJNIClass, methodName: "getInstance", methodSig: "(Ljava/lang/String;)Ljava/util/Currency;", methodCache: &getInstance_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Currency( javaObject: __return ) : nil
    }

    open class func getInstance( _ _arg0: String? ) -> Currency! {
        return getInstance( arg0: _arg0 )
    }

    /// private static java.util.Currency java.util.Currency.getInstance(java.lang.String,int,int)

    /// private static int java.util.Currency.getMainTableEntry(char,char)

    /// private static void java.util.Currency.info(java.lang.String,java.lang.Throwable)

    /// private static boolean java.util.Currency.isPastCutoverDate(java.lang.String) throws java.text.ParseException

    /// private static int[] java.util.Currency.readIntArray(java.io.DataInputStream,int) throws java.io.IOException

    /// private static long[] java.util.Currency.readLongArray(java.io.DataInputStream,int) throws java.io.IOException

    /// private static java.lang.String[] java.util.Currency.readStringArray(java.io.DataInputStream,int) throws java.io.IOException

    /// private static void java.util.Currency.replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)

    /// private static void java.util.Currency.setMainTableEntry(char,char,int)

    /// public java.lang.String java.util.Currency.getCurrencyCode()

    private static var getCurrencyCode_MethodID_4: jmethodID?

    open func getCurrencyCode() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCurrencyCode", methodSig: "()Ljava/lang/String;", methodCache: &Currency.getCurrencyCode_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public int java.util.Currency.getDefaultFractionDigits()

    private static var getDefaultFractionDigits_MethodID_5: jmethodID?

    open func getDefaultFractionDigits() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getDefaultFractionDigits", methodSig: "()I", methodCache: &Currency.getDefaultFractionDigits_MethodID_5, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public java.lang.String java.util.Currency.getDisplayName(java.util.Locale)

    private static var getDisplayName_MethodID_6: jmethodID?

    open func getDisplayName( arg0: JavaLocale? ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDisplayName", methodSig: "(Ljava/util/Locale;)Ljava/lang/String;", methodCache: &Currency.getDisplayName_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    open func getDisplayName( _ _arg0: JavaLocale? ) -> String! {
        return getDisplayName( arg0: _arg0 )
    }

    /// public java.lang.String java.util.Currency.getDisplayName()

    private static var getDisplayName_MethodID_7: jmethodID?

    open func getDisplayName() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDisplayName", methodSig: "()Ljava/lang/String;", methodCache: &Currency.getDisplayName_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public int java.util.Currency.getNumericCode()

    private static var getNumericCode_MethodID_8: jmethodID?

    open func getNumericCode() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getNumericCode", methodSig: "()I", methodCache: &Currency.getNumericCode_MethodID_8, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public java.lang.String java.util.Currency.getSymbol(java.util.Locale)

    private static var getSymbol_MethodID_9: jmethodID?

    open func getSymbol( arg0: JavaLocale? ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSymbol", methodSig: "(Ljava/util/Locale;)Ljava/lang/String;", methodCache: &Currency.getSymbol_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    open func getSymbol( _ _arg0: JavaLocale? ) -> String! {
        return getSymbol( arg0: _arg0 )
    }

    /// public java.lang.String java.util.Currency.getSymbol()

    private static var getSymbol_MethodID_10: jmethodID?

    open func getSymbol() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSymbol", methodSig: "()Ljava/lang/String;", methodCache: &Currency.getSymbol_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// private java.lang.Object java.util.Currency.readResolve()

    /// public java.lang.String java.util.Currency.toString()

    // Skipping method: false true false false false 

}

