
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.util.function.IntBinaryOperator ///

public protocol IntBinaryOperator: JavaProtocol {

    /// public abstract int java.util.function.IntBinaryOperator.applyAsInt(int,int)

    func applyAsInt( left: Int, right: Int ) -> Int

}


open class IntBinaryOperatorForward: JNIObjectForward, IntBinaryOperator {

    private static var IntBinaryOperatorJNIClass: jclass?

    /// public abstract int java.util.function.IntBinaryOperator.applyAsInt(int,int)

    private static var applyAsInt_MethodID_2: jmethodID?

    open func applyAsInt( left: Int, right: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(left) )
        __args[1] = jvalue( i: jint(right) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "applyAsInt", methodSig: "(II)I", methodCache: &IntBinaryOperatorForward.applyAsInt_MethodID_2, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func applyAsInt( _ _left: Int, _ _right: Int ) -> Int {
        return applyAsInt( left: _left, right: _right )
    }

}

