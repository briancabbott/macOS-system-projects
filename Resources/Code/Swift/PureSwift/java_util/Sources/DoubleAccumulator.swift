
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.concurrent.atomic.DoubleAccumulator ///

open class DoubleAccumulator: /* class java.util.concurrent.atomic.Striped64 */ UnavailableObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var DoubleAccumulatorJNIClass: jclass?

    /// private static final long java.util.concurrent.atomic.DoubleAccumulator.serialVersionUID

    /// private final java.util.function.DoubleBinaryOperator java.util.concurrent.atomic.DoubleAccumulator.function

    /// private final long java.util.concurrent.atomic.DoubleAccumulator.identity

    /// private static final long java.util.concurrent.atomic.Striped64.BASE

    /// private static final long java.util.concurrent.atomic.Striped64.CELLSBUSY

    /// static final int java.util.concurrent.atomic.Striped64.NCPU

    // Skipping field: true false false false false false 

    /// private static final long java.util.concurrent.atomic.Striped64.PROBE

    /// private static final sun.misc.Unsafe java.util.concurrent.atomic.Striped64.UNSAFE

    /// transient volatile long java.util.concurrent.atomic.Striped64.base

    // Skipping field: true false false false false false 

    /// transient volatile java.util.concurrent.atomic.Striped64$Cell[] java.util.concurrent.atomic.Striped64.cells

    // Skipping field: true false false false false false 

    /// transient volatile int java.util.concurrent.atomic.Striped64.cellsBusy

    // Skipping field: true false false false false false 

    /// private static final long java.lang.Number.serialVersionUID

    /// public java.util.concurrent.atomic.DoubleAccumulator(java.util.function.DoubleBinaryOperator,double)

    private static var new_MethodID_1: jmethodID?

    public convenience init( accumulatorFunction: DoubleBinaryOperator?, identity: Double ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: accumulatorFunction, locals: &__locals )
        __args[1] = jvalue( d: identity )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/atomic/DoubleAccumulator", classCache: &DoubleAccumulator.DoubleAccumulatorJNIClass, methodSig: "(Ljava/util/function/DoubleBinaryOperator;D)V", methodCache: &DoubleAccumulator.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _accumulatorFunction: DoubleBinaryOperator?, _ _identity: Double ) {
        self.init( accumulatorFunction: _accumulatorFunction, identity: _identity )
    }

    /// static java.util.function.DoubleBinaryOperator java.util.concurrent.atomic.DoubleAccumulator.access$000(java.util.concurrent.atomic.DoubleAccumulator)

    // Skipping method: true false false false false 

    /// static long java.util.concurrent.atomic.DoubleAccumulator.access$100(java.util.concurrent.atomic.DoubleAccumulator)

    // Skipping method: true false false false false 

    /// public void java.util.concurrent.atomic.DoubleAccumulator.accumulate(double)

    private static var accumulate_MethodID_2: jmethodID?

    open func accumulate( x: Double ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( d: x )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "accumulate", methodSig: "(D)V", methodCache: &DoubleAccumulator.accumulate_MethodID_2, args: &__args, locals: &__locals )
    }

    open func accumulate( _ _x: Double ) {
        accumulate( x: _x )
    }

    /// public double java.util.concurrent.atomic.DoubleAccumulator.doubleValue()

    private static var doubleValue_MethodID_3: jmethodID?

    open func doubleValue() -> Double {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "doubleValue", methodSig: "()D", methodCache: &DoubleAccumulator.doubleValue_MethodID_3, args: &__args, locals: &__locals )
        return __return
    }


    /// public float java.util.concurrent.atomic.DoubleAccumulator.floatValue()

    private static var floatValue_MethodID_4: jmethodID?

    open func floatValue() -> Float {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "floatValue", methodSig: "()F", methodCache: &DoubleAccumulator.floatValue_MethodID_4, args: &__args, locals: &__locals )
        return __return
    }


    /// public double java.util.concurrent.atomic.DoubleAccumulator.get()

    private static var get_MethodID_5: jmethodID?

    open func get() -> Double {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "get", methodSig: "()D", methodCache: &DoubleAccumulator.get_MethodID_5, args: &__args, locals: &__locals )
        return __return
    }


    /// public double java.util.concurrent.atomic.DoubleAccumulator.getThenReset()

    private static var getThenReset_MethodID_6: jmethodID?

    open func getThenReset() -> Double {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getThenReset", methodSig: "()D", methodCache: &DoubleAccumulator.getThenReset_MethodID_6, args: &__args, locals: &__locals )
        return __return
    }


    /// public int java.util.concurrent.atomic.DoubleAccumulator.intValue()

    private static var intValue_MethodID_7: jmethodID?

    open func intValue() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "intValue", methodSig: "()I", methodCache: &DoubleAccumulator.intValue_MethodID_7, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public long java.util.concurrent.atomic.DoubleAccumulator.longValue()

    private static var longValue_MethodID_8: jmethodID?

    open func longValue() -> Int64 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "longValue", methodSig: "()J", methodCache: &DoubleAccumulator.longValue_MethodID_8, args: &__args, locals: &__locals )
        return __return
    }


    /// private void java.util.concurrent.atomic.DoubleAccumulator.readObject(java.io.ObjectInputStream) throws java.io.InvalidObjectException

    /// public void java.util.concurrent.atomic.DoubleAccumulator.reset()

    private static var reset_MethodID_9: jmethodID?

    open func reset() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "reset", methodSig: "()V", methodCache: &DoubleAccumulator.reset_MethodID_9, args: &__args, locals: &__locals )
    }


    /// public java.lang.String java.util.concurrent.atomic.DoubleAccumulator.toString()

    private static var toString_MethodID_10: jmethodID?

    override open func toString() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "toString", methodSig: "()Ljava/lang/String;", methodCache: &DoubleAccumulator.toString_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// private java.lang.Object java.util.concurrent.atomic.DoubleAccumulator.writeReplace()

}

