
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.logging.ConsoleHandler ///

open class ConsoleHandler: StreamHandler {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ConsoleHandlerJNIClass: jclass?

    /// private boolean java.util.logging.StreamHandler.doneHeader

    /// private java.io.OutputStream java.util.logging.StreamHandler.output

    /// private volatile java.io.Writer java.util.logging.StreamHandler.writer

    /// private static final int java.util.logging.Handler.offValue

    /// private volatile java.lang.String java.util.logging.Handler.encoding

    /// private volatile java.util.logging.ErrorManager java.util.logging.Handler.errorManager

    /// private volatile java.util.logging.Filter java.util.logging.Handler.filter

    /// private volatile java.util.logging.Formatter java.util.logging.Handler.formatter

    /// private volatile java.util.logging.Level java.util.logging.Handler.logLevel

    /// private final java.util.logging.LogManager java.util.logging.Handler.manager

    /// boolean java.util.logging.Handler.sealed

    // Skipping field: true false false false false false 

    /// public java.util.logging.ConsoleHandler()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "java/util/logging/ConsoleHandler", classCache: &ConsoleHandler.ConsoleHandlerJNIClass, methodSig: "()V", methodCache: &ConsoleHandler.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public void java.util.logging.ConsoleHandler.close()

    // Skipping method: false true false false false 

    /// private void java.util.logging.ConsoleHandler.configure()

    /// public void java.util.logging.ConsoleHandler.publish(java.util.logging.LogRecord)

    // Skipping method: false true false false false 

}

