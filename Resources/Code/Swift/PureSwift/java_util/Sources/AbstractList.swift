
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.AbstractList ///

open class AbstractList: AbstractCollection, List {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AbstractListJNIClass: jclass?

    /// protected transient int java.util.AbstractList.modCount

    private static var modCount_FieldID: jfieldID?

    open var modCount: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "modCount", fieldType: "I", fieldCache: &AbstractList.modCount_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "modCount", fieldType: "I", fieldCache: &AbstractList.modCount_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// private static final int java.util.AbstractCollection.MAX_ARRAY_SIZE

    /// protected java.util.AbstractList()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "java/util/AbstractList", classCache: &AbstractList.AbstractListJNIClass, methodSig: "()V", methodCache: &AbstractList.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public void java.util.AbstractList.add(int,java.lang.Object)

    private static var add_MethodID_2: jmethodID?

    open func add( index: Int, element: java_swift.JavaObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(index) )
        __args[1] = JNIType.toJava( value: element, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "add", methodSig: "(ILjava/lang/Object;)V", methodCache: &AbstractList.add_MethodID_2, args: &__args, locals: &__locals )
    }

    open func add( _ _index: Int, _ _element: java_swift.JavaObject? ) {
        add( index: _index, element: _element )
    }

    /// public boolean java.util.AbstractList.add(java.lang.Object)

    // Skipping method: false true false false false 

    /// public boolean java.util.AbstractList.addAll(int,java.util.Collection)

    private static var addAll_MethodID_3: jmethodID?

    open func addAll( index: Int, c: Collection? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(index) )
        __args[1] = JNIType.toJava( value: c, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "addAll", methodSig: "(ILjava/util/Collection;)Z", methodCache: &AbstractList.addAll_MethodID_3, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func addAll( _ _index: Int, _ _c: Collection? ) -> Bool {
        return addAll( index: _index, c: _c )
    }

    /// public void java.util.AbstractList.clear()

    // Skipping method: false true false false false 

    /// public boolean java.util.AbstractList.equals(java.lang.Object)

    private static var equals_MethodID_4: jmethodID?

    override open func equals( o: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: o, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &AbstractList.equals_MethodID_4, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
        return equals( o: _o )
    }

    /// public abstract java.lang.Object java.util.AbstractList.get(int)

    private static var get_MethodID_5: jmethodID?

    open func get( index: Int ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(index) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "get", methodSig: "(I)Ljava/lang/Object;", methodCache: &AbstractList.get_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func get( _ _index: Int ) -> java_swift.JavaObject! {
        return get( index: _index )
    }

    /// public int java.util.AbstractList.hashCode()

    // Skipping method: false true false false false 

    /// public int java.util.AbstractList.indexOf(java.lang.Object)

    private static var indexOf_MethodID_6: jmethodID?

    open func indexOf( o: java_swift.JavaObject? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: o, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "indexOf", methodSig: "(Ljava/lang/Object;)I", methodCache: &AbstractList.indexOf_MethodID_6, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func indexOf( _ _o: java_swift.JavaObject? ) -> Int {
        return indexOf( o: _o )
    }

    /// public java.util.Iterator java.util.AbstractList.iterator()

    // Skipping method: false true false false false 

    /// public int java.util.AbstractList.lastIndexOf(java.lang.Object)

    private static var lastIndexOf_MethodID_7: jmethodID?

    open func lastIndexOf( o: java_swift.JavaObject? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: o, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "lastIndexOf", methodSig: "(Ljava/lang/Object;)I", methodCache: &AbstractList.lastIndexOf_MethodID_7, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func lastIndexOf( _ _o: java_swift.JavaObject? ) -> Int {
        return lastIndexOf( o: _o )
    }

    /// public java.util.ListIterator java.util.AbstractList.listIterator(int)

    private static var listIterator_MethodID_8: jmethodID?

    open func listIterator( index: Int ) -> ListIterator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(index) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "listIterator", methodSig: "(I)Ljava/util/ListIterator;", methodCache: &AbstractList.listIterator_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ListIteratorForward( javaObject: __return ) : nil
    }

    open func listIterator( _ _index: Int ) -> ListIterator! {
        return listIterator( index: _index )
    }

    /// public java.util.ListIterator java.util.AbstractList.listIterator()

    private static var listIterator_MethodID_9: jmethodID?

    open func listIterator() -> ListIterator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "listIterator", methodSig: "()Ljava/util/ListIterator;", methodCache: &AbstractList.listIterator_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ListIteratorForward( javaObject: __return ) : nil
    }


    /// private java.lang.String java.util.AbstractList.outOfBoundsMsg(int)

    /// private void java.util.AbstractList.rangeCheckForAdd(int)

    /// public java.lang.Object java.util.AbstractList.remove(int)

    private static var remove_MethodID_10: jmethodID?

    open func remove( index: Int ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(index) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "remove", methodSig: "(I)Ljava/lang/Object;", methodCache: &AbstractList.remove_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func remove( _ _index: Int ) -> java_swift.JavaObject! {
        return remove( index: _index )
    }

    /// protected void java.util.AbstractList.removeRange(int,int)

    private static var removeRange_MethodID_11: jmethodID?

    open func removeRange( fromIndex: Int, toIndex: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(fromIndex) )
        __args[1] = jvalue( i: jint(toIndex) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeRange", methodSig: "(II)V", methodCache: &AbstractList.removeRange_MethodID_11, args: &__args, locals: &__locals )
    }

    open func removeRange( _ _fromIndex: Int, _ _toIndex: Int ) {
        removeRange( fromIndex: _fromIndex, toIndex: _toIndex )
    }

    /// public java.lang.Object java.util.AbstractList.set(int,java.lang.Object)

    private static var set_MethodID_12: jmethodID?

    open func set( index: Int, element: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(index) )
        __args[1] = JNIType.toJava( value: element, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "set", methodSig: "(ILjava/lang/Object;)Ljava/lang/Object;", methodCache: &AbstractList.set_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func set( _ _index: Int, _ _element: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return set( index: _index, element: _element )
    }

    /// public java.util.List java.util.AbstractList.subList(int,int)

    private static var subList_MethodID_13: jmethodID?

    open func subList( fromIndex: Int, toIndex: Int ) -> List! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(fromIndex) )
        __args[1] = jvalue( i: jint(toIndex) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "subList", methodSig: "(II)Ljava/util/List;", methodCache: &AbstractList.subList_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ListForward( javaObject: __return ) : nil
    }

    open func subList( _ _fromIndex: Int, _ _toIndex: Int ) -> List! {
        return subList( fromIndex: _fromIndex, toIndex: _toIndex )
    }

    /// In declared protocol but not defined.. ///

    /// public abstract boolean java.util.Collection.add(java.lang.Object)

    // Skipping method: false true false false false 

    /// public abstract boolean java.util.Collection.addAll(java.util.Collection)

    // Skipping method: false true false false false 

    /// public abstract void java.util.Collection.clear()

    // Skipping method: false true false false false 

    /// public abstract boolean java.util.Collection.contains(java.lang.Object)

    // Skipping method: false true false false false 

    /// public abstract boolean java.util.Collection.containsAll(java.util.Collection)

    // Skipping method: false true false false false 

    /// public default void java.lang.Iterable.forEach(java.util.function.Consumer)

    // Skipping method: false true false false false 

    /// public abstract int java.util.Collection.hashCode()

    // Skipping method: false true false false false 

    /// public abstract boolean java.util.Collection.isEmpty()

    // Skipping method: false true false false false 

    /// public abstract java.util.Iterator java.lang.Iterable.iterator()

    // Skipping method: false true false false false 

    /// public default java.util.stream.Stream java.util.Collection.parallelStream()

    // Skipping method: false true false false false 

    /// public abstract boolean java.util.Collection.remove(java.lang.Object)

    // Skipping method: false true false false false 

    /// public abstract boolean java.util.Collection.removeAll(java.util.Collection)

    // Skipping method: false true false false false 

    /// public default boolean java.util.Collection.removeIf(java.util.function.Predicate)

    // Skipping method: false true false false false 

    /// public default void java.util.List.replaceAll(java.util.function.UnaryOperator)

    private static var replaceAll_MethodID_14: jmethodID?

    open func replaceAll( _operator: UnaryOperator? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: _operator, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "replaceAll", methodSig: "(Ljava/util/function/UnaryOperator;)V", methodCache: &AbstractList.replaceAll_MethodID_14, args: &__args, locals: &__locals )
    }

    open func replaceAll( _ __operator: UnaryOperator? ) {
        replaceAll( _operator: __operator )
    }

    /// public abstract boolean java.util.Collection.retainAll(java.util.Collection)

    // Skipping method: false true false false false 

    /// public abstract int java.util.Collection.size()

    // Skipping method: false true false false false 

    /// public default void java.util.List.sort(java.util.Comparator)

    private static var sort_MethodID_15: jmethodID?

    open func sort( c: JavaComparator? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "sort", methodSig: "(Ljava/util/Comparator;)V", methodCache: &AbstractList.sort_MethodID_15, args: &__args, locals: &__locals )
    }

    open func sort( _ _c: JavaComparator? ) {
        sort( c: _c )
    }

    /// public default java.util.Spliterator java.lang.Iterable.spliterator()

    // Skipping method: false true false false false 

    /// public default java.util.stream.Stream java.util.Collection.stream()

    // Skipping method: false true false false false 

    /// public abstract java.lang.Object[] java.util.Collection.toArray(java.lang.Object[])

    // Skipping method: false true false false false 

    /// public abstract java.lang.Object[] java.util.Collection.toArray()

    // Skipping method: false true false false false 

}

