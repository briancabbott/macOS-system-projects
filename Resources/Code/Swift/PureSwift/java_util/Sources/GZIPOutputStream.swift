
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.zip.GZIPOutputStream ///

open class GZIPOutputStream: DeflaterOutputStream {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var GZIPOutputStreamJNIClass: jclass?

    /// private static final int java.util.zip.GZIPOutputStream.GZIP_MAGIC

    /// private static final int java.util.zip.GZIPOutputStream.TRAILER_SIZE

    /// protected java.util.zip.CRC32 java.util.zip.GZIPOutputStream.crc

    private static var crc_FieldID: jfieldID?

    open var crc: CRC32! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "crc", fieldType: "Ljava/util/zip/CRC32;", fieldCache: &GZIPOutputStream.crc_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? CRC32( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "crc", fieldType: "Ljava/util/zip/CRC32;", fieldCache: &GZIPOutputStream.crc_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected byte[] java.util.zip.DeflaterOutputStream.buf

    private static var buf_FieldID: jfieldID?

    override open var buf: [Int8]! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "buf", fieldType: "[B", fieldCache: &GZIPOutputStream.buf_FieldID, object: javaObject )
            return JNIType.toSwift( type: [Int8].self, from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "buf", fieldType: "[B", fieldCache: &GZIPOutputStream.buf_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private boolean java.util.zip.DeflaterOutputStream.closed

    /// protected java.util.zip.Deflater java.util.zip.DeflaterOutputStream.def

    private static var def_FieldID: jfieldID?

    override open var def: Deflater! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "def", fieldType: "Ljava/util/zip/Deflater;", fieldCache: &GZIPOutputStream.def_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? Deflater( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "def", fieldType: "Ljava/util/zip/Deflater;", fieldCache: &GZIPOutputStream.def_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private final boolean java.util.zip.DeflaterOutputStream.syncFlush

    /// boolean java.util.zip.DeflaterOutputStream.usesDefaultDeflater

    // Skipping field: true false false false false false 

    /// protected java.io.OutputStream java.io.FilterOutputStream.out

    private static var out_FieldID: jfieldID?

    override open var out: /* class java.io.OutputStream */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "out", fieldType: "Ljava/io/OutputStream;", fieldCache: &GZIPOutputStream.out_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class java.io.OutputStream */ UnavailableObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "out", fieldType: "Ljava/io/OutputStream;", fieldCache: &GZIPOutputStream.out_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// public java.util.zip.GZIPOutputStream(java.io.OutputStream) throws java.io.IOException

    private static var new_MethodID_1: jmethodID?

    public convenience init( out: /* class java.io.OutputStream */ UnavailableObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: out, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/zip/GZIPOutputStream", classCache: &GZIPOutputStream.GZIPOutputStreamJNIClass, methodSig: "(Ljava/io/OutputStream;)V", methodCache: &GZIPOutputStream.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _out: /* class java.io.OutputStream */ UnavailableObject? ) {
        self.init( out: _out )
    }

    /// public java.util.zip.GZIPOutputStream(java.io.OutputStream,boolean) throws java.io.IOException

    private static var new_MethodID_2: jmethodID?

    public convenience init( out: /* class java.io.OutputStream */ UnavailableObject?, syncFlush: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: out, locals: &__locals )
        __args[1] = jvalue( z: jboolean(syncFlush ? JNI_TRUE : JNI_FALSE) )
        let __object = JNIMethod.NewObject( className: "java/util/zip/GZIPOutputStream", classCache: &GZIPOutputStream.GZIPOutputStreamJNIClass, methodSig: "(Ljava/io/OutputStream;Z)V", methodCache: &GZIPOutputStream.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _out: /* class java.io.OutputStream */ UnavailableObject?, _ _syncFlush: Bool ) {
        self.init( out: _out, syncFlush: _syncFlush )
    }

    /// public java.util.zip.GZIPOutputStream(java.io.OutputStream,int) throws java.io.IOException

    private static var new_MethodID_3: jmethodID?

    public convenience init( out: /* class java.io.OutputStream */ UnavailableObject?, size: Int ) throws {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: out, locals: &__locals )
        __args[1] = jvalue( i: jint(size) )
        let __object = JNIMethod.NewObject( className: "java/util/zip/GZIPOutputStream", classCache: &GZIPOutputStream.GZIPOutputStreamJNIClass, methodSig: "(Ljava/io/OutputStream;I)V", methodCache: &GZIPOutputStream.new_MethodID_3, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.io.IOException */ UnavailableObject( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _out: /* class java.io.OutputStream */ UnavailableObject?, _ _size: Int ) throws {
        try self.init( out: _out, size: _size )
    }

    /// public java.util.zip.GZIPOutputStream(java.io.OutputStream,int,boolean) throws java.io.IOException

    private static var new_MethodID_4: jmethodID?

    public convenience init( out: /* class java.io.OutputStream */ UnavailableObject?, size: Int, syncFlush: Bool ) throws {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: out, locals: &__locals )
        __args[1] = jvalue( i: jint(size) )
        __args[2] = jvalue( z: jboolean(syncFlush ? JNI_TRUE : JNI_FALSE) )
        let __object = JNIMethod.NewObject( className: "java/util/zip/GZIPOutputStream", classCache: &GZIPOutputStream.GZIPOutputStreamJNIClass, methodSig: "(Ljava/io/OutputStream;IZ)V", methodCache: &GZIPOutputStream.new_MethodID_4, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.io.IOException */ UnavailableObject( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _out: /* class java.io.OutputStream */ UnavailableObject?, _ _size: Int, _ _syncFlush: Bool ) throws {
        try self.init( out: _out, size: _size, syncFlush: _syncFlush )
    }

    /// public void java.util.zip.GZIPOutputStream.finish() throws java.io.IOException

    // Skipping method: false true false false false 

    /// public synchronized void java.util.zip.GZIPOutputStream.write(byte[],int,int) throws java.io.IOException

    private static var write_MethodID_5: jmethodID?

    open func write( buf: [Int8]?, off: Int, len: Int ) throws /* java.io.IOException */ {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: buf, locals: &__locals )
        __args[1] = jvalue( i: jint(off) )
        __args[2] = jvalue( i: jint(len) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "write", methodSig: "([BII)V", methodCache: &GZIPOutputStream.write_MethodID_5, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.io.IOException */ UnavailableObject( javaObject: throwable )
        }
    }

    override open func write( _ _buf: [Int8]?, _ _off: Int, _ _len: Int ) throws /* java.io.IOException */ {
        try write( buf: _buf, off: _off, len: _len )
    }

    /// private void java.util.zip.GZIPOutputStream.writeHeader() throws java.io.IOException

    /// private void java.util.zip.GZIPOutputStream.writeInt(int,byte[],int) throws java.io.IOException

    /// private void java.util.zip.GZIPOutputStream.writeShort(int,byte[],int) throws java.io.IOException

    /// private void java.util.zip.GZIPOutputStream.writeTrailer(byte[],int) throws java.io.IOException

}

