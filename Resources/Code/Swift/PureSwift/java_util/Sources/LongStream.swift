
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.util.stream.LongStream ///

public protocol LongStream: BaseStream {

    /// public static java.util.stream.LongStream$Builder java.util.stream.LongStream.builder()

    // Skipping method: false false true false false 

    /// public static java.util.stream.LongStream java.util.stream.LongStream.concat(java.util.stream.LongStream,java.util.stream.LongStream)

    //    class func concat( a: LongStream?, b: LongStream? ) -> LongStream!

    /// public static java.util.stream.LongStream java.util.stream.LongStream.empty()

    //    class func empty() -> LongStream!

    /// public static java.util.stream.LongStream java.util.stream.LongStream.generate(java.util.function.LongSupplier)

    //    class func generate( s: LongSupplier? ) -> LongStream!

    /// public static java.util.stream.LongStream java.util.stream.LongStream.iterate(long,java.util.function.LongUnaryOperator)

    //    class func iterate( seed: Int64, f: LongUnaryOperator? ) -> LongStream!

    /// public static java.util.stream.LongStream java.util.stream.LongStream.of(long)

    //    class func of( t: Int64 ) -> LongStream!

    /// public static java.util.stream.LongStream java.util.stream.LongStream.of(long[])

    //    class func of( values: [Int64]? ) -> LongStream!

    /// public static java.util.stream.LongStream java.util.stream.LongStream.range(long,long)

    //    class func range( startInclusive: Int64, endExclusive: Int64 ) -> LongStream!

    /// public static java.util.stream.LongStream java.util.stream.LongStream.rangeClosed(long,long)

    //    class func rangeClosed( startInclusive: Int64, endInclusive: Int64 ) -> LongStream!

    /// public abstract boolean java.util.stream.LongStream.allMatch(java.util.function.LongPredicate)

    func allMatch( predicate: LongPredicate? ) -> Bool

    /// public abstract boolean java.util.stream.LongStream.anyMatch(java.util.function.LongPredicate)

    func anyMatch( predicate: LongPredicate? ) -> Bool

    /// public abstract java.util.stream.DoubleStream java.util.stream.LongStream.asDoubleStream()

    func asDoubleStream() -> DoubleStream!

    /// public abstract java.util.OptionalDouble java.util.stream.LongStream.average()

    func average() -> OptionalDouble!

    /// public abstract java.util.stream.Stream java.util.stream.LongStream.boxed()

    func boxed() -> Stream!

    /// public abstract java.lang.Object java.util.stream.LongStream.collect(java.util.function.Supplier,java.util.function.ObjLongConsumer,java.util.function.BiConsumer)

    func collect( supplier: Supplier?, accumulator: ObjLongConsumer?, combiner: BiConsumer? ) -> java_swift.JavaObject!

    /// public abstract long java.util.stream.LongStream.count()

    func count() -> Int64

    /// public abstract java.util.stream.LongStream java.util.stream.LongStream.distinct()

    func distinct() -> LongStream!

    /// public abstract java.util.stream.LongStream java.util.stream.LongStream.filter(java.util.function.LongPredicate)

    func filter( predicate: LongPredicate? ) -> LongStream!

    /// public abstract java.util.OptionalLong java.util.stream.LongStream.findAny()

    func findAny() -> OptionalLong!

    /// public abstract java.util.OptionalLong java.util.stream.LongStream.findFirst()

    func findFirst() -> OptionalLong!

    /// public abstract java.util.stream.LongStream java.util.stream.LongStream.flatMap(java.util.function.LongFunction)

    func flatMap( mapper: LongFunction? ) -> LongStream!

    /// public abstract void java.util.stream.LongStream.forEach(java.util.function.LongConsumer)

    func forEach( action: LongConsumer? )

    /// public abstract void java.util.stream.LongStream.forEachOrdered(java.util.function.LongConsumer)

    func forEachOrdered( action: LongConsumer? )

    /// public default java.util.Iterator java.util.stream.LongStream.iterator()

    func iterator() -> Iterator!

    /// public abstract java.util.PrimitiveIterator$OfLong java.util.stream.LongStream.iterator()

    // Skipping method: false false true false false 

    /// public abstract java.util.stream.LongStream java.util.stream.LongStream.limit(long)

    func limit( maxSize: Int64 ) -> LongStream!

    /// public abstract java.util.stream.LongStream java.util.stream.LongStream.map(java.util.function.LongUnaryOperator)

    func map( mapper: LongUnaryOperator? ) -> LongStream!

    /// public abstract java.util.stream.DoubleStream java.util.stream.LongStream.mapToDouble(java.util.function.LongToDoubleFunction)

    func mapToDouble( mapper: LongToDoubleFunction? ) -> DoubleStream!

    /// public abstract java.util.stream.IntStream java.util.stream.LongStream.mapToInt(java.util.function.LongToIntFunction)

    func mapToInt( mapper: LongToIntFunction? ) -> IntStream!

    /// public abstract java.util.stream.Stream java.util.stream.LongStream.mapToObj(java.util.function.LongFunction)

    func mapToObj( mapper: LongFunction? ) -> Stream!

    /// public abstract java.util.OptionalLong java.util.stream.LongStream.max()

    func max() -> OptionalLong!

    /// public abstract java.util.OptionalLong java.util.stream.LongStream.min()

    func min() -> OptionalLong!

    /// public abstract boolean java.util.stream.LongStream.noneMatch(java.util.function.LongPredicate)

    func noneMatch( predicate: LongPredicate? ) -> Bool

    /// public default java.util.stream.BaseStream java.util.stream.LongStream.parallel()

    func parallel() -> BaseStream!

    /// public abstract java.util.stream.LongStream java.util.stream.LongStream.parallel()

    /// public abstract java.util.stream.LongStream java.util.stream.LongStream.peek(java.util.function.LongConsumer)

    func peek( action: LongConsumer? ) -> LongStream!

    /// public abstract long java.util.stream.LongStream.reduce(long,java.util.function.LongBinaryOperator)

    func reduce( identity: Int64, op: LongBinaryOperator? ) -> Int64

    /// public abstract java.util.OptionalLong java.util.stream.LongStream.reduce(java.util.function.LongBinaryOperator)

    func reduce( op: LongBinaryOperator? ) -> OptionalLong!

    /// public abstract java.util.stream.LongStream java.util.stream.LongStream.sequential()

    func sequential() -> LongStream!

    /// public default java.util.stream.BaseStream java.util.stream.LongStream.sequential()

    /// public abstract java.util.stream.LongStream java.util.stream.LongStream.skip(long)

    func skip( n: Int64 ) -> LongStream!

    /// public abstract java.util.stream.LongStream java.util.stream.LongStream.sorted()

    func sorted() -> LongStream!

    /// public default java.util.Spliterator java.util.stream.LongStream.spliterator()

    func spliterator() -> Spliterator!

    /// public abstract java.util.Spliterator$OfLong java.util.stream.LongStream.spliterator()

    // Skipping method: false false true false false 

    /// public abstract long java.util.stream.LongStream.sum()

    func sum() -> Int64

    /// public abstract java.util.LongSummaryStatistics java.util.stream.LongStream.summaryStatistics()

    func summaryStatistics() -> LongSummaryStatistics!

    /// public abstract long[] java.util.stream.LongStream.toArray()

    func toArray() -> [Int64]!

}


open class LongStreamForward: BaseStreamForward, LongStream {

    private static var LongStreamJNIClass: jclass?

    /// public static java.util.stream.LongStream$Builder java.util.stream.LongStream.builder()

    // Skipping method: false false true false false 

    /// public static java.util.stream.LongStream java.util.stream.LongStream.concat(java.util.stream.LongStream,java.util.stream.LongStream)

    private static var concat_MethodID_43: jmethodID?

    open class func concat( a: LongStream?, b: LongStream? ) -> LongStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: a, locals: &__locals )
        __args[1] = JNIType.toJava( value: b, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/stream/LongStream", classCache: &LongStreamJNIClass, methodName: "concat", methodSig: "(Ljava/util/stream/LongStream;Ljava/util/stream/LongStream;)Ljava/util/stream/LongStream;", methodCache: &concat_MethodID_43, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LongStreamForward( javaObject: __return ) : nil
    }

    open class func concat( _ _a: LongStream?, _ _b: LongStream? ) -> LongStream! {
        return concat( a: _a, b: _b )
    }

    /// public static java.util.stream.LongStream java.util.stream.LongStream.empty()

    private static var empty_MethodID_44: jmethodID?

    open class func empty() -> LongStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/stream/LongStream", classCache: &LongStreamJNIClass, methodName: "empty", methodSig: "()Ljava/util/stream/LongStream;", methodCache: &empty_MethodID_44, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LongStreamForward( javaObject: __return ) : nil
    }


    /// public static java.util.stream.LongStream java.util.stream.LongStream.generate(java.util.function.LongSupplier)

    private static var generate_MethodID_45: jmethodID?

    open class func generate( s: LongSupplier? ) -> LongStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/stream/LongStream", classCache: &LongStreamJNIClass, methodName: "generate", methodSig: "(Ljava/util/function/LongSupplier;)Ljava/util/stream/LongStream;", methodCache: &generate_MethodID_45, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LongStreamForward( javaObject: __return ) : nil
    }

    open class func generate( _ _s: LongSupplier? ) -> LongStream! {
        return generate( s: _s )
    }

    /// public static java.util.stream.LongStream java.util.stream.LongStream.iterate(long,java.util.function.LongUnaryOperator)

    private static var iterate_MethodID_46: jmethodID?

    open class func iterate( seed: Int64, f: LongUnaryOperator? ) -> LongStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( j: seed )
        __args[1] = JNIType.toJava( value: f, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/stream/LongStream", classCache: &LongStreamJNIClass, methodName: "iterate", methodSig: "(JLjava/util/function/LongUnaryOperator;)Ljava/util/stream/LongStream;", methodCache: &iterate_MethodID_46, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LongStreamForward( javaObject: __return ) : nil
    }

    open class func iterate( _ _seed: Int64, _ _f: LongUnaryOperator? ) -> LongStream! {
        return iterate( seed: _seed, f: _f )
    }

    /// public static java.util.stream.LongStream java.util.stream.LongStream.of(long)

    private static var of_MethodID_47: jmethodID?

    open class func of( t: Int64 ) -> LongStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( j: t )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/stream/LongStream", classCache: &LongStreamJNIClass, methodName: "of", methodSig: "(J)Ljava/util/stream/LongStream;", methodCache: &of_MethodID_47, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LongStreamForward( javaObject: __return ) : nil
    }

    open class func of( _ _t: Int64 ) -> LongStream! {
        return of( t: _t )
    }

    /// public static java.util.stream.LongStream java.util.stream.LongStream.of(long[])

    private static var of_MethodID_48: jmethodID?

    open class func of( values: [Int64]? ) -> LongStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: values, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/stream/LongStream", classCache: &LongStreamJNIClass, methodName: "of", methodSig: "([J)Ljava/util/stream/LongStream;", methodCache: &of_MethodID_48, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LongStreamForward( javaObject: __return ) : nil
    }

    open class func of( _ _values: [Int64]? ) -> LongStream! {
        return of( values: _values )
    }

    /// public static java.util.stream.LongStream java.util.stream.LongStream.range(long,long)

    private static var range_MethodID_49: jmethodID?

    open class func range( startInclusive: Int64, endExclusive: Int64 ) -> LongStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( j: startInclusive )
        __args[1] = jvalue( j: endExclusive )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/stream/LongStream", classCache: &LongStreamJNIClass, methodName: "range", methodSig: "(JJ)Ljava/util/stream/LongStream;", methodCache: &range_MethodID_49, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LongStreamForward( javaObject: __return ) : nil
    }

    open class func range( _ _startInclusive: Int64, _ _endExclusive: Int64 ) -> LongStream! {
        return range( startInclusive: _startInclusive, endExclusive: _endExclusive )
    }

    /// public static java.util.stream.LongStream java.util.stream.LongStream.rangeClosed(long,long)

    private static var rangeClosed_MethodID_50: jmethodID?

    open class func rangeClosed( startInclusive: Int64, endInclusive: Int64 ) -> LongStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( j: startInclusive )
        __args[1] = jvalue( j: endInclusive )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/stream/LongStream", classCache: &LongStreamJNIClass, methodName: "rangeClosed", methodSig: "(JJ)Ljava/util/stream/LongStream;", methodCache: &rangeClosed_MethodID_50, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LongStreamForward( javaObject: __return ) : nil
    }

    open class func rangeClosed( _ _startInclusive: Int64, _ _endInclusive: Int64 ) -> LongStream! {
        return rangeClosed( startInclusive: _startInclusive, endInclusive: _endInclusive )
    }

    /// public abstract boolean java.util.stream.LongStream.allMatch(java.util.function.LongPredicate)

    private static var allMatch_MethodID_51: jmethodID?

    open func allMatch( predicate: LongPredicate? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: predicate, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "allMatch", methodSig: "(Ljava/util/function/LongPredicate;)Z", methodCache: &LongStreamForward.allMatch_MethodID_51, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func allMatch( _ _predicate: LongPredicate? ) -> Bool {
        return allMatch( predicate: _predicate )
    }

    /// public abstract boolean java.util.stream.LongStream.anyMatch(java.util.function.LongPredicate)

    private static var anyMatch_MethodID_52: jmethodID?

    open func anyMatch( predicate: LongPredicate? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: predicate, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "anyMatch", methodSig: "(Ljava/util/function/LongPredicate;)Z", methodCache: &LongStreamForward.anyMatch_MethodID_52, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func anyMatch( _ _predicate: LongPredicate? ) -> Bool {
        return anyMatch( predicate: _predicate )
    }

    /// public abstract java.util.stream.DoubleStream java.util.stream.LongStream.asDoubleStream()

    private static var asDoubleStream_MethodID_53: jmethodID?

    open func asDoubleStream() -> DoubleStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "asDoubleStream", methodSig: "()Ljava/util/stream/DoubleStream;", methodCache: &LongStreamForward.asDoubleStream_MethodID_53, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DoubleStreamForward( javaObject: __return ) : nil
    }


    /// public abstract java.util.OptionalDouble java.util.stream.LongStream.average()

    private static var average_MethodID_54: jmethodID?

    open func average() -> OptionalDouble! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "average", methodSig: "()Ljava/util/OptionalDouble;", methodCache: &LongStreamForward.average_MethodID_54, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? OptionalDouble( javaObject: __return ) : nil
    }


    /// public abstract java.util.stream.Stream java.util.stream.LongStream.boxed()

    private static var boxed_MethodID_55: jmethodID?

    open func boxed() -> Stream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "boxed", methodSig: "()Ljava/util/stream/Stream;", methodCache: &LongStreamForward.boxed_MethodID_55, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? StreamForward( javaObject: __return ) : nil
    }


    /// public abstract void java.util.stream.BaseStream.close()

    private static var close_MethodID_56: jmethodID?

    override open func close() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "close", methodSig: "()V", methodCache: &LongStreamForward.close_MethodID_56, args: &__args, locals: &__locals )
    }


    /// public abstract java.lang.Object java.util.stream.LongStream.collect(java.util.function.Supplier,java.util.function.ObjLongConsumer,java.util.function.BiConsumer)

    private static var collect_MethodID_57: jmethodID?

    open func collect( supplier: Supplier?, accumulator: ObjLongConsumer?, combiner: BiConsumer? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: supplier, locals: &__locals )
        __args[1] = JNIType.toJava( value: accumulator, locals: &__locals )
        __args[2] = JNIType.toJava( value: combiner, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "collect", methodSig: "(Ljava/util/function/Supplier;Ljava/util/function/ObjLongConsumer;Ljava/util/function/BiConsumer;)Ljava/lang/Object;", methodCache: &LongStreamForward.collect_MethodID_57, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func collect( _ _supplier: Supplier?, _ _accumulator: ObjLongConsumer?, _ _combiner: BiConsumer? ) -> java_swift.JavaObject! {
        return collect( supplier: _supplier, accumulator: _accumulator, combiner: _combiner )
    }

    /// public abstract long java.util.stream.LongStream.count()

    private static var count_MethodID_58: jmethodID?

    open func count() -> Int64 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "count", methodSig: "()J", methodCache: &LongStreamForward.count_MethodID_58, args: &__args, locals: &__locals )
        return __return
    }


    /// public abstract java.util.stream.LongStream java.util.stream.LongStream.distinct()

    private static var distinct_MethodID_59: jmethodID?

    open func distinct() -> LongStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "distinct", methodSig: "()Ljava/util/stream/LongStream;", methodCache: &LongStreamForward.distinct_MethodID_59, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LongStreamForward( javaObject: __return ) : nil
    }


    /// public abstract java.util.stream.LongStream java.util.stream.LongStream.filter(java.util.function.LongPredicate)

    private static var filter_MethodID_60: jmethodID?

    open func filter( predicate: LongPredicate? ) -> LongStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: predicate, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "filter", methodSig: "(Ljava/util/function/LongPredicate;)Ljava/util/stream/LongStream;", methodCache: &LongStreamForward.filter_MethodID_60, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LongStreamForward( javaObject: __return ) : nil
    }

    open func filter( _ _predicate: LongPredicate? ) -> LongStream! {
        return filter( predicate: _predicate )
    }

    /// public abstract java.util.OptionalLong java.util.stream.LongStream.findAny()

    private static var findAny_MethodID_61: jmethodID?

    open func findAny() -> OptionalLong! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "findAny", methodSig: "()Ljava/util/OptionalLong;", methodCache: &LongStreamForward.findAny_MethodID_61, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? OptionalLong( javaObject: __return ) : nil
    }


    /// public abstract java.util.OptionalLong java.util.stream.LongStream.findFirst()

    private static var findFirst_MethodID_62: jmethodID?

    open func findFirst() -> OptionalLong! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "findFirst", methodSig: "()Ljava/util/OptionalLong;", methodCache: &LongStreamForward.findFirst_MethodID_62, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? OptionalLong( javaObject: __return ) : nil
    }


    /// public abstract java.util.stream.LongStream java.util.stream.LongStream.flatMap(java.util.function.LongFunction)

    private static var flatMap_MethodID_63: jmethodID?

    open func flatMap( mapper: LongFunction? ) -> LongStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: mapper, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "flatMap", methodSig: "(Ljava/util/function/LongFunction;)Ljava/util/stream/LongStream;", methodCache: &LongStreamForward.flatMap_MethodID_63, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LongStreamForward( javaObject: __return ) : nil
    }

    open func flatMap( _ _mapper: LongFunction? ) -> LongStream! {
        return flatMap( mapper: _mapper )
    }

    /// public abstract void java.util.stream.LongStream.forEach(java.util.function.LongConsumer)

    private static var forEach_MethodID_64: jmethodID?

    open func forEach( action: LongConsumer? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: action, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "forEach", methodSig: "(Ljava/util/function/LongConsumer;)V", methodCache: &LongStreamForward.forEach_MethodID_64, args: &__args, locals: &__locals )
    }

    open func forEach( _ _action: LongConsumer? ) {
        forEach( action: _action )
    }

    /// public abstract void java.util.stream.LongStream.forEachOrdered(java.util.function.LongConsumer)

    private static var forEachOrdered_MethodID_65: jmethodID?

    open func forEachOrdered( action: LongConsumer? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: action, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "forEachOrdered", methodSig: "(Ljava/util/function/LongConsumer;)V", methodCache: &LongStreamForward.forEachOrdered_MethodID_65, args: &__args, locals: &__locals )
    }

    open func forEachOrdered( _ _action: LongConsumer? ) {
        forEachOrdered( action: _action )
    }

    /// public abstract boolean java.util.stream.BaseStream.isParallel()

    private static var isParallel_MethodID_66: jmethodID?

    override open func isParallel() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isParallel", methodSig: "()Z", methodCache: &LongStreamForward.isParallel_MethodID_66, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public default java.util.Iterator java.util.stream.LongStream.iterator()

    private static var iterator_MethodID_67: jmethodID?

    override open func iterator() -> Iterator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "iterator", methodSig: "()Ljava/util/Iterator;", methodCache: &LongStreamForward.iterator_MethodID_67, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? IteratorForward( javaObject: __return ) : nil
    }


    /// public abstract java.util.PrimitiveIterator$OfLong java.util.stream.LongStream.iterator()

    // Skipping method: false false true false false 

    /// public abstract java.util.stream.LongStream java.util.stream.LongStream.limit(long)

    private static var limit_MethodID_68: jmethodID?

    open func limit( maxSize: Int64 ) -> LongStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( j: maxSize )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "limit", methodSig: "(J)Ljava/util/stream/LongStream;", methodCache: &LongStreamForward.limit_MethodID_68, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LongStreamForward( javaObject: __return ) : nil
    }

    open func limit( _ _maxSize: Int64 ) -> LongStream! {
        return limit( maxSize: _maxSize )
    }

    /// public abstract java.util.stream.LongStream java.util.stream.LongStream.map(java.util.function.LongUnaryOperator)

    private static var map_MethodID_69: jmethodID?

    open func map( mapper: LongUnaryOperator? ) -> LongStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: mapper, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "map", methodSig: "(Ljava/util/function/LongUnaryOperator;)Ljava/util/stream/LongStream;", methodCache: &LongStreamForward.map_MethodID_69, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LongStreamForward( javaObject: __return ) : nil
    }

    open func map( _ _mapper: LongUnaryOperator? ) -> LongStream! {
        return map( mapper: _mapper )
    }

    /// public abstract java.util.stream.DoubleStream java.util.stream.LongStream.mapToDouble(java.util.function.LongToDoubleFunction)

    private static var mapToDouble_MethodID_70: jmethodID?

    open func mapToDouble( mapper: LongToDoubleFunction? ) -> DoubleStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: mapper, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "mapToDouble", methodSig: "(Ljava/util/function/LongToDoubleFunction;)Ljava/util/stream/DoubleStream;", methodCache: &LongStreamForward.mapToDouble_MethodID_70, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DoubleStreamForward( javaObject: __return ) : nil
    }

    open func mapToDouble( _ _mapper: LongToDoubleFunction? ) -> DoubleStream! {
        return mapToDouble( mapper: _mapper )
    }

    /// public abstract java.util.stream.IntStream java.util.stream.LongStream.mapToInt(java.util.function.LongToIntFunction)

    private static var mapToInt_MethodID_71: jmethodID?

    open func mapToInt( mapper: LongToIntFunction? ) -> IntStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: mapper, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "mapToInt", methodSig: "(Ljava/util/function/LongToIntFunction;)Ljava/util/stream/IntStream;", methodCache: &LongStreamForward.mapToInt_MethodID_71, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? IntStreamForward( javaObject: __return ) : nil
    }

    open func mapToInt( _ _mapper: LongToIntFunction? ) -> IntStream! {
        return mapToInt( mapper: _mapper )
    }

    /// public abstract java.util.stream.Stream java.util.stream.LongStream.mapToObj(java.util.function.LongFunction)

    private static var mapToObj_MethodID_72: jmethodID?

    open func mapToObj( mapper: LongFunction? ) -> Stream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: mapper, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "mapToObj", methodSig: "(Ljava/util/function/LongFunction;)Ljava/util/stream/Stream;", methodCache: &LongStreamForward.mapToObj_MethodID_72, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? StreamForward( javaObject: __return ) : nil
    }

    open func mapToObj( _ _mapper: LongFunction? ) -> Stream! {
        return mapToObj( mapper: _mapper )
    }

    /// public abstract java.util.OptionalLong java.util.stream.LongStream.max()

    private static var max_MethodID_73: jmethodID?

    open func max() -> OptionalLong! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "max", methodSig: "()Ljava/util/OptionalLong;", methodCache: &LongStreamForward.max_MethodID_73, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? OptionalLong( javaObject: __return ) : nil
    }


    /// public abstract java.util.OptionalLong java.util.stream.LongStream.min()

    private static var min_MethodID_74: jmethodID?

    open func min() -> OptionalLong! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "min", methodSig: "()Ljava/util/OptionalLong;", methodCache: &LongStreamForward.min_MethodID_74, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? OptionalLong( javaObject: __return ) : nil
    }


    /// public abstract boolean java.util.stream.LongStream.noneMatch(java.util.function.LongPredicate)

    private static var noneMatch_MethodID_75: jmethodID?

    open func noneMatch( predicate: LongPredicate? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: predicate, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "noneMatch", methodSig: "(Ljava/util/function/LongPredicate;)Z", methodCache: &LongStreamForward.noneMatch_MethodID_75, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func noneMatch( _ _predicate: LongPredicate? ) -> Bool {
        return noneMatch( predicate: _predicate )
    }

    /// public abstract java.util.stream.BaseStream java.util.stream.BaseStream.onClose(java.lang.Runnable)

    private static var onClose_MethodID_76: jmethodID?

    override open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: closeHandler, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "onClose", methodSig: "(Ljava/lang/Runnable;)Ljava/util/stream/BaseStream;", methodCache: &LongStreamForward.onClose_MethodID_76, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BaseStreamForward( javaObject: __return ) : nil
    }

    override open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
        return onClose( closeHandler: _closeHandler )
    }

    /// public default java.util.stream.BaseStream java.util.stream.LongStream.parallel()

    private static var parallel_MethodID_77: jmethodID?

    override open func parallel() -> BaseStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "parallel", methodSig: "()Ljava/util/stream/BaseStream;", methodCache: &LongStreamForward.parallel_MethodID_77, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BaseStreamForward( javaObject: __return ) : nil
    }


    /// public abstract java.util.stream.LongStream java.util.stream.LongStream.parallel()

    /// public abstract java.util.stream.LongStream java.util.stream.LongStream.peek(java.util.function.LongConsumer)

    private static var peek_MethodID_78: jmethodID?

    open func peek( action: LongConsumer? ) -> LongStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: action, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "peek", methodSig: "(Ljava/util/function/LongConsumer;)Ljava/util/stream/LongStream;", methodCache: &LongStreamForward.peek_MethodID_78, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LongStreamForward( javaObject: __return ) : nil
    }

    open func peek( _ _action: LongConsumer? ) -> LongStream! {
        return peek( action: _action )
    }

    /// public abstract long java.util.stream.LongStream.reduce(long,java.util.function.LongBinaryOperator)

    private static var reduce_MethodID_79: jmethodID?

    open func reduce( identity: Int64, op: LongBinaryOperator? ) -> Int64 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( j: identity )
        __args[1] = JNIType.toJava( value: op, locals: &__locals )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "reduce", methodSig: "(JLjava/util/function/LongBinaryOperator;)J", methodCache: &LongStreamForward.reduce_MethodID_79, args: &__args, locals: &__locals )
        return __return
    }

    open func reduce( _ _identity: Int64, _ _op: LongBinaryOperator? ) -> Int64 {
        return reduce( identity: _identity, op: _op )
    }

    /// public abstract java.util.OptionalLong java.util.stream.LongStream.reduce(java.util.function.LongBinaryOperator)

    private static var reduce_MethodID_80: jmethodID?

    open func reduce( op: LongBinaryOperator? ) -> OptionalLong! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: op, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "reduce", methodSig: "(Ljava/util/function/LongBinaryOperator;)Ljava/util/OptionalLong;", methodCache: &LongStreamForward.reduce_MethodID_80, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? OptionalLong( javaObject: __return ) : nil
    }

    open func reduce( _ _op: LongBinaryOperator? ) -> OptionalLong! {
        return reduce( op: _op )
    }

    /// public abstract java.util.stream.LongStream java.util.stream.LongStream.sequential()

    private static var sequential_MethodID_81: jmethodID?

    open func sequential() -> LongStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "sequential", methodSig: "()Ljava/util/stream/LongStream;", methodCache: &LongStreamForward.sequential_MethodID_81, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LongStreamForward( javaObject: __return ) : nil
    }


    /// public default java.util.stream.BaseStream java.util.stream.LongStream.sequential()

    /// public abstract java.util.stream.LongStream java.util.stream.LongStream.skip(long)

    private static var skip_MethodID_82: jmethodID?

    open func skip( n: Int64 ) -> LongStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( j: n )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "skip", methodSig: "(J)Ljava/util/stream/LongStream;", methodCache: &LongStreamForward.skip_MethodID_82, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LongStreamForward( javaObject: __return ) : nil
    }

    open func skip( _ _n: Int64 ) -> LongStream! {
        return skip( n: _n )
    }

    /// public abstract java.util.stream.LongStream java.util.stream.LongStream.sorted()

    private static var sorted_MethodID_83: jmethodID?

    open func sorted() -> LongStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "sorted", methodSig: "()Ljava/util/stream/LongStream;", methodCache: &LongStreamForward.sorted_MethodID_83, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LongStreamForward( javaObject: __return ) : nil
    }


    /// public default java.util.Spliterator java.util.stream.LongStream.spliterator()

    private static var spliterator_MethodID_84: jmethodID?

    override open func spliterator() -> Spliterator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "spliterator", methodSig: "()Ljava/util/Spliterator;", methodCache: &LongStreamForward.spliterator_MethodID_84, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? SpliteratorForward( javaObject: __return ) : nil
    }


    /// public abstract java.util.Spliterator$OfLong java.util.stream.LongStream.spliterator()

    // Skipping method: false false true false false 

    /// public abstract long java.util.stream.LongStream.sum()

    private static var sum_MethodID_85: jmethodID?

    open func sum() -> Int64 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "sum", methodSig: "()J", methodCache: &LongStreamForward.sum_MethodID_85, args: &__args, locals: &__locals )
        return __return
    }


    /// public abstract java.util.LongSummaryStatistics java.util.stream.LongStream.summaryStatistics()

    private static var summaryStatistics_MethodID_86: jmethodID?

    open func summaryStatistics() -> LongSummaryStatistics! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "summaryStatistics", methodSig: "()Ljava/util/LongSummaryStatistics;", methodCache: &LongStreamForward.summaryStatistics_MethodID_86, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LongSummaryStatistics( javaObject: __return ) : nil
    }


    /// public abstract long[] java.util.stream.LongStream.toArray()

    private static var toArray_MethodID_87: jmethodID?

    open func toArray() -> [Int64]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "toArray", methodSig: "()[J", methodCache: &LongStreamForward.toArray_MethodID_87, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [Int64].self, from: __return )
    }


    /// public abstract java.util.stream.BaseStream java.util.stream.BaseStream.unordered()

    private static var unordered_MethodID_88: jmethodID?

    override open func unordered() -> BaseStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "unordered", methodSig: "()Ljava/util/stream/BaseStream;", methodCache: &LongStreamForward.unordered_MethodID_88, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BaseStreamForward( javaObject: __return ) : nil
    }


}

