
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.concurrent.RecursiveTask ///

open class RecursiveTask: ForkJoinTask {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var RecursiveTaskJNIClass: jclass?

    /// private static final long java.util.concurrent.RecursiveTask.serialVersionUID

    /// java.lang.Object java.util.concurrent.RecursiveTask.result

    // Skipping field: true false false false false false 

    /// static final int java.util.concurrent.ForkJoinTask.CANCELLED

    // Skipping field: true false false false false false 

    /// static final int java.util.concurrent.ForkJoinTask.DONE_MASK

    // Skipping field: true false false false false false 

    /// static final int java.util.concurrent.ForkJoinTask.EXCEPTIONAL

    // Skipping field: true false false false false false 

    /// private static final int java.util.concurrent.ForkJoinTask.EXCEPTION_MAP_CAPACITY

    /// static final int java.util.concurrent.ForkJoinTask.NORMAL

    // Skipping field: true false false false false false 

    /// static final int java.util.concurrent.ForkJoinTask.SIGNAL

    // Skipping field: true false false false false false 

    /// static final int java.util.concurrent.ForkJoinTask.SMASK

    // Skipping field: true false false false false false 

    /// private static final long java.util.concurrent.ForkJoinTask.STATUS

    /// private static final sun.misc.Unsafe java.util.concurrent.ForkJoinTask.U

    /// private static final java.util.concurrent.ForkJoinTask$ExceptionNode[] java.util.concurrent.ForkJoinTask.exceptionTable

    /// private static final java.util.concurrent.locks.ReentrantLock java.util.concurrent.ForkJoinTask.exceptionTableLock

    /// private static final java.lang.ref.ReferenceQueue java.util.concurrent.ForkJoinTask.exceptionTableRefQueue

    /// private static final long java.util.concurrent.ForkJoinTask.serialVersionUID

    /// volatile int java.util.concurrent.ForkJoinTask.status

    // Skipping field: true false false false false false 

    /// public java.util.concurrent.RecursiveTask()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/RecursiveTask", classCache: &RecursiveTask.RecursiveTaskJNIClass, methodSig: "()V", methodCache: &RecursiveTask.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// protected abstract java.lang.Object java.util.concurrent.RecursiveTask.compute()

    private static var compute_MethodID_2: jmethodID?

    open func compute() -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "compute", methodSig: "()Ljava/lang/Object;", methodCache: &RecursiveTask.compute_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// protected final boolean java.util.concurrent.RecursiveTask.exec()

    private static var exec_MethodID_3: jmethodID?

    override open func exec() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "exec", methodSig: "()Z", methodCache: &RecursiveTask.exec_MethodID_3, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public final java.lang.Object java.util.concurrent.RecursiveTask.getRawResult()

    // Skipping method: false true false false false 

    /// protected final void java.util.concurrent.RecursiveTask.setRawResult(java.lang.Object)

    private static var setRawResult_MethodID_4: jmethodID?

    override open func setRawResult( value: java_swift.JavaObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: value, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setRawResult", methodSig: "(Ljava/lang/Object;)V", methodCache: &RecursiveTask.setRawResult_MethodID_4, args: &__args, locals: &__locals )
    }

    override open func setRawResult( _ _value: java_swift.JavaObject? ) {
        setRawResult( value: _value )
    }

}

