
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.util.concurrent.BlockingQueue ///

public protocol BlockingQueue: Queue {

    /// public abstract boolean java.util.concurrent.BlockingQueue.add(java.lang.Object)

    func add( e: java_swift.JavaObject? ) -> Bool

    /// public abstract boolean java.util.concurrent.BlockingQueue.contains(java.lang.Object)

    func contains( o: java_swift.JavaObject? ) -> Bool

    /// public abstract int java.util.concurrent.BlockingQueue.drainTo(java.util.Collection)

    func drainTo( c: Collection? ) -> Int

    /// public abstract int java.util.concurrent.BlockingQueue.drainTo(java.util.Collection,int)

    func drainTo( c: Collection?, maxElements: Int ) -> Int

    /// public abstract boolean java.util.concurrent.BlockingQueue.offer(java.lang.Object)

    func offer( e: java_swift.JavaObject? ) -> Bool

    /// public abstract boolean java.util.concurrent.BlockingQueue.offer(java.lang.Object,long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException

    func offer( e: java_swift.JavaObject?, timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool

    /// public abstract java.lang.Object java.util.concurrent.BlockingQueue.poll(long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException

    func poll( timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> java_swift.JavaObject!

    /// public abstract void java.util.concurrent.BlockingQueue.put(java.lang.Object) throws java.lang.InterruptedException

    func put( e: java_swift.JavaObject? ) throws /* java.lang.InterruptedException */

    /// public abstract int java.util.concurrent.BlockingQueue.remainingCapacity()

    func remainingCapacity() -> Int

    /// public abstract boolean java.util.concurrent.BlockingQueue.remove(java.lang.Object)

    func remove( o: java_swift.JavaObject? ) -> Bool

    /// public abstract java.lang.Object java.util.concurrent.BlockingQueue.take() throws java.lang.InterruptedException

    func take() throws /* java.lang.InterruptedException */ -> java_swift.JavaObject!

}


open class BlockingQueueForward: QueueForward, BlockingQueue {

    private static var BlockingQueueJNIClass: jclass?

    /// public abstract boolean java.util.concurrent.BlockingQueue.add(java.lang.Object)

    private static var add_MethodID_12: jmethodID?

    override open func add( e: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "add", methodSig: "(Ljava/lang/Object;)Z", methodCache: &BlockingQueueForward.add_MethodID_12, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func add( _ _e: java_swift.JavaObject? ) -> Bool {
        return add( e: _e )
    }

    /// public abstract boolean java.util.Collection.addAll(java.util.Collection)

    private static var addAll_MethodID_13: jmethodID?

    override open func addAll( c: Collection? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "addAll", methodSig: "(Ljava/util/Collection;)Z", methodCache: &BlockingQueueForward.addAll_MethodID_13, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func addAll( _ _c: Collection? ) -> Bool {
        return addAll( c: _c )
    }

    /// public abstract void java.util.Collection.clear()

    private static var clear_MethodID_14: jmethodID?

    override open func clear() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clear", methodSig: "()V", methodCache: &BlockingQueueForward.clear_MethodID_14, args: &__args, locals: &__locals )
    }


    /// public abstract boolean java.util.concurrent.BlockingQueue.contains(java.lang.Object)

    private static var contains_MethodID_15: jmethodID?

    override open func contains( o: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: o, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "contains", methodSig: "(Ljava/lang/Object;)Z", methodCache: &BlockingQueueForward.contains_MethodID_15, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func contains( _ _o: java_swift.JavaObject? ) -> Bool {
        return contains( o: _o )
    }

    /// public abstract boolean java.util.Collection.containsAll(java.util.Collection)

    private static var containsAll_MethodID_16: jmethodID?

    override open func containsAll( c: Collection? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "containsAll", methodSig: "(Ljava/util/Collection;)Z", methodCache: &BlockingQueueForward.containsAll_MethodID_16, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func containsAll( _ _c: Collection? ) -> Bool {
        return containsAll( c: _c )
    }

    /// public abstract int java.util.concurrent.BlockingQueue.drainTo(java.util.Collection)

    private static var drainTo_MethodID_17: jmethodID?

    open func drainTo( c: Collection? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "drainTo", methodSig: "(Ljava/util/Collection;)I", methodCache: &BlockingQueueForward.drainTo_MethodID_17, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func drainTo( _ _c: Collection? ) -> Int {
        return drainTo( c: _c )
    }

    /// public abstract int java.util.concurrent.BlockingQueue.drainTo(java.util.Collection,int)

    private static var drainTo_MethodID_18: jmethodID?

    open func drainTo( c: Collection?, maxElements: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        __args[1] = jvalue( i: jint(maxElements) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "drainTo", methodSig: "(Ljava/util/Collection;I)I", methodCache: &BlockingQueueForward.drainTo_MethodID_18, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func drainTo( _ _c: Collection?, _ _maxElements: Int ) -> Int {
        return drainTo( c: _c, maxElements: _maxElements )
    }

    /// public abstract java.lang.Object java.util.Queue.element()

    private static var element_MethodID_19: jmethodID?

    override open func element() -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "element", methodSig: "()Ljava/lang/Object;", methodCache: &BlockingQueueForward.element_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public abstract boolean java.util.Collection.equals(java.lang.Object)

    private static var equals_MethodID_20: jmethodID?

    override open func equals( o: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: o, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &BlockingQueueForward.equals_MethodID_20, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
        return equals( o: _o )
    }

    /// public default void java.lang.Iterable.forEach(java.util.function.Consumer)

    private static var forEach_MethodID_21: jmethodID?

    override open func forEach( action: Consumer? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: action, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "forEach", methodSig: "(Ljava/util/function/Consumer;)V", methodCache: &BlockingQueueForward.forEach_MethodID_21, args: &__args, locals: &__locals )
    }

    override open func forEach( _ _action: Consumer? ) {
        forEach( action: _action )
    }

    /// public abstract int java.util.Collection.hashCode()

    private static var hashCode_MethodID_22: jmethodID?

    override open func hashCode() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "hashCode", methodSig: "()I", methodCache: &BlockingQueueForward.hashCode_MethodID_22, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public abstract boolean java.util.Collection.isEmpty()

    private static var isEmpty_MethodID_23: jmethodID?

    override open func isEmpty() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isEmpty", methodSig: "()Z", methodCache: &BlockingQueueForward.isEmpty_MethodID_23, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public abstract java.util.Iterator java.util.Collection.iterator()

    private static var iterator_MethodID_24: jmethodID?

    override open func iterator() -> Iterator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "iterator", methodSig: "()Ljava/util/Iterator;", methodCache: &BlockingQueueForward.iterator_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? IteratorForward( javaObject: __return ) : nil
    }


    /// public abstract boolean java.util.concurrent.BlockingQueue.offer(java.lang.Object)

    private static var offer_MethodID_25: jmethodID?

    override open func offer( e: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "offer", methodSig: "(Ljava/lang/Object;)Z", methodCache: &BlockingQueueForward.offer_MethodID_25, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func offer( _ _e: java_swift.JavaObject? ) -> Bool {
        return offer( e: _e )
    }

    /// public abstract boolean java.util.concurrent.BlockingQueue.offer(java.lang.Object,long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException

    private static var offer_MethodID_26: jmethodID?

    open func offer( e: java_swift.JavaObject?, timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        __args[1] = jvalue( j: timeout )
        __args[2] = JNIType.toJava( value: unit, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "offer", methodSig: "(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", methodCache: &BlockingQueueForward.offer_MethodID_26, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != jboolean(JNI_FALSE)
    }

    open func offer( _ _e: java_swift.JavaObject?, _ _timeout: Int64, _ _unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> Bool {
        return try offer( e: _e, timeout: _timeout, unit: _unit )
    }

    /// public default java.util.stream.Stream java.util.Collection.parallelStream()

    private static var parallelStream_MethodID_27: jmethodID?

    override open func parallelStream() -> Stream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "parallelStream", methodSig: "()Ljava/util/stream/Stream;", methodCache: &BlockingQueueForward.parallelStream_MethodID_27, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? StreamForward( javaObject: __return ) : nil
    }


    /// public abstract java.lang.Object java.util.Queue.peek()

    private static var peek_MethodID_28: jmethodID?

    override open func peek() -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "peek", methodSig: "()Ljava/lang/Object;", methodCache: &BlockingQueueForward.peek_MethodID_28, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public abstract java.lang.Object java.util.concurrent.BlockingQueue.poll(long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException

    private static var poll_MethodID_29: jmethodID?

    open func poll( timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( j: timeout )
        __args[1] = JNIType.toJava( value: unit, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "poll", methodSig: "(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", methodCache: &BlockingQueueForward.poll_MethodID_29, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func poll( _ _timeout: Int64, _ _unit: TimeUnit? ) throws /* java.lang.InterruptedException */ -> java_swift.JavaObject! {
        return try poll( timeout: _timeout, unit: _unit )
    }

    /// public abstract java.lang.Object java.util.Queue.poll()

    private static var poll_MethodID_30: jmethodID?

    override open func poll() -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "poll", methodSig: "()Ljava/lang/Object;", methodCache: &BlockingQueueForward.poll_MethodID_30, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public abstract void java.util.concurrent.BlockingQueue.put(java.lang.Object) throws java.lang.InterruptedException

    private static var put_MethodID_31: jmethodID?

    open func put( e: java_swift.JavaObject? ) throws /* java.lang.InterruptedException */ {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "put", methodSig: "(Ljava/lang/Object;)V", methodCache: &BlockingQueueForward.put_MethodID_31, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw java_lang.InterruptedException( javaObject: throwable )
        }
    }

    open func put( _ _e: java_swift.JavaObject? ) throws /* java.lang.InterruptedException */ {
        try put( e: _e )
    }

    /// public abstract int java.util.concurrent.BlockingQueue.remainingCapacity()

    private static var remainingCapacity_MethodID_32: jmethodID?

    open func remainingCapacity() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "remainingCapacity", methodSig: "()I", methodCache: &BlockingQueueForward.remainingCapacity_MethodID_32, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public abstract boolean java.util.concurrent.BlockingQueue.remove(java.lang.Object)

    private static var remove_MethodID_33: jmethodID?

    override open func remove( o: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: o, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "remove", methodSig: "(Ljava/lang/Object;)Z", methodCache: &BlockingQueueForward.remove_MethodID_33, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func remove( _ _o: java_swift.JavaObject? ) -> Bool {
        return remove( o: _o )
    }

    /// public abstract java.lang.Object java.util.Queue.remove()

    private static var remove_MethodID_34: jmethodID?

    override open func remove() -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "remove", methodSig: "()Ljava/lang/Object;", methodCache: &BlockingQueueForward.remove_MethodID_34, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public abstract boolean java.util.Collection.removeAll(java.util.Collection)

    private static var removeAll_MethodID_35: jmethodID?

    override open func removeAll( c: Collection? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "removeAll", methodSig: "(Ljava/util/Collection;)Z", methodCache: &BlockingQueueForward.removeAll_MethodID_35, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func removeAll( _ _c: Collection? ) -> Bool {
        return removeAll( c: _c )
    }

    /// public default boolean java.util.Collection.removeIf(java.util.function.Predicate)

    private static var removeIf_MethodID_36: jmethodID?

    override open func removeIf( filter: Predicate? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: filter, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "removeIf", methodSig: "(Ljava/util/function/Predicate;)Z", methodCache: &BlockingQueueForward.removeIf_MethodID_36, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func removeIf( _ _filter: Predicate? ) -> Bool {
        return removeIf( filter: _filter )
    }

    /// public abstract boolean java.util.Collection.retainAll(java.util.Collection)

    private static var retainAll_MethodID_37: jmethodID?

    override open func retainAll( c: Collection? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "retainAll", methodSig: "(Ljava/util/Collection;)Z", methodCache: &BlockingQueueForward.retainAll_MethodID_37, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func retainAll( _ _c: Collection? ) -> Bool {
        return retainAll( c: _c )
    }

    /// public abstract int java.util.Collection.size()

    private static var size_MethodID_38: jmethodID?

    override open func size() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "size", methodSig: "()I", methodCache: &BlockingQueueForward.size_MethodID_38, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public default java.util.Spliterator java.util.Collection.spliterator()

    private static var spliterator_MethodID_39: jmethodID?

    override open func spliterator() -> Spliterator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "spliterator", methodSig: "()Ljava/util/Spliterator;", methodCache: &BlockingQueueForward.spliterator_MethodID_39, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? SpliteratorForward( javaObject: __return ) : nil
    }


    /// public default java.util.stream.Stream java.util.Collection.stream()

    private static var stream_MethodID_40: jmethodID?

    override open func stream() -> Stream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "stream", methodSig: "()Ljava/util/stream/Stream;", methodCache: &BlockingQueueForward.stream_MethodID_40, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? StreamForward( javaObject: __return ) : nil
    }


    /// public abstract java.lang.Object java.util.concurrent.BlockingQueue.take() throws java.lang.InterruptedException

    private static var take_MethodID_41: jmethodID?

    open func take() throws /* java.lang.InterruptedException */ -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "take", methodSig: "()Ljava/lang/Object;", methodCache: &BlockingQueueForward.take_MethodID_41, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public abstract java.lang.Object[] java.util.Collection.toArray(java.lang.Object[])

    private static var toArray_MethodID_42: jmethodID?

    override open func toArray( a: [JavaObject]? ) -> [JavaObject]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: a, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "toArray", methodSig: "([Ljava/lang/Object;)[Ljava/lang/Object;", methodCache: &BlockingQueueForward.toArray_MethodID_42, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [JavaObject].self, from: __return )
    }

    override open func toArray( _ _a: [JavaObject]? ) -> [JavaObject]! {
        return toArray( a: _a )
    }

    /// public abstract java.lang.Object[] java.util.Collection.toArray()

    private static var toArray_MethodID_43: jmethodID?

    override open func toArray() -> [JavaObject]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "toArray", methodSig: "()[Ljava/lang/Object;", methodCache: &BlockingQueueForward.toArray_MethodID_43, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [JavaObject].self, from: __return )
    }


}

