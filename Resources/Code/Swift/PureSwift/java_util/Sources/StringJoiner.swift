
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.StringJoiner ///

open class StringJoiner: java_swift.JavaObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var StringJoinerJNIClass: jclass?

    /// private final java.lang.String java.util.StringJoiner.delimiter

    /// private java.lang.String java.util.StringJoiner.emptyValue

    /// private final java.lang.String java.util.StringJoiner.prefix

    /// private final java.lang.String java.util.StringJoiner.suffix

    /// private java.lang.StringBuilder java.util.StringJoiner.value

    /// public java.util.StringJoiner(java.lang.CharSequence)

    private static var new_MethodID_1: jmethodID?

    public convenience init( delimiter: java_lang.CharSequence? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: delimiter, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/StringJoiner", classCache: &StringJoiner.StringJoinerJNIClass, methodSig: "(Ljava/lang/CharSequence;)V", methodCache: &StringJoiner.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _delimiter: java_lang.CharSequence? ) {
        self.init( delimiter: _delimiter )
    }

    /// public java.util.StringJoiner(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)

    private static var new_MethodID_2: jmethodID?

    public convenience init( delimiter: java_lang.CharSequence?, prefix: java_lang.CharSequence?, suffix: java_lang.CharSequence? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: delimiter, locals: &__locals )
        __args[1] = JNIType.toJava( value: prefix, locals: &__locals )
        __args[2] = JNIType.toJava( value: suffix, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/StringJoiner", classCache: &StringJoiner.StringJoinerJNIClass, methodSig: "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;)V", methodCache: &StringJoiner.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _delimiter: java_lang.CharSequence?, _ _prefix: java_lang.CharSequence?, _ _suffix: java_lang.CharSequence? ) {
        self.init( delimiter: _delimiter, prefix: _prefix, suffix: _suffix )
    }

    /// public java.util.StringJoiner java.util.StringJoiner.add(java.lang.CharSequence)

    private static var add_MethodID_3: jmethodID?

    open func add( newElement: java_lang.CharSequence? ) -> StringJoiner! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: newElement, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "add", methodSig: "(Ljava/lang/CharSequence;)Ljava/util/StringJoiner;", methodCache: &StringJoiner.add_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? StringJoiner( javaObject: __return ) : nil
    }

    open func add( _ _newElement: java_lang.CharSequence? ) -> StringJoiner! {
        return add( newElement: _newElement )
    }

    /// public int java.util.StringJoiner.length()

    private static var length_MethodID_4: jmethodID?

    open func length() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "length", methodSig: "()I", methodCache: &StringJoiner.length_MethodID_4, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public java.util.StringJoiner java.util.StringJoiner.merge(java.util.StringJoiner)

    private static var merge_MethodID_5: jmethodID?

    open func merge( other: StringJoiner? ) -> StringJoiner! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: other, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "merge", methodSig: "(Ljava/util/StringJoiner;)Ljava/util/StringJoiner;", methodCache: &StringJoiner.merge_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? StringJoiner( javaObject: __return ) : nil
    }

    open func merge( _ _other: StringJoiner? ) -> StringJoiner! {
        return merge( other: _other )
    }

    /// private java.lang.StringBuilder java.util.StringJoiner.prepareBuilder()

    /// public java.util.StringJoiner java.util.StringJoiner.setEmptyValue(java.lang.CharSequence)

    private static var setEmptyValue_MethodID_6: jmethodID?

    open func setEmptyValue( emptyValue: java_lang.CharSequence? ) -> StringJoiner! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: emptyValue, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "setEmptyValue", methodSig: "(Ljava/lang/CharSequence;)Ljava/util/StringJoiner;", methodCache: &StringJoiner.setEmptyValue_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? StringJoiner( javaObject: __return ) : nil
    }

    open func setEmptyValue( _ _emptyValue: java_lang.CharSequence? ) -> StringJoiner! {
        return setEmptyValue( emptyValue: _emptyValue )
    }

    /// public java.lang.String java.util.StringJoiner.toString()

    // Skipping method: false true false false false 

}

