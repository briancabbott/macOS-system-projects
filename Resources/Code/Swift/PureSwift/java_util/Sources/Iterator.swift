
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.util.Iterator ///

public protocol Iterator: JavaProtocol {

    /// public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer)

    func forEachRemaining( action: Consumer? )

    /// public abstract boolean java.util.Iterator.hasNext()

    func hasNext() -> Bool

    /// public abstract java.lang.Object java.util.Iterator.next()

    func next() -> java_swift.JavaObject!

    /// public default void java.util.Iterator.remove()

    func remove()

}


open class IteratorForward: JNIObjectForward, Iterator {

    private static var IteratorJNIClass: jclass?

    /// public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer)

    private static var forEachRemaining_MethodID_5: jmethodID?

    open func forEachRemaining( action: Consumer? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: action, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "forEachRemaining", methodSig: "(Ljava/util/function/Consumer;)V", methodCache: &IteratorForward.forEachRemaining_MethodID_5, args: &__args, locals: &__locals )
    }

    open func forEachRemaining( _ _action: Consumer? ) {
        forEachRemaining( action: _action )
    }

    /// public abstract boolean java.util.Iterator.hasNext()

    private static var hasNext_MethodID_6: jmethodID?

    open func hasNext() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasNext", methodSig: "()Z", methodCache: &IteratorForward.hasNext_MethodID_6, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public abstract java.lang.Object java.util.Iterator.next()

    private static var next_MethodID_7: jmethodID?

    open func next() -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "next", methodSig: "()Ljava/lang/Object;", methodCache: &IteratorForward.next_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public default void java.util.Iterator.remove()

    private static var remove_MethodID_8: jmethodID?

    open func remove() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "remove", methodSig: "()V", methodCache: &IteratorForward.remove_MethodID_8, args: &__args, locals: &__locals )
    }


}

