
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.util.stream.DoubleStream ///

public protocol DoubleStream: BaseStream {

    /// public static java.util.stream.DoubleStream$Builder java.util.stream.DoubleStream.builder()

    // Skipping method: false false true false false 

    /// public static java.util.stream.DoubleStream java.util.stream.DoubleStream.concat(java.util.stream.DoubleStream,java.util.stream.DoubleStream)

    //    class func concat( a: DoubleStream?, b: DoubleStream? ) -> DoubleStream!

    /// public static java.util.stream.DoubleStream java.util.stream.DoubleStream.empty()

    //    class func empty() -> DoubleStream!

    /// public static java.util.stream.DoubleStream java.util.stream.DoubleStream.generate(java.util.function.DoubleSupplier)

    //    class func generate( s: DoubleSupplier? ) -> DoubleStream!

    /// public static java.util.stream.DoubleStream java.util.stream.DoubleStream.iterate(double,java.util.function.DoubleUnaryOperator)

    //    class func iterate( seed: Double, f: DoubleUnaryOperator? ) -> DoubleStream!

    /// public static java.util.stream.DoubleStream java.util.stream.DoubleStream.of(double)

    //    class func of( t: Double ) -> DoubleStream!

    /// public static java.util.stream.DoubleStream java.util.stream.DoubleStream.of(double[])

    //    class func of( values: [Double]? ) -> DoubleStream!

    /// public abstract boolean java.util.stream.DoubleStream.allMatch(java.util.function.DoublePredicate)

    func allMatch( predicate: DoublePredicate? ) -> Bool

    /// public abstract boolean java.util.stream.DoubleStream.anyMatch(java.util.function.DoublePredicate)

    func anyMatch( predicate: DoublePredicate? ) -> Bool

    /// public abstract java.util.OptionalDouble java.util.stream.DoubleStream.average()

    func average() -> OptionalDouble!

    /// public abstract java.util.stream.Stream java.util.stream.DoubleStream.boxed()

    func boxed() -> Stream!

    /// public abstract java.lang.Object java.util.stream.DoubleStream.collect(java.util.function.Supplier,java.util.function.ObjDoubleConsumer,java.util.function.BiConsumer)

    func collect( supplier: Supplier?, accumulator: ObjDoubleConsumer?, combiner: BiConsumer? ) -> java_swift.JavaObject!

    /// public abstract long java.util.stream.DoubleStream.count()

    func count() -> Int64

    /// public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.distinct()

    func distinct() -> DoubleStream!

    /// public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.filter(java.util.function.DoublePredicate)

    func filter( predicate: DoublePredicate? ) -> DoubleStream!

    /// public abstract java.util.OptionalDouble java.util.stream.DoubleStream.findAny()

    func findAny() -> OptionalDouble!

    /// public abstract java.util.OptionalDouble java.util.stream.DoubleStream.findFirst()

    func findFirst() -> OptionalDouble!

    /// public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.flatMap(java.util.function.DoubleFunction)

    func flatMap( mapper: DoubleFunction? ) -> DoubleStream!

    /// public abstract void java.util.stream.DoubleStream.forEach(java.util.function.DoubleConsumer)

    func forEach( action: DoubleConsumer? )

    /// public abstract void java.util.stream.DoubleStream.forEachOrdered(java.util.function.DoubleConsumer)

    func forEachOrdered( action: DoubleConsumer? )

    /// public default java.util.Iterator java.util.stream.DoubleStream.iterator()

    func iterator() -> Iterator!

    /// public abstract java.util.PrimitiveIterator$OfDouble java.util.stream.DoubleStream.iterator()

    // Skipping method: false false true false false 

    /// public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.limit(long)

    func limit( maxSize: Int64 ) -> DoubleStream!

    /// public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.map(java.util.function.DoubleUnaryOperator)

    func map( mapper: DoubleUnaryOperator? ) -> DoubleStream!

    /// public abstract java.util.stream.IntStream java.util.stream.DoubleStream.mapToInt(java.util.function.DoubleToIntFunction)

    func mapToInt( mapper: DoubleToIntFunction? ) -> IntStream!

    /// public abstract java.util.stream.LongStream java.util.stream.DoubleStream.mapToLong(java.util.function.DoubleToLongFunction)

    func mapToLong( mapper: DoubleToLongFunction? ) -> LongStream!

    /// public abstract java.util.stream.Stream java.util.stream.DoubleStream.mapToObj(java.util.function.DoubleFunction)

    func mapToObj( mapper: DoubleFunction? ) -> Stream!

    /// public abstract java.util.OptionalDouble java.util.stream.DoubleStream.max()

    func max() -> OptionalDouble!

    /// public abstract java.util.OptionalDouble java.util.stream.DoubleStream.min()

    func min() -> OptionalDouble!

    /// public abstract boolean java.util.stream.DoubleStream.noneMatch(java.util.function.DoublePredicate)

    func noneMatch( predicate: DoublePredicate? ) -> Bool

    /// public default java.util.stream.BaseStream java.util.stream.DoubleStream.parallel()

    func parallel() -> BaseStream!

    /// public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.parallel()

    /// public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.peek(java.util.function.DoubleConsumer)

    func peek( action: DoubleConsumer? ) -> DoubleStream!

    /// public abstract double java.util.stream.DoubleStream.reduce(double,java.util.function.DoubleBinaryOperator)

    func reduce( identity: Double, op: DoubleBinaryOperator? ) -> Double

    /// public abstract java.util.OptionalDouble java.util.stream.DoubleStream.reduce(java.util.function.DoubleBinaryOperator)

    func reduce( op: DoubleBinaryOperator? ) -> OptionalDouble!

    /// public default java.util.stream.BaseStream java.util.stream.DoubleStream.sequential()

    func sequential() -> BaseStream!

    /// public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.sequential()

    /// public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.skip(long)

    func skip( n: Int64 ) -> DoubleStream!

    /// public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.sorted()

    func sorted() -> DoubleStream!

    /// public default java.util.Spliterator java.util.stream.DoubleStream.spliterator()

    func spliterator() -> Spliterator!

    /// public abstract java.util.Spliterator$OfDouble java.util.stream.DoubleStream.spliterator()

    // Skipping method: false false true false false 

    /// public abstract double java.util.stream.DoubleStream.sum()

    func sum() -> Double

    /// public abstract java.util.DoubleSummaryStatistics java.util.stream.DoubleStream.summaryStatistics()

    func summaryStatistics() -> DoubleSummaryStatistics!

    /// public abstract double[] java.util.stream.DoubleStream.toArray()

    func toArray() -> [Double]!

}


open class DoubleStreamForward: BaseStreamForward, DoubleStream {

    private static var DoubleStreamJNIClass: jclass?

    /// public static java.util.stream.DoubleStream$Builder java.util.stream.DoubleStream.builder()

    // Skipping method: false false true false false 

    /// public static java.util.stream.DoubleStream java.util.stream.DoubleStream.concat(java.util.stream.DoubleStream,java.util.stream.DoubleStream)

    private static var concat_MethodID_40: jmethodID?

    open class func concat( a: DoubleStream?, b: DoubleStream? ) -> DoubleStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: a, locals: &__locals )
        __args[1] = JNIType.toJava( value: b, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/stream/DoubleStream", classCache: &DoubleStreamJNIClass, methodName: "concat", methodSig: "(Ljava/util/stream/DoubleStream;Ljava/util/stream/DoubleStream;)Ljava/util/stream/DoubleStream;", methodCache: &concat_MethodID_40, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DoubleStreamForward( javaObject: __return ) : nil
    }

    open class func concat( _ _a: DoubleStream?, _ _b: DoubleStream? ) -> DoubleStream! {
        return concat( a: _a, b: _b )
    }

    /// public static java.util.stream.DoubleStream java.util.stream.DoubleStream.empty()

    private static var empty_MethodID_41: jmethodID?

    open class func empty() -> DoubleStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/stream/DoubleStream", classCache: &DoubleStreamJNIClass, methodName: "empty", methodSig: "()Ljava/util/stream/DoubleStream;", methodCache: &empty_MethodID_41, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DoubleStreamForward( javaObject: __return ) : nil
    }


    /// public static java.util.stream.DoubleStream java.util.stream.DoubleStream.generate(java.util.function.DoubleSupplier)

    private static var generate_MethodID_42: jmethodID?

    open class func generate( s: DoubleSupplier? ) -> DoubleStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/stream/DoubleStream", classCache: &DoubleStreamJNIClass, methodName: "generate", methodSig: "(Ljava/util/function/DoubleSupplier;)Ljava/util/stream/DoubleStream;", methodCache: &generate_MethodID_42, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DoubleStreamForward( javaObject: __return ) : nil
    }

    open class func generate( _ _s: DoubleSupplier? ) -> DoubleStream! {
        return generate( s: _s )
    }

    /// public static java.util.stream.DoubleStream java.util.stream.DoubleStream.iterate(double,java.util.function.DoubleUnaryOperator)

    private static var iterate_MethodID_43: jmethodID?

    open class func iterate( seed: Double, f: DoubleUnaryOperator? ) -> DoubleStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( d: seed )
        __args[1] = JNIType.toJava( value: f, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/stream/DoubleStream", classCache: &DoubleStreamJNIClass, methodName: "iterate", methodSig: "(DLjava/util/function/DoubleUnaryOperator;)Ljava/util/stream/DoubleStream;", methodCache: &iterate_MethodID_43, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DoubleStreamForward( javaObject: __return ) : nil
    }

    open class func iterate( _ _seed: Double, _ _f: DoubleUnaryOperator? ) -> DoubleStream! {
        return iterate( seed: _seed, f: _f )
    }

    /// public static java.util.stream.DoubleStream java.util.stream.DoubleStream.of(double)

    private static var of_MethodID_44: jmethodID?

    open class func of( t: Double ) -> DoubleStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( d: t )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/stream/DoubleStream", classCache: &DoubleStreamJNIClass, methodName: "of", methodSig: "(D)Ljava/util/stream/DoubleStream;", methodCache: &of_MethodID_44, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DoubleStreamForward( javaObject: __return ) : nil
    }

    open class func of( _ _t: Double ) -> DoubleStream! {
        return of( t: _t )
    }

    /// public static java.util.stream.DoubleStream java.util.stream.DoubleStream.of(double[])

    private static var of_MethodID_45: jmethodID?

    open class func of( values: [Double]? ) -> DoubleStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: values, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/stream/DoubleStream", classCache: &DoubleStreamJNIClass, methodName: "of", methodSig: "([D)Ljava/util/stream/DoubleStream;", methodCache: &of_MethodID_45, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DoubleStreamForward( javaObject: __return ) : nil
    }

    open class func of( _ _values: [Double]? ) -> DoubleStream! {
        return of( values: _values )
    }

    /// public abstract boolean java.util.stream.DoubleStream.allMatch(java.util.function.DoublePredicate)

    private static var allMatch_MethodID_46: jmethodID?

    open func allMatch( predicate: DoublePredicate? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: predicate, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "allMatch", methodSig: "(Ljava/util/function/DoublePredicate;)Z", methodCache: &DoubleStreamForward.allMatch_MethodID_46, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func allMatch( _ _predicate: DoublePredicate? ) -> Bool {
        return allMatch( predicate: _predicate )
    }

    /// public abstract boolean java.util.stream.DoubleStream.anyMatch(java.util.function.DoublePredicate)

    private static var anyMatch_MethodID_47: jmethodID?

    open func anyMatch( predicate: DoublePredicate? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: predicate, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "anyMatch", methodSig: "(Ljava/util/function/DoublePredicate;)Z", methodCache: &DoubleStreamForward.anyMatch_MethodID_47, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func anyMatch( _ _predicate: DoublePredicate? ) -> Bool {
        return anyMatch( predicate: _predicate )
    }

    /// public abstract java.util.OptionalDouble java.util.stream.DoubleStream.average()

    private static var average_MethodID_48: jmethodID?

    open func average() -> OptionalDouble! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "average", methodSig: "()Ljava/util/OptionalDouble;", methodCache: &DoubleStreamForward.average_MethodID_48, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? OptionalDouble( javaObject: __return ) : nil
    }


    /// public abstract java.util.stream.Stream java.util.stream.DoubleStream.boxed()

    private static var boxed_MethodID_49: jmethodID?

    open func boxed() -> Stream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "boxed", methodSig: "()Ljava/util/stream/Stream;", methodCache: &DoubleStreamForward.boxed_MethodID_49, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? StreamForward( javaObject: __return ) : nil
    }


    /// public abstract void java.util.stream.BaseStream.close()

    private static var close_MethodID_50: jmethodID?

    override open func close() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "close", methodSig: "()V", methodCache: &DoubleStreamForward.close_MethodID_50, args: &__args, locals: &__locals )
    }


    /// public abstract java.lang.Object java.util.stream.DoubleStream.collect(java.util.function.Supplier,java.util.function.ObjDoubleConsumer,java.util.function.BiConsumer)

    private static var collect_MethodID_51: jmethodID?

    open func collect( supplier: Supplier?, accumulator: ObjDoubleConsumer?, combiner: BiConsumer? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: supplier, locals: &__locals )
        __args[1] = JNIType.toJava( value: accumulator, locals: &__locals )
        __args[2] = JNIType.toJava( value: combiner, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "collect", methodSig: "(Ljava/util/function/Supplier;Ljava/util/function/ObjDoubleConsumer;Ljava/util/function/BiConsumer;)Ljava/lang/Object;", methodCache: &DoubleStreamForward.collect_MethodID_51, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func collect( _ _supplier: Supplier?, _ _accumulator: ObjDoubleConsumer?, _ _combiner: BiConsumer? ) -> java_swift.JavaObject! {
        return collect( supplier: _supplier, accumulator: _accumulator, combiner: _combiner )
    }

    /// public abstract long java.util.stream.DoubleStream.count()

    private static var count_MethodID_52: jmethodID?

    open func count() -> Int64 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "count", methodSig: "()J", methodCache: &DoubleStreamForward.count_MethodID_52, args: &__args, locals: &__locals )
        return __return
    }


    /// public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.distinct()

    private static var distinct_MethodID_53: jmethodID?

    open func distinct() -> DoubleStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "distinct", methodSig: "()Ljava/util/stream/DoubleStream;", methodCache: &DoubleStreamForward.distinct_MethodID_53, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DoubleStreamForward( javaObject: __return ) : nil
    }


    /// public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.filter(java.util.function.DoublePredicate)

    private static var filter_MethodID_54: jmethodID?

    open func filter( predicate: DoublePredicate? ) -> DoubleStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: predicate, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "filter", methodSig: "(Ljava/util/function/DoublePredicate;)Ljava/util/stream/DoubleStream;", methodCache: &DoubleStreamForward.filter_MethodID_54, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DoubleStreamForward( javaObject: __return ) : nil
    }

    open func filter( _ _predicate: DoublePredicate? ) -> DoubleStream! {
        return filter( predicate: _predicate )
    }

    /// public abstract java.util.OptionalDouble java.util.stream.DoubleStream.findAny()

    private static var findAny_MethodID_55: jmethodID?

    open func findAny() -> OptionalDouble! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "findAny", methodSig: "()Ljava/util/OptionalDouble;", methodCache: &DoubleStreamForward.findAny_MethodID_55, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? OptionalDouble( javaObject: __return ) : nil
    }


    /// public abstract java.util.OptionalDouble java.util.stream.DoubleStream.findFirst()

    private static var findFirst_MethodID_56: jmethodID?

    open func findFirst() -> OptionalDouble! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "findFirst", methodSig: "()Ljava/util/OptionalDouble;", methodCache: &DoubleStreamForward.findFirst_MethodID_56, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? OptionalDouble( javaObject: __return ) : nil
    }


    /// public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.flatMap(java.util.function.DoubleFunction)

    private static var flatMap_MethodID_57: jmethodID?

    open func flatMap( mapper: DoubleFunction? ) -> DoubleStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: mapper, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "flatMap", methodSig: "(Ljava/util/function/DoubleFunction;)Ljava/util/stream/DoubleStream;", methodCache: &DoubleStreamForward.flatMap_MethodID_57, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DoubleStreamForward( javaObject: __return ) : nil
    }

    open func flatMap( _ _mapper: DoubleFunction? ) -> DoubleStream! {
        return flatMap( mapper: _mapper )
    }

    /// public abstract void java.util.stream.DoubleStream.forEach(java.util.function.DoubleConsumer)

    private static var forEach_MethodID_58: jmethodID?

    open func forEach( action: DoubleConsumer? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: action, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "forEach", methodSig: "(Ljava/util/function/DoubleConsumer;)V", methodCache: &DoubleStreamForward.forEach_MethodID_58, args: &__args, locals: &__locals )
    }

    open func forEach( _ _action: DoubleConsumer? ) {
        forEach( action: _action )
    }

    /// public abstract void java.util.stream.DoubleStream.forEachOrdered(java.util.function.DoubleConsumer)

    private static var forEachOrdered_MethodID_59: jmethodID?

    open func forEachOrdered( action: DoubleConsumer? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: action, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "forEachOrdered", methodSig: "(Ljava/util/function/DoubleConsumer;)V", methodCache: &DoubleStreamForward.forEachOrdered_MethodID_59, args: &__args, locals: &__locals )
    }

    open func forEachOrdered( _ _action: DoubleConsumer? ) {
        forEachOrdered( action: _action )
    }

    /// public abstract boolean java.util.stream.BaseStream.isParallel()

    private static var isParallel_MethodID_60: jmethodID?

    override open func isParallel() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isParallel", methodSig: "()Z", methodCache: &DoubleStreamForward.isParallel_MethodID_60, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public default java.util.Iterator java.util.stream.DoubleStream.iterator()

    private static var iterator_MethodID_61: jmethodID?

    override open func iterator() -> Iterator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "iterator", methodSig: "()Ljava/util/Iterator;", methodCache: &DoubleStreamForward.iterator_MethodID_61, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? IteratorForward( javaObject: __return ) : nil
    }


    /// public abstract java.util.PrimitiveIterator$OfDouble java.util.stream.DoubleStream.iterator()

    // Skipping method: false false true false false 

    /// public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.limit(long)

    private static var limit_MethodID_62: jmethodID?

    open func limit( maxSize: Int64 ) -> DoubleStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( j: maxSize )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "limit", methodSig: "(J)Ljava/util/stream/DoubleStream;", methodCache: &DoubleStreamForward.limit_MethodID_62, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DoubleStreamForward( javaObject: __return ) : nil
    }

    open func limit( _ _maxSize: Int64 ) -> DoubleStream! {
        return limit( maxSize: _maxSize )
    }

    /// public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.map(java.util.function.DoubleUnaryOperator)

    private static var map_MethodID_63: jmethodID?

    open func map( mapper: DoubleUnaryOperator? ) -> DoubleStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: mapper, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "map", methodSig: "(Ljava/util/function/DoubleUnaryOperator;)Ljava/util/stream/DoubleStream;", methodCache: &DoubleStreamForward.map_MethodID_63, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DoubleStreamForward( javaObject: __return ) : nil
    }

    open func map( _ _mapper: DoubleUnaryOperator? ) -> DoubleStream! {
        return map( mapper: _mapper )
    }

    /// public abstract java.util.stream.IntStream java.util.stream.DoubleStream.mapToInt(java.util.function.DoubleToIntFunction)

    private static var mapToInt_MethodID_64: jmethodID?

    open func mapToInt( mapper: DoubleToIntFunction? ) -> IntStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: mapper, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "mapToInt", methodSig: "(Ljava/util/function/DoubleToIntFunction;)Ljava/util/stream/IntStream;", methodCache: &DoubleStreamForward.mapToInt_MethodID_64, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? IntStreamForward( javaObject: __return ) : nil
    }

    open func mapToInt( _ _mapper: DoubleToIntFunction? ) -> IntStream! {
        return mapToInt( mapper: _mapper )
    }

    /// public abstract java.util.stream.LongStream java.util.stream.DoubleStream.mapToLong(java.util.function.DoubleToLongFunction)

    private static var mapToLong_MethodID_65: jmethodID?

    open func mapToLong( mapper: DoubleToLongFunction? ) -> LongStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: mapper, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "mapToLong", methodSig: "(Ljava/util/function/DoubleToLongFunction;)Ljava/util/stream/LongStream;", methodCache: &DoubleStreamForward.mapToLong_MethodID_65, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LongStreamForward( javaObject: __return ) : nil
    }

    open func mapToLong( _ _mapper: DoubleToLongFunction? ) -> LongStream! {
        return mapToLong( mapper: _mapper )
    }

    /// public abstract java.util.stream.Stream java.util.stream.DoubleStream.mapToObj(java.util.function.DoubleFunction)

    private static var mapToObj_MethodID_66: jmethodID?

    open func mapToObj( mapper: DoubleFunction? ) -> Stream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: mapper, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "mapToObj", methodSig: "(Ljava/util/function/DoubleFunction;)Ljava/util/stream/Stream;", methodCache: &DoubleStreamForward.mapToObj_MethodID_66, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? StreamForward( javaObject: __return ) : nil
    }

    open func mapToObj( _ _mapper: DoubleFunction? ) -> Stream! {
        return mapToObj( mapper: _mapper )
    }

    /// public abstract java.util.OptionalDouble java.util.stream.DoubleStream.max()

    private static var max_MethodID_67: jmethodID?

    open func max() -> OptionalDouble! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "max", methodSig: "()Ljava/util/OptionalDouble;", methodCache: &DoubleStreamForward.max_MethodID_67, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? OptionalDouble( javaObject: __return ) : nil
    }


    /// public abstract java.util.OptionalDouble java.util.stream.DoubleStream.min()

    private static var min_MethodID_68: jmethodID?

    open func min() -> OptionalDouble! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "min", methodSig: "()Ljava/util/OptionalDouble;", methodCache: &DoubleStreamForward.min_MethodID_68, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? OptionalDouble( javaObject: __return ) : nil
    }


    /// public abstract boolean java.util.stream.DoubleStream.noneMatch(java.util.function.DoublePredicate)

    private static var noneMatch_MethodID_69: jmethodID?

    open func noneMatch( predicate: DoublePredicate? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: predicate, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "noneMatch", methodSig: "(Ljava/util/function/DoublePredicate;)Z", methodCache: &DoubleStreamForward.noneMatch_MethodID_69, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func noneMatch( _ _predicate: DoublePredicate? ) -> Bool {
        return noneMatch( predicate: _predicate )
    }

    /// public abstract java.util.stream.BaseStream java.util.stream.BaseStream.onClose(java.lang.Runnable)

    private static var onClose_MethodID_70: jmethodID?

    override open func onClose( closeHandler: java_swift.Runnable? ) -> BaseStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: closeHandler, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "onClose", methodSig: "(Ljava/lang/Runnable;)Ljava/util/stream/BaseStream;", methodCache: &DoubleStreamForward.onClose_MethodID_70, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BaseStreamForward( javaObject: __return ) : nil
    }

    override open func onClose( _ _closeHandler: java_swift.Runnable? ) -> BaseStream! {
        return onClose( closeHandler: _closeHandler )
    }

    /// public default java.util.stream.BaseStream java.util.stream.DoubleStream.parallel()

    private static var parallel_MethodID_71: jmethodID?

    override open func parallel() -> BaseStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "parallel", methodSig: "()Ljava/util/stream/BaseStream;", methodCache: &DoubleStreamForward.parallel_MethodID_71, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BaseStreamForward( javaObject: __return ) : nil
    }


    /// public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.parallel()

    /// public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.peek(java.util.function.DoubleConsumer)

    private static var peek_MethodID_72: jmethodID?

    open func peek( action: DoubleConsumer? ) -> DoubleStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: action, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "peek", methodSig: "(Ljava/util/function/DoubleConsumer;)Ljava/util/stream/DoubleStream;", methodCache: &DoubleStreamForward.peek_MethodID_72, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DoubleStreamForward( javaObject: __return ) : nil
    }

    open func peek( _ _action: DoubleConsumer? ) -> DoubleStream! {
        return peek( action: _action )
    }

    /// public abstract double java.util.stream.DoubleStream.reduce(double,java.util.function.DoubleBinaryOperator)

    private static var reduce_MethodID_73: jmethodID?

    open func reduce( identity: Double, op: DoubleBinaryOperator? ) -> Double {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( d: identity )
        __args[1] = JNIType.toJava( value: op, locals: &__locals )
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "reduce", methodSig: "(DLjava/util/function/DoubleBinaryOperator;)D", methodCache: &DoubleStreamForward.reduce_MethodID_73, args: &__args, locals: &__locals )
        return __return
    }

    open func reduce( _ _identity: Double, _ _op: DoubleBinaryOperator? ) -> Double {
        return reduce( identity: _identity, op: _op )
    }

    /// public abstract java.util.OptionalDouble java.util.stream.DoubleStream.reduce(java.util.function.DoubleBinaryOperator)

    private static var reduce_MethodID_74: jmethodID?

    open func reduce( op: DoubleBinaryOperator? ) -> OptionalDouble! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: op, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "reduce", methodSig: "(Ljava/util/function/DoubleBinaryOperator;)Ljava/util/OptionalDouble;", methodCache: &DoubleStreamForward.reduce_MethodID_74, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? OptionalDouble( javaObject: __return ) : nil
    }

    open func reduce( _ _op: DoubleBinaryOperator? ) -> OptionalDouble! {
        return reduce( op: _op )
    }

    /// public default java.util.stream.BaseStream java.util.stream.DoubleStream.sequential()

    private static var sequential_MethodID_75: jmethodID?

    override open func sequential() -> BaseStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "sequential", methodSig: "()Ljava/util/stream/BaseStream;", methodCache: &DoubleStreamForward.sequential_MethodID_75, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BaseStreamForward( javaObject: __return ) : nil
    }


    /// public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.sequential()

    /// public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.skip(long)

    private static var skip_MethodID_76: jmethodID?

    open func skip( n: Int64 ) -> DoubleStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( j: n )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "skip", methodSig: "(J)Ljava/util/stream/DoubleStream;", methodCache: &DoubleStreamForward.skip_MethodID_76, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DoubleStreamForward( javaObject: __return ) : nil
    }

    open func skip( _ _n: Int64 ) -> DoubleStream! {
        return skip( n: _n )
    }

    /// public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.sorted()

    private static var sorted_MethodID_77: jmethodID?

    open func sorted() -> DoubleStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "sorted", methodSig: "()Ljava/util/stream/DoubleStream;", methodCache: &DoubleStreamForward.sorted_MethodID_77, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DoubleStreamForward( javaObject: __return ) : nil
    }


    /// public default java.util.Spliterator java.util.stream.DoubleStream.spliterator()

    private static var spliterator_MethodID_78: jmethodID?

    override open func spliterator() -> Spliterator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "spliterator", methodSig: "()Ljava/util/Spliterator;", methodCache: &DoubleStreamForward.spliterator_MethodID_78, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? SpliteratorForward( javaObject: __return ) : nil
    }


    /// public abstract java.util.Spliterator$OfDouble java.util.stream.DoubleStream.spliterator()

    // Skipping method: false false true false false 

    /// public abstract double java.util.stream.DoubleStream.sum()

    private static var sum_MethodID_79: jmethodID?

    open func sum() -> Double {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "sum", methodSig: "()D", methodCache: &DoubleStreamForward.sum_MethodID_79, args: &__args, locals: &__locals )
        return __return
    }


    /// public abstract java.util.DoubleSummaryStatistics java.util.stream.DoubleStream.summaryStatistics()

    private static var summaryStatistics_MethodID_80: jmethodID?

    open func summaryStatistics() -> DoubleSummaryStatistics! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "summaryStatistics", methodSig: "()Ljava/util/DoubleSummaryStatistics;", methodCache: &DoubleStreamForward.summaryStatistics_MethodID_80, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DoubleSummaryStatistics( javaObject: __return ) : nil
    }


    /// public abstract double[] java.util.stream.DoubleStream.toArray()

    private static var toArray_MethodID_81: jmethodID?

    open func toArray() -> [Double]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "toArray", methodSig: "()[D", methodCache: &DoubleStreamForward.toArray_MethodID_81, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [Double].self, from: __return )
    }


    /// public abstract java.util.stream.BaseStream java.util.stream.BaseStream.unordered()

    private static var unordered_MethodID_82: jmethodID?

    override open func unordered() -> BaseStream! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "unordered", methodSig: "()Ljava/util/stream/BaseStream;", methodCache: &DoubleStreamForward.unordered_MethodID_82, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BaseStreamForward( javaObject: __return ) : nil
    }


}

