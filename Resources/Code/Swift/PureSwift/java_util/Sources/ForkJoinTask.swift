
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.concurrent.ForkJoinTask ///

open class ForkJoinTask: java_swift.JavaObject, Future, /* interface java.io.Serializable */ UnavailableProtocol {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ForkJoinTaskJNIClass: jclass?

    /// static final int java.util.concurrent.ForkJoinTask.CANCELLED

    // Skipping field: true false false false false false 

    /// static final int java.util.concurrent.ForkJoinTask.DONE_MASK

    // Skipping field: true false false false false false 

    /// static final int java.util.concurrent.ForkJoinTask.EXCEPTIONAL

    // Skipping field: true false false false false false 

    /// private static final int java.util.concurrent.ForkJoinTask.EXCEPTION_MAP_CAPACITY

    /// static final int java.util.concurrent.ForkJoinTask.NORMAL

    // Skipping field: true false false false false false 

    /// static final int java.util.concurrent.ForkJoinTask.SIGNAL

    // Skipping field: true false false false false false 

    /// static final int java.util.concurrent.ForkJoinTask.SMASK

    // Skipping field: true false false false false false 

    /// private static final long java.util.concurrent.ForkJoinTask.STATUS

    /// private static final sun.misc.Unsafe java.util.concurrent.ForkJoinTask.U

    /// private static final java.util.concurrent.ForkJoinTask$ExceptionNode[] java.util.concurrent.ForkJoinTask.exceptionTable

    /// private static final java.util.concurrent.locks.ReentrantLock java.util.concurrent.ForkJoinTask.exceptionTableLock

    /// private static final java.lang.ref.ReferenceQueue java.util.concurrent.ForkJoinTask.exceptionTableRefQueue

    /// private static final long java.util.concurrent.ForkJoinTask.serialVersionUID

    /// volatile int java.util.concurrent.ForkJoinTask.status

    // Skipping field: true false false false false false 

    /// public java.util.concurrent.ForkJoinTask()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/ForkJoinTask", classCache: &ForkJoinTask.ForkJoinTaskJNIClass, methodSig: "()V", methodCache: &ForkJoinTask.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// static java.lang.ref.ReferenceQueue java.util.concurrent.ForkJoinTask.access$000()

    // Skipping method: true false false false false 

    /// public static java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask.adapt(java.util.concurrent.Callable)

    private static var adapt_MethodID_2: jmethodID?

    open class func adapt( callable: Callable? ) -> ForkJoinTask! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: callable, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/ForkJoinTask", classCache: &ForkJoinTaskJNIClass, methodName: "adapt", methodSig: "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/ForkJoinTask;", methodCache: &adapt_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ForkJoinTask( javaObject: __return ) : nil
    }

    open class func adapt( _ _callable: Callable? ) -> ForkJoinTask! {
        return adapt( callable: _callable )
    }

    /// public static java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask.adapt(java.lang.Runnable)

    private static var adapt_MethodID_3: jmethodID?

    open class func adapt( runnable: java_swift.Runnable? ) -> ForkJoinTask! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: runnable, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/ForkJoinTask", classCache: &ForkJoinTaskJNIClass, methodName: "adapt", methodSig: "(Ljava/lang/Runnable;)Ljava/util/concurrent/ForkJoinTask;", methodCache: &adapt_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ForkJoinTask( javaObject: __return ) : nil
    }

    open class func adapt( _ _runnable: java_swift.Runnable? ) -> ForkJoinTask! {
        return adapt( runnable: _runnable )
    }

    /// public static java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask.adapt(java.lang.Runnable,java.lang.Object)

    private static var adapt_MethodID_4: jmethodID?

    open class func adapt( runnable: java_swift.Runnable?, result: java_swift.JavaObject? ) -> ForkJoinTask! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: runnable, locals: &__locals )
        __args[1] = JNIType.toJava( value: result, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/ForkJoinTask", classCache: &ForkJoinTaskJNIClass, methodName: "adapt", methodSig: "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/ForkJoinTask;", methodCache: &adapt_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ForkJoinTask( javaObject: __return ) : nil
    }

    open class func adapt( _ _runnable: java_swift.Runnable?, _ _result: java_swift.JavaObject? ) -> ForkJoinTask! {
        return adapt( runnable: _runnable, result: _result )
    }

    /// static final void java.util.concurrent.ForkJoinTask.cancelIgnoringExceptions(java.util.concurrent.ForkJoinTask)

    // Skipping method: true false false false false 

    /// private static void java.util.concurrent.ForkJoinTask.expungeStaleExceptions()

    /// public static java.util.concurrent.ForkJoinPool java.util.concurrent.ForkJoinTask.getPool()

    private static var getPool_MethodID_5: jmethodID?

    open class func getPool() -> ForkJoinPool! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/ForkJoinTask", classCache: &ForkJoinTaskJNIClass, methodName: "getPool", methodSig: "()Ljava/util/concurrent/ForkJoinPool;", methodCache: &getPool_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ForkJoinPool( javaObject: __return ) : nil
    }


    /// public static int java.util.concurrent.ForkJoinTask.getQueuedTaskCount()

    private static var getQueuedTaskCount_MethodID_6: jmethodID?

    open class func getQueuedTaskCount() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/util/concurrent/ForkJoinTask", classCache: &ForkJoinTaskJNIClass, methodName: "getQueuedTaskCount", methodSig: "()I", methodCache: &getQueuedTaskCount_MethodID_6, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public static int java.util.concurrent.ForkJoinTask.getSurplusQueuedTaskCount()

    private static var getSurplusQueuedTaskCount_MethodID_7: jmethodID?

    open class func getSurplusQueuedTaskCount() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/util/concurrent/ForkJoinTask", classCache: &ForkJoinTaskJNIClass, methodName: "getSurplusQueuedTaskCount", methodSig: "()I", methodCache: &getSurplusQueuedTaskCount_MethodID_7, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// static final void java.util.concurrent.ForkJoinTask.helpExpungeStaleExceptions()

    // Skipping method: true false false false false 

    /// public static void java.util.concurrent.ForkJoinTask.helpQuiesce()

    private static var helpQuiesce_MethodID_8: jmethodID?

    open class func helpQuiesce() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallStaticVoidMethod( className: "java/util/concurrent/ForkJoinTask", classCache: &ForkJoinTaskJNIClass, methodName: "helpQuiesce", methodSig: "()V", methodCache: &helpQuiesce_MethodID_8, args: &__args, locals: &__locals )
    }


    /// public static boolean java.util.concurrent.ForkJoinTask.inForkJoinPool()

    private static var inForkJoinPool_MethodID_9: jmethodID?

    open class func inForkJoinPool() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/util/concurrent/ForkJoinTask", classCache: &ForkJoinTaskJNIClass, methodName: "inForkJoinPool", methodSig: "()Z", methodCache: &inForkJoinPool_MethodID_9, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public static java.util.Collection java.util.concurrent.ForkJoinTask.invokeAll(java.util.Collection)

    private static var invokeAll_MethodID_10: jmethodID?

    open class func invokeAll( tasks: Collection? ) -> Collection! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: tasks, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/ForkJoinTask", classCache: &ForkJoinTaskJNIClass, methodName: "invokeAll", methodSig: "(Ljava/util/Collection;)Ljava/util/Collection;", methodCache: &invokeAll_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? CollectionForward( javaObject: __return ) : nil
    }

    open class func invokeAll( _ _tasks: Collection? ) -> Collection! {
        return invokeAll( tasks: _tasks )
    }

    /// public static void java.util.concurrent.ForkJoinTask.invokeAll(java.util.concurrent.ForkJoinTask,java.util.concurrent.ForkJoinTask)

    private static var invokeAll_MethodID_11: jmethodID?

    open class func invokeAll( t1: ForkJoinTask?, t2: ForkJoinTask? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: t1, locals: &__locals )
        __args[1] = JNIType.toJava( value: t2, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "java/util/concurrent/ForkJoinTask", classCache: &ForkJoinTaskJNIClass, methodName: "invokeAll", methodSig: "(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinTask;)V", methodCache: &invokeAll_MethodID_11, args: &__args, locals: &__locals )
    }

    open class func invokeAll( _ _t1: ForkJoinTask?, _ _t2: ForkJoinTask? ) {
        invokeAll( t1: _t1, t2: _t2 )
    }

    /// public static void java.util.concurrent.ForkJoinTask.invokeAll(java.util.concurrent.ForkJoinTask[])

    private static var invokeAll_MethodID_12: jmethodID?

    open class func invokeAll( tasks: [ForkJoinTask]? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: tasks, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "java/util/concurrent/ForkJoinTask", classCache: &ForkJoinTaskJNIClass, methodName: "invokeAll", methodSig: "([Ljava/util/concurrent/ForkJoinTask;)V", methodCache: &invokeAll_MethodID_12, args: &__args, locals: &__locals )
    }

    open class func invokeAll( _ _tasks: [ForkJoinTask]? ) {
        invokeAll( tasks: _tasks )
    }

    /// protected static java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask.peekNextLocalTask()

    private static var peekNextLocalTask_MethodID_13: jmethodID?

    open class func peekNextLocalTask() -> ForkJoinTask! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/ForkJoinTask", classCache: &ForkJoinTaskJNIClass, methodName: "peekNextLocalTask", methodSig: "()Ljava/util/concurrent/ForkJoinTask;", methodCache: &peekNextLocalTask_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ForkJoinTask( javaObject: __return ) : nil
    }


    /// protected static java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask.pollNextLocalTask()

    private static var pollNextLocalTask_MethodID_14: jmethodID?

    open class func pollNextLocalTask() -> ForkJoinTask! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/ForkJoinTask", classCache: &ForkJoinTaskJNIClass, methodName: "pollNextLocalTask", methodSig: "()Ljava/util/concurrent/ForkJoinTask;", methodCache: &pollNextLocalTask_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ForkJoinTask( javaObject: __return ) : nil
    }


    /// protected static java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask.pollTask()

    private static var pollTask_MethodID_15: jmethodID?

    open class func pollTask() -> ForkJoinTask! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/concurrent/ForkJoinTask", classCache: &ForkJoinTaskJNIClass, methodName: "pollTask", methodSig: "()Ljava/util/concurrent/ForkJoinTask;", methodCache: &pollTask_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ForkJoinTask( javaObject: __return ) : nil
    }


    /// static void java.util.concurrent.ForkJoinTask.rethrow(java.lang.Throwable)

    // Skipping method: true false false false false 

    /// static void java.util.concurrent.ForkJoinTask.uncheckedThrow(java.lang.Throwable) throws java.lang.Throwable

    // Skipping method: true false false false false 

    /// public boolean java.util.concurrent.ForkJoinTask.cancel(boolean)

    private static var cancel_MethodID_16: jmethodID?

    open func cancel( mayInterruptIfRunning: Bool ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(mayInterruptIfRunning ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "cancel", methodSig: "(Z)Z", methodCache: &ForkJoinTask.cancel_MethodID_16, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func cancel( _ _mayInterruptIfRunning: Bool ) -> Bool {
        return cancel( mayInterruptIfRunning: _mayInterruptIfRunning )
    }

    /// private void java.util.concurrent.ForkJoinTask.clearExceptionalCompletion()

    /// public final boolean java.util.concurrent.ForkJoinTask.compareAndSetForkJoinTaskTag(short,short)

    private static var compareAndSetForkJoinTaskTag_MethodID_17: jmethodID?

    open func compareAndSetForkJoinTaskTag( e: Int16, tag: Int16 ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( s: e )
        __args[1] = jvalue( s: tag )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "compareAndSetForkJoinTaskTag", methodSig: "(SS)Z", methodCache: &ForkJoinTask.compareAndSetForkJoinTaskTag_MethodID_17, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func compareAndSetForkJoinTaskTag( _ _e: Int16, _ _tag: Int16 ) -> Bool {
        return compareAndSetForkJoinTaskTag( e: _e, tag: _tag )
    }

    /// public void java.util.concurrent.ForkJoinTask.complete(java.lang.Object)

    private static var complete_MethodID_18: jmethodID?

    open func complete( value: java_swift.JavaObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: value, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "complete", methodSig: "(Ljava/lang/Object;)V", methodCache: &ForkJoinTask.complete_MethodID_18, args: &__args, locals: &__locals )
    }

    open func complete( _ _value: java_swift.JavaObject? ) {
        complete( value: _value )
    }

    /// public void java.util.concurrent.ForkJoinTask.completeExceptionally(java.lang.Throwable)

    private static var completeExceptionally_MethodID_19: jmethodID?

    open func completeExceptionally( ex: java_swift.Throwable? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: ex, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "completeExceptionally", methodSig: "(Ljava/lang/Throwable;)V", methodCache: &ForkJoinTask.completeExceptionally_MethodID_19, args: &__args, locals: &__locals )
    }

    open func completeExceptionally( _ _ex: java_swift.Throwable? ) {
        completeExceptionally( ex: _ex )
    }

    /// final int java.util.concurrent.ForkJoinTask.doExec()

    // Skipping method: true false false false false 

    /// private int java.util.concurrent.ForkJoinTask.doInvoke()

    /// private int java.util.concurrent.ForkJoinTask.doJoin()

    /// protected abstract boolean java.util.concurrent.ForkJoinTask.exec()

    private static var exec_MethodID_20: jmethodID?

    open func exec() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "exec", methodSig: "()Z", methodCache: &ForkJoinTask.exec_MethodID_20, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// private int java.util.concurrent.ForkJoinTask.externalAwaitDone()

    /// private int java.util.concurrent.ForkJoinTask.externalInterruptibleAwaitDone() throws java.lang.InterruptedException

    /// public final java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask.fork()

    private static var fork_MethodID_21: jmethodID?

    open func fork() -> ForkJoinTask! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "fork", methodSig: "()Ljava/util/concurrent/ForkJoinTask;", methodCache: &ForkJoinTask.fork_MethodID_21, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ForkJoinTask( javaObject: __return ) : nil
    }


    /// public final java.lang.Object java.util.concurrent.ForkJoinTask.get(long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException,java.util.concurrent.ExecutionException,java.util.concurrent.TimeoutException

    private static var get_MethodID_22: jmethodID?

    open func get( timeout: Int64, unit: TimeUnit? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException */ -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( j: timeout )
        __args[1] = JNIType.toJava( value: unit, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "get", methodSig: "(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", methodCache: &ForkJoinTask.get_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func get( _ _timeout: Int64, _ _unit: TimeUnit? ) throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException */ -> java_swift.JavaObject! {
        return try get( timeout: _timeout, unit: _unit )
    }

    /// public final java.lang.Object java.util.concurrent.ForkJoinTask.get() throws java.lang.InterruptedException,java.util.concurrent.ExecutionException

    private static var get_MethodID_23: jmethodID?

    open func get() throws /* java.lang.InterruptedException, java.util.concurrent.ExecutionException */ -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "get", methodSig: "()Ljava/lang/Object;", methodCache: &ForkJoinTask.get_MethodID_23, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public final java.lang.Throwable java.util.concurrent.ForkJoinTask.getException()

    private static var getException_MethodID_24: jmethodID?

    open func getException() -> java_swift.Throwable! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getException", methodSig: "()Ljava/lang/Throwable;", methodCache: &ForkJoinTask.getException_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.Throwable( javaObject: __return ) : nil
    }


    /// public final short java.util.concurrent.ForkJoinTask.getForkJoinTaskTag()

    private static var getForkJoinTaskTag_MethodID_25: jmethodID?

    open func getForkJoinTaskTag() -> Int16 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallShortMethod( object: javaObject, methodName: "getForkJoinTaskTag", methodSig: "()S", methodCache: &ForkJoinTask.getForkJoinTaskTag_MethodID_25, args: &__args, locals: &__locals )
        return __return
    }


    /// public abstract java.lang.Object java.util.concurrent.ForkJoinTask.getRawResult()

    private static var getRawResult_MethodID_26: jmethodID?

    open func getRawResult() -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getRawResult", methodSig: "()Ljava/lang/Object;", methodCache: &ForkJoinTask.getRawResult_MethodID_26, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// private java.lang.Throwable java.util.concurrent.ForkJoinTask.getThrowableException()

    /// void java.util.concurrent.ForkJoinTask.internalPropagateException(java.lang.Throwable)

    // Skipping method: true false false false false 

    /// final void java.util.concurrent.ForkJoinTask.internalWait(long)

    // Skipping method: true false false false false 

    /// public final java.lang.Object java.util.concurrent.ForkJoinTask.invoke()

    private static var invoke_MethodID_27: jmethodID?

    open func invoke() -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "invoke", methodSig: "()Ljava/lang/Object;", methodCache: &ForkJoinTask.invoke_MethodID_27, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public final boolean java.util.concurrent.ForkJoinTask.isCancelled()

    private static var isCancelled_MethodID_28: jmethodID?

    open func isCancelled() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isCancelled", methodSig: "()Z", methodCache: &ForkJoinTask.isCancelled_MethodID_28, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public final boolean java.util.concurrent.ForkJoinTask.isCompletedAbnormally()

    private static var isCompletedAbnormally_MethodID_29: jmethodID?

    open func isCompletedAbnormally() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isCompletedAbnormally", methodSig: "()Z", methodCache: &ForkJoinTask.isCompletedAbnormally_MethodID_29, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public final boolean java.util.concurrent.ForkJoinTask.isCompletedNormally()

    private static var isCompletedNormally_MethodID_30: jmethodID?

    open func isCompletedNormally() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isCompletedNormally", methodSig: "()Z", methodCache: &ForkJoinTask.isCompletedNormally_MethodID_30, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public final boolean java.util.concurrent.ForkJoinTask.isDone()

    private static var isDone_MethodID_31: jmethodID?

    open func isDone() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isDone", methodSig: "()Z", methodCache: &ForkJoinTask.isDone_MethodID_31, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public final java.lang.Object java.util.concurrent.ForkJoinTask.join()

    private static var join_MethodID_32: jmethodID?

    open func join() -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "join", methodSig: "()Ljava/lang/Object;", methodCache: &ForkJoinTask.join_MethodID_32, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public final void java.util.concurrent.ForkJoinTask.quietlyComplete()

    private static var quietlyComplete_MethodID_33: jmethodID?

    open func quietlyComplete() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "quietlyComplete", methodSig: "()V", methodCache: &ForkJoinTask.quietlyComplete_MethodID_33, args: &__args, locals: &__locals )
    }


    /// public final void java.util.concurrent.ForkJoinTask.quietlyInvoke()

    private static var quietlyInvoke_MethodID_34: jmethodID?

    open func quietlyInvoke() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "quietlyInvoke", methodSig: "()V", methodCache: &ForkJoinTask.quietlyInvoke_MethodID_34, args: &__args, locals: &__locals )
    }


    /// public final void java.util.concurrent.ForkJoinTask.quietlyJoin()

    private static var quietlyJoin_MethodID_35: jmethodID?

    open func quietlyJoin() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "quietlyJoin", methodSig: "()V", methodCache: &ForkJoinTask.quietlyJoin_MethodID_35, args: &__args, locals: &__locals )
    }


    /// private void java.util.concurrent.ForkJoinTask.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException

    /// final int java.util.concurrent.ForkJoinTask.recordExceptionalCompletion(java.lang.Throwable)

    // Skipping method: true false false false false 

    /// public void java.util.concurrent.ForkJoinTask.reinitialize()

    private static var reinitialize_MethodID_36: jmethodID?

    open func reinitialize() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "reinitialize", methodSig: "()V", methodCache: &ForkJoinTask.reinitialize_MethodID_36, args: &__args, locals: &__locals )
    }


    /// private void java.util.concurrent.ForkJoinTask.reportException(int)

    /// private int java.util.concurrent.ForkJoinTask.setCompletion(int)

    /// private int java.util.concurrent.ForkJoinTask.setExceptionalCompletion(java.lang.Throwable)

    /// public final short java.util.concurrent.ForkJoinTask.setForkJoinTaskTag(short)

    private static var setForkJoinTaskTag_MethodID_37: jmethodID?

    open func setForkJoinTaskTag( tag: Int16 ) -> Int16 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( s: tag )
        let __return = JNIMethod.CallShortMethod( object: javaObject, methodName: "setForkJoinTaskTag", methodSig: "(S)S", methodCache: &ForkJoinTask.setForkJoinTaskTag_MethodID_37, args: &__args, locals: &__locals )
        return __return
    }

    open func setForkJoinTaskTag( _ _tag: Int16 ) -> Int16 {
        return setForkJoinTaskTag( tag: _tag )
    }

    /// protected abstract void java.util.concurrent.ForkJoinTask.setRawResult(java.lang.Object)

    private static var setRawResult_MethodID_38: jmethodID?

    open func setRawResult( value: java_swift.JavaObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: value, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setRawResult", methodSig: "(Ljava/lang/Object;)V", methodCache: &ForkJoinTask.setRawResult_MethodID_38, args: &__args, locals: &__locals )
    }

    open func setRawResult( _ _value: java_swift.JavaObject? ) {
        setRawResult( value: _value )
    }

    /// public boolean java.util.concurrent.ForkJoinTask.tryUnfork()

    private static var tryUnfork_MethodID_39: jmethodID?

    open func tryUnfork() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "tryUnfork", methodSig: "()Z", methodCache: &ForkJoinTask.tryUnfork_MethodID_39, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// private void java.util.concurrent.ForkJoinTask.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

}

