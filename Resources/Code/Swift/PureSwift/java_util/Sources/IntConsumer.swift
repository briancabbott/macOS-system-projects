
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.util.function.IntConsumer ///

public protocol IntConsumer: JavaProtocol {

    /// public abstract void java.util.function.IntConsumer.accept(int)

    func accept( value: Int )

    /// public default java.util.function.IntConsumer java.util.function.IntConsumer.andThen(java.util.function.IntConsumer)

    func andThen( after: IntConsumer? ) -> IntConsumer!

    /// private void java.util.function.IntConsumer.lambda$andThen$0(java.util.function.IntConsumer,int)

}


open class IntConsumerForward: JNIObjectForward, IntConsumer {

    private static var IntConsumerJNIClass: jclass?

    /// public abstract void java.util.function.IntConsumer.accept(int)

    private static var accept_MethodID_3: jmethodID?

    open func accept( value: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(value) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "accept", methodSig: "(I)V", methodCache: &IntConsumerForward.accept_MethodID_3, args: &__args, locals: &__locals )
    }

    open func accept( _ _value: Int ) {
        accept( value: _value )
    }

    /// public default java.util.function.IntConsumer java.util.function.IntConsumer.andThen(java.util.function.IntConsumer)

    private static var andThen_MethodID_4: jmethodID?

    open func andThen( after: IntConsumer? ) -> IntConsumer! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: after, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "andThen", methodSig: "(Ljava/util/function/IntConsumer;)Ljava/util/function/IntConsumer;", methodCache: &IntConsumerForward.andThen_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? IntConsumerForward( javaObject: __return ) : nil
    }

    open func andThen( _ _after: IntConsumer? ) -> IntConsumer! {
        return andThen( after: _after )
    }

}

