
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.jar.JarFile ///

open class JarFile: ZipFile {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var JarFileJNIClass: jclass?

    /// private static final char[] java.util.jar.JarFile.CLASSPATH_CHARS

    /// private static final int[] java.util.jar.JarFile.CLASSPATH_LASTOCC

    /// private static final int[] java.util.jar.JarFile.CLASSPATH_OPTOSFT

    /// public static final java.lang.String java.util.jar.JarFile.MANIFEST_NAME

    private static var MANIFEST_NAME_FieldID: jfieldID?

    public static var MANIFEST_NAME: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "MANIFEST_NAME", fieldType: "Ljava/lang/String;", fieldCache: &MANIFEST_NAME_FieldID, className: "java/util/jar/JarFile", classCache: &JarFileJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// private static volatile java.lang.String[] java.util.jar.JarFile.jarNames

    /// private static java.lang.String java.util.jar.JarFile.javaHome

    /// private volatile boolean java.util.jar.JarFile.hasCheckedSpecialAttributes

    /// private boolean java.util.jar.JarFile.hasClassPathAttribute

    /// private java.util.jar.JarVerifier java.util.jar.JarFile.jv

    /// private boolean java.util.jar.JarFile.jvInitialized

    /// private java.util.jar.JarEntry java.util.jar.JarFile.manEntry

    /// private java.lang.ref.SoftReference java.util.jar.JarFile.manRef

    /// private boolean java.util.jar.JarFile.verify

    /// private static final int java.util.zip.ZipFile.DEFLATED

    /// private static final int java.util.zip.ZipFile.JZENTRY_COMMENT

    /// private static final int java.util.zip.ZipFile.JZENTRY_EXTRA

    /// private static final int java.util.zip.ZipFile.JZENTRY_NAME

    /// public static final int java.util.zip.ZipFile.OPEN_DELETE

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipFile.OPEN_READ

    // Skipping field: false true false false false false 

    /// private static final int java.util.zip.ZipFile.STORED

    /// private static final boolean java.util.zip.ZipFile.usemmap

    /// private volatile boolean java.util.zip.ZipFile.closeRequested

    /// private java.util.Deque java.util.zip.ZipFile.inflaterCache

    /// private long java.util.zip.ZipFile.jzfile

    /// private final boolean java.util.zip.ZipFile.locsig

    /// private final java.lang.String java.util.zip.ZipFile.name

    /// private final java.util.Map java.util.zip.ZipFile.streams

    /// private final int java.util.zip.ZipFile.total

    /// private java.util.zip.ZipCoder java.util.zip.ZipFile.zc

    /// public static final int java.util.zip.ZipConstants.CENATT

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.CENATX

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.CENCOM

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.CENCRC

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.CENDSK

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.CENEXT

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.CENFLG

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.CENHDR

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.CENHOW

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.CENLEN

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.CENNAM

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.CENOFF

    // Skipping field: false true false false false false 

    /// public static final long java.util.zip.ZipConstants.CENSIG

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.CENSIZ

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.CENTIM

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.CENVEM

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.CENVER

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.ENDCOM

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.ENDHDR

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.ENDOFF

    // Skipping field: false true false false false false 

    /// public static final long java.util.zip.ZipConstants.ENDSIG

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.ENDSIZ

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.ENDSUB

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.ENDTOT

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.EXTCRC

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.EXTHDR

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.EXTLEN

    // Skipping field: false true false false false false 

    /// public static final long java.util.zip.ZipConstants.EXTSIG

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.EXTSIZ

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.LOCCRC

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.LOCEXT

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.LOCFLG

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.LOCHDR

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.LOCHOW

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.LOCLEN

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.LOCNAM

    // Skipping field: false true false false false false 

    /// public static final long java.util.zip.ZipConstants.LOCSIG

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.LOCSIZ

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.LOCTIM

    // Skipping field: false true false false false false 

    /// public static final int java.util.zip.ZipConstants.LOCVER

    // Skipping field: false true false false false false 

    /// public java.util.jar.JarFile(java.lang.String) throws java.io.IOException

    private static var new_MethodID_1: jmethodID?

    public convenience init( name: String? ) throws {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: name, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/jar/JarFile", classCache: &JarFile.JarFileJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &JarFile.new_MethodID_1, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.io.IOException */ UnavailableObject( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _name: String? ) throws {
        try self.init( name: _name )
    }

    /// public java.util.jar.JarFile(java.lang.String,boolean) throws java.io.IOException

    private static var new_MethodID_2: jmethodID?

    public convenience init( name: String?, verify: Bool ) throws {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: name, locals: &__locals )
        __args[1] = jvalue( z: jboolean(verify ? JNI_TRUE : JNI_FALSE) )
        let __object = JNIMethod.NewObject( className: "java/util/jar/JarFile", classCache: &JarFile.JarFileJNIClass, methodSig: "(Ljava/lang/String;Z)V", methodCache: &JarFile.new_MethodID_2, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.io.IOException */ UnavailableObject( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _name: String?, _ _verify: Bool ) throws {
        try self.init( name: _name, verify: _verify )
    }

    /// public java.util.jar.JarFile(java.io.File) throws java.io.IOException

    private static var new_MethodID_3: jmethodID?

    public convenience init( file: /* class java.io.File */ UnavailableObject? ) throws {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: file, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/jar/JarFile", classCache: &JarFile.JarFileJNIClass, methodSig: "(Ljava/io/File;)V", methodCache: &JarFile.new_MethodID_3, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.io.IOException */ UnavailableObject( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _file: /* class java.io.File */ UnavailableObject? ) throws {
        try self.init( file: _file )
    }

    /// public java.util.jar.JarFile(java.io.File,boolean) throws java.io.IOException

    private static var new_MethodID_4: jmethodID?

    public convenience init( file: /* class java.io.File */ UnavailableObject?, verify: Bool ) throws {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: file, locals: &__locals )
        __args[1] = jvalue( z: jboolean(verify ? JNI_TRUE : JNI_FALSE) )
        let __object = JNIMethod.NewObject( className: "java/util/jar/JarFile", classCache: &JarFile.JarFileJNIClass, methodSig: "(Ljava/io/File;Z)V", methodCache: &JarFile.new_MethodID_4, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.io.IOException */ UnavailableObject( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _file: /* class java.io.File */ UnavailableObject?, _ _verify: Bool ) throws {
        try self.init( file: _file, verify: _verify )
    }

    /// public java.util.jar.JarFile(java.io.File,boolean,int) throws java.io.IOException

    private static var new_MethodID_5: jmethodID?

    public convenience init( file: /* class java.io.File */ UnavailableObject?, verify: Bool, mode: Int ) throws {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: file, locals: &__locals )
        __args[1] = jvalue( z: jboolean(verify ? JNI_TRUE : JNI_FALSE) )
        __args[2] = jvalue( i: jint(mode) )
        let __object = JNIMethod.NewObject( className: "java/util/jar/JarFile", classCache: &JarFile.JarFileJNIClass, methodSig: "(Ljava/io/File;ZI)V", methodCache: &JarFile.new_MethodID_5, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.io.IOException */ UnavailableObject( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _file: /* class java.io.File */ UnavailableObject?, _ _verify: Bool, _ _mode: Int ) throws {
        try self.init( file: _file, verify: _verify, mode: _mode )
    }

    /// static java.util.Enumeration java.util.jar.JarFile.access$001(java.util.jar.JarFile)

    // Skipping method: true false false false false 

    /// static void java.util.jar.JarFile.access$200(java.util.jar.JarFile) throws java.io.IOException

    // Skipping method: true false false false false 

    /// static java.util.jar.JarVerifier java.util.jar.JarFile.access$300(java.util.jar.JarFile)

    // Skipping method: true false false false false 

    /// private void java.util.jar.JarFile.checkForSpecialAttributes() throws java.io.IOException

    /// private synchronized void java.util.jar.JarFile.ensureInitialization()

    /// public java.util.Enumeration java.util.jar.JarFile.entries()

    // Skipping method: false true false false false 

    /// java.util.Enumeration java.util.jar.JarFile.entries2()

    // Skipping method: true false false false false 

    /// java.util.Enumeration java.util.jar.JarFile.entryNames(java.security.CodeSource[])

    // Skipping method: true false false false false 

    /// private byte[] java.util.jar.JarFile.getBytes(java.util.zip.ZipEntry) throws java.io.IOException

    /// java.security.CodeSource java.util.jar.JarFile.getCodeSource(java.net.URL,java.lang.String)

    // Skipping method: true false false false false 

    /// java.security.CodeSource[] java.util.jar.JarFile.getCodeSources(java.net.URL)

    // Skipping method: true false false false false 

    /// public java.util.zip.ZipEntry java.util.jar.JarFile.getEntry(java.lang.String)

    // Skipping method: false true false false false 

    /// public synchronized java.io.InputStream java.util.jar.JarFile.getInputStream(java.util.zip.ZipEntry) throws java.io.IOException

    private static var getInputStream_MethodID_6: jmethodID?

    open func getInputStream( ze: ZipEntry? ) throws /* java.io.IOException */ -> /* class java.io.InputStream */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: ze, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getInputStream", methodSig: "(Ljava/util/zip/ZipEntry;)Ljava/io/InputStream;", methodCache: &JarFile.getInputStream_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.io.IOException */ UnavailableObject( javaObject: throwable )
        }
        return __return != nil ? /* class java.io.InputStream */ UnavailableObject( javaObject: __return ) : nil
    }

    override open func getInputStream( _ _ze: ZipEntry? ) throws /* java.io.IOException */ -> /* class java.io.InputStream */ UnavailableObject! {
        return try getInputStream( ze: _ze )
    }

    /// public java.util.jar.JarEntry java.util.jar.JarFile.getJarEntry(java.lang.String)

    private static var getJarEntry_MethodID_7: jmethodID?

    open func getJarEntry( name: String? ) -> JarEntry! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: name, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getJarEntry", methodSig: "(Ljava/lang/String;)Ljava/util/jar/JarEntry;", methodCache: &JarFile.getJarEntry_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JarEntry( javaObject: __return ) : nil
    }

    open func getJarEntry( _ _name: String? ) -> JarEntry! {
        return getJarEntry( name: _name )
    }

    /// private java.util.jar.JarEntry java.util.jar.JarFile.getManEntry()

    /// public java.util.jar.Manifest java.util.jar.JarFile.getManifest() throws java.io.IOException

    private static var getManifest_MethodID_8: jmethodID?

    open func getManifest() throws /* java.io.IOException */ -> Manifest! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getManifest", methodSig: "()Ljava/util/jar/Manifest;", methodCache: &JarFile.getManifest_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.io.IOException */ UnavailableObject( javaObject: throwable )
        }
        return __return != nil ? Manifest( javaObject: __return ) : nil
    }


    /// java.util.List java.util.jar.JarFile.getManifestDigests()

    // Skipping method: true false false false false 

    /// private java.util.jar.Manifest java.util.jar.JarFile.getManifestFromReference() throws java.io.IOException

    /// private native java.lang.String[] java.util.jar.JarFile.getMetaInfEntryNames()

    /// boolean java.util.jar.JarFile.hasClassPathAttribute() throws java.io.IOException

    // Skipping method: true false false false false 

    /// private void java.util.jar.JarFile.initializeVerifier()

    /// private boolean java.util.jar.JarFile.isKnownNotToHaveSpecialAttributes()

    /// private boolean java.util.jar.JarFile.match(char[],byte[],int[],int[])

    /// private void java.util.jar.JarFile.maybeInstantiateVerifier() throws java.io.IOException

    /// java.util.jar.JarEntry java.util.jar.JarFile.newEntry(java.util.zip.ZipEntry)

    // Skipping method: true false false false false 

    /// void java.util.jar.JarFile.setEagerValidation(boolean)

    // Skipping method: true false false false false 

    /// public java.util.stream.Stream java.util.jar.JarFile.stream()

    // Skipping method: false true false false false 

    /// private java.util.Enumeration java.util.jar.JarFile.unsignedEntryNames()

}

