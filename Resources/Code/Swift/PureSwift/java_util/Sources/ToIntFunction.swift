
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.util.function.ToIntFunction ///

public protocol ToIntFunction: JavaProtocol {

    /// public abstract int java.util.function.ToIntFunction.applyAsInt(java.lang.Object)

    func applyAsInt( value: java_swift.JavaObject? ) -> Int

}


open class ToIntFunctionForward: JNIObjectForward, ToIntFunction {

    private static var ToIntFunctionJNIClass: jclass?

    /// public abstract int java.util.function.ToIntFunction.applyAsInt(java.lang.Object)

    private static var applyAsInt_MethodID_2: jmethodID?

    open func applyAsInt( value: java_swift.JavaObject? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: value, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "applyAsInt", methodSig: "(Ljava/lang/Object;)I", methodCache: &ToIntFunctionForward.applyAsInt_MethodID_2, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func applyAsInt( _ _value: java_swift.JavaObject? ) -> Int {
        return applyAsInt( value: _value )
    }

}

