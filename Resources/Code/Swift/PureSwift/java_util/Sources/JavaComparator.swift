
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.util.Comparator ///

public protocol JavaComparator: JavaProtocol {

    /// private static java.lang.Object java.util.Comparator.$deserializeLambda$(java.lang.invoke.SerializedLambda)

    /// public static java.util.Comparator java.util.Comparator.comparing(java.util.function.Function)

    //    class func comparing( keyExtractor: Function? ) -> JavaComparator!

    /// public static java.util.Comparator java.util.Comparator.comparing(java.util.function.Function,java.util.Comparator)

    //    class func comparing( keyExtractor: Function?, keyComparator: JavaComparator? ) -> JavaComparator!

    /// public static java.util.Comparator java.util.Comparator.comparingDouble(java.util.function.ToDoubleFunction)

    //    class func comparingDouble( keyExtractor: ToDoubleFunction? ) -> JavaComparator!

    /// public static java.util.Comparator java.util.Comparator.comparingInt(java.util.function.ToIntFunction)

    //    class func comparingInt( keyExtractor: ToIntFunction? ) -> JavaComparator!

    /// public static java.util.Comparator java.util.Comparator.comparingLong(java.util.function.ToLongFunction)

    //    class func comparingLong( keyExtractor: ToLongFunction? ) -> JavaComparator!

    /// private static int java.util.Comparator.lambda$comparingDouble$8dcf42ea$1(java.util.function.ToDoubleFunction,java.lang.Object,java.lang.Object)

    /// private static int java.util.Comparator.lambda$comparingInt$7b0bb60$1(java.util.function.ToIntFunction,java.lang.Object,java.lang.Object)

    /// private static int java.util.Comparator.lambda$comparingLong$6043328a$1(java.util.function.ToLongFunction,java.lang.Object,java.lang.Object)

    /// private static int java.util.Comparator.lambda$comparing$77a9974f$1(java.util.function.Function,java.lang.Object,java.lang.Object)

    /// private static int java.util.Comparator.lambda$comparing$ea9a8b3a$1(java.util.Comparator,java.util.function.Function,java.lang.Object,java.lang.Object)

    /// public static java.util.Comparator java.util.Comparator.naturalOrder()

    //    class func naturalOrder() -> JavaComparator!

    /// public static java.util.Comparator java.util.Comparator.nullsFirst(java.util.Comparator)

    //    class func nullsFirst( comparator: JavaComparator? ) -> JavaComparator!

    /// public static java.util.Comparator java.util.Comparator.nullsLast(java.util.Comparator)

    //    class func nullsLast( comparator: JavaComparator? ) -> JavaComparator!

    /// public static java.util.Comparator java.util.Comparator.reverseOrder()

    //    class func reverseOrder() -> JavaComparator!

    /// public abstract int java.util.Comparator.compare(java.lang.Object,java.lang.Object)

    func compare( o1: java_swift.JavaObject?, o2: java_swift.JavaObject? ) -> Int

    /// public abstract boolean java.util.Comparator.equals(java.lang.Object)

    func equals( obj: java_swift.JavaObject? ) -> Bool

    /// private int java.util.Comparator.lambda$thenComparing$36697e65$1(java.util.Comparator,java.lang.Object,java.lang.Object)

    /// public default java.util.Comparator java.util.Comparator.reversed()

    func reversed() -> JavaComparator!

    /// public default java.util.Comparator java.util.Comparator.thenComparing(java.util.function.Function)

    func thenComparing( keyExtractor: Function? ) -> JavaComparator!

    /// public default java.util.Comparator java.util.Comparator.thenComparing(java.util.function.Function,java.util.Comparator)

    func thenComparing( keyExtractor: Function?, keyComparator: JavaComparator? ) -> JavaComparator!

    /// public default java.util.Comparator java.util.Comparator.thenComparing(java.util.Comparator)

    func thenComparing( other: JavaComparator? ) -> JavaComparator!

    /// public default java.util.Comparator java.util.Comparator.thenComparingDouble(java.util.function.ToDoubleFunction)

    func thenComparingDouble( keyExtractor: ToDoubleFunction? ) -> JavaComparator!

    /// public default java.util.Comparator java.util.Comparator.thenComparingInt(java.util.function.ToIntFunction)

    func thenComparingInt( keyExtractor: ToIntFunction? ) -> JavaComparator!

    /// public default java.util.Comparator java.util.Comparator.thenComparingLong(java.util.function.ToLongFunction)

    func thenComparingLong( keyExtractor: ToLongFunction? ) -> JavaComparator!

}


open class JavaComparatorForward: JNIObjectForward, JavaComparator {

    private static var JavaComparatorJNIClass: jclass?

    /// public static java.util.Comparator java.util.Comparator.comparing(java.util.function.Function)

    private static var comparing_MethodID_19: jmethodID?

    open class func comparing( keyExtractor: Function? ) -> JavaComparator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: keyExtractor, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/Comparator", classCache: &JavaComparatorJNIClass, methodName: "comparing", methodSig: "(Ljava/util/function/Function;)Ljava/util/Comparator;", methodCache: &comparing_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaComparatorForward( javaObject: __return ) : nil
    }

    open class func comparing( _ _keyExtractor: Function? ) -> JavaComparator! {
        return comparing( keyExtractor: _keyExtractor )
    }

    /// public static java.util.Comparator java.util.Comparator.comparing(java.util.function.Function,java.util.Comparator)

    private static var comparing_MethodID_20: jmethodID?

    open class func comparing( keyExtractor: Function?, keyComparator: JavaComparator? ) -> JavaComparator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: keyExtractor, locals: &__locals )
        __args[1] = JNIType.toJava( value: keyComparator, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/Comparator", classCache: &JavaComparatorJNIClass, methodName: "comparing", methodSig: "(Ljava/util/function/Function;Ljava/util/Comparator;)Ljava/util/Comparator;", methodCache: &comparing_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaComparatorForward( javaObject: __return ) : nil
    }

    open class func comparing( _ _keyExtractor: Function?, _ _keyComparator: JavaComparator? ) -> JavaComparator! {
        return comparing( keyExtractor: _keyExtractor, keyComparator: _keyComparator )
    }

    /// public static java.util.Comparator java.util.Comparator.comparingDouble(java.util.function.ToDoubleFunction)

    private static var comparingDouble_MethodID_21: jmethodID?

    open class func comparingDouble( keyExtractor: ToDoubleFunction? ) -> JavaComparator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: keyExtractor, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/Comparator", classCache: &JavaComparatorJNIClass, methodName: "comparingDouble", methodSig: "(Ljava/util/function/ToDoubleFunction;)Ljava/util/Comparator;", methodCache: &comparingDouble_MethodID_21, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaComparatorForward( javaObject: __return ) : nil
    }

    open class func comparingDouble( _ _keyExtractor: ToDoubleFunction? ) -> JavaComparator! {
        return comparingDouble( keyExtractor: _keyExtractor )
    }

    /// public static java.util.Comparator java.util.Comparator.comparingInt(java.util.function.ToIntFunction)

    private static var comparingInt_MethodID_22: jmethodID?

    open class func comparingInt( keyExtractor: ToIntFunction? ) -> JavaComparator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: keyExtractor, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/Comparator", classCache: &JavaComparatorJNIClass, methodName: "comparingInt", methodSig: "(Ljava/util/function/ToIntFunction;)Ljava/util/Comparator;", methodCache: &comparingInt_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaComparatorForward( javaObject: __return ) : nil
    }

    open class func comparingInt( _ _keyExtractor: ToIntFunction? ) -> JavaComparator! {
        return comparingInt( keyExtractor: _keyExtractor )
    }

    /// public static java.util.Comparator java.util.Comparator.comparingLong(java.util.function.ToLongFunction)

    private static var comparingLong_MethodID_23: jmethodID?

    open class func comparingLong( keyExtractor: ToLongFunction? ) -> JavaComparator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: keyExtractor, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/Comparator", classCache: &JavaComparatorJNIClass, methodName: "comparingLong", methodSig: "(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;", methodCache: &comparingLong_MethodID_23, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaComparatorForward( javaObject: __return ) : nil
    }

    open class func comparingLong( _ _keyExtractor: ToLongFunction? ) -> JavaComparator! {
        return comparingLong( keyExtractor: _keyExtractor )
    }

    /// public static java.util.Comparator java.util.Comparator.naturalOrder()

    private static var naturalOrder_MethodID_24: jmethodID?

    open class func naturalOrder() -> JavaComparator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/Comparator", classCache: &JavaComparatorJNIClass, methodName: "naturalOrder", methodSig: "()Ljava/util/Comparator;", methodCache: &naturalOrder_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaComparatorForward( javaObject: __return ) : nil
    }


    /// public static java.util.Comparator java.util.Comparator.nullsFirst(java.util.Comparator)

    private static var nullsFirst_MethodID_25: jmethodID?

    open class func nullsFirst( comparator: JavaComparator? ) -> JavaComparator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: comparator, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/Comparator", classCache: &JavaComparatorJNIClass, methodName: "nullsFirst", methodSig: "(Ljava/util/Comparator;)Ljava/util/Comparator;", methodCache: &nullsFirst_MethodID_25, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaComparatorForward( javaObject: __return ) : nil
    }

    open class func nullsFirst( _ _comparator: JavaComparator? ) -> JavaComparator! {
        return nullsFirst( comparator: _comparator )
    }

    /// public static java.util.Comparator java.util.Comparator.nullsLast(java.util.Comparator)

    private static var nullsLast_MethodID_26: jmethodID?

    open class func nullsLast( comparator: JavaComparator? ) -> JavaComparator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: comparator, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/Comparator", classCache: &JavaComparatorJNIClass, methodName: "nullsLast", methodSig: "(Ljava/util/Comparator;)Ljava/util/Comparator;", methodCache: &nullsLast_MethodID_26, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaComparatorForward( javaObject: __return ) : nil
    }

    open class func nullsLast( _ _comparator: JavaComparator? ) -> JavaComparator! {
        return nullsLast( comparator: _comparator )
    }

    /// public static java.util.Comparator java.util.Comparator.reverseOrder()

    private static var reverseOrder_MethodID_27: jmethodID?

    open class func reverseOrder() -> JavaComparator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/util/Comparator", classCache: &JavaComparatorJNIClass, methodName: "reverseOrder", methodSig: "()Ljava/util/Comparator;", methodCache: &reverseOrder_MethodID_27, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaComparatorForward( javaObject: __return ) : nil
    }


    /// public abstract int java.util.Comparator.compare(java.lang.Object,java.lang.Object)

    private static var compare_MethodID_28: jmethodID?

    open func compare( o1: java_swift.JavaObject?, o2: java_swift.JavaObject? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: o1, locals: &__locals )
        __args[1] = JNIType.toJava( value: o2, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compare", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)I", methodCache: &JavaComparatorForward.compare_MethodID_28, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func compare( _ _o1: java_swift.JavaObject?, _ _o2: java_swift.JavaObject? ) -> Int {
        return compare( o1: _o1, o2: _o2 )
    }

    /// public abstract boolean java.util.Comparator.equals(java.lang.Object)

    private static var equals_MethodID_29: jmethodID?

    open func equals( obj: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: obj, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &JavaComparatorForward.equals_MethodID_29, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
        return equals( obj: _obj )
    }

    /// public default java.util.Comparator java.util.Comparator.reversed()

    private static var reversed_MethodID_30: jmethodID?

    open func reversed() -> JavaComparator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "reversed", methodSig: "()Ljava/util/Comparator;", methodCache: &JavaComparatorForward.reversed_MethodID_30, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaComparatorForward( javaObject: __return ) : nil
    }


    /// public default java.util.Comparator java.util.Comparator.thenComparing(java.util.function.Function)

    private static var thenComparing_MethodID_31: jmethodID?

    open func thenComparing( keyExtractor: Function? ) -> JavaComparator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: keyExtractor, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "thenComparing", methodSig: "(Ljava/util/function/Function;)Ljava/util/Comparator;", methodCache: &JavaComparatorForward.thenComparing_MethodID_31, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaComparatorForward( javaObject: __return ) : nil
    }

    open func thenComparing( _ _keyExtractor: Function? ) -> JavaComparator! {
        return thenComparing( keyExtractor: _keyExtractor )
    }

    /// public default java.util.Comparator java.util.Comparator.thenComparing(java.util.function.Function,java.util.Comparator)

    private static var thenComparing_MethodID_32: jmethodID?

    open func thenComparing( keyExtractor: Function?, keyComparator: JavaComparator? ) -> JavaComparator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: keyExtractor, locals: &__locals )
        __args[1] = JNIType.toJava( value: keyComparator, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "thenComparing", methodSig: "(Ljava/util/function/Function;Ljava/util/Comparator;)Ljava/util/Comparator;", methodCache: &JavaComparatorForward.thenComparing_MethodID_32, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaComparatorForward( javaObject: __return ) : nil
    }

    open func thenComparing( _ _keyExtractor: Function?, _ _keyComparator: JavaComparator? ) -> JavaComparator! {
        return thenComparing( keyExtractor: _keyExtractor, keyComparator: _keyComparator )
    }

    /// public default java.util.Comparator java.util.Comparator.thenComparing(java.util.Comparator)

    private static var thenComparing_MethodID_33: jmethodID?

    open func thenComparing( other: JavaComparator? ) -> JavaComparator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: other, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "thenComparing", methodSig: "(Ljava/util/Comparator;)Ljava/util/Comparator;", methodCache: &JavaComparatorForward.thenComparing_MethodID_33, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaComparatorForward( javaObject: __return ) : nil
    }

    open func thenComparing( _ _other: JavaComparator? ) -> JavaComparator! {
        return thenComparing( other: _other )
    }

    /// public default java.util.Comparator java.util.Comparator.thenComparingDouble(java.util.function.ToDoubleFunction)

    private static var thenComparingDouble_MethodID_34: jmethodID?

    open func thenComparingDouble( keyExtractor: ToDoubleFunction? ) -> JavaComparator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: keyExtractor, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "thenComparingDouble", methodSig: "(Ljava/util/function/ToDoubleFunction;)Ljava/util/Comparator;", methodCache: &JavaComparatorForward.thenComparingDouble_MethodID_34, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaComparatorForward( javaObject: __return ) : nil
    }

    open func thenComparingDouble( _ _keyExtractor: ToDoubleFunction? ) -> JavaComparator! {
        return thenComparingDouble( keyExtractor: _keyExtractor )
    }

    /// public default java.util.Comparator java.util.Comparator.thenComparingInt(java.util.function.ToIntFunction)

    private static var thenComparingInt_MethodID_35: jmethodID?

    open func thenComparingInt( keyExtractor: ToIntFunction? ) -> JavaComparator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: keyExtractor, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "thenComparingInt", methodSig: "(Ljava/util/function/ToIntFunction;)Ljava/util/Comparator;", methodCache: &JavaComparatorForward.thenComparingInt_MethodID_35, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaComparatorForward( javaObject: __return ) : nil
    }

    open func thenComparingInt( _ _keyExtractor: ToIntFunction? ) -> JavaComparator! {
        return thenComparingInt( keyExtractor: _keyExtractor )
    }

    /// public default java.util.Comparator java.util.Comparator.thenComparingLong(java.util.function.ToLongFunction)

    private static var thenComparingLong_MethodID_36: jmethodID?

    open func thenComparingLong( keyExtractor: ToLongFunction? ) -> JavaComparator! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: keyExtractor, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "thenComparingLong", methodSig: "(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;", methodCache: &JavaComparatorForward.thenComparingLong_MethodID_36, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaComparatorForward( javaObject: __return ) : nil
    }

    open func thenComparingLong( _ _keyExtractor: ToLongFunction? ) -> JavaComparator! {
        return thenComparingLong( keyExtractor: _keyExtractor )
    }

}

