
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.concurrent.atomic.AtomicLongArray ///

open class AtomicLongArray: java_swift.JavaObject, /* interface java.io.Serializable */ UnavailableProtocol {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AtomicLongArrayJNIClass: jclass?

    /// private static final int java.util.concurrent.atomic.AtomicLongArray.base

    /// private static final long java.util.concurrent.atomic.AtomicLongArray.serialVersionUID

    /// private static final int java.util.concurrent.atomic.AtomicLongArray.shift

    /// private static final sun.misc.Unsafe java.util.concurrent.atomic.AtomicLongArray.unsafe

    /// private final long[] java.util.concurrent.atomic.AtomicLongArray.array

    /// public java.util.concurrent.atomic.AtomicLongArray(int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( length: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(length) )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/atomic/AtomicLongArray", classCache: &AtomicLongArray.AtomicLongArrayJNIClass, methodSig: "(I)V", methodCache: &AtomicLongArray.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _length: Int ) {
        self.init( length: _length )
    }

    /// public java.util.concurrent.atomic.AtomicLongArray(long[])

    private static var new_MethodID_2: jmethodID?

    public convenience init( array: [Int64]? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: array, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/concurrent/atomic/AtomicLongArray", classCache: &AtomicLongArray.AtomicLongArrayJNIClass, methodSig: "([J)V", methodCache: &AtomicLongArray.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _array: [Int64]? ) {
        self.init( array: _array )
    }

    /// private static long java.util.concurrent.atomic.AtomicLongArray.byteOffset(int)

    /// public final long java.util.concurrent.atomic.AtomicLongArray.accumulateAndGet(int,long,java.util.function.LongBinaryOperator)

    private static var accumulateAndGet_MethodID_3: jmethodID?

    open func accumulateAndGet( i: Int, x: Int64, accumulatorFunction: LongBinaryOperator? ) -> Int64 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = jvalue( i: jint(i) )
        __args[1] = jvalue( j: x )
        __args[2] = JNIType.toJava( value: accumulatorFunction, locals: &__locals )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "accumulateAndGet", methodSig: "(IJLjava/util/function/LongBinaryOperator;)J", methodCache: &AtomicLongArray.accumulateAndGet_MethodID_3, args: &__args, locals: &__locals )
        return __return
    }

    open func accumulateAndGet( _ _i: Int, _ _x: Int64, _ _accumulatorFunction: LongBinaryOperator? ) -> Int64 {
        return accumulateAndGet( i: _i, x: _x, accumulatorFunction: _accumulatorFunction )
    }

    /// public long java.util.concurrent.atomic.AtomicLongArray.addAndGet(int,long)

    private static var addAndGet_MethodID_4: jmethodID?

    open func addAndGet( i: Int, delta: Int64 ) -> Int64 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(i) )
        __args[1] = jvalue( j: delta )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "addAndGet", methodSig: "(IJ)J", methodCache: &AtomicLongArray.addAndGet_MethodID_4, args: &__args, locals: &__locals )
        return __return
    }

    open func addAndGet( _ _i: Int, _ _delta: Int64 ) -> Int64 {
        return addAndGet( i: _i, delta: _delta )
    }

    /// private long java.util.concurrent.atomic.AtomicLongArray.checkedByteOffset(int)

    /// public final boolean java.util.concurrent.atomic.AtomicLongArray.compareAndSet(int,long,long)

    private static var compareAndSet_MethodID_5: jmethodID?

    open func compareAndSet( i: Int, expect: Int64, update: Int64 ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = jvalue( i: jint(i) )
        __args[1] = jvalue( j: expect )
        __args[2] = jvalue( j: update )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "compareAndSet", methodSig: "(IJJ)Z", methodCache: &AtomicLongArray.compareAndSet_MethodID_5, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func compareAndSet( _ _i: Int, _ _expect: Int64, _ _update: Int64 ) -> Bool {
        return compareAndSet( i: _i, expect: _expect, update: _update )
    }

    /// private boolean java.util.concurrent.atomic.AtomicLongArray.compareAndSetRaw(long,long,long)

    /// public final long java.util.concurrent.atomic.AtomicLongArray.decrementAndGet(int)

    private static var decrementAndGet_MethodID_6: jmethodID?

    open func decrementAndGet( i: Int ) -> Int64 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "decrementAndGet", methodSig: "(I)J", methodCache: &AtomicLongArray.decrementAndGet_MethodID_6, args: &__args, locals: &__locals )
        return __return
    }

    open func decrementAndGet( _ _i: Int ) -> Int64 {
        return decrementAndGet( i: _i )
    }

    /// public final long java.util.concurrent.atomic.AtomicLongArray.get(int)

    private static var get_MethodID_7: jmethodID?

    open func get( i: Int ) -> Int64 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "get", methodSig: "(I)J", methodCache: &AtomicLongArray.get_MethodID_7, args: &__args, locals: &__locals )
        return __return
    }

    open func get( _ _i: Int ) -> Int64 {
        return get( i: _i )
    }

    /// public final long java.util.concurrent.atomic.AtomicLongArray.getAndAccumulate(int,long,java.util.function.LongBinaryOperator)

    private static var getAndAccumulate_MethodID_8: jmethodID?

    open func getAndAccumulate( i: Int, x: Int64, accumulatorFunction: LongBinaryOperator? ) -> Int64 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = jvalue( i: jint(i) )
        __args[1] = jvalue( j: x )
        __args[2] = JNIType.toJava( value: accumulatorFunction, locals: &__locals )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getAndAccumulate", methodSig: "(IJLjava/util/function/LongBinaryOperator;)J", methodCache: &AtomicLongArray.getAndAccumulate_MethodID_8, args: &__args, locals: &__locals )
        return __return
    }

    open func getAndAccumulate( _ _i: Int, _ _x: Int64, _ _accumulatorFunction: LongBinaryOperator? ) -> Int64 {
        return getAndAccumulate( i: _i, x: _x, accumulatorFunction: _accumulatorFunction )
    }

    /// public final long java.util.concurrent.atomic.AtomicLongArray.getAndAdd(int,long)

    private static var getAndAdd_MethodID_9: jmethodID?

    open func getAndAdd( i: Int, delta: Int64 ) -> Int64 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(i) )
        __args[1] = jvalue( j: delta )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getAndAdd", methodSig: "(IJ)J", methodCache: &AtomicLongArray.getAndAdd_MethodID_9, args: &__args, locals: &__locals )
        return __return
    }

    open func getAndAdd( _ _i: Int, _ _delta: Int64 ) -> Int64 {
        return getAndAdd( i: _i, delta: _delta )
    }

    /// public final long java.util.concurrent.atomic.AtomicLongArray.getAndDecrement(int)

    private static var getAndDecrement_MethodID_10: jmethodID?

    open func getAndDecrement( i: Int ) -> Int64 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getAndDecrement", methodSig: "(I)J", methodCache: &AtomicLongArray.getAndDecrement_MethodID_10, args: &__args, locals: &__locals )
        return __return
    }

    open func getAndDecrement( _ _i: Int ) -> Int64 {
        return getAndDecrement( i: _i )
    }

    /// public final long java.util.concurrent.atomic.AtomicLongArray.getAndIncrement(int)

    private static var getAndIncrement_MethodID_11: jmethodID?

    open func getAndIncrement( i: Int ) -> Int64 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getAndIncrement", methodSig: "(I)J", methodCache: &AtomicLongArray.getAndIncrement_MethodID_11, args: &__args, locals: &__locals )
        return __return
    }

    open func getAndIncrement( _ _i: Int ) -> Int64 {
        return getAndIncrement( i: _i )
    }

    /// public final long java.util.concurrent.atomic.AtomicLongArray.getAndSet(int,long)

    private static var getAndSet_MethodID_12: jmethodID?

    open func getAndSet( i: Int, newValue: Int64 ) -> Int64 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(i) )
        __args[1] = jvalue( j: newValue )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getAndSet", methodSig: "(IJ)J", methodCache: &AtomicLongArray.getAndSet_MethodID_12, args: &__args, locals: &__locals )
        return __return
    }

    open func getAndSet( _ _i: Int, _ _newValue: Int64 ) -> Int64 {
        return getAndSet( i: _i, newValue: _newValue )
    }

    /// public final long java.util.concurrent.atomic.AtomicLongArray.getAndUpdate(int,java.util.function.LongUnaryOperator)

    private static var getAndUpdate_MethodID_13: jmethodID?

    open func getAndUpdate( i: Int, updateFunction: LongUnaryOperator? ) -> Int64 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(i) )
        __args[1] = JNIType.toJava( value: updateFunction, locals: &__locals )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getAndUpdate", methodSig: "(ILjava/util/function/LongUnaryOperator;)J", methodCache: &AtomicLongArray.getAndUpdate_MethodID_13, args: &__args, locals: &__locals )
        return __return
    }

    open func getAndUpdate( _ _i: Int, _ _updateFunction: LongUnaryOperator? ) -> Int64 {
        return getAndUpdate( i: _i, updateFunction: _updateFunction )
    }

    /// private long java.util.concurrent.atomic.AtomicLongArray.getRaw(long)

    /// public final long java.util.concurrent.atomic.AtomicLongArray.incrementAndGet(int)

    private static var incrementAndGet_MethodID_14: jmethodID?

    open func incrementAndGet( i: Int ) -> Int64 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "incrementAndGet", methodSig: "(I)J", methodCache: &AtomicLongArray.incrementAndGet_MethodID_14, args: &__args, locals: &__locals )
        return __return
    }

    open func incrementAndGet( _ _i: Int ) -> Int64 {
        return incrementAndGet( i: _i )
    }

    /// public final void java.util.concurrent.atomic.AtomicLongArray.lazySet(int,long)

    private static var lazySet_MethodID_15: jmethodID?

    open func lazySet( i: Int, newValue: Int64 ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(i) )
        __args[1] = jvalue( j: newValue )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "lazySet", methodSig: "(IJ)V", methodCache: &AtomicLongArray.lazySet_MethodID_15, args: &__args, locals: &__locals )
    }

    open func lazySet( _ _i: Int, _ _newValue: Int64 ) {
        lazySet( i: _i, newValue: _newValue )
    }

    /// public final int java.util.concurrent.atomic.AtomicLongArray.length()

    private static var length_MethodID_16: jmethodID?

    open func length() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "length", methodSig: "()I", methodCache: &AtomicLongArray.length_MethodID_16, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public final void java.util.concurrent.atomic.AtomicLongArray.set(int,long)

    private static var set_MethodID_17: jmethodID?

    open func set( i: Int, newValue: Int64 ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(i) )
        __args[1] = jvalue( j: newValue )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "set", methodSig: "(IJ)V", methodCache: &AtomicLongArray.set_MethodID_17, args: &__args, locals: &__locals )
    }

    open func set( _ _i: Int, _ _newValue: Int64 ) {
        set( i: _i, newValue: _newValue )
    }

    /// public java.lang.String java.util.concurrent.atomic.AtomicLongArray.toString()

    // Skipping method: false true false false false 

    /// public final long java.util.concurrent.atomic.AtomicLongArray.updateAndGet(int,java.util.function.LongUnaryOperator)

    private static var updateAndGet_MethodID_18: jmethodID?

    open func updateAndGet( i: Int, updateFunction: LongUnaryOperator? ) -> Int64 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(i) )
        __args[1] = JNIType.toJava( value: updateFunction, locals: &__locals )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "updateAndGet", methodSig: "(ILjava/util/function/LongUnaryOperator;)J", methodCache: &AtomicLongArray.updateAndGet_MethodID_18, args: &__args, locals: &__locals )
        return __return
    }

    open func updateAndGet( _ _i: Int, _ _updateFunction: LongUnaryOperator? ) -> Int64 {
        return updateAndGet( i: _i, updateFunction: _updateFunction )
    }

    /// public final boolean java.util.concurrent.atomic.AtomicLongArray.weakCompareAndSet(int,long,long)

    private static var weakCompareAndSet_MethodID_19: jmethodID?

    open func weakCompareAndSet( i: Int, expect: Int64, update: Int64 ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = jvalue( i: jint(i) )
        __args[1] = jvalue( j: expect )
        __args[2] = jvalue( j: update )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "weakCompareAndSet", methodSig: "(IJJ)Z", methodCache: &AtomicLongArray.weakCompareAndSet_MethodID_19, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func weakCompareAndSet( _ _i: Int, _ _expect: Int64, _ _update: Int64 ) -> Bool {
        return weakCompareAndSet( i: _i, expect: _expect, update: _update )
    }

}

