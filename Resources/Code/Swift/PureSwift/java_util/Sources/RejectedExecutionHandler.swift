
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.util.concurrent.RejectedExecutionHandler ///

public protocol RejectedExecutionHandler: JavaProtocol {

    /// public abstract void java.util.concurrent.RejectedExecutionHandler.rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)

    func rejectedExecution( r: java_swift.Runnable?, executor: ThreadPoolExecutor? )

}


open class RejectedExecutionHandlerForward: JNIObjectForward, RejectedExecutionHandler {

    private static var RejectedExecutionHandlerJNIClass: jclass?

    /// public abstract void java.util.concurrent.RejectedExecutionHandler.rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)

    private static var rejectedExecution_MethodID_2: jmethodID?

    open func rejectedExecution( r: java_swift.Runnable?, executor: ThreadPoolExecutor? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: r, locals: &__locals )
        __args[1] = JNIType.toJava( value: executor, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "rejectedExecution", methodSig: "(Ljava/lang/Runnable;Ljava/util/concurrent/ThreadPoolExecutor;)V", methodCache: &RejectedExecutionHandlerForward.rejectedExecution_MethodID_2, args: &__args, locals: &__locals )
    }

    open func rejectedExecution( _ _r: java_swift.Runnable?, _ _executor: ThreadPoolExecutor? ) {
        rejectedExecution( r: _r, executor: _executor )
    }

}

private typealias RejectedExecutionHandler_rejectedExecution_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject?, _: jobject? ) -> ()

private func RejectedExecutionHandler_rejectedExecution_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ r: jobject?, _ executor: jobject? ) -> () {
    RejectedExecutionHandlerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).rejectedExecution( r: r != nil ? java_swift.RunnableForward( javaObject: r ) : nil, executor: executor != nil ? ThreadPoolExecutor( javaObject: executor ) : nil )
}

fileprivate class RejectedExecutionHandlerLocal_: JNILocalProxy<RejectedExecutionHandler, Any> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let RejectedExecutionHandler_rejectedExecution_0_thunk: RejectedExecutionHandler_rejectedExecution_0_type = RejectedExecutionHandler_rejectedExecution_0
        natives.append( JNINativeMethod( name: strdup("__rejectedExecution"), signature: strdup("(JLjava/lang/Runnable;Ljava/util/concurrent/ThreadPoolExecutor;)V"), fnPtr: unsafeBitCast( RejectedExecutionHandler_rejectedExecution_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        natives.withUnsafeBufferPointer {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr.baseAddress, jint(nativesPtr.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/java_util/RejectedExecutionHandlerProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

extension RejectedExecutionHandler {

    public func localJavaObject( _ locals: UnsafeMutablePointer<[jobject]> ) -> jobject? {
        return RejectedExecutionHandlerLocal_( owned: self, proto: self ).localJavaObject( locals )
    }

}

open class RejectedExecutionHandlerBase: RejectedExecutionHandler {

    public init() {}

    /// public abstract void java.util.concurrent.RejectedExecutionHandler.rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)

    open func rejectedExecution( r: java_swift.Runnable?, executor: ThreadPoolExecutor? ) /**/ {
    }


}
