
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.zip.InflaterInputStream ///

open class InflaterInputStream: /* class java.io.FilterInputStream */ UnavailableObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var InflaterInputStreamJNIClass: jclass?

    /// private byte[] java.util.zip.InflaterInputStream.b

    /// protected byte[] java.util.zip.InflaterInputStream.buf

    private static var buf_FieldID: jfieldID?

    open var buf: [Int8]! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "buf", fieldType: "[B", fieldCache: &InflaterInputStream.buf_FieldID, object: javaObject )
            return JNIType.toSwift( type: [Int8].self, from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "buf", fieldType: "[B", fieldCache: &InflaterInputStream.buf_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private boolean java.util.zip.InflaterInputStream.closed

    /// protected java.util.zip.Inflater java.util.zip.InflaterInputStream.inf

    private static var inf_FieldID: jfieldID?

    open var inf: Inflater! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "inf", fieldType: "Ljava/util/zip/Inflater;", fieldCache: &InflaterInputStream.inf_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? Inflater( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "inf", fieldType: "Ljava/util/zip/Inflater;", fieldCache: &InflaterInputStream.inf_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int java.util.zip.InflaterInputStream.len

    private static var len_FieldID: jfieldID?

    open var len: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "len", fieldType: "I", fieldCache: &InflaterInputStream.len_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "len", fieldType: "I", fieldCache: &InflaterInputStream.len_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// private boolean java.util.zip.InflaterInputStream.reachEOF

    /// private byte[] java.util.zip.InflaterInputStream.singleByteBuf

    /// boolean java.util.zip.InflaterInputStream.usesDefaultInflater

    // Skipping field: true false false false false false 

    /// protected volatile java.io.InputStream java.io.FilterInputStream.in

    private static var _in_FieldID: jfieldID?

    open var _in: /* class java.io.InputStream */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "in", fieldType: "Ljava/io/InputStream;", fieldCache: &InflaterInputStream._in_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class java.io.InputStream */ UnavailableObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "in", fieldType: "Ljava/io/InputStream;", fieldCache: &InflaterInputStream._in_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private static final int java.io.InputStream.MAX_SKIP_BUFFER_SIZE

    /// public java.util.zip.InflaterInputStream(java.io.InputStream)

    private static var new_MethodID_1: jmethodID?

    public convenience init( _in: /* class java.io.InputStream */ UnavailableObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: _in, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/zip/InflaterInputStream", classCache: &InflaterInputStream.InflaterInputStreamJNIClass, methodSig: "(Ljava/io/InputStream;)V", methodCache: &InflaterInputStream.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ __in: /* class java.io.InputStream */ UnavailableObject? ) {
        self.init( _in: __in )
    }

    /// public java.util.zip.InflaterInputStream(java.io.InputStream,java.util.zip.Inflater)

    private static var new_MethodID_2: jmethodID?

    public convenience init( _in: /* class java.io.InputStream */ UnavailableObject?, inf: Inflater? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: _in, locals: &__locals )
        __args[1] = JNIType.toJava( value: inf, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/util/zip/InflaterInputStream", classCache: &InflaterInputStream.InflaterInputStreamJNIClass, methodSig: "(Ljava/io/InputStream;Ljava/util/zip/Inflater;)V", methodCache: &InflaterInputStream.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ __in: /* class java.io.InputStream */ UnavailableObject?, _ _inf: Inflater? ) {
        self.init( _in: __in, inf: _inf )
    }

    /// public java.util.zip.InflaterInputStream(java.io.InputStream,java.util.zip.Inflater,int)

    private static var new_MethodID_3: jmethodID?

    public convenience init( _in: /* class java.io.InputStream */ UnavailableObject?, inf: Inflater?, size: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: _in, locals: &__locals )
        __args[1] = JNIType.toJava( value: inf, locals: &__locals )
        __args[2] = jvalue( i: jint(size) )
        let __object = JNIMethod.NewObject( className: "java/util/zip/InflaterInputStream", classCache: &InflaterInputStream.InflaterInputStreamJNIClass, methodSig: "(Ljava/io/InputStream;Ljava/util/zip/Inflater;I)V", methodCache: &InflaterInputStream.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ __in: /* class java.io.InputStream */ UnavailableObject?, _ _inf: Inflater?, _ _size: Int ) {
        self.init( _in: __in, inf: _inf, size: _size )
    }

    /// public int java.util.zip.InflaterInputStream.available() throws java.io.IOException

    private static var available_MethodID_4: jmethodID?

    open func available() throws /* java.io.IOException */ -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "available", methodSig: "()I", methodCache: &InflaterInputStream.available_MethodID_4, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.io.IOException */ UnavailableObject( javaObject: throwable )
        }
        return Int(__return)
    }


    /// public void java.util.zip.InflaterInputStream.close() throws java.io.IOException

    private static var close_MethodID_5: jmethodID?

    open func close() throws /* java.io.IOException */ {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "close", methodSig: "()V", methodCache: &InflaterInputStream.close_MethodID_5, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.io.IOException */ UnavailableObject( javaObject: throwable )
        }
    }


    /// private void java.util.zip.InflaterInputStream.ensureOpen() throws java.io.IOException

    /// protected void java.util.zip.InflaterInputStream.fill() throws java.io.IOException

    private static var fill_MethodID_6: jmethodID?

    open func fill() throws /* java.io.IOException */ {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "fill", methodSig: "()V", methodCache: &InflaterInputStream.fill_MethodID_6, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.io.IOException */ UnavailableObject( javaObject: throwable )
        }
    }


    /// public synchronized void java.util.zip.InflaterInputStream.mark(int)

    private static var mark_MethodID_7: jmethodID?

    open func mark( readlimit: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(readlimit) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "mark", methodSig: "(I)V", methodCache: &InflaterInputStream.mark_MethodID_7, args: &__args, locals: &__locals )
    }

    open func mark( _ _readlimit: Int ) {
        mark( readlimit: _readlimit )
    }

    /// public boolean java.util.zip.InflaterInputStream.markSupported()

    private static var markSupported_MethodID_8: jmethodID?

    open func markSupported() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "markSupported", methodSig: "()Z", methodCache: &InflaterInputStream.markSupported_MethodID_8, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public int java.util.zip.InflaterInputStream.read(byte[],int,int) throws java.io.IOException

    private static var read_MethodID_9: jmethodID?

    open func read( b: [Int8]?, off: Int, len: Int ) throws /* java.io.IOException */ -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: b, locals: &__locals )
        __args[1] = jvalue( i: jint(off) )
        __args[2] = jvalue( i: jint(len) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "read", methodSig: "([BII)I", methodCache: &InflaterInputStream.read_MethodID_9, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.io.IOException */ UnavailableObject( javaObject: throwable )
        }
        return Int(__return)
    }

    open func read( _ _b: [Int8]?, _ _off: Int, _ _len: Int ) throws /* java.io.IOException */ -> Int {
        return try read( b: _b, off: _off, len: _len )
    }

    /// public int java.util.zip.InflaterInputStream.read() throws java.io.IOException

    private static var read_MethodID_10: jmethodID?

    open func read() throws /* java.io.IOException */ -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "read", methodSig: "()I", methodCache: &InflaterInputStream.read_MethodID_10, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.io.IOException */ UnavailableObject( javaObject: throwable )
        }
        return Int(__return)
    }


    /// public synchronized void java.util.zip.InflaterInputStream.reset() throws java.io.IOException

    private static var reset_MethodID_11: jmethodID?

    open func reset() throws /* java.io.IOException */ {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "reset", methodSig: "()V", methodCache: &InflaterInputStream.reset_MethodID_11, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.io.IOException */ UnavailableObject( javaObject: throwable )
        }
    }


    /// public long java.util.zip.InflaterInputStream.skip(long) throws java.io.IOException

    private static var skip_MethodID_12: jmethodID?

    open func skip( n: Int64 ) throws /* java.io.IOException */ -> Int64 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( j: n )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "skip", methodSig: "(J)J", methodCache: &InflaterInputStream.skip_MethodID_12, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.io.IOException */ UnavailableObject( javaObject: throwable )
        }
        return __return
    }

    open func skip( _ _n: Int64 ) throws /* java.io.IOException */ -> Int64 {
        return try skip( n: _n )
    }

}

