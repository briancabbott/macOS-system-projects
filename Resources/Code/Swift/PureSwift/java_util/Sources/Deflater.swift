
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.zip.Deflater ///

open class Deflater: java_swift.JavaObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var DeflaterJNIClass: jclass?

    /// static final boolean java.util.zip.Deflater.$assertionsDisabled

    // Skipping field: true false false false false false 

    /// public static final int java.util.zip.Deflater.BEST_COMPRESSION

    private static var BEST_COMPRESSION_FieldID: jfieldID?

    public static var BEST_COMPRESSION: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "BEST_COMPRESSION", fieldType: "I", fieldCache: &BEST_COMPRESSION_FieldID, className: "java/util/zip/Deflater", classCache: &DeflaterJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.util.zip.Deflater.BEST_SPEED

    private static var BEST_SPEED_FieldID: jfieldID?

    public static var BEST_SPEED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "BEST_SPEED", fieldType: "I", fieldCache: &BEST_SPEED_FieldID, className: "java/util/zip/Deflater", classCache: &DeflaterJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.util.zip.Deflater.DEFAULT_COMPRESSION

    private static var DEFAULT_COMPRESSION_FieldID: jfieldID?

    public static var DEFAULT_COMPRESSION: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "DEFAULT_COMPRESSION", fieldType: "I", fieldCache: &DEFAULT_COMPRESSION_FieldID, className: "java/util/zip/Deflater", classCache: &DeflaterJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.util.zip.Deflater.DEFAULT_STRATEGY

    private static var DEFAULT_STRATEGY_FieldID: jfieldID?

    public static var DEFAULT_STRATEGY: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "DEFAULT_STRATEGY", fieldType: "I", fieldCache: &DEFAULT_STRATEGY_FieldID, className: "java/util/zip/Deflater", classCache: &DeflaterJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.util.zip.Deflater.DEFLATED

    private static var DEFLATED_FieldID: jfieldID?

    public static var DEFLATED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "DEFLATED", fieldType: "I", fieldCache: &DEFLATED_FieldID, className: "java/util/zip/Deflater", classCache: &DeflaterJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.util.zip.Deflater.FILTERED

    private static var FILTERED_FieldID: jfieldID?

    public static var FILTERED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "FILTERED", fieldType: "I", fieldCache: &FILTERED_FieldID, className: "java/util/zip/Deflater", classCache: &DeflaterJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.util.zip.Deflater.FULL_FLUSH

    private static var FULL_FLUSH_FieldID: jfieldID?

    public static var FULL_FLUSH: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "FULL_FLUSH", fieldType: "I", fieldCache: &FULL_FLUSH_FieldID, className: "java/util/zip/Deflater", classCache: &DeflaterJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.util.zip.Deflater.HUFFMAN_ONLY

    private static var HUFFMAN_ONLY_FieldID: jfieldID?

    public static var HUFFMAN_ONLY: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "HUFFMAN_ONLY", fieldType: "I", fieldCache: &HUFFMAN_ONLY_FieldID, className: "java/util/zip/Deflater", classCache: &DeflaterJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.util.zip.Deflater.NO_COMPRESSION

    private static var NO_COMPRESSION_FieldID: jfieldID?

    public static var NO_COMPRESSION: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "NO_COMPRESSION", fieldType: "I", fieldCache: &NO_COMPRESSION_FieldID, className: "java/util/zip/Deflater", classCache: &DeflaterJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.util.zip.Deflater.NO_FLUSH

    private static var NO_FLUSH_FieldID: jfieldID?

    public static var NO_FLUSH: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "NO_FLUSH", fieldType: "I", fieldCache: &NO_FLUSH_FieldID, className: "java/util/zip/Deflater", classCache: &DeflaterJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.util.zip.Deflater.SYNC_FLUSH

    private static var SYNC_FLUSH_FieldID: jfieldID?

    public static var SYNC_FLUSH: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SYNC_FLUSH", fieldType: "I", fieldCache: &SYNC_FLUSH_FieldID, className: "java/util/zip/Deflater", classCache: &DeflaterJNIClass )
            return Int(__value)
        }
    }

    /// private byte[] java.util.zip.Deflater.buf

    /// private long java.util.zip.Deflater.bytesRead

    /// private long java.util.zip.Deflater.bytesWritten

    /// private boolean java.util.zip.Deflater.finish

    /// private boolean java.util.zip.Deflater.finished

    /// private int java.util.zip.Deflater.len

    /// private int java.util.zip.Deflater.level

    /// private int java.util.zip.Deflater.off

    /// private boolean java.util.zip.Deflater.setParams

    /// private int java.util.zip.Deflater.strategy

    /// private final java.util.zip.ZStreamRef java.util.zip.Deflater.zsRef

    /// public java.util.zip.Deflater()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "java/util/zip/Deflater", classCache: &Deflater.DeflaterJNIClass, methodSig: "()V", methodCache: &Deflater.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.util.zip.Deflater(int)

    private static var new_MethodID_2: jmethodID?

    public convenience init( level: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(level) )
        let __object = JNIMethod.NewObject( className: "java/util/zip/Deflater", classCache: &Deflater.DeflaterJNIClass, methodSig: "(I)V", methodCache: &Deflater.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _level: Int ) {
        self.init( level: _level )
    }

    /// public java.util.zip.Deflater(int,boolean)

    private static var new_MethodID_3: jmethodID?

    public convenience init( level: Int, nowrap: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(level) )
        __args[1] = jvalue( z: jboolean(nowrap ? JNI_TRUE : JNI_FALSE) )
        let __object = JNIMethod.NewObject( className: "java/util/zip/Deflater", classCache: &Deflater.DeflaterJNIClass, methodSig: "(IZ)V", methodCache: &Deflater.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _level: Int, _ _nowrap: Bool ) {
        self.init( level: _level, nowrap: _nowrap )
    }

    /// private static native long java.util.zip.Deflater.init(int,int,boolean)

    /// private static native void java.util.zip.Deflater.end(long)

    /// private static native int java.util.zip.Deflater.getAdler(long)

    /// private static native void java.util.zip.Deflater.initIDs()

    /// private static native void java.util.zip.Deflater.reset(long)

    /// private static native void java.util.zip.Deflater.setDictionary(long,byte[],int,int)

    /// public int java.util.zip.Deflater.deflate(byte[])

    private static var deflate_MethodID_4: jmethodID?

    open func deflate( b: [Int8]? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: b, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "deflate", methodSig: "([B)I", methodCache: &Deflater.deflate_MethodID_4, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func deflate( _ _b: [Int8]? ) -> Int {
        return deflate( b: _b )
    }

    /// public int java.util.zip.Deflater.deflate(byte[],int,int)

    private static var deflate_MethodID_5: jmethodID?

    open func deflate( b: [Int8]?, off: Int, len: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: b, locals: &__locals )
        __args[1] = jvalue( i: jint(off) )
        __args[2] = jvalue( i: jint(len) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "deflate", methodSig: "([BII)I", methodCache: &Deflater.deflate_MethodID_5, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func deflate( _ _b: [Int8]?, _ _off: Int, _ _len: Int ) -> Int {
        return deflate( b: _b, off: _off, len: _len )
    }

    /// public int java.util.zip.Deflater.deflate(byte[],int,int,int)

    private static var deflate_MethodID_6: jmethodID?

    open func deflate( b: [Int8]?, off: Int, len: Int, flush: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        __args[0] = JNIType.toJava( value: b, locals: &__locals )
        __args[1] = jvalue( i: jint(off) )
        __args[2] = jvalue( i: jint(len) )
        __args[3] = jvalue( i: jint(flush) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "deflate", methodSig: "([BIII)I", methodCache: &Deflater.deflate_MethodID_6, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func deflate( _ _b: [Int8]?, _ _off: Int, _ _len: Int, _ _flush: Int ) -> Int {
        return deflate( b: _b, off: _off, len: _len, flush: _flush )
    }

    /// private native int java.util.zip.Deflater.deflateBytes(long,byte[],int,int,int)

    /// public void java.util.zip.Deflater.end()

    private static var end_MethodID_7: jmethodID?

    open func end() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "end", methodSig: "()V", methodCache: &Deflater.end_MethodID_7, args: &__args, locals: &__locals )
    }


    /// private void java.util.zip.Deflater.ensureOpen()

    /// protected void java.util.zip.Deflater.finalize()

    private static var finalize_MethodID_8: jmethodID?

    override open func finalize() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "finalize", methodSig: "()V", methodCache: &Deflater.finalize_MethodID_8, args: &__args, locals: &__locals )
    }


    /// public void java.util.zip.Deflater.finish()

    private static var finish_MethodID_9: jmethodID?

    open func finish() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "finish", methodSig: "()V", methodCache: &Deflater.finish_MethodID_9, args: &__args, locals: &__locals )
    }


    /// public boolean java.util.zip.Deflater.finished()

    private static var finished_MethodID_10: jmethodID?

    open func finished() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "finished", methodSig: "()Z", methodCache: &Deflater.finished_MethodID_10, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public int java.util.zip.Deflater.getAdler()

    private static var getAdler_MethodID_11: jmethodID?

    open func getAdler() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getAdler", methodSig: "()I", methodCache: &Deflater.getAdler_MethodID_11, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public long java.util.zip.Deflater.getBytesRead()

    private static var getBytesRead_MethodID_12: jmethodID?

    open func getBytesRead() -> Int64 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getBytesRead", methodSig: "()J", methodCache: &Deflater.getBytesRead_MethodID_12, args: &__args, locals: &__locals )
        return __return
    }


    /// public long java.util.zip.Deflater.getBytesWritten()

    private static var getBytesWritten_MethodID_13: jmethodID?

    open func getBytesWritten() -> Int64 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getBytesWritten", methodSig: "()J", methodCache: &Deflater.getBytesWritten_MethodID_13, args: &__args, locals: &__locals )
        return __return
    }


    /// public int java.util.zip.Deflater.getTotalIn()

    private static var getTotalIn_MethodID_14: jmethodID?

    open func getTotalIn() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getTotalIn", methodSig: "()I", methodCache: &Deflater.getTotalIn_MethodID_14, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public int java.util.zip.Deflater.getTotalOut()

    private static var getTotalOut_MethodID_15: jmethodID?

    open func getTotalOut() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getTotalOut", methodSig: "()I", methodCache: &Deflater.getTotalOut_MethodID_15, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public boolean java.util.zip.Deflater.needsInput()

    private static var needsInput_MethodID_16: jmethodID?

    open func needsInput() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "needsInput", methodSig: "()Z", methodCache: &Deflater.needsInput_MethodID_16, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public void java.util.zip.Deflater.reset()

    private static var reset_MethodID_17: jmethodID?

    open func reset() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "reset", methodSig: "()V", methodCache: &Deflater.reset_MethodID_17, args: &__args, locals: &__locals )
    }


    /// public void java.util.zip.Deflater.setDictionary(byte[])

    private static var setDictionary_MethodID_18: jmethodID?

    open func setDictionary( b: [Int8]? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: b, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDictionary", methodSig: "([B)V", methodCache: &Deflater.setDictionary_MethodID_18, args: &__args, locals: &__locals )
    }

    open func setDictionary( _ _b: [Int8]? ) {
        setDictionary( b: _b )
    }

    /// public void java.util.zip.Deflater.setDictionary(byte[],int,int)

    private static var setDictionary_MethodID_19: jmethodID?

    open func setDictionary( b: [Int8]?, off: Int, len: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: b, locals: &__locals )
        __args[1] = jvalue( i: jint(off) )
        __args[2] = jvalue( i: jint(len) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDictionary", methodSig: "([BII)V", methodCache: &Deflater.setDictionary_MethodID_19, args: &__args, locals: &__locals )
    }

    open func setDictionary( _ _b: [Int8]?, _ _off: Int, _ _len: Int ) {
        setDictionary( b: _b, off: _off, len: _len )
    }

    /// public void java.util.zip.Deflater.setInput(byte[])

    private static var setInput_MethodID_20: jmethodID?

    open func setInput( b: [Int8]? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: b, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setInput", methodSig: "([B)V", methodCache: &Deflater.setInput_MethodID_20, args: &__args, locals: &__locals )
    }

    open func setInput( _ _b: [Int8]? ) {
        setInput( b: _b )
    }

    /// public void java.util.zip.Deflater.setInput(byte[],int,int)

    private static var setInput_MethodID_21: jmethodID?

    open func setInput( b: [Int8]?, off: Int, len: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: b, locals: &__locals )
        __args[1] = jvalue( i: jint(off) )
        __args[2] = jvalue( i: jint(len) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setInput", methodSig: "([BII)V", methodCache: &Deflater.setInput_MethodID_21, args: &__args, locals: &__locals )
    }

    open func setInput( _ _b: [Int8]?, _ _off: Int, _ _len: Int ) {
        setInput( b: _b, off: _off, len: _len )
    }

    /// public void java.util.zip.Deflater.setLevel(int)

    private static var setLevel_MethodID_22: jmethodID?

    open func setLevel( level: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(level) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLevel", methodSig: "(I)V", methodCache: &Deflater.setLevel_MethodID_22, args: &__args, locals: &__locals )
    }

    open func setLevel( _ _level: Int ) {
        setLevel( level: _level )
    }

    /// public void java.util.zip.Deflater.setStrategy(int)

    private static var setStrategy_MethodID_23: jmethodID?

    open func setStrategy( strategy: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(strategy) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setStrategy", methodSig: "(I)V", methodCache: &Deflater.setStrategy_MethodID_23, args: &__args, locals: &__locals )
    }

    open func setStrategy( _ _strategy: Int ) {
        setStrategy( strategy: _strategy )
    }

}

