
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.TimerTask ///

open class TimerTask: java_swift.JavaObject, java_swift.Runnable {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var TimerTaskJNIClass: jclass?

    /// static final int java.util.TimerTask.CANCELLED

    // Skipping field: true false false false false false 

    /// static final int java.util.TimerTask.EXECUTED

    // Skipping field: true false false false false false 

    /// static final int java.util.TimerTask.SCHEDULED

    // Skipping field: true false false false false false 

    /// static final int java.util.TimerTask.VIRGIN

    // Skipping field: true false false false false false 

    /// final java.lang.Object java.util.TimerTask.lock

    // Skipping field: true false false false false false 

    /// long java.util.TimerTask.nextExecutionTime

    // Skipping field: true false false false false false 

    /// long java.util.TimerTask.period

    // Skipping field: true false false false false false 

    /// int java.util.TimerTask.state

    // Skipping field: true false false false false false 

    /// protected java.util.TimerTask()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "java/util/TimerTask", classCache: &TimerTask.TimerTaskJNIClass, methodSig: "()V", methodCache: &TimerTask.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public boolean java.util.TimerTask.cancel()

    private static var cancel_MethodID_2: jmethodID?

    open func cancel() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "cancel", methodSig: "()Z", methodCache: &TimerTask.cancel_MethodID_2, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public abstract void java.util.TimerTask.run()

    private static var run_MethodID_3: jmethodID?

    open func run() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "run", methodSig: "()V", methodCache: &TimerTask.run_MethodID_3, args: &__args, locals: &__locals )
    }


    /// public long java.util.TimerTask.scheduledExecutionTime()

    private static var scheduledExecutionTime_MethodID_4: jmethodID?

    open func scheduledExecutionTime() -> Int64 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "scheduledExecutionTime", methodSig: "()J", methodCache: &TimerTask.scheduledExecutionTime_MethodID_4, args: &__args, locals: &__locals )
        return __return
    }


}

