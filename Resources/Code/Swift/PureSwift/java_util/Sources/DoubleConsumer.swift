
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.util.function.DoubleConsumer ///

public protocol DoubleConsumer: JavaProtocol {

    /// public abstract void java.util.function.DoubleConsumer.accept(double)

    func accept( value: Double )

    /// public default java.util.function.DoubleConsumer java.util.function.DoubleConsumer.andThen(java.util.function.DoubleConsumer)

    func andThen( after: DoubleConsumer? ) -> DoubleConsumer!

    /// private void java.util.function.DoubleConsumer.lambda$andThen$0(java.util.function.DoubleConsumer,double)

}


open class DoubleConsumerForward: JNIObjectForward, DoubleConsumer {

    private static var DoubleConsumerJNIClass: jclass?

    /// public abstract void java.util.function.DoubleConsumer.accept(double)

    private static var accept_MethodID_3: jmethodID?

    open func accept( value: Double ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( d: value )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "accept", methodSig: "(D)V", methodCache: &DoubleConsumerForward.accept_MethodID_3, args: &__args, locals: &__locals )
    }

    open func accept( _ _value: Double ) {
        accept( value: _value )
    }

    /// public default java.util.function.DoubleConsumer java.util.function.DoubleConsumer.andThen(java.util.function.DoubleConsumer)

    private static var andThen_MethodID_4: jmethodID?

    open func andThen( after: DoubleConsumer? ) -> DoubleConsumer! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: after, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "andThen", methodSig: "(Ljava/util/function/DoubleConsumer;)Ljava/util/function/DoubleConsumer;", methodCache: &DoubleConsumerForward.andThen_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DoubleConsumerForward( javaObject: __return ) : nil
    }

    open func andThen( _ _after: DoubleConsumer? ) -> DoubleConsumer! {
        return andThen( after: _after )
    }

}

