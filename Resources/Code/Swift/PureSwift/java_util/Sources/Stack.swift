
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.util.Stack ///

open class Stack: Vector {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var StackJNIClass: jclass?

    /// private static final long java.util.Stack.serialVersionUID

    /// private static final int java.util.Vector.MAX_ARRAY_SIZE

    /// private static final long java.util.Vector.serialVersionUID

    /// protected int java.util.Vector.capacityIncrement

    private static var capacityIncrement_FieldID: jfieldID?

    override open var capacityIncrement: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "capacityIncrement", fieldType: "I", fieldCache: &Stack.capacityIncrement_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "capacityIncrement", fieldType: "I", fieldCache: &Stack.capacityIncrement_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.util.Vector.elementCount

    private static var elementCount_FieldID: jfieldID?

    override open var elementCount: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "elementCount", fieldType: "I", fieldCache: &Stack.elementCount_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "elementCount", fieldType: "I", fieldCache: &Stack.elementCount_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected java.lang.Object[] java.util.Vector.elementData

    private static var elementData_FieldID: jfieldID?

    override open var elementData: [JavaObject]! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "elementData", fieldType: "[Ljava/lang/Object;", fieldCache: &Stack.elementData_FieldID, object: javaObject )
            return JNIType.toSwift( type: [JavaObject].self, from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "elementData", fieldType: "[Ljava/lang/Object;", fieldCache: &Stack.elementData_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected transient int java.util.AbstractList.modCount

    private static var modCount_FieldID: jfieldID?

    override open var modCount: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "modCount", fieldType: "I", fieldCache: &Stack.modCount_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "modCount", fieldType: "I", fieldCache: &Stack.modCount_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// private static final int java.util.AbstractCollection.MAX_ARRAY_SIZE

    /// public java.util.Stack()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "java/util/Stack", classCache: &Stack.StackJNIClass, methodSig: "()V", methodCache: &Stack.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public boolean java.util.Stack.empty()

    private static var empty_MethodID_2: jmethodID?

    open func empty() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "empty", methodSig: "()Z", methodCache: &Stack.empty_MethodID_2, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public synchronized java.lang.Object java.util.Stack.peek()

    private static var peek_MethodID_3: jmethodID?

    open func peek() -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "peek", methodSig: "()Ljava/lang/Object;", methodCache: &Stack.peek_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public synchronized java.lang.Object java.util.Stack.pop()

    private static var pop_MethodID_4: jmethodID?

    open func pop() -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "pop", methodSig: "()Ljava/lang/Object;", methodCache: &Stack.pop_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public java.lang.Object java.util.Stack.push(java.lang.Object)

    private static var push_MethodID_5: jmethodID?

    open func push( item: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: item, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "push", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &Stack.push_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func push( _ _item: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return push( item: _item )
    }

    /// public synchronized int java.util.Stack.search(java.lang.Object)

    private static var search_MethodID_6: jmethodID?

    open func search( o: java_swift.JavaObject? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: o, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "search", methodSig: "(Ljava/lang/Object;)I", methodCache: &Stack.search_MethodID_6, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func search( _ _o: java_swift.JavaObject? ) -> Int {
        return search( o: _o )
    }

}

