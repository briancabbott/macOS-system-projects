
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.lang.AssertionError ///

open class AssertionError: JavaError {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AssertionErrorJNIClass: jclass?

    /// private static final long java.lang.AssertionError.serialVersionUID

    /// static final long java.lang.Error.serialVersionUID

    // Skipping field: true true false false false false 

    /// static final boolean java.lang.Throwable.$assertionsDisabled

    // Skipping field: true false false false false false 

    /// private static final java.lang.String java.lang.Throwable.CAUSE_CAPTION

    /// private static final java.lang.Throwable[] java.lang.Throwable.EMPTY_THROWABLE_ARRAY

    /// private static final java.lang.String java.lang.Throwable.NULL_CAUSE_MESSAGE

    /// private static final java.lang.String java.lang.Throwable.SELF_SUPPRESSION_MESSAGE

    /// private static final java.lang.String java.lang.Throwable.SUPPRESSED_CAPTION

    /// private static final java.util.List java.lang.Throwable.SUPPRESSED_SENTINEL

    /// private static final java.lang.StackTraceElement[] java.lang.Throwable.UNASSIGNED_STACK

    /// private static final long java.lang.Throwable.serialVersionUID

    /// private java.lang.Throwable java.lang.Throwable.cause

    /// private java.lang.String java.lang.Throwable.detailMessage

    /// private java.lang.StackTraceElement[] java.lang.Throwable.stackTrace

    /// private java.util.List java.lang.Throwable.suppressedExceptions

    /// public java.lang.AssertionError()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "java/lang/AssertionError", classCache: &AssertionError.AssertionErrorJNIClass, methodSig: "()V", methodCache: &AssertionError.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.lang.AssertionError(boolean)

    private static var new_MethodID_2: jmethodID?

    public convenience init( detailMessage: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(detailMessage ? JNI_TRUE : JNI_FALSE) )
        let __object = JNIMethod.NewObject( className: "java/lang/AssertionError", classCache: &AssertionError.AssertionErrorJNIClass, methodSig: "(Z)V", methodCache: &AssertionError.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _detailMessage: Bool ) {
        self.init( detailMessage: _detailMessage )
    }

    /// public java.lang.AssertionError(double)

    private static var new_MethodID_3: jmethodID?

    public convenience init( detailMessage: Double ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( d: detailMessage )
        let __object = JNIMethod.NewObject( className: "java/lang/AssertionError", classCache: &AssertionError.AssertionErrorJNIClass, methodSig: "(D)V", methodCache: &AssertionError.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _detailMessage: Double ) {
        self.init( detailMessage: _detailMessage )
    }

    /// public java.lang.AssertionError(float)

    private static var new_MethodID_4: jmethodID?

    public convenience init( detailMessage: Float ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( f: detailMessage )
        let __object = JNIMethod.NewObject( className: "java/lang/AssertionError", classCache: &AssertionError.AssertionErrorJNIClass, methodSig: "(F)V", methodCache: &AssertionError.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _detailMessage: Float ) {
        self.init( detailMessage: _detailMessage )
    }

    /// public java.lang.AssertionError(int)

    private static var new_MethodID_5: jmethodID?

    public convenience init( detailMessage: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(detailMessage) )
        let __object = JNIMethod.NewObject( className: "java/lang/AssertionError", classCache: &AssertionError.AssertionErrorJNIClass, methodSig: "(I)V", methodCache: &AssertionError.new_MethodID_5, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _detailMessage: Int ) {
        self.init( detailMessage: _detailMessage )
    }

    /// public java.lang.AssertionError(long)

    private static var new_MethodID_6: jmethodID?

    public convenience init( detailMessage: Int64 ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( j: detailMessage )
        let __object = JNIMethod.NewObject( className: "java/lang/AssertionError", classCache: &AssertionError.AssertionErrorJNIClass, methodSig: "(J)V", methodCache: &AssertionError.new_MethodID_6, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _detailMessage: Int64 ) {
        self.init( detailMessage: _detailMessage )
    }

    /// private java.lang.AssertionError(java.lang.String)

    /// public java.lang.AssertionError(java.lang.String,java.lang.Throwable)

    private static var new_MethodID_7: jmethodID?

    public convenience init( message: String?, cause: java_swift.Throwable? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: message, locals: &__locals )
        __args[1] = JNIType.toJava( value: cause, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/AssertionError", classCache: &AssertionError.AssertionErrorJNIClass, methodSig: "(Ljava/lang/String;Ljava/lang/Throwable;)V", methodCache: &AssertionError.new_MethodID_7, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _message: String?, _ _cause: java_swift.Throwable? ) {
        self.init( message: _message, cause: _cause )
    }

    /// public java.lang.AssertionError(char)

    private static var new_MethodID_8: jmethodID?

    public convenience init( detailMessage: UInt16 ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( c: detailMessage )
        let __object = JNIMethod.NewObject( className: "java/lang/AssertionError", classCache: &AssertionError.AssertionErrorJNIClass, methodSig: "(C)V", methodCache: &AssertionError.new_MethodID_8, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _detailMessage: UInt16 ) {
        self.init( detailMessage: _detailMessage )
    }

    /// public java.lang.AssertionError(java.lang.Object)

    private static var new_MethodID_9: jmethodID?

    public convenience init( detailMessage: java_swift.JavaObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: detailMessage, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/AssertionError", classCache: &AssertionError.AssertionErrorJNIClass, methodSig: "(Ljava/lang/Object;)V", methodCache: &AssertionError.new_MethodID_9, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _detailMessage: java_swift.JavaObject? ) {
        self.init( detailMessage: _detailMessage )
    }

}

