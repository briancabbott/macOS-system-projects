
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.lang.reflect.Constructor ///

open class Constructor: Executable {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ConstructorJNIClass: jclass?

    /// private byte[] java.lang.reflect.Constructor.annotations

    /// private java.lang.Class java.lang.reflect.Constructor.clazz

    /// private volatile sun.reflect.ConstructorAccessor java.lang.reflect.Constructor.constructorAccessor

    /// private java.lang.Class[] java.lang.reflect.Constructor.exceptionTypes

    /// private transient sun.reflect.generics.repository.ConstructorRepository java.lang.reflect.Constructor.genericInfo

    /// private int java.lang.reflect.Constructor.modifiers

    /// private byte[] java.lang.reflect.Constructor.parameterAnnotations

    /// private java.lang.Class[] java.lang.reflect.Constructor.parameterTypes

    /// private java.lang.reflect.Constructor java.lang.reflect.Constructor.root

    /// private transient java.lang.String java.lang.reflect.Constructor.signature

    /// private int java.lang.reflect.Constructor.slot

    /// private transient java.util.Map java.lang.reflect.Executable.declaredAnnotations

    /// private transient volatile boolean java.lang.reflect.Executable.hasRealParameterData

    /// private transient volatile java.lang.reflect.Parameter[] java.lang.reflect.Executable.parameters

    /// public static final int java.lang.reflect.Member.DECLARED

    // Skipping field: false true false false false false 

    /// public static final int java.lang.reflect.Member.PUBLIC

    // Skipping field: false true false false false false 

    /// private static final java.security.Permission java.lang.reflect.AccessibleObject.ACCESS_PERMISSION

    /// static final sun.reflect.ReflectionFactory java.lang.reflect.AccessibleObject.reflectionFactory

    // Skipping field: true false false false false false 

    /// boolean java.lang.reflect.AccessibleObject.override

    // Skipping field: true false false false false false 

    /// volatile java.lang.Object java.lang.reflect.AccessibleObject.securityCheckCache

    // Skipping field: true false false false false false 

    /// java.lang.reflect.Constructor(java.lang.Class,java.lang.Class[],java.lang.Class[],int,int,java.lang.String,byte[],byte[])

    // Skipping init: true false false 

    /// private sun.reflect.ConstructorAccessor java.lang.reflect.Constructor.acquireConstructorAccessor()

    /// java.lang.reflect.Constructor java.lang.reflect.Constructor.copy()

    // Skipping method: true false false false false 

    /// public boolean java.lang.reflect.Constructor.equals(java.lang.Object)

    private static var equals_MethodID_1: jmethodID?

    open func equals( obj: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: obj, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &Constructor.equals_MethodID_1, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
        return equals( obj: _obj )
    }

    /// public java.lang.reflect.AnnotatedType java.lang.reflect.Constructor.getAnnotatedReceiverType()

    // Skipping method: false true false false false 

    /// public java.lang.reflect.AnnotatedType java.lang.reflect.Constructor.getAnnotatedReturnType()

    // Skipping method: false true false false false 

    /// public java.lang.annotation.Annotation java.lang.reflect.Constructor.getAnnotation(java.lang.Class)

    // Skipping method: false true false false false 

    /// byte[] java.lang.reflect.Constructor.getAnnotationBytes()

    // Skipping method: true false false false false 

    /// sun.reflect.ConstructorAccessor java.lang.reflect.Constructor.getConstructorAccessor()

    // Skipping method: true false false false false 

    /// public java.lang.annotation.Annotation[] java.lang.reflect.Constructor.getDeclaredAnnotations()

    // Skipping method: false true false false false 

    /// public java.lang.Class java.lang.reflect.Constructor.getDeclaringClass()

    // Skipping method: false true false false false 

    /// public java.lang.Class[] java.lang.reflect.Constructor.getExceptionTypes()

    // Skipping method: false true false false false 

    /// private sun.reflect.generics.factory.GenericsFactory java.lang.reflect.Constructor.getFactory()

    /// public java.lang.reflect.Type[] java.lang.reflect.Constructor.getGenericExceptionTypes()

    // Skipping method: false true false false false 

    /// sun.reflect.generics.repository.ConstructorRepository java.lang.reflect.Constructor.getGenericInfo()

    // Skipping method: true false false false false 

    /// public java.lang.reflect.Type[] java.lang.reflect.Constructor.getGenericParameterTypes()

    // Skipping method: false true false false false 

    /// public int java.lang.reflect.Constructor.getModifiers()

    // Skipping method: false true false false false 

    /// public java.lang.String java.lang.reflect.Constructor.getName()

    // Skipping method: false true false false false 

    /// public java.lang.annotation.Annotation[][] java.lang.reflect.Constructor.getParameterAnnotations()

    // Skipping method: false true false false false 

    /// public int java.lang.reflect.Constructor.getParameterCount()

    // Skipping method: false true false false false 

    /// public java.lang.Class[] java.lang.reflect.Constructor.getParameterTypes()

    // Skipping method: false true false false false 

    /// byte[] java.lang.reflect.Constructor.getRawAnnotations()

    // Skipping method: true false false false false 

    /// byte[] java.lang.reflect.Constructor.getRawParameterAnnotations()

    // Skipping method: true false false false false 

    /// java.lang.reflect.Executable java.lang.reflect.Constructor.getRoot()

    // Skipping method: true false false false false 

    /// java.lang.String java.lang.reflect.Constructor.getSignature()

    // Skipping method: true false false false false 

    /// int java.lang.reflect.Constructor.getSlot()

    // Skipping method: true false false false false 

    /// public java.lang.reflect.TypeVariable[] java.lang.reflect.Constructor.getTypeParameters()

    // Skipping method: false true false false false 

    /// void java.lang.reflect.Constructor.handleParameterNumberMismatch(int,int)

    // Skipping method: true false false false false 

    /// boolean java.lang.reflect.Constructor.hasGenericInformation()

    // Skipping method: true false false false false 

    /// public int java.lang.reflect.Constructor.hashCode()

    // Skipping method: false true false false false 

    /// public boolean java.lang.reflect.Constructor.isSynthetic()

    // Skipping method: false true false false false 

    /// public boolean java.lang.reflect.Constructor.isVarArgs()

    // Skipping method: false true false false false 

    /// public java.lang.Object java.lang.reflect.Constructor.newInstance(java.lang.Object[]) throws java.lang.InstantiationException,java.lang.IllegalAccessException,java.lang.IllegalArgumentException,java.lang.reflect.InvocationTargetException

    private static var newInstance_MethodID_2: jmethodID?

    open func newInstance( initargs: [JavaObject]? ) throws /* java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException */ -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: initargs, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "newInstance", methodSig: "([Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &Constructor.newInstance_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw InstantiationException( javaObject: throwable )
        }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func newInstance( _ _initargs: [JavaObject]? ) throws /* java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException */ -> java_swift.JavaObject! {
        return try newInstance( initargs: _initargs )
    }

    /// void java.lang.reflect.Constructor.setConstructorAccessor(sun.reflect.ConstructorAccessor)

    // Skipping method: true false false false false 

    /// void java.lang.reflect.Constructor.specificToGenericStringHeader(java.lang.StringBuilder)

    // Skipping method: true false false false false 

    /// void java.lang.reflect.Constructor.specificToStringHeader(java.lang.StringBuilder)

    // Skipping method: true false false false false 

    /// public java.lang.String java.lang.reflect.Constructor.toGenericString()

    // Skipping method: false true false false false 

    /// public java.lang.String java.lang.reflect.Constructor.toString()

    // Skipping method: false true false false false 

}

