
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.lang.management.MemoryMXBean ///

public protocol MemoryMXBean: PlatformManagedObject {

    /// public abstract void java.lang.management.MemoryMXBean.gc()

    func gc()

    /// public abstract java.lang.management.MemoryUsage java.lang.management.MemoryMXBean.getHeapMemoryUsage()

    func getHeapMemoryUsage() -> MemoryUsage!

    /// public abstract java.lang.management.MemoryUsage java.lang.management.MemoryMXBean.getNonHeapMemoryUsage()

    func getNonHeapMemoryUsage() -> MemoryUsage!

    /// public abstract int java.lang.management.MemoryMXBean.getObjectPendingFinalizationCount()

    func getObjectPendingFinalizationCount() -> Int

    /// public abstract boolean java.lang.management.MemoryMXBean.isVerbose()

    func isVerbose() -> Bool

    /// public abstract void java.lang.management.MemoryMXBean.setVerbose(boolean)

    func setVerbose( value: Bool )

}


open class MemoryMXBeanForward: PlatformManagedObjectForward, MemoryMXBean {

    private static var MemoryMXBeanJNIClass: jclass?

    /// public abstract void java.lang.management.MemoryMXBean.gc()

    private static var gc_MethodID_7: jmethodID?

    open func gc() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "gc", methodSig: "()V", methodCache: &MemoryMXBeanForward.gc_MethodID_7, args: &__args, locals: &__locals )
    }


    /// public abstract java.lang.management.MemoryUsage java.lang.management.MemoryMXBean.getHeapMemoryUsage()

    private static var getHeapMemoryUsage_MethodID_8: jmethodID?

    open func getHeapMemoryUsage() -> MemoryUsage! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getHeapMemoryUsage", methodSig: "()Ljava/lang/management/MemoryUsage;", methodCache: &MemoryMXBeanForward.getHeapMemoryUsage_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? MemoryUsage( javaObject: __return ) : nil
    }


    /// public abstract java.lang.management.MemoryUsage java.lang.management.MemoryMXBean.getNonHeapMemoryUsage()

    private static var getNonHeapMemoryUsage_MethodID_9: jmethodID?

    open func getNonHeapMemoryUsage() -> MemoryUsage! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getNonHeapMemoryUsage", methodSig: "()Ljava/lang/management/MemoryUsage;", methodCache: &MemoryMXBeanForward.getNonHeapMemoryUsage_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? MemoryUsage( javaObject: __return ) : nil
    }


    /// public abstract javax.management.ObjectName java.lang.management.PlatformManagedObject.getObjectName()

    // Skipping method: false false true false false 

    /// public abstract int java.lang.management.MemoryMXBean.getObjectPendingFinalizationCount()

    private static var getObjectPendingFinalizationCount_MethodID_10: jmethodID?

    open func getObjectPendingFinalizationCount() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getObjectPendingFinalizationCount", methodSig: "()I", methodCache: &MemoryMXBeanForward.getObjectPendingFinalizationCount_MethodID_10, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public abstract boolean java.lang.management.MemoryMXBean.isVerbose()

    private static var isVerbose_MethodID_11: jmethodID?

    open func isVerbose() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isVerbose", methodSig: "()Z", methodCache: &MemoryMXBeanForward.isVerbose_MethodID_11, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public abstract void java.lang.management.MemoryMXBean.setVerbose(boolean)

    private static var setVerbose_MethodID_12: jmethodID?

    open func setVerbose( value: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(value ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setVerbose", methodSig: "(Z)V", methodCache: &MemoryMXBeanForward.setVerbose_MethodID_12, args: &__args, locals: &__locals )
    }

    open func setVerbose( _ _value: Bool ) {
        setVerbose( value: _value )
    }

    /// In declared protocol but not defined.. ///

    /// public abstract javax.management.ObjectName java.lang.management.PlatformManagedObject.getObjectName()

    // Skipping method: false false true false false 

}

