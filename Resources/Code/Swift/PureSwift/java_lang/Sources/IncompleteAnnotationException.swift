
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.lang.annotation.IncompleteAnnotationException ///

open class IncompleteAnnotationException: RuntimeException {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var IncompleteAnnotationExceptionJNIClass: jclass?

    /// private static final long java.lang.annotation.IncompleteAnnotationException.serialVersionUID

    /// private java.lang.Class java.lang.annotation.IncompleteAnnotationException.annotationType

    /// private java.lang.String java.lang.annotation.IncompleteAnnotationException.elementName

    /// static final long java.lang.RuntimeException.serialVersionUID

    // Skipping field: true true false false false false 

    /// static final long java.lang.Exception.serialVersionUID

    // Skipping field: true true false false false false 

    /// static final boolean java.lang.Throwable.$assertionsDisabled

    // Skipping field: true false false false false false 

    /// private static final java.lang.String java.lang.Throwable.CAUSE_CAPTION

    /// private static final java.lang.Throwable[] java.lang.Throwable.EMPTY_THROWABLE_ARRAY

    /// private static final java.lang.String java.lang.Throwable.NULL_CAUSE_MESSAGE

    /// private static final java.lang.String java.lang.Throwable.SELF_SUPPRESSION_MESSAGE

    /// private static final java.lang.String java.lang.Throwable.SUPPRESSED_CAPTION

    /// private static final java.util.List java.lang.Throwable.SUPPRESSED_SENTINEL

    /// private static final java.lang.StackTraceElement[] java.lang.Throwable.UNASSIGNED_STACK

    /// private static final long java.lang.Throwable.serialVersionUID

    /// private java.lang.Throwable java.lang.Throwable.cause

    /// private java.lang.String java.lang.Throwable.detailMessage

    /// private java.lang.StackTraceElement[] java.lang.Throwable.stackTrace

    /// private java.util.List java.lang.Throwable.suppressedExceptions

    /// public java.lang.annotation.IncompleteAnnotationException(java.lang.Class,java.lang.String)

    private static var new_MethodID_1: jmethodID?

    public convenience init( annotationType: java_swift.JavaClass?, elementName: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: annotationType, locals: &__locals )
        __args[1] = JNIType.toJava( value: elementName, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/annotation/IncompleteAnnotationException", classCache: &IncompleteAnnotationException.IncompleteAnnotationExceptionJNIClass, methodSig: "(Ljava/lang/Class;Ljava/lang/String;)V", methodCache: &IncompleteAnnotationException.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _annotationType: java_swift.JavaClass?, _ _elementName: String? ) {
        self.init( annotationType: _annotationType, elementName: _elementName )
    }

    /// public java.lang.Class java.lang.annotation.IncompleteAnnotationException.annotationType()

    private static var annotationType_MethodID_2: jmethodID?

    open func annotationType() -> java_swift.JavaClass! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "annotationType", methodSig: "()Ljava/lang/Class;", methodCache: &IncompleteAnnotationException.annotationType_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaClass( javaObject: __return ) : nil
    }


    /// public java.lang.String java.lang.annotation.IncompleteAnnotationException.elementName()

    private static var elementName_MethodID_3: jmethodID?

    open func elementName() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "elementName", methodSig: "()Ljava/lang/String;", methodCache: &IncompleteAnnotationException.elementName_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


}

