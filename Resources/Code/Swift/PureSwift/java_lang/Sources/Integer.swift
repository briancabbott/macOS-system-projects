
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.lang.Integer ///

open class Integer: Number, JavaComparable {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var IntegerJNIClass: jclass?

    /// public static final int java.lang.Integer.BYTES

    private static var BYTES_FieldID: jfieldID?

    public static var BYTES: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "BYTES", fieldType: "I", fieldCache: &BYTES_FieldID, className: "java/lang/Integer", classCache: &IntegerJNIClass )
            return Int(__value)
        }
    }

    /// static final char[] java.lang.Integer.DigitOnes

    // Skipping field: true false false false false false 

    /// static final char[] java.lang.Integer.DigitTens

    // Skipping field: true false false false false false 

    /// public static final int java.lang.Integer.MAX_VALUE

    private static var MAX_VALUE_FieldID: jfieldID?

    public static var MAX_VALUE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MAX_VALUE", fieldType: "I", fieldCache: &MAX_VALUE_FieldID, className: "java/lang/Integer", classCache: &IntegerJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.lang.Integer.MIN_VALUE

    private static var MIN_VALUE_FieldID: jfieldID?

    public static var MIN_VALUE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MIN_VALUE", fieldType: "I", fieldCache: &MIN_VALUE_FieldID, className: "java/lang/Integer", classCache: &IntegerJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.lang.Integer.SIZE

    private static var SIZE_FieldID: jfieldID?

    public static var SIZE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SIZE", fieldType: "I", fieldCache: &SIZE_FieldID, className: "java/lang/Integer", classCache: &IntegerJNIClass )
            return Int(__value)
        }
    }

    /// public static final java.lang.Class java.lang.Integer.TYPE

    private static var TYPE_FieldID: jfieldID?

    public static var TYPE: java_swift.JavaClass! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "TYPE", fieldType: "Ljava/lang/Class;", fieldCache: &TYPE_FieldID, className: "java/lang/Integer", classCache: &IntegerJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_swift.JavaClass( javaObject: __value ) : nil
        }
    }

    /// static final char[] java.lang.Integer.digits

    // Skipping field: true false false false false false 

    /// private static final long java.lang.Integer.serialVersionUID

    /// static final int[] java.lang.Integer.sizeTable

    // Skipping field: true false false false false false 

    /// private final int java.lang.Integer.value

    /// private static final long java.lang.Number.serialVersionUID

    /// public java.lang.Integer(int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( value: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(value) )
        let __object = JNIMethod.NewObject( className: "java/lang/Integer", classCache: &Integer.IntegerJNIClass, methodSig: "(I)V", methodCache: &Integer.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _value: Int ) {
        self.init( value: _value )
    }

    /// public java.lang.Integer(java.lang.String) throws java.lang.NumberFormatException

    private static var new_MethodID_2: jmethodID?

    public convenience init( s: String? ) throws {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/Integer", classCache: &Integer.IntegerJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &Integer.new_MethodID_2, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw NumberFormatException( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _s: String? ) throws {
        try self.init( s: _s )
    }

    /// public static int java.lang.Integer.bitCount(int)

    private static var bitCount_MethodID_3: jmethodID?

    open class func bitCount( i: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "bitCount", methodSig: "(I)I", methodCache: &bitCount_MethodID_3, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open class func bitCount( _ _i: Int ) -> Int {
        return bitCount( i: _i )
    }

    /// public static int java.lang.Integer.compare(int,int)

    private static var compare_MethodID_4: jmethodID?

    open class func compare( x: Int, y: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(x) )
        __args[1] = jvalue( i: jint(y) )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "compare", methodSig: "(II)I", methodCache: &compare_MethodID_4, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open class func compare( _ _x: Int, _ _y: Int ) -> Int {
        return compare( x: _x, y: _y )
    }

    /// public static int java.lang.Integer.compareUnsigned(int,int)

    private static var compareUnsigned_MethodID_5: jmethodID?

    open class func compareUnsigned( x: Int, y: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(x) )
        __args[1] = jvalue( i: jint(y) )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "compareUnsigned", methodSig: "(II)I", methodCache: &compareUnsigned_MethodID_5, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open class func compareUnsigned( _ _x: Int, _ _y: Int ) -> Int {
        return compareUnsigned( x: _x, y: _y )
    }

    /// public static java.lang.Integer java.lang.Integer.decode(java.lang.String) throws java.lang.NumberFormatException

    private static var decode_MethodID_6: jmethodID?

    open class func decode( nm: String? ) throws /* java.lang.NumberFormatException */ -> Integer! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: nm, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "decode", methodSig: "(Ljava/lang/String;)Ljava/lang/Integer;", methodCache: &decode_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw NumberFormatException( javaObject: throwable )
        }
        return __return != nil ? Integer( javaObject: __return ) : nil
    }

    open class func decode( _ _nm: String? ) throws /* java.lang.NumberFormatException */ -> Integer! {
        return try decode( nm: _nm )
    }

    /// public static int java.lang.Integer.divideUnsigned(int,int)

    private static var divideUnsigned_MethodID_7: jmethodID?

    open class func divideUnsigned( dividend: Int, divisor: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(dividend) )
        __args[1] = jvalue( i: jint(divisor) )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "divideUnsigned", methodSig: "(II)I", methodCache: &divideUnsigned_MethodID_7, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open class func divideUnsigned( _ _dividend: Int, _ _divisor: Int ) -> Int {
        return divideUnsigned( dividend: _dividend, divisor: _divisor )
    }

    /// static int java.lang.Integer.formatUnsignedInt(int,int,char[],int,int)

    // Skipping method: true false false false false 

    /// static void java.lang.Integer.getChars(int,int,char[])

    // Skipping method: true false false false false 

    /// public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String)

    private static var getInteger_MethodID_8: jmethodID?

    open class func getInteger( nm: String? ) -> Integer! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: nm, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "getInteger", methodSig: "(Ljava/lang/String;)Ljava/lang/Integer;", methodCache: &getInteger_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Integer( javaObject: __return ) : nil
    }

    open class func getInteger( _ _nm: String? ) -> Integer! {
        return getInteger( nm: _nm )
    }

    /// public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String,int)

    private static var getInteger_MethodID_9: jmethodID?

    open class func getInteger( nm: String?, val: Int ) -> Integer! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: nm, locals: &__locals )
        __args[1] = jvalue( i: jint(val) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "getInteger", methodSig: "(Ljava/lang/String;I)Ljava/lang/Integer;", methodCache: &getInteger_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Integer( javaObject: __return ) : nil
    }

    open class func getInteger( _ _nm: String?, _ _val: Int ) -> Integer! {
        return getInteger( nm: _nm, val: _val )
    }

    /// public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String,java.lang.Integer)

    private static var getInteger_MethodID_10: jmethodID?

    open class func getInteger( nm: String?, val: Integer? ) -> Integer! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: nm, locals: &__locals )
        __args[1] = JNIType.toJava( value: val, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "getInteger", methodSig: "(Ljava/lang/String;Ljava/lang/Integer;)Ljava/lang/Integer;", methodCache: &getInteger_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Integer( javaObject: __return ) : nil
    }

    open class func getInteger( _ _nm: String?, _ _val: Integer? ) -> Integer! {
        return getInteger( nm: _nm, val: _val )
    }

    /// public static int java.lang.Integer.hashCode(int)

    private static var hashCode_MethodID_11: jmethodID?

    open class func hashCode( value: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(value) )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "hashCode", methodSig: "(I)I", methodCache: &hashCode_MethodID_11, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open class func hashCode( _ _value: Int ) -> Int {
        return hashCode( value: _value )
    }

    /// public static int java.lang.Integer.highestOneBit(int)

    private static var highestOneBit_MethodID_12: jmethodID?

    open class func highestOneBit( i: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "highestOneBit", methodSig: "(I)I", methodCache: &highestOneBit_MethodID_12, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open class func highestOneBit( _ _i: Int ) -> Int {
        return highestOneBit( i: _i )
    }

    /// public static int java.lang.Integer.lowestOneBit(int)

    private static var lowestOneBit_MethodID_13: jmethodID?

    open class func lowestOneBit( i: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "lowestOneBit", methodSig: "(I)I", methodCache: &lowestOneBit_MethodID_13, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open class func lowestOneBit( _ _i: Int ) -> Int {
        return lowestOneBit( i: _i )
    }

    /// public static int java.lang.Integer.max(int,int)

    private static var max_MethodID_14: jmethodID?

    open class func max( a: Int, b: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(a) )
        __args[1] = jvalue( i: jint(b) )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "max", methodSig: "(II)I", methodCache: &max_MethodID_14, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open class func max( _ _a: Int, _ _b: Int ) -> Int {
        return max( a: _a, b: _b )
    }

    /// public static int java.lang.Integer.min(int,int)

    private static var min_MethodID_15: jmethodID?

    open class func min( a: Int, b: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(a) )
        __args[1] = jvalue( i: jint(b) )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "min", methodSig: "(II)I", methodCache: &min_MethodID_15, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open class func min( _ _a: Int, _ _b: Int ) -> Int {
        return min( a: _a, b: _b )
    }

    /// public static int java.lang.Integer.numberOfLeadingZeros(int)

    private static var numberOfLeadingZeros_MethodID_16: jmethodID?

    open class func numberOfLeadingZeros( i: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "numberOfLeadingZeros", methodSig: "(I)I", methodCache: &numberOfLeadingZeros_MethodID_16, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open class func numberOfLeadingZeros( _ _i: Int ) -> Int {
        return numberOfLeadingZeros( i: _i )
    }

    /// public static int java.lang.Integer.numberOfTrailingZeros(int)

    private static var numberOfTrailingZeros_MethodID_17: jmethodID?

    open class func numberOfTrailingZeros( i: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "numberOfTrailingZeros", methodSig: "(I)I", methodCache: &numberOfTrailingZeros_MethodID_17, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open class func numberOfTrailingZeros( _ _i: Int ) -> Int {
        return numberOfTrailingZeros( i: _i )
    }

    /// public static int java.lang.Integer.parseInt(java.lang.String) throws java.lang.NumberFormatException

    private static var parseInt_MethodID_18: jmethodID?

    open class func parseInt( s: String? ) throws /* java.lang.NumberFormatException */ -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "parseInt", methodSig: "(Ljava/lang/String;)I", methodCache: &parseInt_MethodID_18, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw NumberFormatException( javaObject: throwable )
        }
        return Int(__return)
    }

    open class func parseInt( _ _s: String? ) throws /* java.lang.NumberFormatException */ -> Int {
        return try parseInt( s: _s )
    }

    /// public static int java.lang.Integer.parseInt(java.lang.String,int) throws java.lang.NumberFormatException

    private static var parseInt_MethodID_19: jmethodID?

    open class func parseInt( s: String?, radix: Int ) throws /* java.lang.NumberFormatException */ -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        __args[1] = jvalue( i: jint(radix) )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "parseInt", methodSig: "(Ljava/lang/String;I)I", methodCache: &parseInt_MethodID_19, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw NumberFormatException( javaObject: throwable )
        }
        return Int(__return)
    }

    open class func parseInt( _ _s: String?, _ _radix: Int ) throws /* java.lang.NumberFormatException */ -> Int {
        return try parseInt( s: _s, radix: _radix )
    }

    /// public static int java.lang.Integer.parseUnsignedInt(java.lang.String) throws java.lang.NumberFormatException

    private static var parseUnsignedInt_MethodID_20: jmethodID?

    open class func parseUnsignedInt( s: String? ) throws /* java.lang.NumberFormatException */ -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "parseUnsignedInt", methodSig: "(Ljava/lang/String;)I", methodCache: &parseUnsignedInt_MethodID_20, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw NumberFormatException( javaObject: throwable )
        }
        return Int(__return)
    }

    open class func parseUnsignedInt( _ _s: String? ) throws /* java.lang.NumberFormatException */ -> Int {
        return try parseUnsignedInt( s: _s )
    }

    /// public static int java.lang.Integer.parseUnsignedInt(java.lang.String,int) throws java.lang.NumberFormatException

    private static var parseUnsignedInt_MethodID_21: jmethodID?

    open class func parseUnsignedInt( s: String?, radix: Int ) throws /* java.lang.NumberFormatException */ -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        __args[1] = jvalue( i: jint(radix) )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "parseUnsignedInt", methodSig: "(Ljava/lang/String;I)I", methodCache: &parseUnsignedInt_MethodID_21, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw NumberFormatException( javaObject: throwable )
        }
        return Int(__return)
    }

    open class func parseUnsignedInt( _ _s: String?, _ _radix: Int ) throws /* java.lang.NumberFormatException */ -> Int {
        return try parseUnsignedInt( s: _s, radix: _radix )
    }

    /// public static int java.lang.Integer.remainderUnsigned(int,int)

    private static var remainderUnsigned_MethodID_22: jmethodID?

    open class func remainderUnsigned( dividend: Int, divisor: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(dividend) )
        __args[1] = jvalue( i: jint(divisor) )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "remainderUnsigned", methodSig: "(II)I", methodCache: &remainderUnsigned_MethodID_22, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open class func remainderUnsigned( _ _dividend: Int, _ _divisor: Int ) -> Int {
        return remainderUnsigned( dividend: _dividend, divisor: _divisor )
    }

    /// public static int java.lang.Integer.reverse(int)

    private static var reverse_MethodID_23: jmethodID?

    open class func reverse( i: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "reverse", methodSig: "(I)I", methodCache: &reverse_MethodID_23, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open class func reverse( _ _i: Int ) -> Int {
        return reverse( i: _i )
    }

    /// public static int java.lang.Integer.reverseBytes(int)

    private static var reverseBytes_MethodID_24: jmethodID?

    open class func reverseBytes( i: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "reverseBytes", methodSig: "(I)I", methodCache: &reverseBytes_MethodID_24, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open class func reverseBytes( _ _i: Int ) -> Int {
        return reverseBytes( i: _i )
    }

    /// public static int java.lang.Integer.rotateLeft(int,int)

    private static var rotateLeft_MethodID_25: jmethodID?

    open class func rotateLeft( i: Int, distance: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(i) )
        __args[1] = jvalue( i: jint(distance) )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "rotateLeft", methodSig: "(II)I", methodCache: &rotateLeft_MethodID_25, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open class func rotateLeft( _ _i: Int, _ _distance: Int ) -> Int {
        return rotateLeft( i: _i, distance: _distance )
    }

    /// public static int java.lang.Integer.rotateRight(int,int)

    private static var rotateRight_MethodID_26: jmethodID?

    open class func rotateRight( i: Int, distance: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(i) )
        __args[1] = jvalue( i: jint(distance) )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "rotateRight", methodSig: "(II)I", methodCache: &rotateRight_MethodID_26, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open class func rotateRight( _ _i: Int, _ _distance: Int ) -> Int {
        return rotateRight( i: _i, distance: _distance )
    }

    /// public static int java.lang.Integer.signum(int)

    private static var signum_MethodID_27: jmethodID?

    open class func signum( i: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "signum", methodSig: "(I)I", methodCache: &signum_MethodID_27, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open class func signum( _ _i: Int ) -> Int {
        return signum( i: _i )
    }

    /// static int java.lang.Integer.stringSize(int)

    // Skipping method: true false false false false 

    /// public static int java.lang.Integer.sum(int,int)

    private static var sum_MethodID_28: jmethodID?

    open class func sum( a: Int, b: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(a) )
        __args[1] = jvalue( i: jint(b) )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "sum", methodSig: "(II)I", methodCache: &sum_MethodID_28, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open class func sum( _ _a: Int, _ _b: Int ) -> Int {
        return sum( a: _a, b: _b )
    }

    /// public static java.lang.String java.lang.Integer.toBinaryString(int)

    private static var toBinaryString_MethodID_29: jmethodID?

    open class func toBinaryString( i: Int ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "toBinaryString", methodSig: "(I)Ljava/lang/String;", methodCache: &toBinaryString_MethodID_29, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    open class func toBinaryString( _ _i: Int ) -> String! {
        return toBinaryString( i: _i )
    }

    /// public static java.lang.String java.lang.Integer.toHexString(int)

    private static var toHexString_MethodID_30: jmethodID?

    open class func toHexString( i: Int ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "toHexString", methodSig: "(I)Ljava/lang/String;", methodCache: &toHexString_MethodID_30, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    open class func toHexString( _ _i: Int ) -> String! {
        return toHexString( i: _i )
    }

    /// public static java.lang.String java.lang.Integer.toOctalString(int)

    private static var toOctalString_MethodID_31: jmethodID?

    open class func toOctalString( i: Int ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "toOctalString", methodSig: "(I)Ljava/lang/String;", methodCache: &toOctalString_MethodID_31, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    open class func toOctalString( _ _i: Int ) -> String! {
        return toOctalString( i: _i )
    }

    /// public static java.lang.String java.lang.Integer.toString(int)

    private static var toString_MethodID_32: jmethodID?

    open class func toString( i: Int ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "toString", methodSig: "(I)Ljava/lang/String;", methodCache: &toString_MethodID_32, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    open class func toString( _ _i: Int ) -> String! {
        return toString( i: _i )
    }

    /// public static java.lang.String java.lang.Integer.toString(int,int)

    private static var toString_MethodID_33: jmethodID?

    open class func toString( i: Int, radix: Int ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(i) )
        __args[1] = jvalue( i: jint(radix) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "toString", methodSig: "(II)Ljava/lang/String;", methodCache: &toString_MethodID_33, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    open class func toString( _ _i: Int, _ _radix: Int ) -> String! {
        return toString( i: _i, radix: _radix )
    }

    /// public static long java.lang.Integer.toUnsignedLong(int)

    private static var toUnsignedLong_MethodID_34: jmethodID?

    open class func toUnsignedLong( x: Int ) -> Int64 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(x) )
        let __return = JNIMethod.CallStaticLongMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "toUnsignedLong", methodSig: "(I)J", methodCache: &toUnsignedLong_MethodID_34, args: &__args, locals: &__locals )
        return __return
    }

    open class func toUnsignedLong( _ _x: Int ) -> Int64 {
        return toUnsignedLong( x: _x )
    }

    /// public static java.lang.String java.lang.Integer.toUnsignedString(int)

    private static var toUnsignedString_MethodID_35: jmethodID?

    open class func toUnsignedString( i: Int ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "toUnsignedString", methodSig: "(I)Ljava/lang/String;", methodCache: &toUnsignedString_MethodID_35, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    open class func toUnsignedString( _ _i: Int ) -> String! {
        return toUnsignedString( i: _i )
    }

    /// public static java.lang.String java.lang.Integer.toUnsignedString(int,int)

    private static var toUnsignedString_MethodID_36: jmethodID?

    open class func toUnsignedString( i: Int, radix: Int ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(i) )
        __args[1] = jvalue( i: jint(radix) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "toUnsignedString", methodSig: "(II)Ljava/lang/String;", methodCache: &toUnsignedString_MethodID_36, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    open class func toUnsignedString( _ _i: Int, _ _radix: Int ) -> String! {
        return toUnsignedString( i: _i, radix: _radix )
    }

    /// private static java.lang.String java.lang.Integer.toUnsignedString0(int,int)

    /// public static java.lang.Integer java.lang.Integer.valueOf(int)

    private static var valueOf_MethodID_37: jmethodID?

    open class func valueOf( i: Int ) -> Integer! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "valueOf", methodSig: "(I)Ljava/lang/Integer;", methodCache: &valueOf_MethodID_37, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Integer( javaObject: __return ) : nil
    }

    open class func valueOf( _ _i: Int ) -> Integer! {
        return valueOf( i: _i )
    }

    /// public static java.lang.Integer java.lang.Integer.valueOf(java.lang.String) throws java.lang.NumberFormatException

    private static var valueOf_MethodID_38: jmethodID?

    open class func valueOf( s: String? ) throws /* java.lang.NumberFormatException */ -> Integer! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/String;)Ljava/lang/Integer;", methodCache: &valueOf_MethodID_38, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw NumberFormatException( javaObject: throwable )
        }
        return __return != nil ? Integer( javaObject: __return ) : nil
    }

    open class func valueOf( _ _s: String? ) throws /* java.lang.NumberFormatException */ -> Integer! {
        return try valueOf( s: _s )
    }

    /// public static java.lang.Integer java.lang.Integer.valueOf(java.lang.String,int) throws java.lang.NumberFormatException

    private static var valueOf_MethodID_39: jmethodID?

    open class func valueOf( s: String?, radix: Int ) throws /* java.lang.NumberFormatException */ -> Integer! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        __args[1] = jvalue( i: jint(radix) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Integer", classCache: &IntegerJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/String;I)Ljava/lang/Integer;", methodCache: &valueOf_MethodID_39, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw NumberFormatException( javaObject: throwable )
        }
        return __return != nil ? Integer( javaObject: __return ) : nil
    }

    open class func valueOf( _ _s: String?, _ _radix: Int ) throws /* java.lang.NumberFormatException */ -> Integer! {
        return try valueOf( s: _s, radix: _radix )
    }

    /// public byte java.lang.Integer.byteValue()

    // Skipping method: false true false false false 

    /// public int java.lang.Integer.compareTo(java.lang.Integer)

    private static var compareTo_MethodID_40: jmethodID?

    open func compareTo( anotherInteger: Integer? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: anotherInteger, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compareTo", methodSig: "(Ljava/lang/Integer;)I", methodCache: &Integer.compareTo_MethodID_40, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func compareTo( _ _anotherInteger: Integer? ) -> Int {
        return compareTo( anotherInteger: _anotherInteger )
    }

    /// public int java.lang.Integer.compareTo(java.lang.Object)

    private static var compareTo_MethodID_41: jmethodID?

    open func compareTo( arg0: java_swift.JavaObject? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compareTo", methodSig: "(Ljava/lang/Object;)I", methodCache: &Integer.compareTo_MethodID_41, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func compareTo( _ _arg0: java_swift.JavaObject? ) -> Int {
        return compareTo( arg0: _arg0 )
    }

    /// public double java.lang.Integer.doubleValue()

    // Skipping method: false true false false false 

    /// public boolean java.lang.Integer.equals(java.lang.Object)

    private static var equals_MethodID_42: jmethodID?

    open func equals( obj: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: obj, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &Integer.equals_MethodID_42, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
        return equals( obj: _obj )
    }

    /// public float java.lang.Integer.floatValue()

    // Skipping method: false true false false false 

    /// public int java.lang.Integer.hashCode()

    // Skipping method: false true false false false 

    /// public int java.lang.Integer.intValue()

    // Skipping method: false true false false false 

    /// public long java.lang.Integer.longValue()

    // Skipping method: false true false false false 

    /// public short java.lang.Integer.shortValue()

    // Skipping method: false true false false false 

    /// public java.lang.String java.lang.Integer.toString()

    // Skipping method: false true false false false 

}

