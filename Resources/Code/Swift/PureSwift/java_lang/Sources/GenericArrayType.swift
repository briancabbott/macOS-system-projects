
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.lang.reflect.GenericArrayType ///

public protocol GenericArrayType: Type {

    /// public abstract java.lang.reflect.Type java.lang.reflect.GenericArrayType.getGenericComponentType()

    func getGenericComponentType() -> Type!

}


open class GenericArrayTypeForward: TypeForward, GenericArrayType {

    private static var GenericArrayTypeJNIClass: jclass?

    /// public abstract java.lang.reflect.Type java.lang.reflect.GenericArrayType.getGenericComponentType()

    private static var getGenericComponentType_MethodID_2: jmethodID?

    open func getGenericComponentType() -> Type! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGenericComponentType", methodSig: "()Ljava/lang/reflect/Type;", methodCache: &GenericArrayTypeForward.getGenericComponentType_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TypeForward( javaObject: __return ) : nil
    }


    /// public default java.lang.String java.lang.reflect.Type.getTypeName()

    private static var getTypeName_MethodID_3: jmethodID?

    override open func getTypeName() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTypeName", methodSig: "()Ljava/lang/String;", methodCache: &GenericArrayTypeForward.getTypeName_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


}

