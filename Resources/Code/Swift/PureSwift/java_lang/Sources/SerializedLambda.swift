
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.lang.invoke.SerializedLambda ///

open class SerializedLambda: java_swift.JavaObject, /* interface java.io.Serializable */ UnavailableProtocol {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var SerializedLambdaJNIClass: jclass?

    /// private static final long java.lang.invoke.SerializedLambda.serialVersionUID

    /// private final java.lang.Object[] java.lang.invoke.SerializedLambda.capturedArgs

    /// private final java.lang.Class java.lang.invoke.SerializedLambda.capturingClass

    /// private final java.lang.String java.lang.invoke.SerializedLambda.functionalInterfaceClass

    /// private final java.lang.String java.lang.invoke.SerializedLambda.functionalInterfaceMethodName

    /// private final java.lang.String java.lang.invoke.SerializedLambda.functionalInterfaceMethodSignature

    /// private final java.lang.String java.lang.invoke.SerializedLambda.implClass

    /// private final int java.lang.invoke.SerializedLambda.implMethodKind

    /// private final java.lang.String java.lang.invoke.SerializedLambda.implMethodName

    /// private final java.lang.String java.lang.invoke.SerializedLambda.implMethodSignature

    /// private final java.lang.String java.lang.invoke.SerializedLambda.instantiatedMethodType

    /// public java.lang.invoke.SerializedLambda(java.lang.Class,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])

    private static var new_MethodID_1: jmethodID?

    public convenience init( capturingClass: java_swift.JavaClass?, functionalInterfaceClass: String?, functionalInterfaceMethodName: String?, functionalInterfaceMethodSignature: String?, implMethodKind: Int, implClass: String?, implMethodName: String?, implMethodSignature: String?, instantiatedMethodType: String?, capturedArgs: [JavaObject]? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 10 )
        __args[0] = JNIType.toJava( value: capturingClass, locals: &__locals )
        __args[1] = JNIType.toJava( value: functionalInterfaceClass, locals: &__locals )
        __args[2] = JNIType.toJava( value: functionalInterfaceMethodName, locals: &__locals )
        __args[3] = JNIType.toJava( value: functionalInterfaceMethodSignature, locals: &__locals )
        __args[4] = jvalue( i: jint(implMethodKind) )
        __args[5] = JNIType.toJava( value: implClass, locals: &__locals )
        __args[6] = JNIType.toJava( value: implMethodName, locals: &__locals )
        __args[7] = JNIType.toJava( value: implMethodSignature, locals: &__locals )
        __args[8] = JNIType.toJava( value: instantiatedMethodType, locals: &__locals )
        __args[9] = JNIType.toJava( value: capturedArgs, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/invoke/SerializedLambda", classCache: &SerializedLambda.SerializedLambdaJNIClass, methodSig: "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V", methodCache: &SerializedLambda.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _capturingClass: java_swift.JavaClass?, _ _functionalInterfaceClass: String?, _ _functionalInterfaceMethodName: String?, _ _functionalInterfaceMethodSignature: String?, _ _implMethodKind: Int, _ _implClass: String?, _ _implMethodName: String?, _ _implMethodSignature: String?, _ _instantiatedMethodType: String?, _ _capturedArgs: [JavaObject]? ) {
        self.init( capturingClass: _capturingClass, functionalInterfaceClass: _functionalInterfaceClass, functionalInterfaceMethodName: _functionalInterfaceMethodName, functionalInterfaceMethodSignature: _functionalInterfaceMethodSignature, implMethodKind: _implMethodKind, implClass: _implClass, implMethodName: _implMethodName, implMethodSignature: _implMethodSignature, instantiatedMethodType: _instantiatedMethodType, capturedArgs: _capturedArgs )
    }

    /// static java.lang.Class java.lang.invoke.SerializedLambda.access$000(java.lang.invoke.SerializedLambda)

    // Skipping method: true false false false false 

    /// public java.lang.Object java.lang.invoke.SerializedLambda.getCapturedArg(int)

    private static var getCapturedArg_MethodID_2: jmethodID?

    open func getCapturedArg( i: Int ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCapturedArg", methodSig: "(I)Ljava/lang/Object;", methodCache: &SerializedLambda.getCapturedArg_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func getCapturedArg( _ _i: Int ) -> java_swift.JavaObject! {
        return getCapturedArg( i: _i )
    }

    /// public int java.lang.invoke.SerializedLambda.getCapturedArgCount()

    private static var getCapturedArgCount_MethodID_3: jmethodID?

    open func getCapturedArgCount() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getCapturedArgCount", methodSig: "()I", methodCache: &SerializedLambda.getCapturedArgCount_MethodID_3, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public java.lang.String java.lang.invoke.SerializedLambda.getCapturingClass()

    private static var getCapturingClass_MethodID_4: jmethodID?

    open func getCapturingClass() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCapturingClass", methodSig: "()Ljava/lang/String;", methodCache: &SerializedLambda.getCapturingClass_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public java.lang.String java.lang.invoke.SerializedLambda.getFunctionalInterfaceClass()

    private static var getFunctionalInterfaceClass_MethodID_5: jmethodID?

    open func getFunctionalInterfaceClass() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFunctionalInterfaceClass", methodSig: "()Ljava/lang/String;", methodCache: &SerializedLambda.getFunctionalInterfaceClass_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public java.lang.String java.lang.invoke.SerializedLambda.getFunctionalInterfaceMethodName()

    private static var getFunctionalInterfaceMethodName_MethodID_6: jmethodID?

    open func getFunctionalInterfaceMethodName() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFunctionalInterfaceMethodName", methodSig: "()Ljava/lang/String;", methodCache: &SerializedLambda.getFunctionalInterfaceMethodName_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public java.lang.String java.lang.invoke.SerializedLambda.getFunctionalInterfaceMethodSignature()

    private static var getFunctionalInterfaceMethodSignature_MethodID_7: jmethodID?

    open func getFunctionalInterfaceMethodSignature() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFunctionalInterfaceMethodSignature", methodSig: "()Ljava/lang/String;", methodCache: &SerializedLambda.getFunctionalInterfaceMethodSignature_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public java.lang.String java.lang.invoke.SerializedLambda.getImplClass()

    private static var getImplClass_MethodID_8: jmethodID?

    open func getImplClass() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getImplClass", methodSig: "()Ljava/lang/String;", methodCache: &SerializedLambda.getImplClass_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public int java.lang.invoke.SerializedLambda.getImplMethodKind()

    private static var getImplMethodKind_MethodID_9: jmethodID?

    open func getImplMethodKind() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getImplMethodKind", methodSig: "()I", methodCache: &SerializedLambda.getImplMethodKind_MethodID_9, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public java.lang.String java.lang.invoke.SerializedLambda.getImplMethodName()

    private static var getImplMethodName_MethodID_10: jmethodID?

    open func getImplMethodName() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getImplMethodName", methodSig: "()Ljava/lang/String;", methodCache: &SerializedLambda.getImplMethodName_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public java.lang.String java.lang.invoke.SerializedLambda.getImplMethodSignature()

    private static var getImplMethodSignature_MethodID_11: jmethodID?

    open func getImplMethodSignature() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getImplMethodSignature", methodSig: "()Ljava/lang/String;", methodCache: &SerializedLambda.getImplMethodSignature_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public final java.lang.String java.lang.invoke.SerializedLambda.getInstantiatedMethodType()

    private static var getInstantiatedMethodType_MethodID_12: jmethodID?

    open func getInstantiatedMethodType() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getInstantiatedMethodType", methodSig: "()Ljava/lang/String;", methodCache: &SerializedLambda.getInstantiatedMethodType_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// private java.lang.Object java.lang.invoke.SerializedLambda.readResolve() throws java.lang.ReflectiveOperationException

    /// public java.lang.String java.lang.invoke.SerializedLambda.toString()

    // Skipping method: false true false false false 

}

