
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.lang.Thread$UncaughtExceptionHandler ///

public protocol Thread_UncaughtExceptionHandler: JavaProtocol {

    /// public abstract void java.lang.Thread$UncaughtExceptionHandler.uncaughtException(java.lang.Thread,java.lang.Throwable)

    func uncaughtException( arg0: java_swift.JavaThread?, arg1: java_swift.Throwable? )

}


open class Thread_UncaughtExceptionHandlerForward: JNIObjectForward, Thread_UncaughtExceptionHandler {

    private static var Thread_UncaughtExceptionHandlerJNIClass: jclass?

    /// public abstract void java.lang.Thread$UncaughtExceptionHandler.uncaughtException(java.lang.Thread,java.lang.Throwable)

    private static var uncaughtException_MethodID_2: jmethodID?

    open func uncaughtException( arg0: java_swift.JavaThread?, arg1: java_swift.Throwable? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uncaughtException", methodSig: "(Ljava/lang/Thread;Ljava/lang/Throwable;)V", methodCache: &Thread_UncaughtExceptionHandlerForward.uncaughtException_MethodID_2, args: &__args, locals: &__locals )
    }

    open func uncaughtException( _ _arg0: java_swift.JavaThread?, _ _arg1: java_swift.Throwable? ) {
        uncaughtException( arg0: _arg0, arg1: _arg1 )
    }

}

private typealias Thread_UncaughtExceptionHandler_uncaughtException_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject?, _: jobject? ) -> ()

private func Thread_UncaughtExceptionHandler_uncaughtException_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ arg0: jobject?, _ arg1: jobject? ) -> () {
    Thread_UncaughtExceptionHandlerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).uncaughtException( arg0: arg0 != nil ? java_swift.JavaThread( javaObject: arg0 ) : nil, arg1: arg1 != nil ? java_swift.Throwable( javaObject: arg1 ) : nil )
}

fileprivate class Thread_UncaughtExceptionHandlerLocal_: JNILocalProxy<Thread_UncaughtExceptionHandler, Any> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let Thread_UncaughtExceptionHandler_uncaughtException_0_thunk: Thread_UncaughtExceptionHandler_uncaughtException_0_type = Thread_UncaughtExceptionHandler_uncaughtException_0
        natives.append( JNINativeMethod( name: strdup("__uncaughtException"), signature: strdup("(JLjava/lang/Thread;Ljava/lang/Throwable;)V"), fnPtr: unsafeBitCast( Thread_UncaughtExceptionHandler_uncaughtException_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        natives.withUnsafeBufferPointer {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr.baseAddress, jint(nativesPtr.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/java_lang/Thread_UncaughtExceptionHandlerProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

extension Thread_UncaughtExceptionHandler {

    public func localJavaObject( _ locals: UnsafeMutablePointer<[jobject]> ) -> jobject? {
        return Thread_UncaughtExceptionHandlerLocal_( owned: self, proto: self ).localJavaObject( locals )
    }

}

open class Thread_UncaughtExceptionHandlerBase: Thread_UncaughtExceptionHandler {

    public init() {}

    /// public abstract void java.lang.Thread$UncaughtExceptionHandler.uncaughtException(java.lang.Thread,java.lang.Throwable)

    open func uncaughtException( arg0: java_swift.JavaThread?, arg1: java_swift.Throwable? ) /**/ {
    }


}
