
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.lang.Readable ///

public protocol Readable: JavaProtocol {

    /// public abstract int java.lang.Readable.read(java.nio.CharBuffer) throws java.io.IOException

    func read( cb: /* class java.nio.CharBuffer */ UnavailableObject? ) throws /* java.io.IOException */ -> Int

}


open class ReadableForward: JNIObjectForward, Readable {

    private static var ReadableJNIClass: jclass?

    /// public abstract int java.lang.Readable.read(java.nio.CharBuffer) throws java.io.IOException

    private static var read_MethodID_2: jmethodID?

    open func read( cb: /* class java.nio.CharBuffer */ UnavailableObject? ) throws /* java.io.IOException */ -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: cb, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "read", methodSig: "(Ljava/nio/CharBuffer;)I", methodCache: &ReadableForward.read_MethodID_2, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.io.IOException */ UnavailableObject( javaObject: throwable )
        }
        return Int(__return)
    }

    open func read( _ _cb: /* class java.nio.CharBuffer */ UnavailableObject? ) throws /* java.io.IOException */ -> Int {
        return try read( cb: _cb )
    }

}

