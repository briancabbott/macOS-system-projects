
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.lang.Boolean ///

open class Boolean: java_swift.JavaObject, /* interface java.io.Serializable */ UnavailableProtocol, JavaComparable {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var BooleanJNIClass: jclass?

    /// public static final java.lang.Boolean java.lang.Boolean.FALSE

    private static var FALSE_FieldID: jfieldID?

    public static var FALSE: Boolean! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "FALSE", fieldType: "Ljava/lang/Boolean;", fieldCache: &FALSE_FieldID, className: "java/lang/Boolean", classCache: &BooleanJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? Boolean( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.Boolean java.lang.Boolean.TRUE

    private static var TRUE_FieldID: jfieldID?

    public static var TRUE: Boolean! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "TRUE", fieldType: "Ljava/lang/Boolean;", fieldCache: &TRUE_FieldID, className: "java/lang/Boolean", classCache: &BooleanJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? Boolean( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.Class java.lang.Boolean.TYPE

    private static var TYPE_FieldID: jfieldID?

    public static var TYPE: java_swift.JavaClass! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "TYPE", fieldType: "Ljava/lang/Class;", fieldCache: &TYPE_FieldID, className: "java/lang/Boolean", classCache: &BooleanJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_swift.JavaClass( javaObject: __value ) : nil
        }
    }

    /// private static final long java.lang.Boolean.serialVersionUID

    /// private final boolean java.lang.Boolean.value

    /// public java.lang.Boolean(boolean)

    private static var new_MethodID_1: jmethodID?

    public convenience init( value: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(value ? JNI_TRUE : JNI_FALSE) )
        let __object = JNIMethod.NewObject( className: "java/lang/Boolean", classCache: &Boolean.BooleanJNIClass, methodSig: "(Z)V", methodCache: &Boolean.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _value: Bool ) {
        self.init( value: _value )
    }

    /// public java.lang.Boolean(java.lang.String)

    private static var new_MethodID_2: jmethodID?

    public convenience init( s: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/Boolean", classCache: &Boolean.BooleanJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &Boolean.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _s: String? ) {
        self.init( s: _s )
    }

    /// public static int java.lang.Boolean.compare(boolean,boolean)

    private static var compare_MethodID_3: jmethodID?

    open class func compare( x: Bool, y: Bool ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( z: jboolean(x ? JNI_TRUE : JNI_FALSE) )
        __args[1] = jvalue( z: jboolean(y ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Boolean", classCache: &BooleanJNIClass, methodName: "compare", methodSig: "(ZZ)I", methodCache: &compare_MethodID_3, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open class func compare( _ _x: Bool, _ _y: Bool ) -> Int {
        return compare( x: _x, y: _y )
    }

    /// public static boolean java.lang.Boolean.getBoolean(java.lang.String)

    private static var getBoolean_MethodID_4: jmethodID?

    open class func getBoolean( name: String? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: name, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Boolean", classCache: &BooleanJNIClass, methodName: "getBoolean", methodSig: "(Ljava/lang/String;)Z", methodCache: &getBoolean_MethodID_4, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open class func getBoolean( _ _name: String? ) -> Bool {
        return getBoolean( name: _name )
    }

    /// public static int java.lang.Boolean.hashCode(boolean)

    private static var hashCode_MethodID_5: jmethodID?

    open class func hashCode( value: Bool ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(value ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Boolean", classCache: &BooleanJNIClass, methodName: "hashCode", methodSig: "(Z)I", methodCache: &hashCode_MethodID_5, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open class func hashCode( _ _value: Bool ) -> Int {
        return hashCode( value: _value )
    }

    /// public static boolean java.lang.Boolean.logicalAnd(boolean,boolean)

    private static var logicalAnd_MethodID_6: jmethodID?

    open class func logicalAnd( a: Bool, b: Bool ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( z: jboolean(a ? JNI_TRUE : JNI_FALSE) )
        __args[1] = jvalue( z: jboolean(b ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Boolean", classCache: &BooleanJNIClass, methodName: "logicalAnd", methodSig: "(ZZ)Z", methodCache: &logicalAnd_MethodID_6, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open class func logicalAnd( _ _a: Bool, _ _b: Bool ) -> Bool {
        return logicalAnd( a: _a, b: _b )
    }

    /// public static boolean java.lang.Boolean.logicalOr(boolean,boolean)

    private static var logicalOr_MethodID_7: jmethodID?

    open class func logicalOr( a: Bool, b: Bool ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( z: jboolean(a ? JNI_TRUE : JNI_FALSE) )
        __args[1] = jvalue( z: jboolean(b ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Boolean", classCache: &BooleanJNIClass, methodName: "logicalOr", methodSig: "(ZZ)Z", methodCache: &logicalOr_MethodID_7, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open class func logicalOr( _ _a: Bool, _ _b: Bool ) -> Bool {
        return logicalOr( a: _a, b: _b )
    }

    /// public static boolean java.lang.Boolean.logicalXor(boolean,boolean)

    private static var logicalXor_MethodID_8: jmethodID?

    open class func logicalXor( a: Bool, b: Bool ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( z: jboolean(a ? JNI_TRUE : JNI_FALSE) )
        __args[1] = jvalue( z: jboolean(b ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Boolean", classCache: &BooleanJNIClass, methodName: "logicalXor", methodSig: "(ZZ)Z", methodCache: &logicalXor_MethodID_8, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open class func logicalXor( _ _a: Bool, _ _b: Bool ) -> Bool {
        return logicalXor( a: _a, b: _b )
    }

    /// public static boolean java.lang.Boolean.parseBoolean(java.lang.String)

    private static var parseBoolean_MethodID_9: jmethodID?

    open class func parseBoolean( s: String? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Boolean", classCache: &BooleanJNIClass, methodName: "parseBoolean", methodSig: "(Ljava/lang/String;)Z", methodCache: &parseBoolean_MethodID_9, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open class func parseBoolean( _ _s: String? ) -> Bool {
        return parseBoolean( s: _s )
    }

    /// public static java.lang.String java.lang.Boolean.toString(boolean)

    private static var toString_MethodID_10: jmethodID?

    open class func toString( b: Bool ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(b ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Boolean", classCache: &BooleanJNIClass, methodName: "toString", methodSig: "(Z)Ljava/lang/String;", methodCache: &toString_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    open class func toString( _ _b: Bool ) -> String! {
        return toString( b: _b )
    }

    /// public static java.lang.Boolean java.lang.Boolean.valueOf(boolean)

    private static var valueOf_MethodID_11: jmethodID?

    open class func valueOf( b: Bool ) -> Boolean! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(b ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Boolean", classCache: &BooleanJNIClass, methodName: "valueOf", methodSig: "(Z)Ljava/lang/Boolean;", methodCache: &valueOf_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Boolean( javaObject: __return ) : nil
    }

    open class func valueOf( _ _b: Bool ) -> Boolean! {
        return valueOf( b: _b )
    }

    /// public static java.lang.Boolean java.lang.Boolean.valueOf(java.lang.String)

    private static var valueOf_MethodID_12: jmethodID?

    open class func valueOf( s: String? ) -> Boolean! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Boolean", classCache: &BooleanJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/String;)Ljava/lang/Boolean;", methodCache: &valueOf_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Boolean( javaObject: __return ) : nil
    }

    open class func valueOf( _ _s: String? ) -> Boolean! {
        return valueOf( s: _s )
    }

    /// public boolean java.lang.Boolean.booleanValue()

    private static var booleanValue_MethodID_13: jmethodID?

    open func booleanValue() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "booleanValue", methodSig: "()Z", methodCache: &Boolean.booleanValue_MethodID_13, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public int java.lang.Boolean.compareTo(java.lang.Boolean)

    private static var compareTo_MethodID_14: jmethodID?

    open func compareTo( b: Boolean? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: b, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compareTo", methodSig: "(Ljava/lang/Boolean;)I", methodCache: &Boolean.compareTo_MethodID_14, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func compareTo( _ _b: Boolean? ) -> Int {
        return compareTo( b: _b )
    }

    /// public int java.lang.Boolean.compareTo(java.lang.Object)

    private static var compareTo_MethodID_15: jmethodID?

    open func compareTo( arg0: java_swift.JavaObject? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compareTo", methodSig: "(Ljava/lang/Object;)I", methodCache: &Boolean.compareTo_MethodID_15, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func compareTo( _ _arg0: java_swift.JavaObject? ) -> Int {
        return compareTo( arg0: _arg0 )
    }

    /// public boolean java.lang.Boolean.equals(java.lang.Object)

    private static var equals_MethodID_16: jmethodID?

    open func equals( obj: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: obj, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &Boolean.equals_MethodID_16, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
        return equals( obj: _obj )
    }

    /// public int java.lang.Boolean.hashCode()

    // Skipping method: false true false false false 

    /// public java.lang.String java.lang.Boolean.toString()

    // Skipping method: false true false false false 

}

