
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.lang.management.PlatformLoggingMXBean ///

public protocol PlatformLoggingMXBean: PlatformManagedObject {

    /// public abstract java.lang.String java.lang.management.PlatformLoggingMXBean.getLoggerLevel(java.lang.String)

    func getLoggerLevel( loggerName: String? ) -> String!

    /// public abstract java.util.List java.lang.management.PlatformLoggingMXBean.getLoggerNames()

    // Skipping method: false false true false false 

    /// public abstract java.lang.String java.lang.management.PlatformLoggingMXBean.getParentLoggerName(java.lang.String)

    func getParentLoggerName( loggerName: String? ) -> String!

    /// public abstract void java.lang.management.PlatformLoggingMXBean.setLoggerLevel(java.lang.String,java.lang.String)

    func setLoggerLevel( loggerName: String?, levelName: String? )

}


open class PlatformLoggingMXBeanForward: PlatformManagedObjectForward, PlatformLoggingMXBean {

    private static var PlatformLoggingMXBeanJNIClass: jclass?

    /// public abstract java.lang.String java.lang.management.PlatformLoggingMXBean.getLoggerLevel(java.lang.String)

    private static var getLoggerLevel_MethodID_4: jmethodID?

    open func getLoggerLevel( loggerName: String? ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: loggerName, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLoggerLevel", methodSig: "(Ljava/lang/String;)Ljava/lang/String;", methodCache: &PlatformLoggingMXBeanForward.getLoggerLevel_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    open func getLoggerLevel( _ _loggerName: String? ) -> String! {
        return getLoggerLevel( loggerName: _loggerName )
    }

    /// public abstract java.util.List java.lang.management.PlatformLoggingMXBean.getLoggerNames()

    // Skipping method: false false true false false 

    /// public abstract javax.management.ObjectName java.lang.management.PlatformManagedObject.getObjectName()

    // Skipping method: false false true false false 

    /// public abstract java.lang.String java.lang.management.PlatformLoggingMXBean.getParentLoggerName(java.lang.String)

    private static var getParentLoggerName_MethodID_5: jmethodID?

    open func getParentLoggerName( loggerName: String? ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: loggerName, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getParentLoggerName", methodSig: "(Ljava/lang/String;)Ljava/lang/String;", methodCache: &PlatformLoggingMXBeanForward.getParentLoggerName_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    open func getParentLoggerName( _ _loggerName: String? ) -> String! {
        return getParentLoggerName( loggerName: _loggerName )
    }

    /// public abstract void java.lang.management.PlatformLoggingMXBean.setLoggerLevel(java.lang.String,java.lang.String)

    private static var setLoggerLevel_MethodID_6: jmethodID?

    open func setLoggerLevel( loggerName: String?, levelName: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: loggerName, locals: &__locals )
        __args[1] = JNIType.toJava( value: levelName, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLoggerLevel", methodSig: "(Ljava/lang/String;Ljava/lang/String;)V", methodCache: &PlatformLoggingMXBeanForward.setLoggerLevel_MethodID_6, args: &__args, locals: &__locals )
    }

    open func setLoggerLevel( _ _loggerName: String?, _ _levelName: String? ) {
        setLoggerLevel( loggerName: _loggerName, levelName: _levelName )
    }

    /// In declared protocol but not defined.. ///

    /// public abstract javax.management.ObjectName java.lang.management.PlatformManagedObject.getObjectName()

    // Skipping method: false false true false false 

}

