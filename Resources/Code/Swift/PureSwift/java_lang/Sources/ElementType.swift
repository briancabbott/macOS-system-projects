
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.lang.annotation.ElementType ///

public enum ElementType: Int, JNIObjectProtocol, JNIObjectInit {

    case TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE, ANNOTATION_TYPE, PACKAGE, TYPE_PARAMETER, TYPE_USE

    static let enumConstants = JavaClass(loading: "java.lang.annotation.ElementType")
        .getEnumConstants()!.map { ElementTypeForward( javaObject: $0.javaObject ) }

    public func underlier() -> ElementTypeForward {
        return ElementType.enumConstants[self.rawValue]
    }

    public func localJavaObject(_ locals: UnsafeMutablePointer<[jobject]>) -> jobject? {
        return underlier().localJavaObject( locals )
    }

    public init( javaObject: jobject? ) {
        self = ElementType( rawValue: JavaEnum( javaObject: javaObject ).ordinal() )!
    }

    /// public static java.lang.annotation.ElementType java.lang.annotation.ElementType.valueOf(java.lang.String)

    private static var valueOf_MethodID_1: jmethodID?

    public static func valueOf( name: String? ) -> ElementType! {
        return ElementTypeForward.valueOf( name: name )
    }
    public static func valueOf( _ _name: String? ) -> ElementType! {
        return valueOf( name: _name )
    }

    /// public static java.lang.annotation.ElementType[] java.lang.annotation.ElementType.values()

    private static var values_MethodID_2: jmethodID?

    public static func values() -> [ElementType]! {
        return ElementTypeForward.values( )
    }

}


open class ElementTypeForward: JNIObjectForward {

    private static var ElementTypeJNIClass: jclass?

    /// private static final java.lang.annotation.ElementType[] java.lang.annotation.ElementType.$VALUES

    /// public static final java.lang.annotation.ElementType java.lang.annotation.ElementType.ANNOTATION_TYPE

    private static var ANNOTATION_TYPE_FieldID: jfieldID?

    public static var ANNOTATION_TYPE: ElementType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "ANNOTATION_TYPE", fieldType: "Ljava/lang/annotation/ElementType;", fieldCache: &ANNOTATION_TYPE_FieldID, className: "java/lang/annotation/ElementType", classCache: &ElementTypeJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? ElementType( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.annotation.ElementType java.lang.annotation.ElementType.CONSTRUCTOR

    private static var CONSTRUCTOR_FieldID: jfieldID?

    public static var CONSTRUCTOR: ElementType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "CONSTRUCTOR", fieldType: "Ljava/lang/annotation/ElementType;", fieldCache: &CONSTRUCTOR_FieldID, className: "java/lang/annotation/ElementType", classCache: &ElementTypeJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? ElementType( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.annotation.ElementType java.lang.annotation.ElementType.FIELD

    private static var FIELD_FieldID: jfieldID?

    public static var FIELD: ElementType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "FIELD", fieldType: "Ljava/lang/annotation/ElementType;", fieldCache: &FIELD_FieldID, className: "java/lang/annotation/ElementType", classCache: &ElementTypeJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? ElementType( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.annotation.ElementType java.lang.annotation.ElementType.LOCAL_VARIABLE

    private static var LOCAL_VARIABLE_FieldID: jfieldID?

    public static var LOCAL_VARIABLE: ElementType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "LOCAL_VARIABLE", fieldType: "Ljava/lang/annotation/ElementType;", fieldCache: &LOCAL_VARIABLE_FieldID, className: "java/lang/annotation/ElementType", classCache: &ElementTypeJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? ElementType( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.annotation.ElementType java.lang.annotation.ElementType.METHOD

    private static var METHOD_FieldID: jfieldID?

    public static var METHOD: ElementType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "METHOD", fieldType: "Ljava/lang/annotation/ElementType;", fieldCache: &METHOD_FieldID, className: "java/lang/annotation/ElementType", classCache: &ElementTypeJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? ElementType( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.annotation.ElementType java.lang.annotation.ElementType.PACKAGE

    private static var PACKAGE_FieldID: jfieldID?

    public static var PACKAGE: ElementType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "PACKAGE", fieldType: "Ljava/lang/annotation/ElementType;", fieldCache: &PACKAGE_FieldID, className: "java/lang/annotation/ElementType", classCache: &ElementTypeJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? ElementType( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.annotation.ElementType java.lang.annotation.ElementType.PARAMETER

    private static var PARAMETER_FieldID: jfieldID?

    public static var PARAMETER: ElementType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "PARAMETER", fieldType: "Ljava/lang/annotation/ElementType;", fieldCache: &PARAMETER_FieldID, className: "java/lang/annotation/ElementType", classCache: &ElementTypeJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? ElementType( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.annotation.ElementType java.lang.annotation.ElementType.TYPE

    private static var TYPE_FieldID: jfieldID?

    public static var TYPE: ElementType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "TYPE", fieldType: "Ljava/lang/annotation/ElementType;", fieldCache: &TYPE_FieldID, className: "java/lang/annotation/ElementType", classCache: &ElementTypeJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? ElementType( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.annotation.ElementType java.lang.annotation.ElementType.TYPE_PARAMETER

    private static var TYPE_PARAMETER_FieldID: jfieldID?

    public static var TYPE_PARAMETER: ElementType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "TYPE_PARAMETER", fieldType: "Ljava/lang/annotation/ElementType;", fieldCache: &TYPE_PARAMETER_FieldID, className: "java/lang/annotation/ElementType", classCache: &ElementTypeJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? ElementType( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.annotation.ElementType java.lang.annotation.ElementType.TYPE_USE

    private static var TYPE_USE_FieldID: jfieldID?

    public static var TYPE_USE: ElementType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "TYPE_USE", fieldType: "Ljava/lang/annotation/ElementType;", fieldCache: &TYPE_USE_FieldID, className: "java/lang/annotation/ElementType", classCache: &ElementTypeJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? ElementType( javaObject: __value ) : nil
        }
    }

    /// public static java.lang.annotation.ElementType java.lang.annotation.ElementType.valueOf(java.lang.String)

    private static var valueOf_MethodID_3: jmethodID?

    open class func valueOf( name: String? ) -> ElementType! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: name, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/annotation/ElementType", classCache: &ElementTypeJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/String;)Ljava/lang/annotation/ElementType;", methodCache: &valueOf_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ElementType( javaObject: __return ) : nil
    }

    open class func valueOf( _ _name: String? ) -> ElementType! {
        return valueOf( name: _name )
    }

    /// public static java.lang.Enum java.lang.Enum.valueOf(java.lang.Class,java.lang.String)

    private static var valueOf_MethodID_4: jmethodID?

    open class func valueOf( enumType: java_swift.JavaClass?, name: String? ) -> java_swift.JavaEnum! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: enumType, locals: &__locals )
        __args[1] = JNIType.toJava( value: name, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/annotation/ElementType", classCache: &ElementTypeJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;", methodCache: &valueOf_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaEnum( javaObject: __return ) : nil
    }

    open class func valueOf( _ _enumType: java_swift.JavaClass?, _ _name: String? ) -> java_swift.JavaEnum! {
        return valueOf( enumType: _enumType, name: _name )
    }

    /// public static java.lang.annotation.ElementType[] java.lang.annotation.ElementType.values()

    private static var values_MethodID_5: jmethodID?

    open class func values() -> [ElementType]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/annotation/ElementType", classCache: &ElementTypeJNIClass, methodName: "values", methodSig: "()[Ljava/lang/annotation/ElementType;", methodCache: &values_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [ElementType].self, from: __return )
    }


    /// public final int java.lang.Enum.compareTo(java.lang.Enum)

    // Skipping method: false true false false false 

    /// public int java.lang.Enum.compareTo(java.lang.Object)

    // Skipping method: false true false false false 

    /// public final boolean java.lang.Enum.equals(java.lang.Object)

    // Skipping method: false true false false false 

    /// public final native java.lang.Class java.lang.Object.getClass()

    // Skipping method: false true false false false 

    /// public final java.lang.Class java.lang.Enum.getDeclaringClass()

    // Skipping method: false true false false false 

    /// public final int java.lang.Enum.hashCode()

    // Skipping method: false true false false false 

    /// public final java.lang.String java.lang.Enum.name()

    // Skipping method: false true false false false 

    /// public final native void java.lang.Object.notify()

    // Skipping method: false true false false false 

    /// public final native void java.lang.Object.notifyAll()

    // Skipping method: false true false false false 

    /// public final int java.lang.Enum.ordinal()

    // Skipping method: false true false false false 

    /// public java.lang.String java.lang.Enum.toString()

    // Skipping method: false true false false false 

    /// public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException

    // Skipping method: false true false false false 

    /// public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException

    // Skipping method: false true false false false 

    /// public final void java.lang.Object.wait() throws java.lang.InterruptedException

    // Skipping method: false true false false false 

}

