
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.lang.management.LockInfo ///

open class LockInfo: java_swift.JavaObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var LockInfoJNIClass: jclass?

    /// private java.lang.String java.lang.management.LockInfo.className

    /// private int java.lang.management.LockInfo.identityHashCode

    /// public java.lang.management.LockInfo(java.lang.String,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( className: String?, identityHashCode: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: className, locals: &__locals )
        __args[1] = jvalue( i: jint(identityHashCode) )
        let __object = JNIMethod.NewObject( className: "java/lang/management/LockInfo", classCache: &LockInfo.LockInfoJNIClass, methodSig: "(Ljava/lang/String;I)V", methodCache: &LockInfo.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _className: String?, _ _identityHashCode: Int ) {
        self.init( className: _className, identityHashCode: _identityHashCode )
    }

    /// java.lang.management.LockInfo(java.lang.Object)

    // Skipping init: true false false 

    /// public static java.lang.management.LockInfo java.lang.management.LockInfo.from(javax.management.openmbean.CompositeData)

    private static var from_MethodID_2: jmethodID?

    open class func from( cd: /* interface javax.management.openmbean.CompositeData */ UnavailableProtocol? ) -> LockInfo! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: cd, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/management/LockInfo", classCache: &LockInfoJNIClass, methodName: "from", methodSig: "(Ljavax/management/openmbean/CompositeData;)Ljava/lang/management/LockInfo;", methodCache: &from_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LockInfo( javaObject: __return ) : nil
    }

    open class func from( _ _cd: /* interface javax.management.openmbean.CompositeData */ UnavailableProtocol? ) -> LockInfo! {
        return from( cd: _cd )
    }

    /// public java.lang.String java.lang.management.LockInfo.getClassName()

    private static var getClassName_MethodID_3: jmethodID?

    open func getClassName() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getClassName", methodSig: "()Ljava/lang/String;", methodCache: &LockInfo.getClassName_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public int java.lang.management.LockInfo.getIdentityHashCode()

    private static var getIdentityHashCode_MethodID_4: jmethodID?

    open func getIdentityHashCode() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getIdentityHashCode", methodSig: "()I", methodCache: &LockInfo.getIdentityHashCode_MethodID_4, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public java.lang.String java.lang.management.LockInfo.toString()

    // Skipping method: false true false false false 

}

