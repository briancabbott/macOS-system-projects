
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.lang.ref.Reference ///

open class Reference: java_swift.JavaObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ReferenceJNIClass: jclass?

    /// private static java.lang.ref.Reference$Lock java.lang.ref.Reference.lock

    /// private static java.lang.ref.Reference java.lang.ref.Reference.pending

    /// private transient java.lang.ref.Reference java.lang.ref.Reference.discovered

    /// java.lang.ref.Reference java.lang.ref.Reference.next

    // Skipping field: true false false false false false 

    /// volatile java.lang.ref.ReferenceQueue java.lang.ref.Reference.queue

    // Skipping field: true false false false false false 

    /// private java.lang.Object java.lang.ref.Reference.referent

    /// java.lang.ref.Reference(java.lang.Object)

    // Skipping init: true false false 

    /// java.lang.ref.Reference(java.lang.Object,java.lang.ref.ReferenceQueue)

    // Skipping init: true false false 

    /// static boolean java.lang.ref.Reference.tryHandlePending(boolean)

    // Skipping method: true false false false false 

    /// public void java.lang.ref.Reference.clear()

    private static var clear_MethodID_1: jmethodID?

    open func clear() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clear", methodSig: "()V", methodCache: &Reference.clear_MethodID_1, args: &__args, locals: &__locals )
    }


    /// public boolean java.lang.ref.Reference.enqueue()

    private static var enqueue_MethodID_2: jmethodID?

    open func enqueue() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "enqueue", methodSig: "()Z", methodCache: &Reference.enqueue_MethodID_2, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public java.lang.Object java.lang.ref.Reference.get()

    private static var get_MethodID_3: jmethodID?

    open func get() -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "get", methodSig: "()Ljava/lang/Object;", methodCache: &Reference.get_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public boolean java.lang.ref.Reference.isEnqueued()

    private static var isEnqueued_MethodID_4: jmethodID?

    open func isEnqueued() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isEnqueued", methodSig: "()Z", methodCache: &Reference.isEnqueued_MethodID_4, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


}

