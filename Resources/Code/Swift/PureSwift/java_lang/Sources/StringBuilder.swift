
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.lang.StringBuilder ///

open class StringBuilder: /* class java.lang.AbstractStringBuilder */ UnavailableObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var StringBuilderJNIClass: jclass?

    /// static final long java.lang.StringBuilder.serialVersionUID

    // Skipping field: true true false false false false 

    /// int java.lang.AbstractStringBuilder.count

    // Skipping field: true false false false false false 

    /// char[] java.lang.AbstractStringBuilder.value

    // Skipping field: true false false false false false 

    /// public java.lang.StringBuilder()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "java/lang/StringBuilder", classCache: &StringBuilder.StringBuilderJNIClass, methodSig: "()V", methodCache: &StringBuilder.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.lang.StringBuilder(java.lang.CharSequence)

    private static var new_MethodID_2: jmethodID?

    public convenience init( seq: CharSequence? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: seq, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/StringBuilder", classCache: &StringBuilder.StringBuilderJNIClass, methodSig: "(Ljava/lang/CharSequence;)V", methodCache: &StringBuilder.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _seq: CharSequence? ) {
        self.init( seq: _seq )
    }

    /// public java.lang.StringBuilder(int)

    private static var new_MethodID_3: jmethodID?

    public convenience init( capacity: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(capacity) )
        let __object = JNIMethod.NewObject( className: "java/lang/StringBuilder", classCache: &StringBuilder.StringBuilderJNIClass, methodSig: "(I)V", methodCache: &StringBuilder.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _capacity: Int ) {
        self.init( capacity: _capacity )
    }

    /// public java.lang.StringBuilder(java.lang.String)

    private static var new_MethodID_4: jmethodID?

    public convenience init( str: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: str, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/StringBuilder", classCache: &StringBuilder.StringBuilderJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &StringBuilder.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _str: String? ) {
        self.init( str: _str )
    }

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.append(boolean)

    private static var append_MethodID_5: jmethodID?

    open func append( b: Bool ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(b ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "append", methodSig: "(Z)Ljava/lang/AbstractStringBuilder;", methodCache: &StringBuilder.append_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class java.lang.AbstractStringBuilder */ UnavailableObject( javaObject: __return ) : nil
    }

    open func append( _ _b: Bool ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        return append( b: _b )
    }

    /// public java.lang.StringBuilder java.lang.StringBuilder.append(boolean)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.append(java.lang.CharSequence)

    private static var append_MethodID_6: jmethodID?

    open func append( s: CharSequence? ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "append", methodSig: "(Ljava/lang/CharSequence;)Ljava/lang/AbstractStringBuilder;", methodCache: &StringBuilder.append_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class java.lang.AbstractStringBuilder */ UnavailableObject( javaObject: __return ) : nil
    }

    open func append( _ _s: CharSequence? ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        return append( s: _s )
    }

    /// public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.CharSequence)

    /// public java.lang.Appendable java.lang.StringBuilder.append(java.lang.CharSequence) throws java.io.IOException

    private static var append_MethodID_7: jmethodID?

    open func append( s: CharSequence? ) throws /* java.io.IOException */ -> Appendable! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "append", methodSig: "(Ljava/lang/CharSequence;)Ljava/lang/Appendable;", methodCache: &StringBuilder.append_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.io.IOException */ UnavailableObject( javaObject: throwable )
        }
        return __return != nil ? AppendableForward( javaObject: __return ) : nil
    }

    open func append( _ _s: CharSequence? ) throws /* java.io.IOException */ -> Appendable! {
        return try append( s: _s )
    }

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.append(java.lang.CharSequence,int,int)

    private static var append_MethodID_8: jmethodID?

    open func append( s: CharSequence?, start: Int, end: Int ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        __args[1] = jvalue( i: jint(start) )
        __args[2] = jvalue( i: jint(end) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "append", methodSig: "(Ljava/lang/CharSequence;II)Ljava/lang/AbstractStringBuilder;", methodCache: &StringBuilder.append_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class java.lang.AbstractStringBuilder */ UnavailableObject( javaObject: __return ) : nil
    }

    open func append( _ _s: CharSequence?, _ _start: Int, _ _end: Int ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        return append( s: _s, start: _start, end: _end )
    }

    /// public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.CharSequence,int,int)

    /// public java.lang.Appendable java.lang.StringBuilder.append(java.lang.CharSequence,int,int) throws java.io.IOException

    private static var append_MethodID_9: jmethodID?

    open func append( s: CharSequence?, start: Int, end: Int ) throws /* java.io.IOException */ -> Appendable! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        __args[1] = jvalue( i: jint(start) )
        __args[2] = jvalue( i: jint(end) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "append", methodSig: "(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;", methodCache: &StringBuilder.append_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.io.IOException */ UnavailableObject( javaObject: throwable )
        }
        return __return != nil ? AppendableForward( javaObject: __return ) : nil
    }

    open func append( _ _s: CharSequence?, _ _start: Int, _ _end: Int ) throws /* java.io.IOException */ -> Appendable! {
        return try append( s: _s, start: _start, end: _end )
    }

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.append(double)

    private static var append_MethodID_10: jmethodID?

    open func append( d: Double ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( d: d )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "append", methodSig: "(D)Ljava/lang/AbstractStringBuilder;", methodCache: &StringBuilder.append_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class java.lang.AbstractStringBuilder */ UnavailableObject( javaObject: __return ) : nil
    }

    open func append( _ _d: Double ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        return append( d: _d )
    }

    /// public java.lang.StringBuilder java.lang.StringBuilder.append(double)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.append(float)

    private static var append_MethodID_11: jmethodID?

    open func append( f: Float ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( f: f )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "append", methodSig: "(F)Ljava/lang/AbstractStringBuilder;", methodCache: &StringBuilder.append_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class java.lang.AbstractStringBuilder */ UnavailableObject( javaObject: __return ) : nil
    }

    open func append( _ _f: Float ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        return append( f: _f )
    }

    /// public java.lang.StringBuilder java.lang.StringBuilder.append(float)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.append(int)

    private static var append_MethodID_12: jmethodID?

    open func append( i: Int ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "append", methodSig: "(I)Ljava/lang/AbstractStringBuilder;", methodCache: &StringBuilder.append_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class java.lang.AbstractStringBuilder */ UnavailableObject( javaObject: __return ) : nil
    }

    open func append( _ _i: Int ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        return append( i: _i )
    }

    /// public java.lang.StringBuilder java.lang.StringBuilder.append(int)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.append(long)

    private static var append_MethodID_13: jmethodID?

    open func append( lng: Int64 ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( j: lng )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "append", methodSig: "(J)Ljava/lang/AbstractStringBuilder;", methodCache: &StringBuilder.append_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class java.lang.AbstractStringBuilder */ UnavailableObject( javaObject: __return ) : nil
    }

    open func append( _ _lng: Int64 ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        return append( lng: _lng )
    }

    /// public java.lang.StringBuilder java.lang.StringBuilder.append(long)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.append(java.lang.String)

    private static var append_MethodID_14: jmethodID?

    open func append( str: String? ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: str, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "append", methodSig: "(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;", methodCache: &StringBuilder.append_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class java.lang.AbstractStringBuilder */ UnavailableObject( javaObject: __return ) : nil
    }

    open func append( _ _str: String? ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        return append( str: _str )
    }

    /// public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.append(java.lang.StringBuffer)

    private static var append_MethodID_15: jmethodID?

    open func append( sb: StringBuffer? ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: sb, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "append", methodSig: "(Ljava/lang/StringBuffer;)Ljava/lang/AbstractStringBuilder;", methodCache: &StringBuilder.append_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class java.lang.AbstractStringBuilder */ UnavailableObject( javaObject: __return ) : nil
    }

    open func append( _ _sb: StringBuffer? ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        return append( sb: _sb )
    }

    /// public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.StringBuffer)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.append(char)

    private static var append_MethodID_16: jmethodID?

    open func append( c: UInt16 ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( c: c )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "append", methodSig: "(C)Ljava/lang/AbstractStringBuilder;", methodCache: &StringBuilder.append_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class java.lang.AbstractStringBuilder */ UnavailableObject( javaObject: __return ) : nil
    }

    open func append( _ _c: UInt16 ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        return append( c: _c )
    }

    /// public java.lang.StringBuilder java.lang.StringBuilder.append(char)

    /// public java.lang.Appendable java.lang.StringBuilder.append(char) throws java.io.IOException

    private static var append_MethodID_17: jmethodID?

    open func append( c: UInt16 ) throws /* java.io.IOException */ -> Appendable! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( c: c )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "append", methodSig: "(C)Ljava/lang/Appendable;", methodCache: &StringBuilder.append_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.io.IOException */ UnavailableObject( javaObject: throwable )
        }
        return __return != nil ? AppendableForward( javaObject: __return ) : nil
    }

    open func append( _ _c: UInt16 ) throws /* java.io.IOException */ -> Appendable! {
        return try append( c: _c )
    }

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.append(char[])

    private static var append_MethodID_18: jmethodID?

    open func append( str: [UInt16]? ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: str, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "append", methodSig: "([C)Ljava/lang/AbstractStringBuilder;", methodCache: &StringBuilder.append_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class java.lang.AbstractStringBuilder */ UnavailableObject( javaObject: __return ) : nil
    }

    open func append( _ _str: [UInt16]? ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        return append( str: _str )
    }

    /// public java.lang.StringBuilder java.lang.StringBuilder.append(char[])

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.append(char[],int,int)

    private static var append_MethodID_19: jmethodID?

    open func append( str: [UInt16]?, offset: Int, len: Int ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: str, locals: &__locals )
        __args[1] = jvalue( i: jint(offset) )
        __args[2] = jvalue( i: jint(len) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "append", methodSig: "([CII)Ljava/lang/AbstractStringBuilder;", methodCache: &StringBuilder.append_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class java.lang.AbstractStringBuilder */ UnavailableObject( javaObject: __return ) : nil
    }

    open func append( _ _str: [UInt16]?, _ _offset: Int, _ _len: Int ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        return append( str: _str, offset: _offset, len: _len )
    }

    /// public java.lang.StringBuilder java.lang.StringBuilder.append(char[],int,int)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.append(java.lang.Object)

    private static var append_MethodID_20: jmethodID?

    open func append( obj: java_swift.JavaObject? ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: obj, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "append", methodSig: "(Ljava/lang/Object;)Ljava/lang/AbstractStringBuilder;", methodCache: &StringBuilder.append_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class java.lang.AbstractStringBuilder */ UnavailableObject( javaObject: __return ) : nil
    }

    open func append( _ _obj: java_swift.JavaObject? ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        return append( obj: _obj )
    }

    /// public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.Object)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.appendCodePoint(int)

    private static var appendCodePoint_MethodID_21: jmethodID?

    open func appendCodePoint( codePoint: Int ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(codePoint) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "appendCodePoint", methodSig: "(I)Ljava/lang/AbstractStringBuilder;", methodCache: &StringBuilder.appendCodePoint_MethodID_21, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class java.lang.AbstractStringBuilder */ UnavailableObject( javaObject: __return ) : nil
    }

    open func appendCodePoint( _ _codePoint: Int ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        return appendCodePoint( codePoint: _codePoint )
    }

    /// public java.lang.StringBuilder java.lang.StringBuilder.appendCodePoint(int)

    /// public int java.lang.StringBuilder.capacity()

    private static var capacity_MethodID_22: jmethodID?

    open func capacity() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "capacity", methodSig: "()I", methodCache: &StringBuilder.capacity_MethodID_22, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public char java.lang.StringBuilder.charAt(int)

    private static var charAt_MethodID_23: jmethodID?

    open func charAt( arg0: Int ) -> UInt16 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        let __return = JNIMethod.CallCharMethod( object: javaObject, methodName: "charAt", methodSig: "(I)C", methodCache: &StringBuilder.charAt_MethodID_23, args: &__args, locals: &__locals )
        return __return
    }

    open func charAt( _ _arg0: Int ) -> UInt16 {
        return charAt( arg0: _arg0 )
    }

    /// public int java.lang.StringBuilder.codePointAt(int)

    private static var codePointAt_MethodID_24: jmethodID?

    open func codePointAt( index: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(index) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "codePointAt", methodSig: "(I)I", methodCache: &StringBuilder.codePointAt_MethodID_24, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func codePointAt( _ _index: Int ) -> Int {
        return codePointAt( index: _index )
    }

    /// public int java.lang.StringBuilder.codePointBefore(int)

    private static var codePointBefore_MethodID_25: jmethodID?

    open func codePointBefore( index: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(index) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "codePointBefore", methodSig: "(I)I", methodCache: &StringBuilder.codePointBefore_MethodID_25, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func codePointBefore( _ _index: Int ) -> Int {
        return codePointBefore( index: _index )
    }

    /// public int java.lang.StringBuilder.codePointCount(int,int)

    private static var codePointCount_MethodID_26: jmethodID?

    open func codePointCount( beginIndex: Int, endIndex: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(beginIndex) )
        __args[1] = jvalue( i: jint(endIndex) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "codePointCount", methodSig: "(II)I", methodCache: &StringBuilder.codePointCount_MethodID_26, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func codePointCount( _ _beginIndex: Int, _ _endIndex: Int ) -> Int {
        return codePointCount( beginIndex: _beginIndex, endIndex: _endIndex )
    }

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.delete(int,int)

    private static var delete_MethodID_27: jmethodID?

    open func delete( start: Int, end: Int ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(start) )
        __args[1] = jvalue( i: jint(end) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "delete", methodSig: "(II)Ljava/lang/AbstractStringBuilder;", methodCache: &StringBuilder.delete_MethodID_27, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class java.lang.AbstractStringBuilder */ UnavailableObject( javaObject: __return ) : nil
    }

    open func delete( _ _start: Int, _ _end: Int ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        return delete( start: _start, end: _end )
    }

    /// public java.lang.StringBuilder java.lang.StringBuilder.delete(int,int)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.deleteCharAt(int)

    private static var deleteCharAt_MethodID_28: jmethodID?

    open func deleteCharAt( index: Int ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(index) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "deleteCharAt", methodSig: "(I)Ljava/lang/AbstractStringBuilder;", methodCache: &StringBuilder.deleteCharAt_MethodID_28, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class java.lang.AbstractStringBuilder */ UnavailableObject( javaObject: __return ) : nil
    }

    open func deleteCharAt( _ _index: Int ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        return deleteCharAt( index: _index )
    }

    /// public java.lang.StringBuilder java.lang.StringBuilder.deleteCharAt(int)

    /// public void java.lang.StringBuilder.ensureCapacity(int)

    private static var ensureCapacity_MethodID_29: jmethodID?

    open func ensureCapacity( minimumCapacity: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(minimumCapacity) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "ensureCapacity", methodSig: "(I)V", methodCache: &StringBuilder.ensureCapacity_MethodID_29, args: &__args, locals: &__locals )
    }

    open func ensureCapacity( _ _minimumCapacity: Int ) {
        ensureCapacity( minimumCapacity: _minimumCapacity )
    }

    /// public void java.lang.StringBuilder.getChars(int,int,char[],int)

    private static var getChars_MethodID_30: jmethodID?

    open func getChars( srcBegin: Int, srcEnd: Int, dst: [UInt16]?, dstBegin: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        __args[0] = jvalue( i: jint(srcBegin) )
        __args[1] = jvalue( i: jint(srcEnd) )
        __args[2] = JNIType.toJava( value: dst, locals: &__locals )
        __args[3] = jvalue( i: jint(dstBegin) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "getChars", methodSig: "(II[CI)V", methodCache: &StringBuilder.getChars_MethodID_30, args: &__args, locals: &__locals )
    }

    open func getChars( _ _srcBegin: Int, _ _srcEnd: Int, _ _dst: [UInt16]?, _ _dstBegin: Int ) {
        getChars( srcBegin: _srcBegin, srcEnd: _srcEnd, dst: _dst, dstBegin: _dstBegin )
    }

    /// public int java.lang.StringBuilder.indexOf(java.lang.String)

    private static var indexOf_MethodID_31: jmethodID?

    open func indexOf( str: String? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: str, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "indexOf", methodSig: "(Ljava/lang/String;)I", methodCache: &StringBuilder.indexOf_MethodID_31, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func indexOf( _ _str: String? ) -> Int {
        return indexOf( str: _str )
    }

    /// public int java.lang.StringBuilder.indexOf(java.lang.String,int)

    private static var indexOf_MethodID_32: jmethodID?

    open func indexOf( str: String?, fromIndex: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: str, locals: &__locals )
        __args[1] = jvalue( i: jint(fromIndex) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "indexOf", methodSig: "(Ljava/lang/String;I)I", methodCache: &StringBuilder.indexOf_MethodID_32, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func indexOf( _ _str: String?, _ _fromIndex: Int ) -> Int {
        return indexOf( str: _str, fromIndex: _fromIndex )
    }

    /// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,boolean)

    private static var insert_MethodID_33: jmethodID?

    open func insert( offset: Int, b: Bool ) -> StringBuilder! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(offset) )
        __args[1] = jvalue( z: jboolean(b ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "insert", methodSig: "(IZ)Ljava/lang/StringBuilder;", methodCache: &StringBuilder.insert_MethodID_33, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? StringBuilder( javaObject: __return ) : nil
    }

    open func insert( _ _offset: Int, _ _b: Bool ) -> StringBuilder! {
        return insert( offset: _offset, b: _b )
    }

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.insert(int,boolean)

    /// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,java.lang.CharSequence)

    private static var insert_MethodID_34: jmethodID?

    open func insert( dstOffset: Int, s: CharSequence? ) -> StringBuilder! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(dstOffset) )
        __args[1] = JNIType.toJava( value: s, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "insert", methodSig: "(ILjava/lang/CharSequence;)Ljava/lang/StringBuilder;", methodCache: &StringBuilder.insert_MethodID_34, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? StringBuilder( javaObject: __return ) : nil
    }

    open func insert( _ _dstOffset: Int, _ _s: CharSequence? ) -> StringBuilder! {
        return insert( dstOffset: _dstOffset, s: _s )
    }

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.insert(int,java.lang.CharSequence)

    /// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,java.lang.CharSequence,int,int)

    private static var insert_MethodID_35: jmethodID?

    open func insert( dstOffset: Int, s: CharSequence?, start: Int, end: Int ) -> StringBuilder! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        __args[0] = jvalue( i: jint(dstOffset) )
        __args[1] = JNIType.toJava( value: s, locals: &__locals )
        __args[2] = jvalue( i: jint(start) )
        __args[3] = jvalue( i: jint(end) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "insert", methodSig: "(ILjava/lang/CharSequence;II)Ljava/lang/StringBuilder;", methodCache: &StringBuilder.insert_MethodID_35, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? StringBuilder( javaObject: __return ) : nil
    }

    open func insert( _ _dstOffset: Int, _ _s: CharSequence?, _ _start: Int, _ _end: Int ) -> StringBuilder! {
        return insert( dstOffset: _dstOffset, s: _s, start: _start, end: _end )
    }

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.insert(int,java.lang.CharSequence,int,int)

    /// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,double)

    private static var insert_MethodID_36: jmethodID?

    open func insert( offset: Int, d: Double ) -> StringBuilder! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(offset) )
        __args[1] = jvalue( d: d )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "insert", methodSig: "(ID)Ljava/lang/StringBuilder;", methodCache: &StringBuilder.insert_MethodID_36, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? StringBuilder( javaObject: __return ) : nil
    }

    open func insert( _ _offset: Int, _ _d: Double ) -> StringBuilder! {
        return insert( offset: _offset, d: _d )
    }

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.insert(int,double)

    /// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,float)

    private static var insert_MethodID_37: jmethodID?

    open func insert( offset: Int, f: Float ) -> StringBuilder! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(offset) )
        __args[1] = jvalue( f: f )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "insert", methodSig: "(IF)Ljava/lang/StringBuilder;", methodCache: &StringBuilder.insert_MethodID_37, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? StringBuilder( javaObject: __return ) : nil
    }

    open func insert( _ _offset: Int, _ _f: Float ) -> StringBuilder! {
        return insert( offset: _offset, f: _f )
    }

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.insert(int,float)

    /// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,int)

    private static var insert_MethodID_38: jmethodID?

    open func insert( offset: Int, i: Int ) -> StringBuilder! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(offset) )
        __args[1] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "insert", methodSig: "(II)Ljava/lang/StringBuilder;", methodCache: &StringBuilder.insert_MethodID_38, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? StringBuilder( javaObject: __return ) : nil
    }

    open func insert( _ _offset: Int, _ _i: Int ) -> StringBuilder! {
        return insert( offset: _offset, i: _i )
    }

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.insert(int,int)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.insert(int,long)

    private static var insert_MethodID_39: jmethodID?

    open func insert( offset: Int, l: Int64 ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(offset) )
        __args[1] = jvalue( j: l )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "insert", methodSig: "(IJ)Ljava/lang/AbstractStringBuilder;", methodCache: &StringBuilder.insert_MethodID_39, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class java.lang.AbstractStringBuilder */ UnavailableObject( javaObject: __return ) : nil
    }

    open func insert( _ _offset: Int, _ _l: Int64 ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        return insert( offset: _offset, l: _l )
    }

    /// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,long)

    /// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,java.lang.String)

    private static var insert_MethodID_40: jmethodID?

    open func insert( offset: Int, str: String? ) -> StringBuilder! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(offset) )
        __args[1] = JNIType.toJava( value: str, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "insert", methodSig: "(ILjava/lang/String;)Ljava/lang/StringBuilder;", methodCache: &StringBuilder.insert_MethodID_40, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? StringBuilder( javaObject: __return ) : nil
    }

    open func insert( _ _offset: Int, _ _str: String? ) -> StringBuilder! {
        return insert( offset: _offset, str: _str )
    }

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.insert(int,java.lang.String)

    /// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,char)

    private static var insert_MethodID_41: jmethodID?

    open func insert( offset: Int, c: UInt16 ) -> StringBuilder! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(offset) )
        __args[1] = jvalue( c: c )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "insert", methodSig: "(IC)Ljava/lang/StringBuilder;", methodCache: &StringBuilder.insert_MethodID_41, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? StringBuilder( javaObject: __return ) : nil
    }

    open func insert( _ _offset: Int, _ _c: UInt16 ) -> StringBuilder! {
        return insert( offset: _offset, c: _c )
    }

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.insert(int,char)

    /// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,char[])

    private static var insert_MethodID_42: jmethodID?

    open func insert( offset: Int, str: [UInt16]? ) -> StringBuilder! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(offset) )
        __args[1] = JNIType.toJava( value: str, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "insert", methodSig: "(I[C)Ljava/lang/StringBuilder;", methodCache: &StringBuilder.insert_MethodID_42, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? StringBuilder( javaObject: __return ) : nil
    }

    open func insert( _ _offset: Int, _ _str: [UInt16]? ) -> StringBuilder! {
        return insert( offset: _offset, str: _str )
    }

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.insert(int,char[])

    /// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,char[],int,int)

    private static var insert_MethodID_43: jmethodID?

    open func insert( index: Int, str: [UInt16]?, offset: Int, len: Int ) -> StringBuilder! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        __args[0] = jvalue( i: jint(index) )
        __args[1] = JNIType.toJava( value: str, locals: &__locals )
        __args[2] = jvalue( i: jint(offset) )
        __args[3] = jvalue( i: jint(len) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "insert", methodSig: "(I[CII)Ljava/lang/StringBuilder;", methodCache: &StringBuilder.insert_MethodID_43, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? StringBuilder( javaObject: __return ) : nil
    }

    open func insert( _ _index: Int, _ _str: [UInt16]?, _ _offset: Int, _ _len: Int ) -> StringBuilder! {
        return insert( index: _index, str: _str, offset: _offset, len: _len )
    }

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.insert(int,char[],int,int)

    /// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,java.lang.Object)

    private static var insert_MethodID_44: jmethodID?

    open func insert( offset: Int, obj: java_swift.JavaObject? ) -> StringBuilder! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(offset) )
        __args[1] = JNIType.toJava( value: obj, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "insert", methodSig: "(ILjava/lang/Object;)Ljava/lang/StringBuilder;", methodCache: &StringBuilder.insert_MethodID_44, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? StringBuilder( javaObject: __return ) : nil
    }

    open func insert( _ _offset: Int, _ _obj: java_swift.JavaObject? ) -> StringBuilder! {
        return insert( offset: _offset, obj: _obj )
    }

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.insert(int,java.lang.Object)

    /// public int java.lang.StringBuilder.lastIndexOf(java.lang.String)

    private static var lastIndexOf_MethodID_45: jmethodID?

    open func lastIndexOf( str: String? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: str, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "lastIndexOf", methodSig: "(Ljava/lang/String;)I", methodCache: &StringBuilder.lastIndexOf_MethodID_45, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func lastIndexOf( _ _str: String? ) -> Int {
        return lastIndexOf( str: _str )
    }

    /// public int java.lang.StringBuilder.lastIndexOf(java.lang.String,int)

    private static var lastIndexOf_MethodID_46: jmethodID?

    open func lastIndexOf( str: String?, fromIndex: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: str, locals: &__locals )
        __args[1] = jvalue( i: jint(fromIndex) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "lastIndexOf", methodSig: "(Ljava/lang/String;I)I", methodCache: &StringBuilder.lastIndexOf_MethodID_46, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func lastIndexOf( _ _str: String?, _ _fromIndex: Int ) -> Int {
        return lastIndexOf( str: _str, fromIndex: _fromIndex )
    }

    /// public int java.lang.StringBuilder.length()

    private static var length_MethodID_47: jmethodID?

    open func length() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "length", methodSig: "()I", methodCache: &StringBuilder.length_MethodID_47, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public int java.lang.StringBuilder.offsetByCodePoints(int,int)

    private static var offsetByCodePoints_MethodID_48: jmethodID?

    open func offsetByCodePoints( index: Int, codePointOffset: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(index) )
        __args[1] = jvalue( i: jint(codePointOffset) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "offsetByCodePoints", methodSig: "(II)I", methodCache: &StringBuilder.offsetByCodePoints_MethodID_48, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func offsetByCodePoints( _ _index: Int, _ _codePointOffset: Int ) -> Int {
        return offsetByCodePoints( index: _index, codePointOffset: _codePointOffset )
    }

    /// private void java.lang.StringBuilder.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.replace(int,int,java.lang.String)

    private static var replace_MethodID_49: jmethodID?

    open func replace( start: Int, end: Int, str: String? ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = jvalue( i: jint(start) )
        __args[1] = jvalue( i: jint(end) )
        __args[2] = JNIType.toJava( value: str, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "replace", methodSig: "(IILjava/lang/String;)Ljava/lang/AbstractStringBuilder;", methodCache: &StringBuilder.replace_MethodID_49, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class java.lang.AbstractStringBuilder */ UnavailableObject( javaObject: __return ) : nil
    }

    open func replace( _ _start: Int, _ _end: Int, _ _str: String? ) -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        return replace( start: _start, end: _end, str: _str )
    }

    /// public java.lang.StringBuilder java.lang.StringBuilder.replace(int,int,java.lang.String)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuilder.reverse()

    private static var reverse_MethodID_50: jmethodID?

    open func reverse() -> /* class java.lang.AbstractStringBuilder */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "reverse", methodSig: "()Ljava/lang/AbstractStringBuilder;", methodCache: &StringBuilder.reverse_MethodID_50, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class java.lang.AbstractStringBuilder */ UnavailableObject( javaObject: __return ) : nil
    }


    /// public java.lang.StringBuilder java.lang.StringBuilder.reverse()

    /// public void java.lang.StringBuilder.setCharAt(int,char)

    private static var setCharAt_MethodID_51: jmethodID?

    open func setCharAt( index: Int, ch: UInt16 ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(index) )
        __args[1] = jvalue( c: ch )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCharAt", methodSig: "(IC)V", methodCache: &StringBuilder.setCharAt_MethodID_51, args: &__args, locals: &__locals )
    }

    open func setCharAt( _ _index: Int, _ _ch: UInt16 ) {
        setCharAt( index: _index, ch: _ch )
    }

    /// public void java.lang.StringBuilder.setLength(int)

    private static var setLength_MethodID_52: jmethodID?

    open func setLength( newLength: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(newLength) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLength", methodSig: "(I)V", methodCache: &StringBuilder.setLength_MethodID_52, args: &__args, locals: &__locals )
    }

    open func setLength( _ _newLength: Int ) {
        setLength( newLength: _newLength )
    }

    /// public java.lang.CharSequence java.lang.StringBuilder.subSequence(int,int)

    private static var subSequence_MethodID_53: jmethodID?

    open func subSequence( arg0: Int, arg1: Int ) -> CharSequence! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(arg0) )
        __args[1] = jvalue( i: jint(arg1) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "subSequence", methodSig: "(II)Ljava/lang/CharSequence;", methodCache: &StringBuilder.subSequence_MethodID_53, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? CharSequenceForward( javaObject: __return ) : nil
    }

    open func subSequence( _ _arg0: Int, _ _arg1: Int ) -> CharSequence! {
        return subSequence( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.lang.String java.lang.StringBuilder.substring(int)

    private static var substring_MethodID_54: jmethodID?

    open func substring( start: Int ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(start) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "substring", methodSig: "(I)Ljava/lang/String;", methodCache: &StringBuilder.substring_MethodID_54, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    open func substring( _ _start: Int ) -> String! {
        return substring( start: _start )
    }

    /// public java.lang.String java.lang.StringBuilder.substring(int,int)

    private static var substring_MethodID_55: jmethodID?

    open func substring( start: Int, end: Int ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(start) )
        __args[1] = jvalue( i: jint(end) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "substring", methodSig: "(II)Ljava/lang/String;", methodCache: &StringBuilder.substring_MethodID_55, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    open func substring( _ _start: Int, _ _end: Int ) -> String! {
        return substring( start: _start, end: _end )
    }

    /// public java.lang.String java.lang.StringBuilder.toString()

    private static var toString_MethodID_56: jmethodID?

    override open func toString() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "toString", methodSig: "()Ljava/lang/String;", methodCache: &StringBuilder.toString_MethodID_56, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public void java.lang.StringBuilder.trimToSize()

    private static var trimToSize_MethodID_57: jmethodID?

    open func trimToSize() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "trimToSize", methodSig: "()V", methodCache: &StringBuilder.trimToSize_MethodID_57, args: &__args, locals: &__locals )
    }


    /// private void java.lang.StringBuilder.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// In declared protocol but not defined.. ///

    /// public default java.util.stream.IntStream java.lang.CharSequence.chars()

    private static var chars_MethodID_58: jmethodID?

    open func chars() -> /* interface java.util.stream.IntStream */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "chars", methodSig: "()Ljava/util/stream/IntStream;", methodCache: &StringBuilder.chars_MethodID_58, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface java.util.stream.IntStream */ UnavailableProtocolForward( javaObject: __return ) : nil
    }


    /// public default java.util.stream.IntStream java.lang.CharSequence.codePoints()

    private static var codePoints_MethodID_59: jmethodID?

    open func codePoints() -> /* interface java.util.stream.IntStream */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "codePoints", methodSig: "()Ljava/util/stream/IntStream;", methodCache: &StringBuilder.codePoints_MethodID_59, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface java.util.stream.IntStream */ UnavailableProtocolForward( javaObject: __return ) : nil
    }


}

