
/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.util.Map ///

public protocol JavaMap: JavaProtocol {

    /// public abstract void java.util.Map.clear()

    func clear()

    /// public default java.lang.Object java.util.Map.compute(java.lang.Object,java.util.function.BiFunction)

    func compute( arg0: JavaObject?, arg1: /* interface java.util.function.BiFunction */ UnavailableProtocol? ) -> JavaObject!

    /// public default java.lang.Object java.util.Map.computeIfAbsent(java.lang.Object,java.util.function.Function)

    func computeIfAbsent( arg0: JavaObject?, arg1: /* interface java.util.function.Function */ UnavailableProtocol? ) -> JavaObject!

    /// public default java.lang.Object java.util.Map.computeIfPresent(java.lang.Object,java.util.function.BiFunction)

    func computeIfPresent( arg0: JavaObject?, arg1: /* interface java.util.function.BiFunction */ UnavailableProtocol? ) -> JavaObject!

    /// public abstract boolean java.util.Map.containsKey(java.lang.Object)

    func containsKey( arg0: JavaObject? ) -> Bool

    /// public abstract boolean java.util.Map.containsValue(java.lang.Object)

    func containsValue( arg0: JavaObject? ) -> Bool

    /// public abstract java.util.Set java.util.Map.entrySet()

    func entrySet() -> JavaSet!

    /// public abstract boolean java.util.Map.equals(java.lang.Object)

    func equals( arg0: JavaObject? ) -> Bool

    /// public default void java.util.Map.forEach(java.util.function.BiConsumer)

    func forEach( arg0: /* interface java.util.function.BiConsumer */ UnavailableProtocol? )

    /// public abstract java.lang.Object java.util.Map.get(java.lang.Object)

    func get( arg0: JavaObject? ) -> JavaObject!

    /// public default java.lang.Object java.util.Map.getOrDefault(java.lang.Object,java.lang.Object)

    func getOrDefault( arg0: JavaObject?, arg1: JavaObject? ) -> JavaObject!

    /// public abstract int java.util.Map.hashCode()

    func hashCode() -> Int

    /// public abstract boolean java.util.Map.isEmpty()

    func isEmpty() -> Bool

    /// public abstract java.util.Set java.util.Map.keySet()

    func keySet() -> JavaSet!

    /// public default java.lang.Object java.util.Map.merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)

    func merge( arg0: JavaObject?, arg1: JavaObject?, arg2: /* interface java.util.function.BiFunction */ UnavailableProtocol? ) -> JavaObject!

    /// public abstract java.lang.Object java.util.Map.put(java.lang.Object,java.lang.Object)

    func put( arg0: JavaObject?, arg1: JavaObject? ) -> JavaObject!

    /// public abstract void java.util.Map.putAll(java.util.Map)

    func putAll( arg0: JavaMap? )

    /// public default java.lang.Object java.util.Map.putIfAbsent(java.lang.Object,java.lang.Object)

    func putIfAbsent( arg0: JavaObject?, arg1: JavaObject? ) -> JavaObject!

    /// public abstract java.lang.Object java.util.Map.remove(java.lang.Object)

    func remove( arg0: JavaObject? ) -> JavaObject!

    /// public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)

    func remove( arg0: JavaObject?, arg1: JavaObject? ) -> Bool

    /// public default java.lang.Object java.util.Map.replace(java.lang.Object,java.lang.Object)

    func replace( arg0: JavaObject?, arg1: JavaObject? ) -> JavaObject!

    /// public default boolean java.util.Map.replace(java.lang.Object,java.lang.Object,java.lang.Object)

    func replace( arg0: JavaObject?, arg1: JavaObject?, arg2: JavaObject? ) -> Bool

    /// public default void java.util.Map.replaceAll(java.util.function.BiFunction)

    func replaceAll( arg0: /* interface java.util.function.BiFunction */ UnavailableProtocol? )

    /// public abstract int java.util.Map.size()

    func size() -> Int

    /// public abstract java.util.Collection java.util.Map.values()

    // Skipping method: false false true false false 

}


open class JavaMapForward: JNIObjectForward, JavaMap {

    private static var JavaMapJNIClass: jclass?

    /// public abstract void java.util.Map.clear()

    private static var clear_MethodID_25: jmethodID?

    open func clear() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clear", methodSig: "()V", methodCache: &JavaMapForward.clear_MethodID_25, args: &__args, locals: &__locals )
    }


    /// public default java.lang.Object java.util.Map.compute(java.lang.Object,java.util.function.BiFunction)

    private static var compute_MethodID_26: jmethodID?

    open func compute( arg0: JavaObject?, arg1: /* interface java.util.function.BiFunction */ UnavailableProtocol? ) -> JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "compute", methodSig: "(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;", methodCache: &JavaMapForward.compute_MethodID_26, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaObject( javaObject: __return ) : nil
    }

    open func compute( _ _arg0: JavaObject?, _ _arg1: /* interface java.util.function.BiFunction */ UnavailableProtocol? ) -> JavaObject! {
        return compute( arg0: _arg0, arg1: _arg1 )
    }

    /// public default java.lang.Object java.util.Map.computeIfAbsent(java.lang.Object,java.util.function.Function)

    private static var computeIfAbsent_MethodID_27: jmethodID?

    open func computeIfAbsent( arg0: JavaObject?, arg1: /* interface java.util.function.Function */ UnavailableProtocol? ) -> JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "computeIfAbsent", methodSig: "(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;", methodCache: &JavaMapForward.computeIfAbsent_MethodID_27, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaObject( javaObject: __return ) : nil
    }

    open func computeIfAbsent( _ _arg0: JavaObject?, _ _arg1: /* interface java.util.function.Function */ UnavailableProtocol? ) -> JavaObject! {
        return computeIfAbsent( arg0: _arg0, arg1: _arg1 )
    }

    /// public default java.lang.Object java.util.Map.computeIfPresent(java.lang.Object,java.util.function.BiFunction)

    private static var computeIfPresent_MethodID_28: jmethodID?

    open func computeIfPresent( arg0: JavaObject?, arg1: /* interface java.util.function.BiFunction */ UnavailableProtocol? ) -> JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "computeIfPresent", methodSig: "(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;", methodCache: &JavaMapForward.computeIfPresent_MethodID_28, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaObject( javaObject: __return ) : nil
    }

    open func computeIfPresent( _ _arg0: JavaObject?, _ _arg1: /* interface java.util.function.BiFunction */ UnavailableProtocol? ) -> JavaObject! {
        return computeIfPresent( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract boolean java.util.Map.containsKey(java.lang.Object)

    private static var containsKey_MethodID_29: jmethodID?

    open func containsKey( arg0: JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "containsKey", methodSig: "(Ljava/lang/Object;)Z", methodCache: &JavaMapForward.containsKey_MethodID_29, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public abstract boolean java.util.Map.containsValue(java.lang.Object)

    private static var containsValue_MethodID_30: jmethodID?

    open func containsValue( arg0: JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "containsValue", methodSig: "(Ljava/lang/Object;)Z", methodCache: &JavaMapForward.containsValue_MethodID_30, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public abstract java.util.Set java.util.Map.entrySet()

    private static var entrySet_MethodID_31: jmethodID?

    open func entrySet() -> JavaSet! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "entrySet", methodSig: "()Ljava/util/Set;", methodCache: &JavaMapForward.entrySet_MethodID_31, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaSetForward( javaObject: __return ) : nil
    }


    /// public abstract boolean java.util.Map.equals(java.lang.Object)

    private static var equals_MethodID_32: jmethodID?

    open func equals( arg0: JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &JavaMapForward.equals_MethodID_32, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public default void java.util.Map.forEach(java.util.function.BiConsumer)

    private static var forEach_MethodID_33: jmethodID?

    open func forEach( arg0: /* interface java.util.function.BiConsumer */ UnavailableProtocol? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "forEach", methodSig: "(Ljava/util/function/BiConsumer;)V", methodCache: &JavaMapForward.forEach_MethodID_33, args: &__args, locals: &__locals )
    }


    /// public abstract java.lang.Object java.util.Map.get(java.lang.Object)

    private static var get_MethodID_34: jmethodID?

    open func get( arg0: JavaObject? ) -> JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "get", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &JavaMapForward.get_MethodID_34, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaObject( javaObject: __return ) : nil
    }

    open func get( _ _arg0: JavaObject? ) -> JavaObject! {
        return get( arg0: _arg0 )
    }

    /// public default java.lang.Object java.util.Map.getOrDefault(java.lang.Object,java.lang.Object)

    private static var getOrDefault_MethodID_35: jmethodID?

    open func getOrDefault( arg0: JavaObject?, arg1: JavaObject? ) -> JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getOrDefault", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &JavaMapForward.getOrDefault_MethodID_35, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaObject( javaObject: __return ) : nil
    }

    open func getOrDefault( _ _arg0: JavaObject?, _ _arg1: JavaObject? ) -> JavaObject! {
        return getOrDefault( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract int java.util.Map.hashCode()

    private static var hashCode_MethodID_36: jmethodID?

    open func hashCode() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "hashCode", methodSig: "()I", methodCache: &JavaMapForward.hashCode_MethodID_36, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public abstract boolean java.util.Map.isEmpty()

    private static var isEmpty_MethodID_37: jmethodID?

    open func isEmpty() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isEmpty", methodSig: "()Z", methodCache: &JavaMapForward.isEmpty_MethodID_37, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public abstract java.util.Set java.util.Map.keySet()

    private static var keySet_MethodID_38: jmethodID?

    open func keySet() -> JavaSet! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "keySet", methodSig: "()Ljava/util/Set;", methodCache: &JavaMapForward.keySet_MethodID_38, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaSetForward( javaObject: __return ) : nil
    }


    /// public default java.lang.Object java.util.Map.merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)

    private static var merge_MethodID_39: jmethodID?

    open func merge( arg0: JavaObject?, arg1: JavaObject?, arg2: /* interface java.util.function.BiFunction */ UnavailableProtocol? ) -> JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "merge", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;", methodCache: &JavaMapForward.merge_MethodID_39, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaObject( javaObject: __return ) : nil
    }

    open func merge( _ _arg0: JavaObject?, _ _arg1: JavaObject?, _ _arg2: /* interface java.util.function.BiFunction */ UnavailableProtocol? ) -> JavaObject! {
        return merge( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract java.lang.Object java.util.Map.put(java.lang.Object,java.lang.Object)

    private static var put_MethodID_40: jmethodID?

    open func put( arg0: JavaObject?, arg1: JavaObject? ) -> JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "put", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &JavaMapForward.put_MethodID_40, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaObject( javaObject: __return ) : nil
    }

    open func put( _ _arg0: JavaObject?, _ _arg1: JavaObject? ) -> JavaObject! {
        return put( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.util.Map.putAll(java.util.Map)

    private static var putAll_MethodID_41: jmethodID?

    open func putAll( arg0: JavaMap? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, mapClass: "java/util/Map", locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "putAll", methodSig: "(Ljava/util/Map;)V", methodCache: &JavaMapForward.putAll_MethodID_41, args: &__args, locals: &__locals )
    }


    /// public default java.lang.Object java.util.Map.putIfAbsent(java.lang.Object,java.lang.Object)

    private static var putIfAbsent_MethodID_42: jmethodID?

    open func putIfAbsent( arg0: JavaObject?, arg1: JavaObject? ) -> JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "putIfAbsent", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &JavaMapForward.putIfAbsent_MethodID_42, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaObject( javaObject: __return ) : nil
    }

    open func putIfAbsent( _ _arg0: JavaObject?, _ _arg1: JavaObject? ) -> JavaObject! {
        return putIfAbsent( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.lang.Object java.util.Map.remove(java.lang.Object)

    private static var remove_MethodID_43: jmethodID?

    open func remove( arg0: JavaObject? ) -> JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "remove", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &JavaMapForward.remove_MethodID_43, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaObject( javaObject: __return ) : nil
    }

    open func remove( _ _arg0: JavaObject? ) -> JavaObject! {
        return remove( arg0: _arg0 )
    }

    /// public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)

    private static var remove_MethodID_44: jmethodID?

    open func remove( arg0: JavaObject?, arg1: JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "remove", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Z", methodCache: &JavaMapForward.remove_MethodID_44, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public default java.lang.Object java.util.Map.replace(java.lang.Object,java.lang.Object)

    private static var replace_MethodID_45: jmethodID?

    open func replace( arg0: JavaObject?, arg1: JavaObject? ) -> JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "replace", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &JavaMapForward.replace_MethodID_45, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaObject( javaObject: __return ) : nil
    }

    open func replace( _ _arg0: JavaObject?, _ _arg1: JavaObject? ) -> JavaObject! {
        return replace( arg0: _arg0, arg1: _arg1 )
    }

    /// public default boolean java.util.Map.replace(java.lang.Object,java.lang.Object,java.lang.Object)

    private static var replace_MethodID_46: jmethodID?

    open func replace( arg0: JavaObject?, arg1: JavaObject?, arg2: JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "replace", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z", methodCache: &JavaMapForward.replace_MethodID_46, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public default void java.util.Map.replaceAll(java.util.function.BiFunction)

    private static var replaceAll_MethodID_47: jmethodID?

    open func replaceAll( arg0: /* interface java.util.function.BiFunction */ UnavailableProtocol? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "replaceAll", methodSig: "(Ljava/util/function/BiFunction;)V", methodCache: &JavaMapForward.replaceAll_MethodID_47, args: &__args, locals: &__locals )
    }


    /// public abstract int java.util.Map.size()

    private static var size_MethodID_48: jmethodID?

    open func size() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "size", methodSig: "()I", methodCache: &JavaMapForward.size_MethodID_48, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public abstract java.util.Collection java.util.Map.values()

    // Skipping method: false false true false false 

}

