# Make a local copy of the substitutions.
config.substitutions = list(config.substitutions)

def get_target_os():
    import re
    (run_cpu, run_vendor, run_os, run_version) = re.match('([^-]+)-([^-]+)-([^0-9]+)(.*)', config.variant_triple).groups()
    return run_os

clang_compile_opt = '-I' + config.swiftlib_dir + ' '
clang_opt = clang_compile_opt

if get_target_os() in ['windows-msvc']:
    config.substitutions.insert(0, ('%target-abi', 'WIN'))
    # Clang should build object files with link settings equivalent to -libc MD
    # when building for the MSVC target.
    clang_opt = clang_compile_opt + '-D_MT -D_DLL -Xclang --dependent-lib=msvcrt -Xclang --dependent-lib=oldnames '
else:
    # FIXME(compnerd) do all the targets we currently support use SysV ABI?
    config.substitutions.insert(0, ('%target-abi', 'SYSV'))

# Enable C++ interop when compiling Swift sources.
config.substitutions.insert(0, ('%target-interop-build-swift',
                                '%target-build-swift -Xfrontend -enable-experimental-cxx-interop '))

# Build C files disallowing implicit functions and with matching link settings, if required by the target.
config.substitutions.insert(0, ('%target-interop-build-clang',  '%target-clang -x c -Werror=implicit-function-declaration ' + clang_opt))

# Build C++ files with matching link settings, if required by the target.
config.substitutions.insert(0, ('%target-interop-build-clangxx', '%target-clangxx --std=gnu++14 ' + clang_opt))

# Test parsing of the generated C++ header in different C++ language modes.
config.substitutions.insert(0, ('%check-interop-cxx-header-in-clang\(([^)]+)\)',
                             SubstituteCaptures(r'%check-cxx-header-in-clang -std=c++14 -Wno-padded -Wno-c11-extensions -D_LIBCPP_CSTDLIB ' + clang_compile_opt + r'\1 && '
                                                r'%check-cxx-header-in-clang -std=c++17 -Wno-padded -Wno-c11-extensions -D_LIBCPP_CSTDLIB ' + clang_compile_opt + r'\1 && '
                                                r'%check-cxx-header-in-clang -std=c++20 -Wno-padded -Wno-c11-extensions -D_LIBCPP_CSTDLIB ' + clang_compile_opt + r'\1')))

# Test parsing of the generated C header in different C language modes.
config.substitutions.insert(0, ('%check-interop-c-header-in-clang\(([^)]+)\)',
                             SubstituteCaptures(r'%check-c-header-in-clang -std=c99 -Wno-padded -Wno-c11-extensions \1 && '
                                                r'%check-c-header-in-clang -std=c11 -Wno-padded \1')))
