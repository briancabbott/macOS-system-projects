// RUN: %target-sil-opt -enable-sil-verify-all %s -raw-sil-inst-lowering -enable-experimental-type-wrappers | %FileCheck %s

sil_stage raw

import Builtin
import Swift
import SwiftShims

@typeWrapper class MyWrapper<W, S> {
  @_hasStorage var underlying: S { get set }
  init(for: W.Type, storage s: S)
  subscript<V>(propertyKeyPath _: KeyPath<W, V>, storageKeyPath path: KeyPath<S, V>) -> V { get }
  subscript<V>(propertyKeyPath _: KeyPath<W, V>, storageKeyPath path: WritableKeyPath<S, V>) -> V { get set }
  deinit
}

@MyWrapper struct Test1<T> {
  var a: Int
  var b: T
  init(a: Int, b: T)
  init(a: Int, b: T, otherB: T)
}

// Test1.a.setter
sil hidden [ossa] @$s4main5Test1V1aSivs : $@convention(method) <T> (Int, @inout Test1<T>) -> () {
bb0(%0 : $Int, %1 : $*Test1<T>):
  %2 = tuple ()
  return %2 : $()
}

// Test1.b.setter
sil hidden [ossa] @$s4main5Test1V1bxvs : $@convention(method) <T> (@in T, @inout Test1<T>) -> () {
bb0(%0 : $*T, %1 : $*Test1<T>):
  destroy_addr %0 : $*T
  %2 = tuple ()
  return %2 : $()
}

// Test1.init(a:b:)
//
// CHECK-LABEL: sil hidden [ossa] @$s4main5Test1V1a1bACyxGSi_xtcfC
// CHECK: [[LOCAL_STORAGE:%.*]] = project_box %7 : $<τ_0_0> { var (a: Int, b: τ_0_0) } <T>, 0
// CHECK: [[A_REF:%.*]] = tuple_element_addr [[LOCAL_STORAGE]] : $*(a: Int, b: T), 0
// CHECK-NOT: {{.*}} = assign_by_wrapper {{.*}}
// CHECK: store [[ARG_0:%.*]] to [trivial] [[A_REF]] : $*Int
//
// CHECK: [[T:%.*]] = alloc_stack $T
// CHECK: copy_addr [[ARG_1:%.*]] to [init] [[T]] : $*T
// CHECK: [[B_REF:%.*]] = tuple_element_addr [[LOCAL_STORAGE]] : $*(a: Int, b: T), 1
// CHECK-NOT: {{.*}} = assign_by_wrapper {{.*}}
// CHECK: copy_addr [take] [[T]] to [init] [[B_REF]] : $*T
sil hidden [ossa] @$s4main5Test1V1a1bACyxGSi_xtcfC : $@convention(method) <T> (Int, @in T, @thin Test1<T>.Type) -> @owned Test1<T> {
bb0(%0 : $Int, %1 : $*T, %2 : $@thin Test1<T>.Type):
  %3 = alloc_box $<τ_0_0> { var Test1<τ_0_0> } <T>, var, name "self"
  %4 = mark_uninitialized [rootself] %3 : $<τ_0_0> { var Test1<τ_0_0> } <T>
  %5 = begin_borrow [lexical] %4 : $<τ_0_0> { var Test1<τ_0_0> } <T>
  %6 = project_box %5 : $<τ_0_0> { var Test1<τ_0_0> } <T>, 0
  %9 = alloc_box $<τ_0_0> { var (a: Int, b: τ_0_0) } <T>, var, name "_storage"
  %10 = mark_uninitialized [var] %9 : $<τ_0_0> { var (a: Int, b: τ_0_0) } <T>
  %11 = begin_borrow [lexical] %10 : $<τ_0_0> { var (a: Int, b: τ_0_0) } <T>
  %12 = project_box %11 : $<τ_0_0> { var (a: Int, b: τ_0_0) } <T>, 0
  %13 = begin_access [modify] [unknown] %6 : $*Test1<T>
  %14 = tuple_element_addr %12 : $*(a: Int, b: T), 0
  // function_ref Test1.a.setter
  %15 = function_ref @$s4main5Test1V1aSivs : $@convention(method) <τ_0_0> (Int, @inout Test1<τ_0_0>) -> ()
  %16 = partial_apply [callee_guaranteed] %15<T>(%13) : $@convention(method) <τ_0_0> (Int, @inout Test1<τ_0_0>) -> ()
  assign_by_wrapper origin type_wrapper, %0 : $Int to [init] %14 : $*Int, set %16 : $@callee_guaranteed (Int) -> ()
  end_access %13 : $*Test1<T>
  destroy_value %16 : $@callee_guaranteed (Int) -> ()
  %20 = alloc_stack $T
  copy_addr %1 to [init] %20 : $*T
  %22 = begin_access [modify] [unknown] %6 : $*Test1<T>
  %23 = tuple_element_addr %12 : $*(a: Int, b: T), 1
  // function_ref Test1.b.setter
  %24 = function_ref @$s4main5Test1V1bxvs : $@convention(method) <τ_0_0> (@in τ_0_0, @inout Test1<τ_0_0>) -> ()
  %25 = partial_apply [callee_guaranteed] %24<T>(%22) : $@convention(method) <τ_0_0> (@in τ_0_0, @inout Test1<τ_0_0>) -> ()
  assign_by_wrapper origin type_wrapper, %20 : $*T to [init] %23 : $*T, set %25 : $@callee_guaranteed (@in T) -> ()
  end_access %22 : $*Test1<T>
  destroy_value %25 : $@callee_guaranteed (@in T) -> ()
  dealloc_stack %20 : $*T
  end_borrow %11 : $<τ_0_0> { var (a: Int, b: τ_0_0) } <T>
  destroy_value %10 : $<τ_0_0> { var (a: Int, b: τ_0_0) } <T>
  %32 = load [copy] %6 : $*Test1<T>
  destroy_addr %1 : $*T
  end_borrow %5 : $<τ_0_0> { var Test1<τ_0_0> } <T>
  destroy_value %4 : $<τ_0_0> { var Test1<τ_0_0> } <T>
  return %32 : $Test1<T>
}

// Test1.init(a:b:otherB:)
//
// CHECK-LABEL: sil hidden [ossa] @$s4main5Test1V1a1b6otherBACyxGSi_xxtcfC
// CHECK: [[LOCAL_STORAGE:%.*]] = project_box %8 : $<τ_0_0> { var (a: Int, b: τ_0_0) } <T>, 0
//
// CHECK: [[A_REF:%.*]] = tuple_element_addr [[LOCAL_STORAGE]] : $*(a: Int, b: T), 0
// CHECK-NOT: {{.*}} = assign_by_wrapper {{.*}}
// CHECK: store [[ARG_0:%.*]] to [trivial] [[A_REF]] : $*Int
//
// CHECK: [[T:%.*]] = alloc_stack $T
// CHECK-NEXT: copy_addr [[ARG_1:%.*]] to [init] [[T]] : $*T
// CHECK: [[B_REF:%.*]] = tuple_element_addr [[LOCAL_STORAGE]] : $*(a: Int, b: T), 1
// CHECK-NOT: {{.*}} = assign_by_wrapper {{.*}}
// CHECK: copy_addr [take] [[T]] to [init] [[B_REF]] : $*T
//
// CHECK: [[OTHER_T:%.*]] = alloc_stack $T
// CHECK-NEXT: copy_addr [[ARG_2:%.*]] to [init] %19 : $*T
// CHECK: [[B_REF:%.*]] = tuple_element_addr [[LOCAL_STORAGE]] : $*(a: Int, b: T), 1
// CHECK-NOT: {{.*}} = assign_by_wrapper {{.*}}
// CHECK: copy_addr [take] [[OTHER_T]] to [[B_REF]] : $*T
//
// CHECK: [[T:%.*]] = alloc_stack $T
// copy_addr [[ARG_1]] to [init] [[T]] : $*T
// CHECK: [[B_SETTER:%.*]] = function_ref @$s4main5Test1V1bxvs : $@convention(method) <τ_0_0> (@in τ_0_0, @inout Test1<τ_0_0>) -> ()
// CHECK-NEXT: [[PARTIALY_APPLIED_SETTER:%.*]] = partial_apply [callee_guaranteed] [[B_SETTER]]<T>({{.*}}) : $@convention(method) <τ_0_0> (@in τ_0_0, @inout Test1<τ_0_0>) -> ()
// CHECK-NOT: {{.*}} = assign_by_wrapper {{.*}}
// CHECK-NEXT: apply [[PARTIALY_APPLIED_SETTER]]([[T]]) : $@callee_guaranteed (@in T) -> ()
sil hidden [ossa] @$s4main5Test1V1a1b6otherBACyxGSi_xxtcfC : $@convention(method) <T> (Int, @in T, @in T, @thin Test1<T>.Type) -> @owned Test1<T> {
bb0(%0 : $Int, %1 : $*T, %2 : $*T, %3 : $@thin Test1<T>.Type):
  %4 = alloc_box $<τ_0_0> { var Test1<τ_0_0> } <T>, var, name "self" 
  %5 = mark_uninitialized [rootself] %4 : $<τ_0_0> { var Test1<τ_0_0> } <T>
  %6 = begin_borrow [lexical] %5 : $<τ_0_0> { var Test1<τ_0_0> } <T>
  %7 = project_box %6 : $<τ_0_0> { var Test1<τ_0_0> } <T>, 0
  %11 = alloc_box $<τ_0_0> { var (a: Int, b: τ_0_0) } <T>, var, name "_storage"
  %12 = mark_uninitialized [var] %11 : $<τ_0_0> { var (a: Int, b: τ_0_0) } <T>
  %13 = begin_borrow [lexical] %12 : $<τ_0_0> { var (a: Int, b: τ_0_0) } <T>
  %14 = project_box %13 : $<τ_0_0> { var (a: Int, b: τ_0_0) } <T>, 0
  %15 = begin_access [modify] [unknown] %7 : $*Test1<T>
  %16 = tuple_element_addr %14 : $*(a: Int, b: T), 0
  // function_ref Test1.a.setter
  %17 = function_ref @$s4main5Test1V1aSivs : $@convention(method) <τ_0_0> (Int, @inout Test1<τ_0_0>) -> ()
  %18 = partial_apply [callee_guaranteed] %17<T>(%15) : $@convention(method) <τ_0_0> (Int, @inout Test1<τ_0_0>) -> ()
  assign_by_wrapper origin type_wrapper, %0 : $Int to [init] %16 : $*Int, set %18 : $@callee_guaranteed (Int) -> ()
  end_access %15 : $*Test1<T>
  destroy_value %18 : $@callee_guaranteed (Int) -> ()
  %22 = alloc_stack $T
  copy_addr %1 to [init] %22 : $*T
  %24 = begin_access [modify] [unknown] %7 : $*Test1<T>
  %25 = tuple_element_addr %14 : $*(a: Int, b: T), 1
  // function_ref Test1.b.setter
  %26 = function_ref @$s4main5Test1V1bxvs : $@convention(method) <τ_0_0> (@in τ_0_0, @inout Test1<τ_0_0>) -> ()
  %27 = partial_apply [callee_guaranteed] %26<T>(%24) : $@convention(method) <τ_0_0> (@in τ_0_0, @inout Test1<τ_0_0>) -> ()
  assign_by_wrapper origin type_wrapper, %22 : $*T to [init] %25 : $*T, set %27 : $@callee_guaranteed (@in T) -> ()
  end_access %24 : $*Test1<T>
  destroy_value %27 : $@callee_guaranteed (@in T) -> ()
  dealloc_stack %22 : $*T
  %32 = alloc_stack $T
  copy_addr %2 to [init] %32 : $*T
  %34 = begin_access [modify] [unknown] %7 : $*Test1<T>
  %35 = tuple_element_addr %14 : $*(a: Int, b: T), 1
  // function_ref Test1.b.setter
  %36 = function_ref @$s4main5Test1V1bxvs : $@convention(method) <τ_0_0> (@in τ_0_0, @inout Test1<τ_0_0>) -> ()
  %37 = partial_apply [callee_guaranteed] %36<T>(%34) : $@convention(method) <τ_0_0> (@in τ_0_0, @inout Test1<τ_0_0>) -> ()
  assign_by_wrapper origin type_wrapper, %32 : $*T to [assign] %35 : $*T, set %37 : $@callee_guaranteed (@in T) -> ()
  end_access %34 : $*Test1<T>
  destroy_value %37 : $@callee_guaranteed (@in T) -> ()
  dealloc_stack %32 : $*T
  %42 = alloc_stack $T
  copy_addr %1 to [init] %42 : $*T
  %44 = begin_access [modify] [unknown] %7 : $*Test1<T>
  %45 = tuple_element_addr %14 : $*(a: Int, b: T), 1
  // function_ref Test1.b.setter
  %46 = function_ref @$s4main5Test1V1bxvs : $@convention(method) <τ_0_0> (@in τ_0_0, @inout Test1<τ_0_0>) -> ()
  %47 = partial_apply [callee_guaranteed] %46<T>(%44) : $@convention(method) <τ_0_0> (@in τ_0_0, @inout Test1<τ_0_0>) -> ()
  assign_by_wrapper origin type_wrapper, %42 : $*T to [assign_wrapped_value] %45 : $*T, set %47 : $@callee_guaranteed (@in T) -> ()
  end_access %44 : $*Test1<T>
  destroy_value %47 : $@callee_guaranteed (@in T) -> ()
  dealloc_stack %42 : $*T
  end_borrow %13 : $<τ_0_0> { var (a: Int, b: τ_0_0) } <T>
  destroy_value %12 : $<τ_0_0> { var (a: Int, b: τ_0_0) } <T>
  %54 = load [copy] %7 : $*Test1<T>
  destroy_addr %2 : $*T
  destroy_addr %1 : $*T
  end_borrow %6 : $<τ_0_0> { var Test1<τ_0_0> } <T>
  destroy_value %5 : $<τ_0_0> { var Test1<τ_0_0> } <T>
  return %54 : $Test1<T>
}