// RUN: %target-sil-opt -enable-sil-verify-all -closure-specialize %s | %FileCheck %s

import Builtin

class C {}

sil [ossa] @getC : $@convention(thin) () -> @owned C

// Verify that the argument to the specialized take_closure is still @_eagerMove.

// CHECK-LABEL: sil {{.*}}@$s12take_closure0B04main1CCTf1nc_n : {{.*}}{
// CHECK:           {{bb[0-9]+}}({{%[^,]+}} : @_eagerMove @owned $C, {{%[^,]+}} :
// CHECK-LABEL: } // end sil function '$s12take_closure0B04main1CCTf1nc_n'

sil [ossa] [noinline] @take_closure : $@convention(thin) (@owned C, @noescape @callee_guaranteed (@owned C, @owned C) -> ()) -> () {
bb0(%c : @_eagerMove @owned $C, %0 : $@noescape @callee_guaranteed (@owned C, @owned C) -> ()):
  %getC = function_ref @getC : $@convention(thin) () -> @owned C
  %c1 = apply %getC() : $@convention(thin) () -> @owned C
  %c2 = apply %getC() : $@convention(thin) () -> @owned C
  %3 = apply %0(%c1, %c2) : $@noescape @callee_guaranteed (@owned C, @owned C) -> ()
  destroy_value %c : $C
  %retval = tuple()
  return %retval : $()
}

sil shared [ossa] @closure : $@convention(thin) (@owned C, @owned C, @owned C) -> () {
bb0(%0 : @owned $C, %1 : @owned $C, %2 : @owned $C):
  destroy_value %0 : $C
  destroy_value %1 : $C
  destroy_value %2 : $C
  %15 = tuple ()
  return %15 : $()
}

sil @caller : $@convention(thin) (@owned C) -> () {
bb0(%0 : $C):
  %3 = function_ref @closure : $@convention(thin) (@owned C, @owned C, @owned C) -> ()
  %4 = partial_apply [callee_guaranteed] [on_stack] %3(%0) : $@convention(thin) (@owned C, @owned C, @owned C) -> ()
  %take_closure = function_ref @take_closure : $@convention(thin) (@owned C, @noescape @callee_guaranteed (@owned C, @owned C) -> ()) -> ()
  strong_retain %0 : $C
  %5 = apply %take_closure(%0, %4) : $@convention(thin) (@owned C, @noescape @callee_guaranteed (@owned C, @owned C) -> ()) -> ()
  strong_release %0 : $C
  dealloc_stack %4 : $@noescape @callee_guaranteed (@owned C, @owned C) -> ()
  %retval = tuple()
  return %retval : $()
}
