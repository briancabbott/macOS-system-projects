/**
 * This source file is part of the Swift.org open source project
 *
 * Copyright (c) 2021 Apple Inc. and the Swift project authors
 * Licensed under Apache License v2.0 with Runtime Library Exception
 *
 * See https://swift.org/LICENSE.txt for license information
 * See https://swift.org/CONTRIBUTORS.txt for Swift project authors
*/

//
// Return the font group for a specific font size.
//
// @param {Number} $size
//   a unitless size, like 18
//
// @returns {String}
//
@function -get-font-family-for-size($size) {
  @return $default-fonts;
}

//
// Output styles for the specified Font Attributes
//
// @param {String} $key - The attributes key, usually in the form of `size_line-height` (e.g., `20_22`)
//
@mixin -generate-attributes-for($key) {
  @if map-has-key($font-attributes, $key) {
    // get the attributes for the provided key
    $attributes: map-get($font-attributes, $key);
    // generate the styles map
    $attributes-styles: -get-styles-from-attributes($attributes);
    // converts the styles map into actual styles
    @include css-map-to-styles($attributes-styles);
  } @else {
    @warn 'The attribute `#{$key}` is not defined.';
  }
}

//
// Transform the `line-height` unitless value
//
// @param {Number} $size
//   The font size
//
// @param {Number} $line-height
//   The line-height
//
// @returns {Number}
//
@function -transform-line-height($size, $line-height) {
  @return $line-height / $size;
}

// Create a CSS map for a given Font Attributes
//
// @param {Map} $attributes
//   The attributes typography map
//
// @returns {Map}
//   A map of typography CSS properties and values
//
@function -get-styles-from-attributes($attributes) {
  // collect all the styles here
  $style: ();

  // get the font-size
  $size: map-get($attributes, size);

  // store the `font-size` value
  $style: map-merge($style, (font-size: rem(change-unit($size, px))));

  // get the line-height
  $line-height: map-get($attributes, line-height);
  // transform the line height to a unitless value and store it
  $style: map-merge($style, (line-height: -transform-line-height($size, $line-height)));

  // get the font-weight
  $weight: map-get($attributes, weight);

  // fallback to normal font-weight if not provided
  @if not $weight {
    $weight: normal;
  }
  $style: map-merge($style, (font-weight: $weight));

  // get the letter-spacing
  $letter-spacing: map-get($attributes, letter-spacing);

  @if $letter-spacing {
    $style: map-merge($style, (letter-spacing: $letter-spacing));
  }

  // generate font family
  $font-family: map-get($attributes, font-family);
  $value: if($font-family,
    $font-family,
    var(--typography-html-font, -get-font-family-for-size($size))
  );

  $style: map-merge($style, (font-family: $value));

  @return $style;
}
