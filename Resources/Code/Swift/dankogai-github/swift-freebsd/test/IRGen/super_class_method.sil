// RUN: %target-swift-frontend -emit-ir %s | FileCheck %s

sil_stage canonical

import Builtin
import Swift
import SwiftShims

public class Parent {
  public class func foo() {}
}

public class Child : Parent {}

public class Grandchild : Child {
  override public class func foo() {
    super.foo()
  }
}

sil @Parent_foo : $@convention(thin) (@thick Parent.Type) -> () {
bb0(%0 : $@thick Parent.Type):
  debug_value %0 : $@thick Parent.Type
  %2 = tuple ()
  return %2 : $()
}

sil @Grandchild_foo : $@convention(thin) (@thick Grandchild.Type) -> () {
bb0(%0 : $@thick Grandchild.Type):
  debug_value %0 : $@thick Grandchild.Type
  %2 = upcast %0 : $@thick Grandchild.Type to $@thick Child.Type
  %3 = upcast %2 : $@thick Child.Type to $@thick Parent.Type
  %4 = super_method %0 : $@thick Grandchild.Type, #Parent.foo!1 : (Parent.Type) -> () -> (), $@convention(thin) (@thick Parent.Type) -> ()
  %5 = apply %4(%3) : $@convention(thin) (@thick Parent.Type) -> ()
  %6 = tuple ()
  return %6 : $()
}

sil_vtable Parent {
  #Parent.foo!1: Parent_foo
}

sil_vtable Child {
  #Parent.foo!1: Parent_foo
}

sil_vtable Grandchild {
  #Parent.foo!1: Grandchild_foo
}

// CHECK-LABEL: define void @Grandchild_foo(%swift.type*) #0
// CHECK: [[CHILD_METADATA_PTR:%[0-9]+]] = call %swift.type* @_TMaC18super_class_method5Child()
// CHECK: [[CASTED_CHILD_METADATA_PTR:%[0-9]+]] = bitcast %swift.type* [[CHILD_METADATA_PTR]] to void (%swift.type*)**
// CHECK: [[FOO_VTABLE_SLOT:%[0-9]+]] = getelementptr inbounds void (%swift.type*)*, void (%swift.type*)** [[CASTED_CHILD_METADATA_PTR]]
// CHECK: [[FOO_FNPTR:%[0-9]+]] = load void (%swift.type*)*, void (%swift.type*)** [[FOO_VTABLE_SLOT]]
// CHECK: call void

