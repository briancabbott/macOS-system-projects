// RUN: %target-swift-frontend -emit-ir %s | FileCheck %s

sil_stage canonical

import Builtin
import Swift
import SwiftShims

public class Parent {
  public func foo() {}
}

public class Child : Parent {}

public class Grandchild : Child {
  override public func foo() { super.foo() }
}

sil @Parent_foo : $@convention(method) (@guaranteed Parent) -> () {
bb0(%0 : $Parent):
  debug_value %0 : $Parent
  %2 = tuple ()
  return %2 : $()
}

sil @Grandchild_foo : $@convention(method) (@guaranteed Grandchild) -> () {
bb0(%0 : $Grandchild):
  debug_value %0 : $Grandchild
  strong_retain %0 : $Grandchild
  %3 = upcast %0 : $Grandchild to $Child
  %4 = upcast %3 : $Child to $Parent
  %5 = super_method %0 : $Grandchild, #Parent.foo!1 : (Parent) -> () -> (), $@convention(method) (@guaranteed Parent) -> ()
  %6 = apply %5(%4) : $@convention(method) (@guaranteed Parent) -> ()
  strong_release %4 : $Parent
  %8 = tuple ()
  return %8 : $()
}

sil_vtable Parent {
  #Parent.foo!1: Parent_foo
}

sil_vtable Child {
  #Parent.foo!1: Parent_foo
}

sil_vtable Grandchild {
  #Parent.foo!1: Grandchild_foo
}

// CHECK-LABEL: define void @Grandchild_foo(%C21super_instance_method10Grandchild*)
// CHECK: [[CHILD_METADATA_PTR:%[0-9]+]] = call %swift.type* @_TMaC21super_instance_method5Child()
// CHECK: [[CASTED_CHILD_METADATA_PTR:%[0-9]+]] = bitcast %swift.type* [[CHILD_METADATA_PTR]] to void (%C21super_instance_method6Parent*)**
// CHECK: [[FOO_VTABLE_SLOT:%[0-9]+]] = getelementptr inbounds void (%C21super_instance_method6Parent*)*, void (%C21super_instance_method6Parent*)** [[CASTED_CHILD_METADATA_PTR]]
// CHECK: [[FOO_FN_PTR:%[0-9]+]] = load void (%C21super_instance_method6Parent*)*, void (%C21super_instance_method6Parent*)** [[FOO_VTABLE_SLOT]]
// CHECK: call void

