// RUN: %target-sil-opt -enable-sil-verify-all %s -call-graph-printer -o /dev/null | FileCheck --check-prefix=CHECK --check-prefix=CHECK-NOWMO %s
// RUN: %target-sil-opt -enable-sil-verify-all %s -wmo -call-graph-printer -o /dev/null | FileCheck --check-prefix=CHECK --check-prefix=CHECK-WMO %s

sil_stage canonical

// CHECK: *** Call Graph ***
// CHECK: Function #1: private_bottom
// CHECK: Demangled: private_bottom
// CHECK: Trivially dead: no
// CHECK: All callers known: yes
// CHECK: Callers:

// CHECK: Name: private_middle
// CHECK: Demangled: private_middle
sil private @private_bottom : $@convention(thin) () -> () {
bb0:
  %0 = tuple ()
  return %0 : $()
}


// CHECK: Function #2: private_middle
// CHECK: Demangled: private_middle
// CHECK: Trivially dead: no
// CHECK: All callers known: yes
// CHECK: Call sites:

// CHECK: Call site #0:   %1 = apply %0() : $@convention(thin) () -> ()
// CHECK: Unknown callees: no
// CHECK: Known callees:
// CHECK: Name: private_bottom
// CHECK: Demangled: private_bottom

// CHECK: Callers:

// CHECK: Name: private_top
// CHECK: Demangled: private_top
sil private @private_middle : $@convention(thin) () -> () {
bb0:
  %0 = function_ref @private_bottom : $@convention(thin) () -> ()
  %1 = apply %0() : $@convention(thin) () -> ()
  %2 = tuple ()
  return %2 : $()
}


// CHECK: Function #3: private_top
// CHECK: Demangled: private_top
// CHECK: Trivially dead: yes
// CHECK: All callers known: yes
// CHECK: Call sites:

// CHECK: Call site #1:   %1 = apply %0() : $@convention(thin) () -> ()
// CHECK: Unknown callees: no
// CHECK: Known callees:
// CHECK: Name: private_middle
// CHECK: Demangled: private_middle
sil private @private_top : $@convention(thin) () -> () {
bb0:
  %0 = function_ref @private_middle : $@convention(thin) () -> ()
  %1 = apply %0() : $@convention(thin) () -> ()
  %2 = tuple ()
  return %2 : $()
}


// CHECK: Function #4: internal_bottom
// CHECK: Demangled: internal_bottom
// CHECK: Trivially dead: no
// CHECK-NOWMO: All callers known: no
// CHECK-WMO: All callers known: yes
// CHECK-NOWMO: Known Callers:
// CHECK-WMO: Callers:

// CHECK: Name: internal_middle
// CHECK: Demangled: internal_middle
sil hidden @internal_bottom : $@convention(thin) () -> () {
bb0:
  %0 = tuple ()
  return %0 : $()
}


// CHECK: Function #5: internal_middle
// CHECK: Demangled: internal_middle
// CHECK: Trivially dead: no
// CHECK-NOWMO: All callers known: no
// CHECK-WMO: All callers known: yes
// CHECK: Call sites:

// CHECK: Call site #2:   %1 = apply %0() : $@convention(thin) () -> ()
// CHECK: Unknown callees: no
// CHECK: Known callees:
// CHECK: Name: internal_bottom
// CHECK: Demangled: internal_bottom

// CHECK-NOWMO: Known Callers:
// CHECK-WMO: Callers:

// CHECK: Name: internal_top
// CHECK: Demangled: internal_top
sil hidden @internal_middle : $@convention(thin) () -> () {
bb0:
  %0 = function_ref @internal_bottom : $@convention(thin) () -> ()
  %1 = apply %0() : $@convention(thin) () -> ()
  %2 = tuple ()
  return %2 : $()
}


// CHECK: Function #6: internal_top
// CHECK: Demangled: internal_top
// CHECK-NOWMO: Trivially dead: no
// CHECK-NOWMO: All callers known: no
// CHECK-WMO: Trivially dead: yes
// CHECK-WMO: All callers known: yes
// CHECK: Call sites:

// CHECK: Call site #3:   %1 = apply %0() : $@convention(thin) () -> ()
// CHECK: Unknown callees: no
// CHECK: Known callees:
// CHECK: Name: internal_middle
// CHECK: Demangled: internal_middle
sil hidden @internal_top : $@convention(thin) () -> () {
bb0:
  %0 = function_ref @internal_middle : $@convention(thin) () -> ()
  %1 = apply %0() : $@convention(thin) () -> ()
  %2 = tuple ()
  return %2 : $()
}


// CHECK: Function #7: public_bottom
// CHECK: Demangled: public_bottom
// CHECK: Trivially dead: no
// CHECK: All callers known: no
// CHECK: Known Callers:

// CHECK: Name: public_middle
// CHECK: Demangled: public_middle
sil @public_bottom : $@convention(thin) () -> () {
bb0:
  %0 = tuple ()
  return %0 : $()
}


// CHECK: Function #8: public_middle
// CHECK: Demangled: public_middle
// CHECK: Trivially dead: no
// CHECK: All callers known: no
// CHECK: Call sites:

// CHECK: Call site #4:   %1 = apply %0() : $@convention(thin) () -> ()
// CHECK: Unknown callees: no
// CHECK: Known callees:
// CHECK: Name: public_bottom
// CHECK: Demangled: public_bottom

// CHECK: Known Callers:

// CHECK: Name: public_top
// CHECK: Demangled: public_top
sil @public_middle : $@convention(thin) () -> () {
bb0:
  %0 = function_ref @public_bottom : $@convention(thin) () -> ()
  %1 = apply %0() : $@convention(thin) () -> ()
  %2 = tuple ()
  return %2 : $()
}


// CHECK: Function #9: public_top
// CHECK: Demangled: public_top
// CHECK: Trivially dead: no
// CHECK: All callers known: no
// CHECK: Call sites:

// CHECK: Call site #5:   %1 = apply %0() : $@convention(thin) () -> ()
// CHECK: Unknown callees: no
// CHECK: Known callees:
// CHECK: Name: public_middle
// CHECK: Demangled: public_middle
sil @public_top : $@convention(thin) () -> () {
bb0:
  %0 = function_ref @public_middle : $@convention(thin) () -> ()
  %1 = apply %0() : $@convention(thin) () -> ()
  %2 = tuple ()
  return %2 : $()
}


private class private_base {
  func foo()
}

private class private_derived : private_base {
  override func foo()
}

@inline(never) private func call_private(b: private_base)

class internal_base {
  func foo()
  private func bar()
}

class internal_derived : internal_base {
  override func foo()
  override func bar()
}

@inline(never) func call_internal(b: internal_base)

public class public_base {
  func foo()
  public func bar()
  private func baz()
}

public class public_derived : public_base {
  override func foo()
  public override func bar()
  public override func baz()
}


// CHECK: Function #10: private_base_foo
// CHECK: Demangled: private_base_foo
// CHECK: Trivially dead: no
// CHECK: All callers known: no
// CHECK: Known Callers:

// CHECK: Name: call_private
// CHECK: Demangled: call_private

sil private @private_base_foo : $@convention(method) (@guaranteed private_base) -> () {
bb0(%0 : $private_base):
  debug_value %0 : $private_base
  %2 = tuple ()
  return %2 : $()
}


// CHECK: Function #11: private_derived_foo
// CHECK: Demangled: private_derived_foo
// CHECK: Trivially dead: no
// CHECK: All callers known: no
// CHECK: Known Callers:

// CHECK: Name: call_private
// CHECK: Demangled: call_private


sil private @private_derived_foo : $@convention(method) (@guaranteed private_derived) -> () {
bb0(%0 : $private_derived):
  debug_value %0 : $private_derived
  %2 = tuple ()
  return %2 : $()
}


// CHECK: Function #12: call_private
// CHECK: Demangled: call_private
// CHECK: Trivially dead: yes
// CHECK: All callers known: yes
// CHECK: Call sites:

// CHECK: Call site #6:   %3 = apply %2(%0) : $@convention(method) (@guaranteed private_base) -> ()
// CHECK: Unknown callees: no
// CHECK: Known callees:
// CHECK: Name: private_base_foo
// CHECK: Demangled: private_base_foo

// CHECK: Name: private_derived_foo
// CHECK: Demangled: private_derived_foo


sil private [noinline] @call_private : $@convention(thin) (@owned private_base) -> () {
bb0(%0 : $private_base):
  debug_value %0 : $private_base
  %2 = class_method %0 : $private_base, #private_base.foo!1 : private_base -> () -> () , $@convention(method) (@guaranteed private_base) -> ()
  %3 = apply %2(%0) : $@convention(method) (@guaranteed private_base) -> ()
  strong_release %0 : $private_base
  %5 = tuple ()
  return %5 : $()
}


// CHECK: Function #13: internal_base_foo
// CHECK: Demangled: internal_base_foo
// CHECK: Trivially dead: no
// CHECK: All callers known: no
// CHECK: Known Callers:

// CHECK: Name: call_internal
// CHECK: Demangled: call_internal


sil hidden @internal_base_foo : $@convention(method) (@guaranteed internal_base) -> () {
bb0(%0 : $internal_base):
  debug_value %0 : $internal_base
  %2 = tuple ()
  return %2 : $()
}


// CHECK: Function #14: internal_base_bar
// CHECK: Demangled: internal_base_bar
// CHECK: Trivially dead: no
// CHECK: All callers known: no
// CHECK: Known Callers:

// CHECK: Name: call_internal
// CHECK: Demangled: call_internal


sil private @internal_base_bar : $@convention(method) (@guaranteed internal_base) -> () {
bb0(%0 : $internal_base):
  debug_value %0 : $internal_base
  %2 = tuple ()
  return %2 : $()
}


// CHECK: Function #15: internal_derived_foo
// CHECK: Demangled: internal_derived_foo
// CHECK: Trivially dead: no
// CHECK: All callers known: no
// CHECK: Known Callers:

// CHECK: Name: call_internal
// CHECK: Demangled: call_internal


sil hidden @internal_derived_foo : $@convention(method) (@guaranteed internal_derived) -> () {
bb0(%0 : $internal_derived):
  debug_value %0 : $internal_derived
  %2 = tuple ()
  return %2 : $()
}


// CHECK: Function #16: internal_derived_bar
// CHECK: Demangled: internal_derived_bar
// CHECK: Trivially dead: no
// CHECK: All callers known: no
// CHECK: Known Callers:

// CHECK: Name: call_internal
// CHECK: Demangled: call_internal


sil hidden @internal_derived_bar : $@convention(method) (@guaranteed internal_derived) -> () {
bb0(%0 : $internal_derived):
  debug_value %0 : $internal_derived
  %2 = tuple ()
  return %2 : $()
}


// CHECK: Function #17: call_internal
// CHECK: Demangled: call_internal
// CHECK-NOWMO: Trivially dead: no
// CHECK-NOWMO: All callers known: no
// CHECK-WMO: Trivially dead: yes
// CHECK-WMO: All callers known: yes
// CHECK: Call sites:

// CHECK: Call site #7:   %3 = apply %2(%0) : $@convention(method) (@guaranteed internal_base) -> ()
// CHECK-NOWMO: Unknown callees: yes
// CHECK-WMO: Unknown callees: no
// CHECK: Known callees:
// CHECK: Name: internal_base_foo
// CHECK: Demangled: internal_base_foo

// CHECK: Name: internal_derived_foo
// CHECK: Demangled: internal_derived_foo

// CHECK: Call site #8:   %5 = apply %4(%0) : $@convention(method) (@guaranteed internal_base) -> ()
// CHECK-NOWMO: Unknown callees: yes
// CHECK-WMO: Unknown callees: no
// CHECK: Known callees:
// CHECK: Name: internal_base_bar
// CHECK: Demangled: internal_base_bar

// CHECK: Name: internal_derived_bar
// CHECK: Demangled: internal_derived_bar


sil hidden [noinline] @call_internal : $@convention(thin) (@owned internal_base) -> () {
bb0(%0 : $internal_base):
  debug_value %0 : $internal_base
  %2 = class_method %0 : $internal_base, #internal_base.foo!1 : internal_base -> () -> () , $@convention(method) (@guaranteed internal_base) -> ()
  %3 = apply %2(%0) : $@convention(method) (@guaranteed internal_base) -> ()
  %4 = class_method %0 : $internal_base, #internal_base.bar!1 : internal_base -> () -> () , $@convention(method) (@guaranteed internal_base) -> ()
  %5 = apply %4(%0) : $@convention(method) (@guaranteed internal_base) -> ()
  strong_release %0 : $internal_base
  %7 = tuple ()
  return %7 : $()
}


// CHECK: Function #18: public_base_foo
// CHECK: Demangled: public_base_foo
// CHECK: Trivially dead: no
// CHECK: All callers known: no
// CHECK: Known Callers:

// CHECK: Name: call_public
// CHECK: Demangled: call_public


sil hidden @public_base_foo : $@convention(method) (@guaranteed public_base) -> () {
bb0(%0 : $public_base):
  debug_value %0 : $public_base
  %2 = tuple ()
  return %2 : $()
}


// CHECK: Function #19: public_base_bar
// CHECK: Demangled: public_base_bar
// CHECK: Trivially dead: no
// CHECK: All callers known: no
// CHECK: Known Callers:

// CHECK: Name: call_public
// CHECK: Demangled: call_public


sil @public_base_bar : $@convention(method) (@guaranteed public_base) -> () {
bb0(%0 : $public_base):
  debug_value %0 : $public_base
  %2 = tuple ()
  return %2 : $()
}


// CHECK: Function #20: public_base_baz
// CHECK: Demangled: public_base_baz
// CHECK: Trivially dead: no
// CHECK: All callers known: no
// CHECK: Known Callers:

// CHECK: Name: call_public
// CHECK: Demangled: call_public


sil private @public_base_baz : $@convention(method) (@guaranteed public_base) -> () {
bb0(%0 : $public_base):
  debug_value %0 : $public_base
  %2 = tuple ()
  return %2 : $()
}


// CHECK: Function #21: public_derived_foo
// CHECK: Demangled: public_derived_foo
// CHECK: Trivially dead: no
// CHECK: All callers known: no
// CHECK: Known Callers:

// CHECK: Name: call_public
// CHECK: Demangled: call_public


sil hidden @public_derived_foo : $@convention(method) (@guaranteed public_derived) -> () {
bb0(%0 : $public_derived):
  debug_value %0 : $public_derived
  %2 = tuple ()
  return %2 : $()
}


// CHECK: Function #22: public_derived_bar
// CHECK: Demangled: public_derived_bar
// CHECK: Trivially dead: no
// CHECK: All callers known: no
// CHECK: Known Callers:

// CHECK: Name: call_public
// CHECK: Demangled: call_public


sil @public_derived_bar : $@convention(method) (@guaranteed public_derived) -> () {
bb0(%0 : $public_derived):
  debug_value %0 : $public_derived
  %2 = tuple ()
  return %2 : $()
}


// CHECK: Function #23: public_derived_baz
// CHECK: Demangled: public_derived_baz
// CHECK: Trivially dead: no
// CHECK: All callers known: no
// CHECK: Known Callers:

// CHECK: Name: call_public
// CHECK: Demangled: call_public


sil @public_derived_baz : $@convention(method) (@guaranteed public_derived) -> () {
bb0(%0 : $public_derived):
  debug_value %0 : $public_derived
  %2 = tuple ()
  return %2 : $()
}


// CHECK: Function #24: call_public
// CHECK: Demangled: call_public
// CHECK-NOWMO: Trivially dead: no
// CHECK-NOWMO: All callers known: no
// CHECK-WMO: Trivially dead: yes
// CHECK-WMO: All callers known: yes
// CHECK: Call sites:

// CHECK: Call site #9:   %3 = apply %2(%0) : $@convention(method) (@guaranteed public_base) -> ()
// CHECK-NOWMO: Unknown callees: yes
// CHECK-WMO: Unknown callees: no
// CHECK: Known callees:
// CHECK: Name: public_base_foo
// CHECK: Demangled: public_base_foo

// CHECK: Name: public_derived_foo
// CHECK: Demangled: public_derived_foo

// CHECK: Call site #10:   %5 = apply %4(%0) : $@convention(method) (@guaranteed public_base) -> ()
// CHECK: Unknown callees: yes
// CHECK: Known callees:
// CHECK: Name: public_base_bar
// CHECK: Demangled: public_base_bar

// CHECK: Name: public_derived_bar
// CHECK: Demangled: public_derived_bar

// CHECK: Call site #11:   %7 = apply %6(%0) : $@convention(method) (@guaranteed public_base) -> ()
// CHECK: Unknown callees: yes
// CHECK: Known callees:
// CHECK: Name: public_base_baz
// CHECK: Demangled: public_base_baz

// CHECK: Name: public_derived_baz
// CHECK: Demangled: public_derived_baz


sil hidden [noinline] @call_public : $@convention(thin) (@owned public_base) -> () {
bb0(%0 : $public_base):
  debug_value %0 : $public_base
  %2 = class_method %0 : $public_base, #public_base.foo!1 : public_base -> () -> () , $@convention(method) (@guaranteed public_base) -> ()
  %3 = apply %2(%0) : $@convention(method) (@guaranteed public_base) -> ()
  %4 = class_method %0 : $public_base, #public_base.bar!1 : public_base -> () -> () , $@convention(method) (@guaranteed public_base) -> ()
  %5 = apply %4(%0) : $@convention(method) (@guaranteed public_base) -> ()
  %6 = class_method %0 : $public_base, #public_base.baz!1 : public_base -> () -> () , $@convention(method) (@guaranteed public_base) -> ()
  %7 = apply %6(%0) : $@convention(method) (@guaranteed public_base) -> ()
  strong_release %0 : $public_base
  %9 = tuple ()
  return %9 : $()
}

sil_vtable private_base {
  #private_base.foo!1: private_base_foo
}

sil_vtable private_derived {
  #private_base.foo!1: private_derived_foo
}

sil_vtable internal_base {
  #internal_base.foo!1: internal_base_foo
  #internal_base.bar!1: internal_base_bar
}

sil_vtable internal_derived {
  #internal_base.foo!1: internal_derived_foo
  #internal_base.bar!1: internal_derived_bar
}

sil_vtable public_base {
  #public_base.foo!1: public_base_foo
  #public_base.bar!1: public_base_bar
  #public_base.baz!1: public_base_baz
}

sil_vtable public_derived {
  #public_base.foo!1: public_derived_foo
  #public_base.bar!1: public_derived_bar
  #public_base.baz!1: public_derived_baz
}

private protocol private_proto_1 {
  func theMethod()
}

private class private_proto_private_class : private_proto_1 {
  func theMethod()
}

private func call_through_private_proto_1<T : private_proto_1>(x: T)

private protocol private_proto_2 {
  func theMethod()
}

class private_proto_internal_class : private_proto_2 {
  func theMethod()
}

private func call_through_private_proto_2<T : private_proto_2>(x: T)

private protocol private_proto_3 {
  func theMethod()
}

public class private_proto_public_class : private_proto_3 {
  public func theMethod()
}

private func call_through_private_proto_3<T : private_proto_3>(x: T)

private protocol private_proto_4 {
  func theMethod()
}

public class private_proto_public_class_private_method : private_proto_4 {
  private func theMethod()
}

private func call_through_private_proto_4<T : private_proto_4>(x: T)

// CHECK: Function #25: private_proto_private_class_theMethod
// CHECK: Demangled: private_proto_private_class_theMethod
// CHECK: Trivially dead: no
// CHECK: All callers known: no
// CHECK: Known Callers:

// CHECK: Name: private_proto_1_private_class_witness
// CHECK: Demangled: private_proto_1_private_class_witness


sil private @private_proto_private_class_theMethod : $@convention(method) (@guaranteed private_proto_private_class) -> () {
bb0(%0 : $private_proto_private_class):
  debug_value %0 : $private_proto_private_class
  %2 = tuple ()
  return %2 : $()
}


// CHECK: Function #26: private_proto_1_private_class_witness
// CHECK: Demangled: private_proto_1_private_class_witness
// CHECK: Trivially dead: no
// CHECK: All callers known: no
// CHECK: Call sites:

// CHECK: Call site #12:   %4 = apply %3(%1) : $@convention(method) (@guaranteed private_proto_private_class) -> ()
// CHECK: Unknown callees: no
// CHECK: Known callees:
// CHECK: Name: private_proto_private_class_theMethod
// CHECK: Demangled: private_proto_private_class_theMethod

// CHECK: Known Callers:

// CHECK: Name: call_through_private_proto_1
// CHECK: Demangled: call_through_private_proto_1


sil private [transparent] [thunk] @private_proto_1_private_class_witness : $@convention(witness_method) (@in_guaranteed private_proto_private_class) -> () {
bb0(%0 : $*private_proto_private_class):
  %1 = load %0 : $*private_proto_private_class
  strong_retain %1 : $private_proto_private_class
  %3 = class_method %1 : $private_proto_private_class, #private_proto_private_class.theMethod!1 : private_proto_private_class -> () -> () , $@convention(method) (@guaranteed private_proto_private_class) -> ()
  %4 = apply %3(%1) : $@convention(method) (@guaranteed private_proto_private_class) -> ()
  strong_release %1 : $private_proto_private_class
  return %4 : $()
}


// CHECK: Function #27: call_through_private_proto_1
// CHECK: Demangled: call_through_private_proto_1
// CHECK: Trivially dead: yes
// CHECK: All callers known: yes
// CHECK: Call sites:

// CHECK: Call site #13:   %3 = apply %2<T>(%0) : $@convention(witness_method) <τ_0_0 where τ_0_0 : private_proto_1> (@in_guaranteed τ_0_0) -> ()
// CHECK: Unknown callees: yes
// CHECK: Known callees:
// CHECK: Name: private_proto_1_private_class_witness
// CHECK: Demangled: private_proto_1_private_class_witness


sil private @call_through_private_proto_1 : $@convention(thin) <T where T : private_proto_1> (@in T) -> () {
bb0(%0 : $*T):
  debug_value_addr %0 : $*T
  %2 = witness_method $T, #private_proto_1.theMethod!1 : $@convention(witness_method) <τ_0_0 where τ_0_0 : private_proto_1> (@in_guaranteed τ_0_0) -> ()
  %3 = apply %2<T>(%0) : $@convention(witness_method) <τ_0_0 where τ_0_0 : private_proto_1> (@in_guaranteed τ_0_0) -> ()
  destroy_addr %0 : $*T
  %5 = tuple ()
  return %5 : $()
}


// CHECK: Function #28: private_proto_internal_class_theMethod
// CHECK: Demangled: private_proto_internal_class_theMethod
// CHECK: Trivially dead: no
// CHECK: All callers known: no
// CHECK: Known Callers:

// CHECK: Name: private_proto_2_internal_class_witness
// CHECK: Demangled: private_proto_2_internal_class_witness


sil hidden @private_proto_internal_class_theMethod : $@convention(method) (@guaranteed private_proto_internal_class) -> () {
bb0(%0 : $private_proto_internal_class):
  debug_value %0 : $private_proto_internal_class
  %2 = tuple ()
  return %2 : $()
}


// CHECK: Function #29: private_proto_2_internal_class_witness
// CHECK: Demangled: private_proto_2_internal_class_witness
// CHECK: Trivially dead: no
// CHECK: All callers known: no
// CHECK: Call sites:

// CHECK: Call site #14:   %4 = apply %3(%1) : $@convention(method) (@guaranteed private_proto_internal_class) -> ()
// CHECK-NOWMO: Unknown callees: yes
// CHECK-WMO: Unknown callees: no
// CHECK: Known callees:
// CHECK: Name: private_proto_internal_class_theMethod
// CHECK: Demangled: private_proto_internal_class_theMethod

// CHECK: Known Callers:

// CHECK: Name: call_through_private_proto_2
// CHECK: Demangled: call_through_private_proto_2


sil private [transparent] [thunk] @private_proto_2_internal_class_witness : $@convention(witness_method) (@in_guaranteed private_proto_internal_class) -> () {
bb0(%0 : $*private_proto_internal_class):
  %1 = load %0 : $*private_proto_internal_class
  strong_retain %1 : $private_proto_internal_class
  %3 = class_method %1 : $private_proto_internal_class, #private_proto_internal_class.theMethod!1 : private_proto_internal_class -> () -> () , $@convention(method) (@guaranteed private_proto_internal_class) -> ()
  %4 = apply %3(%1) : $@convention(method) (@guaranteed private_proto_internal_class) -> ()
  strong_release %1 : $private_proto_internal_class
  return %4 : $()
}


// CHECK: Function #30: call_through_private_proto_2
// CHECK: Demangled: call_through_private_proto_2
// CHECK: Trivially dead: yes
// CHECK: All callers known: yes
// CHECK: Call sites:

// CHECK: Call site #15:   %3 = apply %2<T>(%0) : $@convention(witness_method) <τ_0_0 where τ_0_0 : private_proto_2> (@in_guaranteed τ_0_0) -> ()
// CHECK: Unknown callees: yes
// CHECK: Known callees:
// CHECK: Name: private_proto_2_internal_class_witness
// CHECK: Demangled: private_proto_2_internal_class_witness


sil private @call_through_private_proto_2 : $@convention(thin) <T where T : private_proto_2> (@in T) -> () {
bb0(%0 : $*T):
  debug_value_addr %0 : $*T
  %2 = witness_method $T, #private_proto_2.theMethod!1 : $@convention(witness_method) <τ_0_0 where τ_0_0 : private_proto_2> (@in_guaranteed τ_0_0) -> ()
  %3 = apply %2<T>(%0) : $@convention(witness_method) <τ_0_0 where τ_0_0 : private_proto_2> (@in_guaranteed τ_0_0) -> ()
  destroy_addr %0 : $*T
  %5 = tuple ()
  return %5 : $()
}


// CHECK: Function #31: private_proto_public_class_theMethod
// CHECK: Demangled: private_proto_public_class_theMethod
// CHECK: Trivially dead: no
// CHECK: All callers known: no
// CHECK: Known Callers:

// CHECK: Name: private_proto_3_public_class_witness
// CHECK: Demangled: private_proto_3_public_class_witness


sil @private_proto_public_class_theMethod : $@convention(method) (@guaranteed private_proto_public_class) -> () {
bb0(%0 : $private_proto_public_class):
  debug_value %0 : $private_proto_public_class
  %2 = tuple ()
  return %2 : $()
}


// CHECK: Function #32: private_proto_3_public_class_witness
// CHECK: Demangled: private_proto_3_public_class_witness
// CHECK: Trivially dead: no
// CHECK: All callers known: no
// CHECK: Call sites:

// CHECK: Call site #16:   %4 = apply %3(%1) : $@convention(method) (@guaranteed private_proto_public_class) -> ()
// CHECK: Unknown callees: yes
// CHECK: Known callees:
// CHECK: Name: private_proto_public_class_theMethod
// CHECK: Demangled: private_proto_public_class_theMethod

// CHECK: Known Callers:

// CHECK: Name: call_through_private_proto_3
// CHECK: Demangled: call_through_private_proto_3


sil private [transparent] [thunk] @private_proto_3_public_class_witness : $@convention(witness_method) (@in_guaranteed private_proto_public_class) -> () {
bb0(%0 : $*private_proto_public_class):
  %1 = load %0 : $*private_proto_public_class
  strong_retain %1 : $private_proto_public_class
  %3 = class_method %1 : $private_proto_public_class, #private_proto_public_class.theMethod!1 : private_proto_public_class -> () -> () , $@convention(method) (@guaranteed private_proto_public_class) -> ()
  %4 = apply %3(%1) : $@convention(method) (@guaranteed private_proto_public_class) -> ()
  strong_release %1 : $private_proto_public_class
  return %4 : $()
}


// CHECK: Function #33: call_through_private_proto_3
// CHECK: Demangled: call_through_private_proto_3
// CHECK: Trivially dead: yes
// CHECK: All callers known: yes
// CHECK: Call sites:

// CHECK: Call site #17:   %3 = apply %2<T>(%0) : $@convention(witness_method) <τ_0_0 where τ_0_0 : private_proto_3> (@in_guaranteed τ_0_0) -> ()
// CHECK: Unknown callees: yes
// CHECK: Known callees:
// CHECK: Name: private_proto_3_public_class_witness
// CHECK: Demangled: private_proto_3_public_class_witness


sil private @call_through_private_proto_3 : $@convention(thin) <T where T : private_proto_3> (@in T) -> () {
bb0(%0 : $*T):
  debug_value_addr %0 : $*T
  %2 = witness_method $T, #private_proto_3.theMethod!1 : $@convention(witness_method) <τ_0_0 where τ_0_0 : private_proto_3> (@in_guaranteed τ_0_0) -> ()
  %3 = apply %2<T>(%0) : $@convention(witness_method) <τ_0_0 where τ_0_0 : private_proto_3> (@in_guaranteed τ_0_0) -> ()
  destroy_addr %0 : $*T
  %5 = tuple ()
  return %5 : $()
}


// CHECK: Function #34: private_proto_public_class_private_method_theMethod
// CHECK: Demangled: private_proto_public_class_private_method_theMethod
// CHECK: Trivially dead: no
// CHECK: All callers known: no
// CHECK: Known Callers:

// CHECK: Name: private_proto_4_public_class_private_method_witness
// CHECK: Demangled: private_proto_4_public_class_private_method_witness


sil private @private_proto_public_class_private_method_theMethod : $@convention(method) (@guaranteed private_proto_public_class_private_method) -> () {
bb0(%0 : $private_proto_public_class_private_method):
  debug_value %0 : $private_proto_public_class_private_method
  %2 = tuple ()
  return %2 : $()
}


// CHECK: Function #35: private_proto_4_public_class_private_method_witness
// CHECK: Demangled: private_proto_4_public_class_private_method_witness
// CHECK: Trivially dead: no
// CHECK: All callers known: no
// CHECK: Call sites:

// CHECK: Call site #18:   %4 = apply %3(%1) : $@convention(method) (@guaranteed private_proto_public_class_private_method) -> ()
// CHECK: Unknown callees: no
// CHECK: Known callees:
// CHECK: Name: private_proto_public_class_private_method_theMethod
// CHECK: Demangled: private_proto_public_class_private_method_theMethod

// CHECK: Known Callers:

// CHECK: Name: call_through_private_proto_4
// CHECK: Demangled: call_through_private_proto_4


sil private [transparent] [thunk] @private_proto_4_public_class_private_method_witness : $@convention(witness_method) (@in_guaranteed private_proto_public_class_private_method) -> () {
bb0(%0 : $*private_proto_public_class_private_method):
  %1 = load %0 : $*private_proto_public_class_private_method
  strong_retain %1 : $private_proto_public_class_private_method
  %3 = class_method %1 : $private_proto_public_class_private_method, #private_proto_public_class_private_method.theMethod!1 : private_proto_public_class_private_method -> () -> () , $@convention(method) (@guaranteed private_proto_public_class_private_method) -> ()
  %4 = apply %3(%1) : $@convention(method) (@guaranteed private_proto_public_class_private_method) -> ()
  strong_release %1 : $private_proto_public_class_private_method
  return %4 : $()
}


// CHECK: Function #36: call_through_private_proto_4
// CHECK: Demangled: call_through_private_proto_4
// CHECK: Trivially dead: yes
// CHECK: All callers known: yes
// CHECK: Call sites:

// CHECK: Call site #19:   %3 = apply %2<T>(%0) : $@convention(witness_method) <τ_0_0 where τ_0_0 : private_proto_4> (@in_guaranteed τ_0_0) -> ()
// CHECK: Unknown callees: yes
// CHECK: Known callees:
// CHECK: Name: private_proto_4_public_class_private_method_witness
// CHECK: Demangled: private_proto_4_public_class_private_method_witness


sil private @call_through_private_proto_4 : $@convention(thin) <T where T : private_proto_4> (@in T) -> () {
bb0(%0 : $*T):
  debug_value_addr %0 : $*T
  %2 = witness_method $T, #private_proto_4.theMethod!1 : $@convention(witness_method) <τ_0_0 where τ_0_0 : private_proto_4> (@in_guaranteed τ_0_0) -> ()
  %3 = apply %2<T>(%0) : $@convention(witness_method) <τ_0_0 where τ_0_0 : private_proto_4> (@in_guaranteed τ_0_0) -> ()
  destroy_addr %0 : $*T
  %5 = tuple ()
  return %5 : $()
}


sil_vtable private_proto_private_class {
  #private_proto_private_class.theMethod!1: private_proto_private_class_theMethod
}

sil_vtable private_proto_internal_class {
  #private_proto_internal_class.theMethod!1: private_proto_internal_class_theMethod
}

sil_vtable private_proto_public_class {
  #private_proto_public_class.theMethod!1: private_proto_public_class_theMethod
}

sil_vtable private_proto_public_class_private_method {
  #private_proto_public_class_private_method.theMethod!1: private_proto_public_class_private_method_theMethod
}

sil_witness_table private private_proto_private_class: private_proto_1 module witness {
  method #private_proto_1.theMethod!1: @private_proto_1_private_class_witness
}

sil_witness_table private private_proto_internal_class: private_proto_2 module witness {
  method #private_proto_2.theMethod!1: @private_proto_2_internal_class_witness
}

sil_witness_table private private_proto_public_class: private_proto_3 module witness {
  method #private_proto_3.theMethod!1: @private_proto_3_public_class_witness
}

sil_witness_table private private_proto_public_class_private_method: private_proto_4 module witness {
  method #private_proto_4.theMethod!1: @private_proto_4_public_class_private_method_witness
}

// CHECK: *** Call Graph Statistics ***
// CHECK: Number of call graph nodes: 36
// CHECK: Number of call graph edges: 20
// CHECK: Histogram of number of call sites per function:
// CHECK: 0: 19
// CHECK: 1: 15
// CHECK: 2: 1
// CHECK: 3: 1

// CHECK: Histogram of number of callees per call site:
// CHECK: 1: 14
// CHECK: 2: 6

// CHECK: Histogram of number of callers per function:
// CHECK: 0: 10
// CHECK: 1: 26

// CHECK: Bump pointer allocated memory (bytes): 12288
// CHECK: Number of callee sets allocated: 20
