//===--- IntegerArithmetic.swift.gyb -------------------------*- swift -*--===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2015 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
%# Ignore the following admonition; it applies to the resulting .swift file only

// Automatically Generated From IntegerArithmetic.swift.gyb.  Do Not Edit
// Directly!

%{
integerBinaryOps = [
   (x[:-1], x[-1], x[:-1].capitalize(), 'a result') 
    for x in 'add+ subtract- multiply* divide/'.split()
] + [ ('remainder', '%', 'Divide', 'the remainder') ]
}%

/// This protocol is an implementation detail of `IntegerArithmeticType`; do
/// not use it directly.
///
/// Its requirements are inherited by `IntegerArithmeticType` and thus must
/// be satisfied by types conforming to that protocol.
public protocol _IntegerArithmeticType {
% for name,_,Action,result in integerBinaryOps:
  /// ${Action} `lhs` and `rhs`, returning ${result} and a `Bool` that is
  /// true iff the operation caused an arithmetic overflow.
  static func ${name}WithOverflow(lhs: Self, _ rhs: Self) -> (Self, overflow: Bool)
% end
}

/// The common requirements for types that support integer arithmetic.
public protocol IntegerArithmeticType : _IntegerArithmeticType, Comparable {
  // Checked arithmetic functions.  Specific implementations in
  // FixedPoint.swift.gyb support static checking for integer types.
% for name,op,Action,result in integerBinaryOps:
  /// ${Action} `lhs` and `rhs`, returning ${result} and trapping in case of
  /// arithmetic overflow (except in -Ounchecked builds).
  @warn_unused_result
  func ${op} (lhs: Self, rhs: Self) -> Self
% end
  
  /// Explicitly convert to `IntMax`, trapping on overflow (except in
  /// -Ounchecked builds).
  @warn_unused_result
  func toIntMax() -> IntMax
}

% for name,op,Action,result in integerBinaryOps:
/// ${Action} `lhs` and `rhs`, returning ${result} and trapping in case of
/// arithmetic overflow (except in -Ounchecked builds).
@_transparent
@warn_unused_result
public func ${op} <T : _IntegerArithmeticType>(lhs: T, rhs: T) -> T {
  return _overflowChecked(T.${name}WithOverflow(lhs, rhs))
}

% if (op != '/') and (op != '%'):
/// ${name} `lhs` and `rhs`, silently discarding any overflow.
@_transparent
@warn_unused_result
public func &${op} <T : _IntegerArithmeticType>(lhs: T, rhs: T) -> T {
  return T.${name}WithOverflow(lhs, rhs).0
}
% end

/// ${name} `lhs` and `rhs` and store the result in `lhs`, trapping in
/// case of arithmetic overflow (except in -Ounchecked builds).
@_transparent
public func ${op}= <T : _IntegerArithmeticType>(inout lhs: T, rhs: T) {
  lhs = lhs ${op} rhs
}
% end

//===--- SignedNumberType -------------------------------------------------===//
// A numeric type that supports abs(x), +x and -x
//===----------------------------------------------------------------------===//

// SignedNumberType itself contains only operator requirements having
// default implementations on the base protocol.
/// Instances of conforming types can be subtracted, arithmetically
/// negated, and initialized from `0`.
///
/// Axioms:
///
/// - `x - 0 == x`
/// - `-x == 0 - x`
/// - `-(-x) == x`
public protocol SignedNumberType : Comparable, IntegerLiteralConvertible {
  /// Return the result of negating `x`.
  @warn_unused_result
  prefix func - (x: Self) -> Self

  /// Return the difference between `lhs` and `rhs`.
  @warn_unused_result
  func - (lhs: Self, rhs: Self) -> Self
  
  // Do not use this operator directly; call abs(x) instead
  func ~> (_:Self,_:(_Abs, ())) -> Self
}

// Unary negation in terms of subtraction.  This is a default
// implementation; models of SignedNumberType can provide their own
// implementations.
@_transparent
public prefix func - <T : SignedNumberType>(x: T) -> T {
  return 0 - x
}

// Unary +
@_transparent
public prefix func + <T : SignedNumberType>(x: T) -> T {
  return x
}

//===--- abs(x) -----------------------------------------------------------===//
public struct _Abs {}
internal func _abs<Args>(args: Args) -> (_Abs, Args) {
  return (_Abs(), args)
}

// Do not use this operator directly; call abs(x) instead
@_transparent
public func ~> <T : SignedNumberType>(x:T,_:(_Abs, ())) -> T {
  return x < 0 ? -x : x
}

// FIXME: should this be folded into SignedNumberType?
/// A type that supports an "absolute value" function.
public protocol AbsoluteValuable : SignedNumberType {
  /// Returns the absolute value of `x`.
  @warn_unused_result
  static func abs(x: Self) -> Self
}

// Do not use this operator directly; call abs(x) instead
@_transparent
public func ~> <T : AbsoluteValuable>(x:T,_:(_Abs, ())) -> T {
  return T.abs(x)
}

/// Return the absolute value of `x`.
///
/// Concrete instances of `SignedNumberType` can specialize this
/// function by conforming to `AbsoluteValuable`.
@_transparent
public func abs<T : SignedNumberType>(x: T) -> T {
  return x~>_abs()
}

// ${'Local Variables'}:
// eval: (read-only-mode 1)
// End:
