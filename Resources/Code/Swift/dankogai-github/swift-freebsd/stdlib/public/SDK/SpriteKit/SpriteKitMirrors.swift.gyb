//===----------------------------------------------------------*- swift -*-===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2015 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

%import gyb
%TMirrorDecl = gyb.parseTemplate("../../common/MirrorDecl.gyb")
%TMirrorConformance = gyb.parseTemplate("../../common/MirrorConformance.gyb")
%TMirrorBoilerplate = gyb.parseTemplate("../../common/MirrorBoilerplate.gyb")

% for Self in ['SKShapeNode','SKSpriteNode','SKTextureAtlas','SKTexture']:
%   MirrorDecl = gyb.executeTemplate(TMirrorDecl,introspecteeType=Self)
%   MirrorConformance = gyb.executeTemplate(TMirrorConformance,introspecteeType=Self)
%   MirrorBoilerplate = gyb.executeTemplate(TMirrorBoilerplate,introspecteeType=Self)

${MirrorDecl} {
  ${MirrorBoilerplate}
  
  var count: Int { return 0 }
  
  subscript(_: Int) -> (String, _MirrorType) {
    _preconditionFailure("_MirrorType access out of bounds")
  }

  var summary: String { return _value.description }
  
  var quickLookObject: PlaygroundQuickLook? {
      // this code comes straight from the quicklooks
      
      guard let data = (_value as AnyObject)._copyImageData?() else { return nil }
      // we could send a Raw, but I don't want to make a copy of the
      // bytes for no good reason make an NSImage out of them and
      // send that
#if os(OSX)
      let img = NSImage(data: data)
#elseif os(iOS) || os(watchOS) || os(tvOS)
      let img = UIImage(data: data)
#endif
      return .Some(.Sprite(img))
  }
  
}

${MirrorConformance}
