//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2015 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

%import gyb
%TMirrorDecl = gyb.parseTemplate("../../common/MirrorDecl.gyb")
%TMirrorConformance = gyb.parseTemplate("../../common/MirrorConformance.gyb")
%TMirrorBoilerplate = gyb.parseTemplate("../../common/MirrorBoilerplate.gyb")

% for Type in [['CGPoint',['x','y'],'Point',['x','y']],\
%             ['CGSize',['width','height'],'Size',['width','height']],\
%             ['CGRect',['origin','size'],'Rectangle',['origin.x','origin.y','size.width','size.height']]]:
%   Self = Type[0]
%   Children = Type[1]
%   QLTag = Type[2]
%   QLArgs = Type[3]
%   MirrorDecl = gyb.executeTemplate(TMirrorDecl,introspecteeType=Self,disposition='Struct')
%   MirrorConformance = gyb.executeTemplate(TMirrorConformance,introspecteeType=Self,disposition='Struct')
%   MirrorBoilerplate = gyb.executeTemplate(TMirrorBoilerplate,introspecteeType=Self,disposition='Struct')
%   QLArgFirst=True
%   QLArgString = ''
%   SummaryString = ''
%   for QLArg in QLArgs:
%     if QLArgFirst == False:
%       QLArgString = QLArgString + ', '
%       SummaryString = SummaryString + ', '
%     else:
%       QLArgFirst = False
%     QLArgString = QLArgString + 'Double(_value.' + QLArg + ')'
%     SummaryString = SummaryString + '\(_value.' + QLArg + ')'
%   end

${MirrorDecl} {
  ${MirrorBoilerplate}

  var count: Int { return 2 }

  subscript(i: Int) -> (String, _MirrorType) {
    switch i {
    case 0: return ("${Children[0]}", _reflect(_value.${Children[0]}))
    case 1: return ("${Children[1]}", _reflect(_value.${Children[1]}))
    default: _preconditionFailure("cannot extract this child index")
    }
  }

  var summary: String { return "(${SummaryString})" }

  var quickLookObject: PlaygroundQuickLook? { return .Some(.${QLTag}(${QLArgString})) }
}

${MirrorConformance}
