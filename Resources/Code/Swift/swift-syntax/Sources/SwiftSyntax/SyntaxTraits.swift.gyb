%{
  # -*- mode: Swift -*-
  from gyb_syntax_support import *
  from gyb_syntax_support.Traits import TRAITS
  NODE_MAP = create_node_map()
  # Ignore the following admonition it applies to the resulting .swift file only
}%
//// Automatically Generated From SyntaxNodes.swift.gyb.
//// Do Not Edit Directly!
//===----------- SyntaxTraits.swift - Traits for syntax nodes -------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2022 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

% for trait in TRAITS:
// MARK: - ${trait.trait_name}Syntax

public protocol ${trait.trait_name}Syntax: SyntaxProtocol {
% for child in trait.children:
%   ret_type = child.type_name
%   if child.is_optional:
%       ret_type += '?'
%   end
  var ${child.swift_name}: ${ret_type} { get }
  func with${child.name}(_ newChild: ${child.type_name}?) -> Self
% end
}

public extension SyntaxProtocol {
  /// Check whether the non-type erased version of this syntax node conforms to 
  /// `${trait.trait_name}Syntax`. 
  /// Note that this will incur an existential conversion.
  func isProtocol(_: ${trait.trait_name}Syntax.Protocol) -> Bool {
    return self.asProtocol(${trait.trait_name}Syntax.self) != nil
  }

  /// Return the non-type erased version of this syntax node if it conforms to 
  /// `${trait.trait_name}Syntax`. Otherwise return `nil`.
  /// Note that this will incur an existential conversion.
  func asProtocol(_: ${trait.trait_name}Syntax.Protocol) -> ${trait.trait_name}Syntax? {
    return Syntax(self).asProtocol(SyntaxProtocol.self) as? ${trait.trait_name}Syntax
  }
}

% end

% for node in SYNTAX_NODES:
%   base_type = node.base_type
%   if node.is_base():
%     pass
%   elif node.collection_element:
%     pass
%   elif node.traits:
%     traits_list = ", ".join(trait + 'Syntax' for trait in node.traits)
extension ${node.name}: ${traits_list} {}
%   end
% end
