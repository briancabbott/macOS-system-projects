%{
  from gyb_syntax_support import *

  class ChildClassification(object):
    def __init__(self, node, child_index, child):
      self.parent = node
      self.child_index = child_index
      self.is_token = child.syntax_kind.endswith("Token")
      self.classification = child.classification
      self.force = child.force_classification
      self.swift_force = "true" if self.force else "false"

  # Collects the list of classifications to use for contextual classification.
  node_child_classifications = []
  for node in SYNTAX_NODES:
    for child in enumerate(node.children):
      if child[1].classification and child[1].classification.name != 'None':
        node_child_classifications.append(
          ChildClassification(node, child_index=child[0], child=child[1]))

  # -*- mode: Swift -*-
  # Ignore the following admonition it applies to the resulting .swift file only
}%
//// Automatically Generated From SyntaxClassifier.swift.gyb.
//// Do Not Edit Directly!
//===------------ SyntaxClassifier.swift.gyb - Syntax Collection ----------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2022 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

public enum SyntaxClassification {
% for classification in SYNTAX_CLASSIFICATIONS:
%   for line in dedented_lines(classification.description):
%     if line: 
  /// ${line} 
%     end 
%   end
  case ${classification.swift_name}
% end
}

extension SyntaxClassification {
  /// Checks if a node has a classification attached via its syntax definition.
  /// - Parameters:
  ///   - parentKind: The parent node syntax kind.
  ///   - indexInParent: The index of the node in its parent.
  ///   - childKind: The node syntax kind.
  /// - Returns: A pair of classification and whether it is "forced", or nil if
  ///   no classification is attached.
  internal static func classify(
    parentKind: SyntaxKind, indexInParent: Int, childKind: SyntaxKind
  ) -> (SyntaxClassification, Bool)? {
    // Separate checks for token nodes (most common checks) versus checks for layout nodes.
    if childKind == .token {
      switch (parentKind, indexInParent) {
% for child_classification in node_child_classifications:
%   if child_classification.is_token:
      case (.${child_classification.parent.swift_syntax_kind}, ${child_classification.child_index}):
        return (.${child_classification.classification.swift_name}, ${child_classification.swift_force})
%   end
% end
      default: return nil
      }
    } else {
      switch (parentKind, indexInParent) {
% for child_classification in node_child_classifications:
%   if not child_classification.is_token:
      case (.${child_classification.parent.swift_syntax_kind}, ${child_classification.child_index}):
        return (.${child_classification.classification.swift_name}, ${child_classification.swift_force})
%   end
% end
      default: return nil
      }
    }
  }
}

extension RawTokenKind {
  internal var classification: SyntaxClassification {
    switch (self) {
% for token in SYNTAX_TOKENS:
    case .${token.swift_kind()}:
%   if token.classification:
      return .${token.classification.swift_name}
%   else:
      return .none
%   end
% end
    case .eof:
      return .none
    }
  }
}
