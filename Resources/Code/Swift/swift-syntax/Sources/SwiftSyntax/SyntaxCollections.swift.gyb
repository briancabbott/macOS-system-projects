%{
  from gyb_syntax_support import *
  NODE_MAP = create_node_map()
  # -*- mode: Swift -*-
  # Ignore the following admonition it applies to the resulting .swift file only
}%
//// Automatically Generated From SyntaxCollections.swift.gyb.
//// Do Not Edit Directly!
//===------------ SyntaxCollections.swift.gyb - Syntax Collection ---------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2022 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

public protocol SyntaxCollection: SyntaxProtocol, Sequence {
  /// The number of elements, `present` or `missing`, in this collection.
  var count: Int { get }
}

% for node in SYNTAX_NODES:
%   if node.collection_element:
%     element_node = NODE_MAP.get(node.collection_element)

% if node.description:
%   for line in dedented_lines(node.description):
/// ${line}
%   end
% else:
/// `${node.name}` represents a collection of one or more
/// `${node.collection_element_type}` nodes. ${node.name} behaves
/// as a regular Swift collection, and has accessors that return new
/// versions of the collection with different children.
% end
public struct ${node.name}: SyntaxCollection, SyntaxHashable {
  public let _syntaxNode: Syntax

  var layoutView: RawSyntaxLayoutView {
    data.raw.layoutView!
  }

  /// Converts the given `Syntax` node to a `${node.name}` if possible. Returns 
  /// `nil` if the conversion is not possible.
  public init?(_ syntax: Syntax) {
    guard syntax.raw.kind == .${node.swift_syntax_kind} else { return nil }
    self._syntaxNode = syntax
  }

  /// Creates a Syntax node from the provided root and data. This assumes 
  /// that the `SyntaxData` is of the correct kind. If it is not, the behaviour
  /// is undefined.
  internal init(_ data: SyntaxData) {
    assert(data.raw.kind == .${node.swift_syntax_kind})
    self._syntaxNode = Syntax(data)
  }

  public init(_ children: [${node.collection_element_type}]) {
    let raw = RawSyntax.makeLayout(kind: SyntaxKind.${node.swift_syntax_kind},
      from: children.map { $0.raw }, arena: .default)
    let data = SyntaxData.forRoot(raw)
    self.init(data)
  }

  /// The number of elements, `present` or `missing`, in this collection.
  public var count: Int { return raw.layoutView!.children.count }

  /// Creates a new `${node.name}` by replacing the underlying layout with
  /// a different set of raw syntax nodes.
  ///
  /// - Parameter layout: The new list of raw syntax nodes underlying this
  ///                     collection.
  /// - Returns: A new `${node.name}` with the new layout underlying it.
  internal func replacingLayout(
    _ layout: [RawSyntax?]) -> ${node.name} {
    let newRaw = layoutView.replacingLayout(with: layout, arena: .default)
    let newData = data.replacingSelf(newRaw)
    return ${node.name}(newData)
  }

  /// Creates a new `${node.name}` by appending the provided syntax element
  /// to the children.
  ///
  /// - Parameter syntax: The element to append.
  /// - Returns: A new `${node.name}` with that element appended to the end.
  public func appending(
    _ syntax: ${node.collection_element_type}) -> ${node.name} {
    var newLayout = layoutView.formLayoutArray()
    newLayout.append(syntax.raw)
    return replacingLayout(newLayout)
  }

  /// Creates a new `${node.name}` by prepending the provided syntax element
  /// to the children.
  ///
  /// - Parameter syntax: The element to prepend.
  /// - Returns: A new `${node.name}` with that element prepended to the
  ///            beginning.
  public func prepending(
    _ syntax: ${node.collection_element_type}) -> ${node.name} {
    return inserting(syntax, at: 0)
  }

  /// Creates a new `${node.name}` by inserting the provided syntax element
  /// at the provided index in the children.
  ///
  /// - Parameters:
  ///   - syntax: The element to insert.
  ///   - index: The index at which to insert the element in the collection.
  ///
  /// - Returns: A new `${node.name}` with that element appended to the end.
  public func inserting(_ syntax: ${node.collection_element_type},
                        at index: Int) -> ${node.name} {
    var newLayout = layoutView.formLayoutArray()
    /// Make sure the index is a valid insertion index (0 to 1 past the end)
    precondition((newLayout.startIndex...newLayout.endIndex).contains(index),
                 "inserting node at invalid index \(index)")
    newLayout.insert(syntax.raw, at: index)
    return replacingLayout(newLayout)
  }

  /// Creates a new `${node.name}` by replacing the syntax element
  /// at the provided index.
  ///
  /// - Parameters:
  ///   - index: The index at which to replace the element in the collection.
  ///   - syntax: The element to replace with.
  ///
  /// - Returns: A new `${node.name}` with the new element at the provided index.
  public func replacing(childAt index: Int,
                        with syntax: ${node.collection_element_type}) -> ${node.name} {
    var newLayout = layoutView.formLayoutArray()
    /// Make sure the index is a valid index for replacing
    precondition((newLayout.startIndex..<newLayout.endIndex).contains(index),
                 "replacing node at invalid index \(index)")
    newLayout[index] = syntax.raw
    return replacingLayout(newLayout)
  }

  /// Creates a new `${node.name}` by removing the syntax element at the
  /// provided index.
  ///
  /// - Parameter index: The index of the element to remove from the collection.
  /// - Returns: A new `${node.name}` with the element at the provided index
  ///            removed.
  public func removing(childAt index: Int) -> ${node.name} {
    var newLayout = layoutView.formLayoutArray()
    newLayout.remove(at: index)
    return replacingLayout(newLayout)
  }

  /// Creates a new `${node.name}` by removing the first element.
  ///
  /// - Returns: A new `${node.name}` with the first element removed.
  public func removingFirst() -> ${node.name} {
    var newLayout = layoutView.formLayoutArray()
    newLayout.removeFirst()
    return replacingLayout(newLayout)
  }

  /// Creates a new `${node.name}` by removing the last element.
  ///
  /// - Returns: A new `${node.name}` with the last element removed.
  public func removingLast() -> ${node.name} {
    var newLayout = layoutView.formLayoutArray()
    newLayout.removeLast()
    return replacingLayout(newLayout)
  }

  /// Returns a new `${node.name}` with its leading trivia replaced
  /// by the provided trivia.
  public func withLeadingTrivia(_ leadingTrivia: Trivia) -> ${node.name} {
    return ${node.name}(data.withLeadingTrivia(leadingTrivia))
  }

  /// Returns a new `${node.name}` with its trailing trivia replaced
  /// by the provided trivia.
  public func withTrailingTrivia(_ trailingTrivia: Trivia) -> ${node.name} {
    return ${node.name}(data.withTrailingTrivia(trailingTrivia))
  }

  /// Returns a new `${node.name}` with its leading trivia removed.
  public func withoutLeadingTrivia() -> ${node.name} {
    return withLeadingTrivia([])
  }

  /// Returns a new `${node.name}` with its trailing trivia removed.
  public func withoutTrailingTrivia() -> ${node.name} {
    return withTrailingTrivia([])
  }

  /// Returns a new `${node.name}` with all trivia removed.
  public func withoutTrivia() -> ${node.name} {
    return withoutLeadingTrivia().withoutTrailingTrivia()
  }

  /// The leading trivia (spaces, newlines, etc.) associated with this `${node.name}`.
  public var leadingTrivia: Trivia? {
    get {
      return raw.formLeadingTrivia()
    }
    set {
      self = withLeadingTrivia(newValue ?? [])
    }
  }

  /// The trailing trivia (spaces, newlines, etc.) associated with this `${node.name}`.
  public var trailingTrivia: Trivia? {
    get {
      return raw.formTrailingTrivia()
    }
    set {
      self = withTrailingTrivia(newValue ?? [])
    }
  }

  public func childNameForDiagnostics(_ index: SyntaxChildrenIndex) -> String? {
    return nil
  }
}

/// Conformance for `${node.name}` to the `BidirectionalCollection` protocol.
extension ${node.name}: BidirectionalCollection {
  public typealias Element = ${node.collection_element_type}
  public typealias Index = SyntaxChildrenIndex

  public struct Iterator: IteratorProtocol {
    private let parent: Syntax
    private var iterator: RawSyntaxChildren.Iterator

    init(parent: Syntax, rawChildren: RawSyntaxChildren) {
      self.parent = parent
      self.iterator = rawChildren.makeIterator()
    }

    public mutating func next() -> ${node.collection_element_type}? {
      guard let (raw, info) = self.iterator.next() else {
        return nil
      }
      let absoluteRaw = AbsoluteRawSyntax(raw: raw!, info: info)
      let data = SyntaxData(absoluteRaw, parent: parent)
      return ${node.collection_element_type}(data)
    }
  }

  public func makeIterator() -> Iterator {
    return Iterator(parent: Syntax(self), rawChildren: rawChildren)
  }

  private var rawChildren: RawSyntaxChildren {
    // We know children in a syntax collection cannot be missing. So we can 
    // use the low-level and faster RawSyntaxChildren collection instead of
    // NonNilRawSyntaxChildren.
    return RawSyntaxChildren(self.data.absoluteRaw)
  }

  public var startIndex: SyntaxChildrenIndex {
    return rawChildren.startIndex
  }
  public var endIndex: SyntaxChildrenIndex {
    return rawChildren.endIndex
  }

  public func index(after index: SyntaxChildrenIndex) -> SyntaxChildrenIndex {
    return rawChildren.index(after: index)
  }

  public func index(before index: SyntaxChildrenIndex) -> SyntaxChildrenIndex {
    return rawChildren.index(before: index)
  }

  public func distance(from start: SyntaxChildrenIndex, to end: SyntaxChildrenIndex)
      -> Int {
    return rawChildren.distance(from: start, to: end)
  }

  public subscript(position: SyntaxChildrenIndex) -> ${node.collection_element_type} {
    let (raw, info) = rawChildren[position]
    let absoluteRaw = AbsoluteRawSyntax(raw: raw!, info: info)
    let data = SyntaxData(absoluteRaw, parent: Syntax(self))
    return ${node.collection_element_type}(data)
  }
}
%   end
% end

% for node in SYNTAX_NODES:
%   if node.is_syntax_collection():
extension ${node.name}: CustomReflectable {
  public var customMirror: Mirror {
    return Mirror(self, unlabeledChildren: self.map{ $0 })
  }
}
%   end
% end
