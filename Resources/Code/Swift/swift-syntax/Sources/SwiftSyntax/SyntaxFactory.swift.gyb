%{
  from gyb_syntax_support import *
  # -*- mode: Swift -*-
  # Ignore the following admonition it applies to the resulting .swift file only
}%
//// Automatically Generated From SyntaxFactory.swift.gyb.
//// Do Not Edit Directly!
//===------- SyntaxFactory.swift - Syntax Factory implementations ---------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2022 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
//
// This file defines the SyntaxFactory, one of the most important client-facing
// types in lib/Syntax and likely to be very commonly used.
//
// Effectively a namespace, SyntaxFactory is never instantiated, but is *the*
// one-stop shop for making new Syntax nodes. Putting all of these into a
// collection of static methods provides a single point of API lookup for
// clients' convenience.
//
//===----------------------------------------------------------------------===//

public enum SyntaxFactory {
  @available(*, deprecated, message: "Use initializer on TokenSyntax")
  public static func makeToken(_ kind: TokenKind, presence: SourcePresence,
                               leadingTrivia: Trivia = [],
                               trailingTrivia: Trivia = []) -> TokenSyntax {
    let raw = RawSyntax.makeMaterializedToken(kind: kind, leadingTrivia: leadingTrivia,
      trailingTrivia: trailingTrivia, presence: presence, arena: .default)
    let data = SyntaxData.forRoot(raw)
    return TokenSyntax(data)
  }

  @available(*, deprecated, message: "Use initializer on UnknownSyntax")
  public static func makeUnknownSyntax(tokens: [TokenSyntax]) -> UnknownSyntax {
    let raw = RawSyntax.makeLayout(kind: .unknown,
      from: tokens.map { $0.raw }, arena: .default)
    let data = SyntaxData.forRoot(raw)
    return UnknownSyntax(data)
  }

/// MARK: Syntax Node Creation APIs

% for node in SYNTAX_NODES:
%   if node.is_base():
%     pass
%   elif node.children:
%     child_params = []
%     for child in node.children:
%       param_type = child.type_name
%       if child.is_optional:
%          param_type = param_type + "?"
%       end
%       if child.is_unexpected_nodes():
%         # It would be nice if we could label all of these arguments 'unexpected'.
%         # But if we do this, we hit https://github.com/apple/swift/issues/60274.
%         child_params.append("_ %s: %s = nil" % (child.swift_name, param_type))
%       else:
%         child_params.append("%s: %s" % (child.swift_name, param_type))
%       end
%     end
%     child_params = ', '.join(child_params)
  @available(*, deprecated, message: "Use initializer on ${node.name}")
  public static func make${node.syntax_kind}(${child_params}) -> ${node.name} {
    let layout: [RawSyntax?] = [
%     for child in node.children:
%       if child.is_optional:
      ${child.swift_name}?.raw,
%       else:
      ${child.swift_name}.raw,
%       end
%     end
    ]
    let raw = RawSyntax.makeLayout(kind: SyntaxKind.${node.swift_syntax_kind},
      from: layout, arena: .default)
    let data = SyntaxData.forRoot(raw)
    return ${node.name}(data)
  }
%   elif node.is_syntax_collection():
  @available(*, deprecated, message: "Use initializer on ${node.name}")
  public static func make${node.syntax_kind}(
    _ elements: [${node.collection_element_type}]) -> ${node.name} {
    let raw = RawSyntax.makeLayout(kind: SyntaxKind.${node.swift_syntax_kind},
      from: elements.map { $0.raw }, arena: .default)
    let data = SyntaxData.forRoot(raw)
    return ${node.name}(data)
  }
%   end

%   if not node.is_base():
%   default_presence = 'missing' if node.is_missing() else 'present'
  @available(*, deprecated, message: "Use initializer on ${node.name}")
  public static func makeBlank${node.syntax_kind}(presence: SourcePresence = .${default_presence}) -> ${node.name} {
    let data = SyntaxData.forRoot(RawSyntax.makeLayout(kind: .${node.swift_syntax_kind},
      from: [
%     for child in node.children:
%       if child.is_optional:
      nil,
%       else:
      ${make_missing_swift_child(child)},
%       end
%     end
    ], arena: .default))
    return ${node.name}(data)
  }
%   end
% end

/// MARK: Token Creation APIs

%{
  def token_trivia(requires_space):
    return '.space' if requires_space else '[]'
}%

% for token in SYNTAX_TOKENS:
%   leading_trivia = token_trivia(token.requires_leading_space)
%   trailing_trivia = token_trivia(token.requires_trailing_space)
%   if token.is_keyword:
  @available(*, deprecated, message: "Use TokenSyntax.${token.swift_kind()}Keyword instead")
  public static func make${token.name}Keyword(
    leadingTrivia: Trivia = ${leading_trivia},
    trailingTrivia: Trivia = ${trailing_trivia}
  ) -> TokenSyntax {
    return makeToken(.${token.swift_kind()}, presence: .present,
                     leadingTrivia: leadingTrivia,
                     trailingTrivia: trailingTrivia)
  }
%   elif token.text:
  @available(*, deprecated, message: "Use TokenSyntax.${token.swift_kind()}Token instead")
  public static func make${token.name}Token(
    leadingTrivia: Trivia = ${leading_trivia},
    trailingTrivia: Trivia = ${trailing_trivia}
  ) -> TokenSyntax {
    return makeToken(.${token.swift_kind()}, presence: .present,
                     leadingTrivia: leadingTrivia,
                     trailingTrivia: trailingTrivia)
  }
%   else:
  @available(*, deprecated, message: "Use TokenSyntax.${token.swift_kind()} instead")
  public static func make${token.name}(
    _ text: String,
    leadingTrivia: Trivia = ${leading_trivia},
    trailingTrivia: Trivia = ${trailing_trivia}
  ) -> TokenSyntax {
    return makeToken(.${token.swift_kind()}(text), presence: .present,
                     leadingTrivia: leadingTrivia,
                     trailingTrivia: trailingTrivia)
  }
%   end
% end

/// MARK: Convenience APIs

  @available(*, deprecated, message: "Use initializer on TupleTypeSyntax")
  public static func makeVoidTupleType() -> TupleTypeSyntax {
    return makeTupleType(leftParen: makeLeftParenToken(),
                         elements: makeBlankTupleTypeElementList(),
                         rightParen: makeRightParenToken())
  }

  @available(*, deprecated, message: "Use initializer on TupleTypeSyntax")
  public static func makeTupleTypeElement(name: TokenSyntax?,
    colon: TokenSyntax?, type: TypeSyntax,
    trailingComma: TokenSyntax?) -> TupleTypeElementSyntax {
    return makeTupleTypeElement(inOut: nil, name: name, secondName: nil,
                                colon: colon, type: type, ellipsis: nil,
                                initializer: nil, trailingComma: trailingComma)
  }

  @available(*, deprecated, message: "Use initializer on TupleTypeSyntax")
  public static func makeTupleTypeElement(type: TypeSyntax,
    trailingComma: TokenSyntax?) -> TupleTypeElementSyntax  {
    return makeTupleTypeElement(name: nil, colon: nil, 
                                type: type, trailingComma: trailingComma)
  }

  @available(*, deprecated, message: "Use initializer on GenericParameterSyntax")
  public static func makeGenericParameter(name: TokenSyntax,
      trailingComma: TokenSyntax) -> GenericParameterSyntax {
    return makeGenericParameter(attributes: nil, name: name, colon: nil,
                                inheritedType: nil,
                                trailingComma: trailingComma)
  }

  @available(*, deprecated, message: "Use initializer on SimpleTypeIdentifierSyntax")
  public static func makeTypeIdentifier(_ name: String,
    leadingTrivia: Trivia = [],
    trailingTrivia: Trivia = []) -> TypeSyntax {
    let identifier = makeIdentifier(name, leadingTrivia: leadingTrivia, 
                                    trailingTrivia: trailingTrivia)
    let typeIdentifier = makeSimpleTypeIdentifier(name: identifier,
                                                  genericArgumentClause: nil)
    return TypeSyntax(typeIdentifier)
  }

  @available(*, deprecated, message: "Use initializer on SimpleTypeIdentifierSyntax")
  public static func makeAnyTypeIdentifier(leadingTrivia: Trivia = [],
    trailingTrivia: Trivia = []) -> TypeSyntax {
    return makeTypeIdentifier("Any", leadingTrivia: leadingTrivia, 
                              trailingTrivia: trailingTrivia)
  }

  @available(*, deprecated, message: "Use initializer on SimpleTypeIdentifierSyntax")
  public static func makeSelfTypeIdentifier(leadingTrivia: Trivia = [],
    trailingTrivia: Trivia = []) -> TypeSyntax {
    return makeTypeIdentifier("Self", leadingTrivia: leadingTrivia, 
                              trailingTrivia: trailingTrivia)
  }

  @available(*, deprecated, message: "Use initializer on SimpleTypeIdentifierSyntax")
  public static func makeTypeToken(leadingTrivia: Trivia = [],
    trailingTrivia: Trivia = []) -> TokenSyntax {
    return makeIdentifier("Type", leadingTrivia: leadingTrivia, 
                          trailingTrivia: trailingTrivia)
  }

  @available(*, deprecated, message: "Use TokenSyntax.protocol")
  public static func makeProtocolToken(leadingTrivia: Trivia = [],
    trailingTrivia: Trivia = []) -> TokenSyntax {
    return makeIdentifier("Protocol", leadingTrivia: leadingTrivia,
                          trailingTrivia: trailingTrivia)
  }

  @available(*, deprecated, message: "Use TokenSyntax.spacedBinaryOperator")
  public static func makeBinaryOperator(_ name: String,
    leadingTrivia: Trivia = [],
    trailingTrivia: Trivia = []) -> TokenSyntax {
    return makeToken(.spacedBinaryOperator(name),
                     presence: .present,
                     leadingTrivia: leadingTrivia,
                     trailingTrivia: trailingTrivia)
  }

  @available(*, deprecated, message: "Use initializer on StringLiteralExprSyntax")
  public static func makeStringLiteralExpr(_ text: String,
    leadingTrivia: Trivia = [],
    trailingTrivia: Trivia = []) -> StringLiteralExprSyntax {
    let string = makeStringSegment(text)
    let segment = makeStringSegment(content: string)
    let segments = makeStringLiteralSegments([Syntax(segment)])
    let openQuote = makeStringQuoteToken(leadingTrivia: leadingTrivia)
    let closeQuote = makeStringQuoteToken(trailingTrivia: trailingTrivia)
    return makeStringLiteralExpr(openDelimiter: nil,
                                 openQuote: openQuote,
                                 segments: segments,
                                 closeQuote: closeQuote,
                                 closeDelimiter: nil)
  }

  @available(*, deprecated, message: "Use initializer on IdentifierExprSyntax")
  public static func makeVariableExpr(_ text: String,
    leadingTrivia: Trivia = [],
    trailingTrivia: Trivia = []) -> IdentifierExprSyntax {
    let string = makeIdentifier(text,
      leadingTrivia: leadingTrivia, trailingTrivia: trailingTrivia)
    return makeIdentifierExpr(identifier: string,
                              declNameArguments: nil)
  }
}
