%{
  # -*- mode: Swift -*-
  from gyb_syntax_support import *
  from gyb_syntax_support.Traits import TRAITS
  NODE_MAP = create_node_map()
  # Ignore the following admonition it applies to the resulting .swift file only
}%
//// Automatically Generated From SyntaxNodes.swift.gyb.
//// Do Not Edit Directly!
//===---------- SyntaxBaseNodes.swift - Syntax Node definitions -----------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2022 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

% for node in SYNTAX_NODES:
%   base_type = node.base_type
%   if node.is_base():
// MARK: - ${node.name}

/// Protocol to which all `${node.name}` nodes conform. Extension point to add
/// common methods to all `${node.name}` nodes.
/// DO NOT CONFORM TO THIS PROTOCOL YOURSELF!
public protocol ${node.name}Protocol: ${base_type}Protocol {}

public extension Syntax {
  /// Check whether the non-type erased version of this syntax node conforms to 
  /// ${node.name}Protocol. 
  /// Note that this will incur an existential conversion.
  func isProtocol(_: ${node.name}Protocol.Protocol) -> Bool {
    return self.asProtocol(${node.name}Protocol.self) != nil
  }

  /// Return the non-type erased version of this syntax node if it conforms to 
  /// ${node.name}Protocol. Otherwise return nil.
  /// Note that this will incur an existential conversion.
  func asProtocol(_: ${node.name}Protocol.Protocol) -> ${node.name}Protocol? {
    return self.asProtocol(SyntaxProtocol.self) as? ${node.name}Protocol
  }
}

%     for line in dedented_lines(node.description):
/// ${line}
%     end
public struct ${node.name}: ${node.name}Protocol, SyntaxHashable {
  public let _syntaxNode: Syntax

  /// Create a `${node.name}` node from a specialized syntax node.
  public init<S: ${node.name}Protocol>(_ syntax: S) {
    // We know this cast is going to succeed. Go through init(_: SyntaxData)
    // to do a sanity check and verify the kind matches in debug builds and get
    // maximum performance in release builds.
    self.init(syntax._syntaxNode.data)
  }

  /// Create a `${node.name}` node from a specialized optional syntax node.
  public init?<S: ${node.name}Protocol>(_ syntax: S?) {
    guard let syntax = syntax else { return nil }
    self.init(syntax)
  }

  /// Converts the given `Syntax` node to a `${node.name}` if possible. Returns
  /// `nil` if the conversion is not possible.
  public init?(_ syntax: Syntax) {
    switch syntax.raw.kind {
%     castable_kinds = ['.' + child_node.swift_syntax_kind for child_node \
%                       in SYNTAX_NODES \
%                       if child_node.base_kind == node.syntax_kind]
    case ${', '.join(castable_kinds)}:
      self._syntaxNode = syntax
    default:
      return nil
    }
  }

  /// Creates a `${node.name}` node from the given `SyntaxData`. This assumes
  /// that the `SyntaxData` is of the correct kind. If it is not, the behaviour
  /// is undefined.
  internal init(_ data: SyntaxData) {
    // Assert that the kind of the given data matches in debug builds.
#if DEBUG
    switch data.raw.kind {
%     castable_kinds = ['.' + child_node.swift_syntax_kind for child_node \
%                       in SYNTAX_NODES \
%                       if child_node.base_kind == node.syntax_kind]
    case ${', '.join(castable_kinds)}:
      break
    default:
      fatalError("Unable to create ${node.name} from \(data.raw.kind)")
    }
#endif

    self._syntaxNode = Syntax(data)
  }

  public func `is`<S: ${node.name}Protocol>(_ syntaxType: S.Type) -> Bool {
    return self.as(syntaxType) != nil
  }

  public func `as`<S: ${node.name}Protocol>(_ syntaxType: S.Type) -> S? {
    return S.init(_syntaxNode)
  }

  /// Syntax nodes always conform to `${node.name}Protocol`. This API is just
  /// added for consistency.
  /// Note that this will incur an existential conversion.
  @available(*, deprecated, message: "Expression always evaluates to true")
  public func isProtocol(_: ${node.name}Protocol.Protocol) -> Bool {
    return true
  }

  /// Return the non-type erased version of this syntax node.
  /// Note that this will incur an existential conversion.
  public func asProtocol(_: ${node.name}Protocol.Protocol) -> ${node.name}Protocol {
    return Syntax(self).asProtocol(${node.name}Protocol.self)!
  }

  public func childNameForDiagnostics(_ index: SyntaxChildrenIndex) -> String? {
    return Syntax(self).childNameForDiagnostics(index)
  }
}

extension ${node.name}: CustomReflectable {
  /// Reconstructs the real syntax type for this type from the node's kind and
  /// provides a mirror that reflects this type.
  public var customMirror: Mirror {
    return Mirror(reflecting: Syntax(self).asProtocol(SyntaxProtocol.self))
  }
}

%   end
% end
