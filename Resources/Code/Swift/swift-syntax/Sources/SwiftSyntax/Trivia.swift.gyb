%{
  # -*- mode: Swift -*-
  from gyb_syntax_support.Trivia import TRIVIAS
  # Ignore the following admonition it applies to the resulting .swift file only
}%
//// Automatically Generated From Trivia.swift.gyb.
//// Do Not Edit Directly!
//===------------------- Trivia.swift - Source Trivia Enum ----------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2022 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

public enum TriviaPosition {
  case leading
  case trailing
}

/// A contiguous stretch of a single kind of trivia. The constituent part of
/// a `Trivia` collection.
///
/// For example, four spaces would be represented by
/// `.spaces(4)`
///
/// In general, you should deal with the actual Trivia collection instead
/// of individual pieces whenever possible.
public enum TriviaPiece {
% for trivia in TRIVIAS:
    /// ${trivia.comment}
%   if trivia.is_collection():
    case ${trivia.lower_name}s(Int)
%   else:
    case ${trivia.lower_name}(String)
%   end
% end
}

extension TriviaPiece: TextOutputStreamable {
  /// Prints the provided trivia as they would be written in a source file.
  ///
  /// - Parameter stream: The stream to which to print the trivia.
  public func write<Target>(to target: inout Target)
    where Target: TextOutputStream {
    func printRepeated(_ character: String, count: Int) {
      for _ in 0..<count { target.write(character) }
    }
    switch self {
% for trivia in TRIVIAS:
%   if trivia.is_collection():
%   joined = ''.join(trivia.swift_characters)
    case let .${trivia.lower_name}s(count):
      printRepeated("${joined}", count: count)
%   else:
    case let .${trivia.lower_name}(text):
      target.write(text)
%   end
% end
    }
  }
}

extension TriviaPiece: CustomDebugStringConvertible {
  /// Returns a description used by dump.
  public var debugDescription: String {
    switch self {
% for trivia in TRIVIAS:
%   if trivia.is_collection():
    case .${trivia.lower_name}s(let data):
      return "${trivia.lower_name}s(\(data))"
%   else:
    case .${trivia.lower_name}(let name):
      return "${trivia.lower_name}(\(name.debugDescription))"
%   end
% end
    }
  }
}

extension TriviaPiece {
  /// Returns true if the trivia is `.newlines`, `.carriageReturns` or `.carriageReturnLineFeeds`
  public var isNewline: Bool {
    switch self {
    case .newlines,
         .carriageReturns,
         .carriageReturnLineFeeds:
      return true
    default:
      return false
    }
  }
}

/// A collection of leading or trailing trivia. This is the main data structure
/// for thinking about trivia.
public struct Trivia {
  public let pieces: [TriviaPiece]

  /// Creates Trivia with the provided underlying pieces.
  public init(pieces: [TriviaPiece]) {
    self.pieces = pieces
  }

  /// Creates Trivia with no pieces.
  public static var zero: Trivia {
    return Trivia(pieces: [])
  }

  /// Whether the Trivia contains no pieces.
  public var isEmpty: Bool {
    pieces.isEmpty
  }

  /// Creates a new `Trivia` by appending the provided `TriviaPiece` to the end.
  public func appending(_ piece: TriviaPiece) -> Trivia {
    var copy = pieces
    copy.append(piece)
    return Trivia(pieces: copy)
  }

  public var sourceLength: SourceLength {
    return pieces.map({ $0.sourceLength }).reduce(.zero, +)
  }

  /// Get the byteSize of this trivia
  public var byteSize: Int {
    return sourceLength.utf8Length
  }
% for trivia in TRIVIAS:

%   if trivia.is_collection():
%   joined = ''.join(trivia.swift_characters)
  /// Returns a piece of trivia for some number of '${joined}' characters.
  public static func ${trivia.lower_name}s(_ count: Int) -> Trivia {
    return [.${trivia.lower_name}s(count)]
  }

  /// Gets a piece of trivia for '${joined}' characters.
  public static var ${trivia.lower_name}: Trivia {
    return .${trivia.lower_name}s(1)
  }
%   else:
  /// Returns a piece of trivia for ${trivia.name}.
  public static func ${trivia.lower_name}(_ text: String) -> Trivia {
    return [.${trivia.lower_name}(text)]
  }
%   end
% end
}

extension Trivia: CustomDebugStringConvertible {
   public var debugDescription: String {
     if count == 1, let first = first {
       return first.debugDescription
     }
     return "[" + map(\.debugDescription).joined(separator: ", ") + "]"
   }
 }

extension Trivia: Equatable {}

/// Conformance for Trivia to the Collection protocol.
extension Trivia: Collection {
  public var startIndex: Int {
    return pieces.startIndex
  }

  public var endIndex: Int {
    return pieces.endIndex
  }

  public func index(after i: Int) -> Int {
    return pieces.index(after: i)
  }

  public subscript(_ index: Int) -> TriviaPiece {
    return pieces[index]
  }
}

extension Trivia: ExpressibleByArrayLiteral {
  /// Creates Trivia from the provided pieces.
  public init(arrayLiteral elements: TriviaPiece...) {
    self.pieces = elements
  }
}

extension Trivia: TextOutputStreamable {
  /// Prints the provided trivia as they would be written in a source file.
  ///
  /// - Parameter stream: The stream to which to print the trivia.
  public func write<Target>(to target: inout Target)
    where Target: TextOutputStream {
      for piece in pieces {
        piece.write(to: &target)
      }
  }
}

extension Trivia: CustomStringConvertible {
  public var description: String {
    var description = ""
    self.write(to: &description)
    return description
  }
}

extension Trivia {
  /// Concatenates two collections of `Trivia` into one collection.
  public static func +(lhs: Trivia, rhs: Trivia) -> Trivia {
    return Trivia(pieces: lhs.pieces + rhs.pieces)
  }

  /// Concatenates two collections of `Trivia` into the left-hand side.
  public static func +=(lhs: inout Trivia, rhs: Trivia) {
    lhs = lhs + rhs
  }
}

extension TriviaPiece: Equatable {}

extension TriviaPiece {
  public var sourceLength: SourceLength {
    switch self {
% for trivia in TRIVIAS:
%   if trivia.is_new_line:
    case let .${trivia.lower_name}s(count):
      return SourceLength(utf8Length: count * ${trivia.characters_len()})
%   elif trivia.is_collection():
    case let .${trivia.lower_name}s(count):
      return SourceLength(utf8Length: count)
%   else:
    case let .${trivia.lower_name}(text):
      return SourceLength(of: text)
%   end
% end
    }
  }
}

/// Trivia piece for token RawSyntax.
///
/// In contrast to `TriviaPiece`, a `RawTriviaPiece` does not own the source
/// text of a the trivia.
@_spi(RawSyntax)
public enum RawTriviaPiece: Equatable {
% for trivia in TRIVIAS:
%   if trivia.is_collection():
  case ${trivia.lower_name}s(Int)
%   else:
  case ${trivia.lower_name}(SyntaxText)
%   end
% end

  static func make(_ piece: TriviaPiece, arena: SyntaxArena) -> RawTriviaPiece {
    switch piece {
% for trivia in TRIVIAS:
%   if trivia.is_collection():
    case let .${trivia.lower_name}s(count): return .${trivia.lower_name}s(count)
%   else:
    case let .${trivia.lower_name}(text): return .${trivia.lower_name}(arena.intern(text))
%   end
% end
    }
  }
}

extension RawTriviaPiece: TextOutputStreamable {
  public func write<Target: TextOutputStream>(to target: inout Target) {
    TriviaPiece(raw: self).write(to: &target)
  }
}
extension RawTriviaPiece: CustomDebugStringConvertible {
  public var debugDescription: String {
    TriviaPiece(raw: self).debugDescription
  }
}

extension TriviaPiece {
  init(raw: RawTriviaPiece) {
    switch raw {
% for trivia in TRIVIAS:
%   if trivia.is_collection():
    case let .${trivia.lower_name}s(count): self = .${trivia.lower_name}s(count)
%   else:
    case let .${trivia.lower_name}(text): self = .${trivia.lower_name}(String(syntaxText: text))
%   end
% end
    }
  }
}

extension RawTriviaPiece {
  public var byteLength: Int {
    switch self {
% for trivia in TRIVIAS:
%   if trivia.is_new_line:
    case let .${trivia.lower_name}s(count):
      return count * ${trivia.characters_len()}
%   elif trivia.is_collection():
    case let .${trivia.lower_name}s(count):
      return count
%   else:
    case let .${trivia.lower_name}(text):
      return text.count
%   end
% end
    }
  }

  var storedText: SyntaxText? {
    switch self {
% for trivia in TRIVIAS:
%   if trivia.is_collection():
    case .${trivia.lower_name}s(_): return nil
%   else:
    case .${trivia.lower_name}(let text): return text
%   end
% end
    }
  }
}

extension RawTriviaPiece {
  /// Returns true if the trivia is `.newlines`, `.carriageReturns` or `.carriageReturnLineFeeds`
  public var isNewline: Bool {
    switch self {
    case .newlines,
         .carriageReturns,
         .carriageReturnLineFeeds:
      return true
    default:
      return false
    }
  }
}
