%{
  from gyb_syntax_support import *
  from gyb_syntax_support.kinds import SYNTAX_BASE_KINDS
  # -*- mode: Swift -*-
  # Ignore the following admonition; it applies to the resulting .swift file only
}%
//// Automatically Generated From SyntaxKind.swift.gyb.
//// Do Not Edit Directly!
//===--------------- SyntaxKind.swift - Syntax Kind definitions -----------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2022 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

/// Enumerates the known kinds of Syntax represented in the Syntax tree.
@_spi(RawSyntax)
public enum SyntaxKind {
  case token
  case unknown
% for node in NON_BASE_SYNTAX_NODES:
  case ${node.swift_syntax_kind}
% end

  public var isSyntaxCollection: Bool {
    switch self {
% for node in SYNTAX_NODES:
%   if node.base_kind == "SyntaxCollection":
    case .${node.swift_syntax_kind}: return true
%   end
% end
    case .unknown: return true
    default: return false
    }
  }

  public var isUnknown: Bool {
    switch self {
% for name in SYNTAX_BASE_KINDS:
%   if name not in ["Syntax", "SyntaxCollection"]:
    case .unknown${name}: return true
%   end
% end
    case .unknown: return true
    default: return false
    }
  }

  public var isMissing: Bool {
    switch self {
% for name in SYNTAX_BASE_KINDS:
%   if name not in ["Syntax", "SyntaxCollection"]:
    case .missing${name}: return true
%   end
% end
    case .missing: return true
    default: return false
    }
  }
}
