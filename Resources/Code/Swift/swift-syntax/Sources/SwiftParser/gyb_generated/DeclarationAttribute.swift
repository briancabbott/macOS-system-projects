//// Automatically Generated From DeclarationAttribute.swift.gyb.
//// Do Not Edit Directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2022 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

@_spi(RawSyntax) import SwiftSyntax

extension Parser {
  enum DeclarationAttribute: SyntaxText, ContextualKeywords {
    case _silgen_name = "_silgen_name"
    case available = "available"
    case objc = "objc"
    case dynamicCallable = "dynamicCallable"
    case main = "main"
    case _exported = "_exported"
    case dynamicMemberLookup = "dynamicMemberLookup"
    case NSCopying = "NSCopying"
    case IBAction = "IBAction"
    case IBDesignable = "IBDesignable"
    case IBInspectable = "IBInspectable"
    case IBOutlet = "IBOutlet"
    case NSManaged = "NSManaged"
    case LLDBDebuggerFunction = "LLDBDebuggerFunction"
    case UIApplicationMain = "UIApplicationMain"
    case unsafe_no_objc_tagged_pointer = "unsafe_no_objc_tagged_pointer"
    case inline = "inline"
    case _semantics = "_semantics"
    case _transparent = "_transparent"
    case requires_stored_property_inits = "requires_stored_property_inits"
    case nonobjc = "nonobjc"
    case _fixed_layout = "_fixed_layout"
    case inlinable = "inlinable"
    case _specialize = "_specialize"
    case objcMembers = "objcMembers"
    case _compilerInitialized = "_compilerInitialized"
    case _hasStorage = "_hasStorage"
    case __raw_doc_comment = "__raw_doc_comment"
    case _effects = "_effects"
    case __objc_bridged = "__objc_bridged"
    case NSApplicationMain = "NSApplicationMain"
    case _objc_non_lazy_realization = "_objc_non_lazy_realization"
    case __synthesized_protocol = "__synthesized_protocol"
    case testable = "testable"
    case _alignment = "_alignment"
    case atRethrows = "rethrows"
    case _swift_native_objc_runtime_base = "_swift_native_objc_runtime_base"
    case warn_unqualified_access = "warn_unqualified_access"
    case _show_in_interface = "_show_in_interface"
    case _cdecl = "_cdecl"
    case usableFromInline = "usableFromInline"
    case discardableResult = "discardableResult"
    case GKInspectable = "GKInspectable"
    case _implements = "_implements"
    case _objcRuntimeName = "_objcRuntimeName"
    case _staticInitializeObjCMetadata = "_staticInitializeObjCMetadata"
    case _restatedObjCConformance = "_restatedObjCConformance"
    case _typeSequence = "_typeSequence"
    case _optimize = "_optimize"
    case _clangImporterSynthesizedType = "_clangImporterSynthesizedType"
    case _weakLinked = "_weakLinked"
    case frozen = "frozen"
    case _frozen = "_frozen"
    case _forbidSerializingReference = "_forbidSerializingReference"
    case _hasInitialValue = "_hasInitialValue"
    case _nonoverride = "_nonoverride"
    case _dynamicReplacement = "_dynamicReplacement"
    case _borrowed = "_borrowed"
    case _private = "_private"
    case _alwaysEmitIntoClient = "_alwaysEmitIntoClient"
    case _implementationOnly = "_implementationOnly"
    case _custom = "_custom"
    case propertyWrapper = "propertyWrapper"
    case _disfavoredOverload = "_disfavoredOverload"
    case resultBuilder = "resultBuilder"
    case _projectedValueProperty = "_projectedValueProperty"
    case _nonEphemeral = "_nonEphemeral"
    case differentiable = "differentiable"
    case _hasMissingDesignatedInitializers = "_hasMissingDesignatedInitializers"
    case _inheritsConvenienceInitializers = "_inheritsConvenienceInitializers"
    case _typeEraser = "_typeEraser"
    case IBSegueAction = "IBSegueAction"
    case _originallyDefinedIn = "_originallyDefinedIn"
    case derivative = "derivative"
    case _spi = "_spi"
    case transpose = "transpose"
    case noDerivative = "noDerivative"
    case globalActor = "globalActor"
    case _specializeExtension = "_specializeExtension"
    case Sendable = "Sendable"
    case _marker = "_marker"
    case atReasync = "reasync"
    case _unsafeInheritExecutor = "_unsafeInheritExecutor"
    case _implicitSelfCapture = "_implicitSelfCapture"
    case _inheritActorContext = "_inheritActorContext"
    case _eagerMove = "_eagerMove"
    case _noEagerMove = "_noEagerMove"
    case _assemblyVision = "_assemblyVision"
    case _nonSendable = "_nonSendable"
    case _noImplicitCopy = "_noImplicitCopy"
    case _noLocks = "_noLocks"
    case _noAllocation = "_noAllocation"
    case preconcurrency = "preconcurrency"
    case _unavailableFromAsync = "_unavailableFromAsync"
    case exclusivity = "exclusivity"
    case _backDeploy = "_backDeploy"
    case _moveOnly = "_moveOnly"
    case _alwaysEmitConformanceMetadata = "_alwaysEmitConformanceMetadata"
    case _expose = "_expose"
    case typeWrapper = "typeWrapper"
    case _spiOnly = "_spiOnly"
    case _documentation = "_documentation"
    case typeWrapperIgnored = "typeWrapperIgnored"
    case _noMetadata = "_noMetadata"
    case _spi_available = "_spi_available"
  }
}
