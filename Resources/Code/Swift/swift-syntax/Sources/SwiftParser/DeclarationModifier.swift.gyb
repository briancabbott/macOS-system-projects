%{
  from gyb_syntax_support import *
  from gyb_syntax_support.AttributeKinds import *
  # -*- mode: Swift -*-
  # Ignore the following admonition it applies to the resulting .swift file only
}%
//// Automatically Generated From DeclarationModifier.swift.gyb.
//// Do Not Edit Directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2022 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

@_spi(RawSyntax) import SwiftSyntax

enum DeclarationModifier: SyntaxText, ContextualKeywords, RawTokenKindSubset {
% for attr in DECL_MODIFIER_KINDS:
  case ${attr.swift_name} = "${attr.name}"
% end

  init?(lexeme: Lexer.Lexeme) {
    switch lexeme.tokenKind {
% for attr in DECL_MODIFIER_KINDS:
%   if attr.swift_name.endswith('Keyword'):
    case .${attr.swift_name}: self = .${attr.swift_name}
%   end
% end
    case .identifier: self.init(rawValue: lexeme.tokenText)
    default: return nil
    }
  }

  var rawTokenKind: RawTokenKind {
    switch self {
% for attr in DECL_MODIFIER_KINDS:
%   if attr.swift_name.endswith('Keyword'):
    case .${attr.swift_name}: return .${attr.swift_name}
%   else:
    case .${attr.swift_name}: return .identifier
%   end
% end
    }
  }

  var contextualKeyword: SyntaxText? {
    switch self {
% for attr in DECL_MODIFIER_KINDS:
%   if not attr.swift_name.endswith('Keyword'):
    case .${attr.swift_name}: return "${attr.name}"
%   end
% end
    default: return nil
    }
  }
}
