
//// Automatically Generated by generate-swiftbasicformat
//// Do Not Edit Directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2022 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

import SwiftSyntax
public struct Format {
  public let indentWidth: Int
  private var indents: Int = 0
  public init(indentWidth: Int = 4) {
    self.indentWidth = indentWidth
  }
}
extension Format {
  public var _indented: Self {
    var copy = self
    copy.indents += 1
    return copy
  }
  public var indentTrivia: Trivia {
    indents == 0 ? .zero : .spaces(indents * indentWidth)
  }
  private var indentedNewline: Trivia {
    .newline + indentTrivia
  }
}
extension Format {
  public func format(syntax: CodeBlockItemSyntax) -> CodeBlockItemSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: CodeBlockItemListSyntax) -> CodeBlockItemListSyntax {
    CodeBlockItemListSyntax(syntax.map {
      $0.withLeadingTrivia((indentedNewline + ($0.leadingTrivia ?? [])))
    })
  }
  public func format(syntax: CodeBlockSyntax) -> CodeBlockSyntax {
    var result = syntax.withRightBrace(syntax.rightBrace.withLeadingTrivia(indentedNewline + (syntax.rightBrace.leadingTrivia ?? [])))
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: UnexpectedNodesSyntax) -> UnexpectedNodesSyntax {
    syntax
  }
  public func format(syntax: InOutExprSyntax) -> InOutExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PoundColumnExprSyntax) -> PoundColumnExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: TupleExprElementListSyntax) -> TupleExprElementListSyntax {
    syntax
  }
  public func format(syntax: ArrayElementListSyntax) -> ArrayElementListSyntax {
    syntax
  }
  public func format(syntax: DictionaryElementListSyntax) -> DictionaryElementListSyntax {
    syntax
  }
  public func format(syntax: StringLiteralSegmentsSyntax) -> StringLiteralSegmentsSyntax {
    syntax
  }
  public func format(syntax: TryExprSyntax) -> TryExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: AwaitExprSyntax) -> AwaitExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: MoveExprSyntax) -> MoveExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: DeclNameArgumentSyntax) -> DeclNameArgumentSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: DeclNameArgumentListSyntax) -> DeclNameArgumentListSyntax {
    syntax
  }
  public func format(syntax: DeclNameArgumentsSyntax) -> DeclNameArgumentsSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: IdentifierExprSyntax) -> IdentifierExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: SuperRefExprSyntax) -> SuperRefExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: NilLiteralExprSyntax) -> NilLiteralExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: DiscardAssignmentExprSyntax) -> DiscardAssignmentExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: AssignmentExprSyntax) -> AssignmentExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: SequenceExprSyntax) -> SequenceExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ExprListSyntax) -> ExprListSyntax {
    syntax
  }
  public func format(syntax: PoundLineExprSyntax) -> PoundLineExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PoundFileExprSyntax) -> PoundFileExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PoundFileIDExprSyntax) -> PoundFileIDExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PoundFilePathExprSyntax) -> PoundFilePathExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PoundFunctionExprSyntax) -> PoundFunctionExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PoundDsohandleExprSyntax) -> PoundDsohandleExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: SymbolicReferenceExprSyntax) -> SymbolicReferenceExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PrefixOperatorExprSyntax) -> PrefixOperatorExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: BinaryOperatorExprSyntax) -> BinaryOperatorExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ArrowExprSyntax) -> ArrowExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: InfixOperatorExprSyntax) -> InfixOperatorExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: FloatLiteralExprSyntax) -> FloatLiteralExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: TupleExprSyntax) -> TupleExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ArrayExprSyntax) -> ArrayExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: DictionaryExprSyntax) -> DictionaryExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: TupleExprElementSyntax) -> TupleExprElementSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ArrayElementSyntax) -> ArrayElementSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: DictionaryElementSyntax) -> DictionaryElementSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: IntegerLiteralExprSyntax) -> IntegerLiteralExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: BooleanLiteralExprSyntax) -> BooleanLiteralExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: UnresolvedTernaryExprSyntax) -> UnresolvedTernaryExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: TernaryExprSyntax) -> TernaryExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: MemberAccessExprSyntax) -> MemberAccessExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: UnresolvedIsExprSyntax) -> UnresolvedIsExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: IsExprSyntax) -> IsExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: UnresolvedAsExprSyntax) -> UnresolvedAsExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: AsExprSyntax) -> AsExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: TypeExprSyntax) -> TypeExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ClosureCaptureItemSyntax) -> ClosureCaptureItemSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ClosureCaptureItemListSyntax) -> ClosureCaptureItemListSyntax {
    syntax
  }
  public func format(syntax: ClosureCaptureSignatureSyntax) -> ClosureCaptureSignatureSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ClosureParamSyntax) -> ClosureParamSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ClosureParamListSyntax) -> ClosureParamListSyntax {
    syntax
  }
  public func format(syntax: ClosureSignatureSyntax) -> ClosureSignatureSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ClosureExprSyntax) -> ClosureExprSyntax {
    var result = syntax.withRightBrace(syntax.rightBrace.withLeadingTrivia(indentedNewline + (syntax.rightBrace.leadingTrivia ?? [])))
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: UnresolvedPatternExprSyntax) -> UnresolvedPatternExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: MultipleTrailingClosureElementSyntax) -> MultipleTrailingClosureElementSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: MultipleTrailingClosureElementListSyntax) -> MultipleTrailingClosureElementListSyntax {
    syntax
  }
  public func format(syntax: FunctionCallExprSyntax) -> FunctionCallExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: SubscriptExprSyntax) -> SubscriptExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: OptionalChainingExprSyntax) -> OptionalChainingExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ForcedValueExprSyntax) -> ForcedValueExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PostfixUnaryExprSyntax) -> PostfixUnaryExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: SpecializeExprSyntax) -> SpecializeExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: StringSegmentSyntax) -> StringSegmentSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ExpressionSegmentSyntax) -> ExpressionSegmentSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: StringLiteralExprSyntax) -> StringLiteralExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: RegexLiteralExprSyntax) -> RegexLiteralExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: KeyPathExprSyntax) -> KeyPathExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: KeyPathComponentListSyntax) -> KeyPathComponentListSyntax {
    syntax
  }
  public func format(syntax: KeyPathComponentSyntax) -> KeyPathComponentSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: KeyPathPropertyComponentSyntax) -> KeyPathPropertyComponentSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: KeyPathSubscriptComponentSyntax) -> KeyPathSubscriptComponentSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: KeyPathOptionalComponentSyntax) -> KeyPathOptionalComponentSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: OldKeyPathExprSyntax) -> OldKeyPathExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: KeyPathBaseExprSyntax) -> KeyPathBaseExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ObjcNamePieceSyntax) -> ObjcNamePieceSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ObjcNameSyntax) -> ObjcNameSyntax {
    syntax
  }
  public func format(syntax: ObjcKeyPathExprSyntax) -> ObjcKeyPathExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ObjcSelectorExprSyntax) -> ObjcSelectorExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PostfixIfConfigExprSyntax) -> PostfixIfConfigExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: EditorPlaceholderExprSyntax) -> EditorPlaceholderExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ObjectLiteralExprSyntax) -> ObjectLiteralExprSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: YieldExprListSyntax) -> YieldExprListSyntax {
    syntax
  }
  public func format(syntax: YieldExprListElementSyntax) -> YieldExprListElementSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: TypeInitializerClauseSyntax) -> TypeInitializerClauseSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: TypealiasDeclSyntax) -> TypealiasDeclSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: AssociatedtypeDeclSyntax) -> AssociatedtypeDeclSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: FunctionParameterListSyntax) -> FunctionParameterListSyntax {
    syntax
  }
  public func format(syntax: ParameterClauseSyntax) -> ParameterClauseSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ReturnClauseSyntax) -> ReturnClauseSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: FunctionSignatureSyntax) -> FunctionSignatureSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: IfConfigClauseSyntax) -> IfConfigClauseSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: IfConfigClauseListSyntax) -> IfConfigClauseListSyntax {
    syntax
  }
  public func format(syntax: IfConfigDeclSyntax) -> IfConfigDeclSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PoundErrorDeclSyntax) -> PoundErrorDeclSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PoundWarningDeclSyntax) -> PoundWarningDeclSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PoundSourceLocationSyntax) -> PoundSourceLocationSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PoundSourceLocationArgsSyntax) -> PoundSourceLocationArgsSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: DeclModifierDetailSyntax) -> DeclModifierDetailSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: DeclModifierSyntax) -> DeclModifierSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: InheritedTypeSyntax) -> InheritedTypeSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: InheritedTypeListSyntax) -> InheritedTypeListSyntax {
    syntax
  }
  public func format(syntax: TypeInheritanceClauseSyntax) -> TypeInheritanceClauseSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ClassDeclSyntax) -> ClassDeclSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ActorDeclSyntax) -> ActorDeclSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: StructDeclSyntax) -> StructDeclSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ProtocolDeclSyntax) -> ProtocolDeclSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ExtensionDeclSyntax) -> ExtensionDeclSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: MemberDeclBlockSyntax) -> MemberDeclBlockSyntax {
    var result = syntax.withRightBrace(syntax.rightBrace.withLeadingTrivia(indentedNewline + (syntax.rightBrace.leadingTrivia ?? [])))
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: MemberDeclListSyntax) -> MemberDeclListSyntax {
    MemberDeclListSyntax(syntax.map {
      $0.withLeadingTrivia((indentedNewline + ($0.leadingTrivia ?? [])))
    })
  }
  public func format(syntax: MemberDeclListItemSyntax) -> MemberDeclListItemSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: SourceFileSyntax) -> SourceFileSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: InitializerClauseSyntax) -> InitializerClauseSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: FunctionParameterSyntax) -> FunctionParameterSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ModifierListSyntax) -> ModifierListSyntax {
    syntax
  }
  public func format(syntax: FunctionDeclSyntax) -> FunctionDeclSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: InitializerDeclSyntax) -> InitializerDeclSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: DeinitializerDeclSyntax) -> DeinitializerDeclSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: SubscriptDeclSyntax) -> SubscriptDeclSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: AccessLevelModifierSyntax) -> AccessLevelModifierSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: AccessPathComponentSyntax) -> AccessPathComponentSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: AccessPathSyntax) -> AccessPathSyntax {
    syntax
  }
  public func format(syntax: ImportDeclSyntax) -> ImportDeclSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: AccessorParameterSyntax) -> AccessorParameterSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: AccessorDeclSyntax) -> AccessorDeclSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: AccessorListSyntax) -> AccessorListSyntax {
    syntax
  }
  public func format(syntax: AccessorBlockSyntax) -> AccessorBlockSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PatternBindingSyntax) -> PatternBindingSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PatternBindingListSyntax) -> PatternBindingListSyntax {
    syntax
  }
  public func format(syntax: VariableDeclSyntax) -> VariableDeclSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: EnumCaseElementSyntax) -> EnumCaseElementSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: EnumCaseElementListSyntax) -> EnumCaseElementListSyntax {
    syntax
  }
  public func format(syntax: EnumCaseDeclSyntax) -> EnumCaseDeclSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: EnumDeclSyntax) -> EnumDeclSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: OperatorDeclSyntax) -> OperatorDeclSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: DesignatedTypeListSyntax) -> DesignatedTypeListSyntax {
    syntax
  }
  public func format(syntax: DesignatedTypeElementSyntax) -> DesignatedTypeElementSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: OperatorPrecedenceAndTypesSyntax) -> OperatorPrecedenceAndTypesSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PrecedenceGroupDeclSyntax) -> PrecedenceGroupDeclSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PrecedenceGroupAttributeListSyntax) -> PrecedenceGroupAttributeListSyntax {
    syntax
  }
  public func format(syntax: PrecedenceGroupRelationSyntax) -> PrecedenceGroupRelationSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PrecedenceGroupNameListSyntax) -> PrecedenceGroupNameListSyntax {
    syntax
  }
  public func format(syntax: PrecedenceGroupNameElementSyntax) -> PrecedenceGroupNameElementSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PrecedenceGroupAssignmentSyntax) -> PrecedenceGroupAssignmentSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PrecedenceGroupAssociativitySyntax) -> PrecedenceGroupAssociativitySyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: TokenListSyntax) -> TokenListSyntax {
    syntax
  }
  public func format(syntax: NonEmptyTokenListSyntax) -> NonEmptyTokenListSyntax {
    syntax
  }
  public func format(syntax: CustomAttributeSyntax) -> CustomAttributeSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: AttributeSyntax) -> AttributeSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: AttributeListSyntax) -> AttributeListSyntax {
    syntax
  }
  public func format(syntax: SpecializeAttributeSpecListSyntax) -> SpecializeAttributeSpecListSyntax {
    syntax
  }
  public func format(syntax: AvailabilityEntrySyntax) -> AvailabilityEntrySyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: LabeledSpecializeEntrySyntax) -> LabeledSpecializeEntrySyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: TargetFunctionEntrySyntax) -> TargetFunctionEntrySyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: NamedAttributeStringArgumentSyntax) -> NamedAttributeStringArgumentSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: DeclNameSyntax) -> DeclNameSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ImplementsAttributeArgumentsSyntax) -> ImplementsAttributeArgumentsSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ObjCSelectorPieceSyntax) -> ObjCSelectorPieceSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ObjCSelectorSyntax) -> ObjCSelectorSyntax {
    syntax
  }
  public func format(syntax: DifferentiableAttributeArgumentsSyntax) -> DifferentiableAttributeArgumentsSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: DifferentiabilityParamsClauseSyntax) -> DifferentiabilityParamsClauseSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: DifferentiabilityParamsSyntax) -> DifferentiabilityParamsSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: DifferentiabilityParamListSyntax) -> DifferentiabilityParamListSyntax {
    syntax
  }
  public func format(syntax: DifferentiabilityParamSyntax) -> DifferentiabilityParamSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: DerivativeRegistrationAttributeArgumentsSyntax) -> DerivativeRegistrationAttributeArgumentsSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: QualifiedDeclNameSyntax) -> QualifiedDeclNameSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: FunctionDeclNameSyntax) -> FunctionDeclNameSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: BackDeployAttributeSpecListSyntax) -> BackDeployAttributeSpecListSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: BackDeployVersionListSyntax) -> BackDeployVersionListSyntax {
    syntax
  }
  public func format(syntax: BackDeployVersionArgumentSyntax) -> BackDeployVersionArgumentSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: OpaqueReturnTypeOfAttributeArgumentsSyntax) -> OpaqueReturnTypeOfAttributeArgumentsSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ConventionAttributeArgumentsSyntax) -> ConventionAttributeArgumentsSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ConventionWitnessMethodAttributeArgumentsSyntax) -> ConventionWitnessMethodAttributeArgumentsSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: LabeledStmtSyntax) -> LabeledStmtSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ContinueStmtSyntax) -> ContinueStmtSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: WhileStmtSyntax) -> WhileStmtSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: DeferStmtSyntax) -> DeferStmtSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ExpressionStmtSyntax) -> ExpressionStmtSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: SwitchCaseListSyntax) -> SwitchCaseListSyntax {
    SwitchCaseListSyntax(syntax.map {
      $0.withLeadingTrivia((indentedNewline + ($0.leadingTrivia ?? [])))
    })
  }
  public func format(syntax: RepeatWhileStmtSyntax) -> RepeatWhileStmtSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: GuardStmtSyntax) -> GuardStmtSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: WhereClauseSyntax) -> WhereClauseSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ForInStmtSyntax) -> ForInStmtSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: SwitchStmtSyntax) -> SwitchStmtSyntax {
    var result = syntax.withRightBrace(syntax.rightBrace.withLeadingTrivia(indentedNewline + (syntax.rightBrace.leadingTrivia ?? [])))
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: CatchClauseListSyntax) -> CatchClauseListSyntax {
    syntax
  }
  public func format(syntax: DoStmtSyntax) -> DoStmtSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ReturnStmtSyntax) -> ReturnStmtSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: YieldStmtSyntax) -> YieldStmtSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: YieldListSyntax) -> YieldListSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: FallthroughStmtSyntax) -> FallthroughStmtSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: BreakStmtSyntax) -> BreakStmtSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: CaseItemListSyntax) -> CaseItemListSyntax {
    syntax
  }
  public func format(syntax: CatchItemListSyntax) -> CatchItemListSyntax {
    syntax
  }
  public func format(syntax: ConditionElementSyntax) -> ConditionElementSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: AvailabilityConditionSyntax) -> AvailabilityConditionSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: MatchingPatternConditionSyntax) -> MatchingPatternConditionSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: OptionalBindingConditionSyntax) -> OptionalBindingConditionSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: UnavailabilityConditionSyntax) -> UnavailabilityConditionSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: HasSymbolConditionSyntax) -> HasSymbolConditionSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ConditionElementListSyntax) -> ConditionElementListSyntax {
    syntax
  }
  public func format(syntax: DeclarationStmtSyntax) -> DeclarationStmtSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ThrowStmtSyntax) -> ThrowStmtSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: IfStmtSyntax) -> IfStmtSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ElseIfContinuationSyntax) -> ElseIfContinuationSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ElseBlockSyntax) -> ElseBlockSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: SwitchCaseSyntax) -> SwitchCaseSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: SwitchDefaultLabelSyntax) -> SwitchDefaultLabelSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: CaseItemSyntax) -> CaseItemSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: CatchItemSyntax) -> CatchItemSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: SwitchCaseLabelSyntax) -> SwitchCaseLabelSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: CatchClauseSyntax) -> CatchClauseSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PoundAssertStmtSyntax) -> PoundAssertStmtSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: GenericWhereClauseSyntax) -> GenericWhereClauseSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: GenericRequirementListSyntax) -> GenericRequirementListSyntax {
    syntax
  }
  public func format(syntax: GenericRequirementSyntax) -> GenericRequirementSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: SameTypeRequirementSyntax) -> SameTypeRequirementSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: LayoutRequirementSyntax) -> LayoutRequirementSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: GenericParameterListSyntax) -> GenericParameterListSyntax {
    syntax
  }
  public func format(syntax: GenericParameterSyntax) -> GenericParameterSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PrimaryAssociatedTypeListSyntax) -> PrimaryAssociatedTypeListSyntax {
    syntax
  }
  public func format(syntax: PrimaryAssociatedTypeSyntax) -> PrimaryAssociatedTypeSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: GenericParameterClauseSyntax) -> GenericParameterClauseSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ConformanceRequirementSyntax) -> ConformanceRequirementSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PrimaryAssociatedTypeClauseSyntax) -> PrimaryAssociatedTypeClauseSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: SimpleTypeIdentifierSyntax) -> SimpleTypeIdentifierSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: MemberTypeIdentifierSyntax) -> MemberTypeIdentifierSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ClassRestrictionTypeSyntax) -> ClassRestrictionTypeSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ArrayTypeSyntax) -> ArrayTypeSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: DictionaryTypeSyntax) -> DictionaryTypeSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: MetatypeTypeSyntax) -> MetatypeTypeSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: OptionalTypeSyntax) -> OptionalTypeSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ConstrainedSugarTypeSyntax) -> ConstrainedSugarTypeSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ImplicitlyUnwrappedOptionalTypeSyntax) -> ImplicitlyUnwrappedOptionalTypeSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: CompositionTypeElementSyntax) -> CompositionTypeElementSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: CompositionTypeElementListSyntax) -> CompositionTypeElementListSyntax {
    syntax
  }
  public func format(syntax: CompositionTypeSyntax) -> CompositionTypeSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: PackExpansionTypeSyntax) -> PackExpansionTypeSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: TupleTypeElementSyntax) -> TupleTypeElementSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: TupleTypeElementListSyntax) -> TupleTypeElementListSyntax {
    syntax
  }
  public func format(syntax: TupleTypeSyntax) -> TupleTypeSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: FunctionTypeSyntax) -> FunctionTypeSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: AttributedTypeSyntax) -> AttributedTypeSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: GenericArgumentListSyntax) -> GenericArgumentListSyntax {
    syntax
  }
  public func format(syntax: GenericArgumentSyntax) -> GenericArgumentSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: GenericArgumentClauseSyntax) -> GenericArgumentClauseSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: NamedOpaqueReturnTypeSyntax) -> NamedOpaqueReturnTypeSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: TypeAnnotationSyntax) -> TypeAnnotationSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: EnumCasePatternSyntax) -> EnumCasePatternSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: IsTypePatternSyntax) -> IsTypePatternSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: OptionalPatternSyntax) -> OptionalPatternSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: IdentifierPatternSyntax) -> IdentifierPatternSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: AsTypePatternSyntax) -> AsTypePatternSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: TuplePatternSyntax) -> TuplePatternSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: WildcardPatternSyntax) -> WildcardPatternSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: TuplePatternElementSyntax) -> TuplePatternElementSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: ExpressionPatternSyntax) -> ExpressionPatternSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: TuplePatternElementListSyntax) -> TuplePatternElementListSyntax {
    syntax
  }
  public func format(syntax: ValueBindingPatternSyntax) -> ValueBindingPatternSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: AvailabilitySpecListSyntax) -> AvailabilitySpecListSyntax {
    syntax
  }
  public func format(syntax: AvailabilityArgumentSyntax) -> AvailabilityArgumentSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: AvailabilityLabeledArgumentSyntax) -> AvailabilityLabeledArgumentSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: AvailabilityVersionRestrictionSyntax) -> AvailabilityVersionRestrictionSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: VersionTupleSyntax) -> VersionTupleSyntax {
    var result = syntax
    let leadingTrivia = result.leadingTrivia ?? []
    if !leadingTrivia.isEmpty {
      result = result.withLeadingTrivia(leadingTrivia)
    }
    return result
  }
  public func format(syntax: TokenSyntax) -> TokenSyntax {
    switch syntax.tokenKind {
    case .associatedtypeKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .classKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .deinitKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .enumKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .extensionKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .funcKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .importKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .initKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .inoutKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .letKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .operatorKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .precedencegroupKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .protocolKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .structKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .subscriptKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .typealiasKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .varKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .fileprivateKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .internalKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .privateKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .publicKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .staticKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .deferKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .ifKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .guardKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .doKeyword: 
      return syntax
    case .repeatKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .elseKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .forKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .inKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .whileKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .returnKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .breakKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .continueKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .fallthroughKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .switchKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .caseKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .defaultKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .whereKeyword: 
      return syntax.withLeadingTrivia(.space).withTrailingTrivia(.space)
    case .catchKeyword: 
      return syntax.withLeadingTrivia(.space)
    case .throwKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .asKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .anyKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .falseKeyword: 
      return syntax
    case .isKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .nilKeyword: 
      return syntax
    case .rethrowsKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .superKeyword: 
      return syntax
    case .selfKeyword: 
      return syntax
    case .capitalSelfKeyword: 
      return syntax
    case .trueKeyword: 
      return syntax
    case .tryKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .throwsKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .__file__Keyword: 
      return syntax.withTrailingTrivia(.space)
    case .__line__Keyword: 
      return syntax.withTrailingTrivia(.space)
    case .__column__Keyword: 
      return syntax.withTrailingTrivia(.space)
    case .__function__Keyword: 
      return syntax.withTrailingTrivia(.space)
    case .__dso_handle__Keyword: 
      return syntax.withTrailingTrivia(.space)
    case .wildcardKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .leftParen: 
      return syntax
    case .rightParen: 
      return syntax
    case .leftBrace: 
      return syntax.withLeadingTrivia(.space)
    case .rightBrace: 
      return syntax
    case .leftSquareBracket: 
      return syntax
    case .rightSquareBracket: 
      return syntax
    case .leftAngle: 
      return syntax.withLeadingTrivia(.space).withTrailingTrivia(.space)
    case .rightAngle: 
      return syntax.withLeadingTrivia(.space).withTrailingTrivia(.space)
    case .period: 
      return syntax
    case .prefixPeriod: 
      return syntax
    case .comma: 
      return syntax.withTrailingTrivia(.space)
    case .ellipsis: 
      return syntax
    case .colon: 
      return syntax.withTrailingTrivia(.space)
    case .semicolon: 
      return syntax
    case .equal: 
      return syntax.withLeadingTrivia(.space).withTrailingTrivia(.space)
    case .atSign: 
      return syntax
    case .pound: 
      return syntax
    case .prefixAmpersand: 
      return syntax.withLeadingTrivia(.space).withTrailingTrivia(.space)
    case .arrow: 
      return syntax.withLeadingTrivia(.space).withTrailingTrivia(.space)
    case .backtick: 
      return syntax
    case .backslash: 
      return syntax
    case .exclamationMark: 
      return syntax
    case .postfixQuestionMark: 
      return syntax
    case .infixQuestionMark: 
      return syntax
    case .stringQuote: 
      return syntax
    case .singleQuote: 
      return syntax
    case .multilineStringQuote: 
      return syntax
    case .poundKeyPathKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .poundLineKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .poundSelectorKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .poundFileKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .poundFileIDKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .poundFilePathKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .poundColumnKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .poundFunctionKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .poundDsohandleKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .poundAssertKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .poundSourceLocationKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .poundWarningKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .poundErrorKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .poundIfKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .poundElseKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .poundElseifKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .poundEndifKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .poundAvailableKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .poundUnavailableKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .poundFileLiteralKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .poundImageLiteralKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .poundColorLiteralKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .poundHasSymbolKeyword: 
      return syntax.withTrailingTrivia(.space)
    case .integerLiteral: 
      return syntax
    case .floatingLiteral: 
      return syntax
    case .stringLiteral: 
      return syntax
    case .regexLiteral: 
      return syntax
    case .unknown: 
      return syntax
    case .identifier: 
      return syntax
    case .unspacedBinaryOperator: 
      return syntax
    case .spacedBinaryOperator: 
      return syntax.withLeadingTrivia(.space).withTrailingTrivia(.space)
    case .postfixOperator: 
      return syntax
    case .prefixOperator: 
      return syntax
    case .dollarIdentifier: 
      return syntax
    case .contextualKeyword: 
      return syntax
    case .rawStringDelimiter: 
      return syntax
    case .stringSegment: 
      return syntax
    case .stringInterpolationAnchor: 
      return syntax
    case .yield: 
      return syntax
    case .eof: 
      return syntax
    }
  }
}
