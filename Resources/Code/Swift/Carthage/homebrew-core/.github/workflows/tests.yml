name: GitHub Actions CI
on:
  push:
    branches: master
  pull_request:
env:
  HOMEBREW_DEVELOPER: 1
  HOMEBREW_GITHUB_ACTIONS: 1
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_CHANGE_ARCH_TO_ARM: 1
jobs:
  tap_syntax:
    if: github.repository == 'Homebrew/homebrew-core'
    runs-on: ubuntu-latest
    outputs:
      run-tests: ${{ steps.check-labels.outputs.result }}
      skip-arm-tests: ${{ steps.check-arm-labels.outputs.result }}
    env:
      HOMEBREW_FORCE_HOMEBREW_ON_LINUX: 1
    steps:
    - name: Set up Homebrew
      id: set-up-homebrew
      uses: Homebrew/actions/setup-homebrew@master

    - name: Cache Bundler RubyGems
      uses: actions/cache@v1
      with:
        path: ${{ steps.set-up-homebrew.outputs.gems-path }}
        key: ${{ runner.os }}-rubygems-${{ steps.set-up-homebrew.outputs.gems-hash }}
        restore-keys: ${{ runner.os }}-rubygems-

    - name: Install Bundler RubyGems
      run: brew install-bundler-gems

    - run: brew test-bot --only-tap-syntax

    - name: Check .github/workflows/tests-linux.yml formulae coverage
      run: |
        FILES=$(grep -oE 'Formula/[a-z0-9_\.\-]+' .github/workflows/tests-linux.yml)
        for FILE in $FILES; do
          if [ ! -f "$FILE" ]; then
            echo ".github/workflows/tests-linux.yml is testing a non existing file: $FILE"
            exit 1
          fi
        done

    - name: Check for CI-syntax-only label
      id: check-labels
      uses: actions/github-script@v3
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: { labels: labels } } = await github.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          })
          if (!labels.map(label => label.name).includes('CI-syntax-only')) {
            console.log('No CI-syntax-only label found. Running tests.')
            return true
          }
          console.log('CI-syntax-only label found. Skipping tests.')

    - name: Check for CI-force-arm label
      id: check-arm-labels
      uses: actions/github-script@v3
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: { labels: labels } } = await github.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          })
          if (!labels.map(label => label.name).includes('CI-force-arm')) {
            console.log('No CI-force-arm label found.')
            return true
          }
          console.log('CI-force-arm label found.')

  tests:
    needs: tap_syntax
    if: github.event_name == 'pull_request' && needs.tap_syntax.outputs.run-tests
    strategy:
      matrix:
        version: ['11-arm', '11.0', '10.15', '10.14']
      fail-fast: false
    runs-on: ${{ matrix.version }}
    timeout-minutes: 4320
    env:
      PATH: '/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin'
      HOMEBREW_DEVELOPER: 1
      GITHUB_ACTIONS_HOMEBREW_SELF_HOSTED: 1
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      HOMEBREW_GITHUB_API_TOKEN: ${{secrets.GITHUB_TOKEN}}
    steps:
      - name: Check whether ARM tests will be forced
        if: needs.tap_syntax.outputs.skip-arm-tests
        run: echo 'HOMEBREW_REQUIRE_BOTTLED_ARM=1' >> $GITHUB_ENV
      - name: Force vendored Ruby on Catalina
        if: matrix.version == '10.15'
        run: echo 'HOMEBREW_FORCE_VENDOR_RUBY=1' >> $GITHUB_ENV
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - run: brew test-bot --only-cleanup-before

      - run: brew test-bot --only-setup

      - name: Run brew test-bot --only-formulae
        run: |
          mkdir bottles
          cd bottles
          brew test-bot --only-formulae

      - name: Output brew test-bot --only-formulae failures
        if: always()
        run: |
          cat bottles/steps_output.txt
          rm bottles/steps_output.txt

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: logs (${{ matrix.version }})
          path: bottles/logs

      - name: Delete logs and home
        if: always()
        run: |
          rm -rvf bottles/logs
          rm -rvf bottles/home

      - name: Count bottles
        id: bottles
        if: always()
        run: |
          cd bottles
          count=$(ls *.json | wc -l | xargs echo -n)
          echo "$count bottles"
          echo "::set-output name=count::$count"

      - name: Upload bottles
        if: always() && steps.bottles.outputs.count > 0
        uses: actions/upload-artifact@main
        with:
          name: bottles
          path: bottles

      - run: brew test-bot --only-cleanup-after
        if: always()

      - name: Post Cleanup
        if: always()
        run: rm -rvf bottles
