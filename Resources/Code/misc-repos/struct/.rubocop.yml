AllCops:
  Exclude:
    - 'spec/**/*'
    - 'release_version.rb'
    - 'Rakefile'
    - 'struct.gemspec'

# Try to avoid breaking things onto new lines, as it makes reading the code difficult
Metrics/LineLength:
  Max: 200

Style/Tab:
  Enabled: false

Style/IndentationWidth:
  Width: 1

# The guiding principle of classes is SRP, SRP can't be accurately measured by LoC
Metrics/ClassLength:
  Enabled: false

# Too short methods lead to extraction of single-use methods, which can make the code
# easier to read (by naming things), but can also clutter the class
Metrics/MethodLength:
  CountComments: false  # count full line comments?
  Max: 35

# Mixing the styles looks just silly.
Style/HashSyntax:
  EnforcedStyle: ruby19_no_mixed_keys

# has_key? and has_value? are far more readable than key? and value?
Style/DeprecatedHashMethods:
  Enabled: false

# String#% is by far the least verbose and only object oriented variant.
Style/FormatString:
  EnforcedStyle: percent

Style/CollectionMethods:
  Enabled: true
  PreferredMethods:
    # inject seems more common in the community.
    reduce: "inject"

# Either allow this style or don't. Marking it as safe with parenthesis
# is silly. Let's try to live without them for now.
Style/ParenthesesAroundCondition:
  AllowSafeAssignment: false
Lint/AssignmentInCondition:
  AllowSafeAssignment: false

# A specialized exception class will take one or more arguments and construct the message from it.
# So both variants make sense.
Style/RaiseArgs:
  Enabled: false

# Indenting the chained dots beneath each other is not supported by this cop,
# see https://github.com/bbatsov/rubocop/issues/1633
Style/MultilineOperationIndentation:
  Enabled: false

# Fail is an alias of raise. Avoid aliases, it's more cognitive load for no gain.
# The argument that fail should be used to abort the program is wrong too,
# there's Kernel#abort for that.
Style/SignalException:
  EnforcedStyle: only_raise

# Suppressing exceptions can be perfectly fine, and be it to avoid to
# explicitly type nil into the rescue since that's what you want to return,
# or suppressing LoadError for optional dependencies
Lint/HandleExceptions:
  Enabled: false

Style/SpaceInsideBlockBraces:
  SpaceBeforeBlockParameters: true

# No trailing space differentiates better from the block:
# foo} means hash, foo } means block.
Style/SpaceInsideHashLiteralBraces:
  EnforcedStyle: space

# { ... } for multi-line blocks is okay, follow Weirichs rule instead:
# https://web.archive.org/web/20140221124509/http://onestepback.org/index.cgi/Tech/Ruby/BraceVsDoEnd.rdoc
Style/BlockDelimiters:
  Enabled: false

# do / end blocks should be used for side effects,
# methods that run a block for side effects and have
# a useful return value are rare, assign the return
# value to a local variable for those cases.
Style/MethodCalledOnDoEndBlock:
  Enabled: true

# Enforcing the names of variables? To single letter ones? Just no.
Style/SingleLineBlockParams:
  Enabled: false

# Shadowing outer local variables with block parameters is often useful
# to not reinvent a new name for the same thing, it highlights the relation
# between the outer variable and the parameter. The cases where it's actually
# confusing are rare, and usually bad for other reasons already, for example
# because the method is too long.
Lint/ShadowingOuterLocalVariable:
  Enabled: false

# Check with yard instead.
Style/Documentation:
  Enabled: false

# This is just silly. Calling the argument `other` in all cases makes no sense.
Style/OpMethod:
  Enabled: false

# There are valid cases, for example debugging Cucumber steps,
# also they'll fail CI anyway
Lint/Debugger:
  Enabled: false

# Style preference
Style/MethodDefParentheses:
  Enabled: false

# AbcSize seems broken, it actively punishes you for using Ruby's conventions.
Metrics/AbcSize:
  Enabled: false

# We'll try to reduce this over time
Metrics/CyclomaticComplexity:
  Max: 16

# We'll try to reduce this over time
Metrics/PerceivedComplexity:
  Max: 12

# TODO: To avoid breaking the existing API this is disabled. To be reviewed when the next API revision occurs.
Metrics/ParameterLists:
  Enabled: false

# It's not the 80s anymore. Come on.
Style/TrailingBlankLines:
  Enabled: false

# I don't agree with this one, combining functional map/filter/select's makes
# your intentions much clearer with complex processing logic.
Style/MultilineBlockChain:
  Enabled: false

# Doesn't seem particularly smart, so I'll handle this myself
Style/FileName:
  Enabled: false

# Doesn't seem particularly smart, so I'll handle this myself
Style/MultilineMethodCallIndentation:
  Enabled: false

# Buggy, as it enforces whichever style is not used
Style/RegexpLiteral:
  Enabled: false

# Buggy, as it enforces whichever style is not used
Style/MultilineIfModifier:
  Enabled: false

# We need dynamic dispatch for the DSL
Style/MethodMissing:
  Enabled: false

Performance/RedundantBlockCall:
  Enabled: false