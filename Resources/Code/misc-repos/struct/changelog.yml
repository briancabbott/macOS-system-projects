---
latest: 4.0.1
versions:
  0.1.4:
  - Added parse command to easily see spec parsing output
  - Added support for linking to framework files in your source directory
  - Added support for excluding files based on exclude globs
  - Updated example project spec based on new functionality
  - Updated the struct API to support per-version parsing
  - Added message indicating that the watcher's actually doing something
  - Updated project sample to correct schema & syntax
  - Added class, struct and target generators, target serialisation
  - Added writer for project configurations
  0.1.5:
  - Implemented full spec serialisation - the API can now write full spec files
  - Added public method for project writing, fixed some spec writing bugs
  0.2.0:
  - Added support for migrating Xcode projects to spec files. This only supports a
    handful of scenarios, please see https://git.io/vMKs9 for more details.
  - Fixed a parsing bug with multi-configuration overrides in targets
  0.3.0:
  - Added a new beta Specfile format containing new functionality
  - Added support for subprojects (v1.1.0)
  - Added support for including Objective-C source files (*.m and *.mm) (v1.1.0)
  - Added support for including Core Data models (v1.1.0)
  - Added support for including multiple source directories (v1.1.0)
  - Various bug fixes
  0.3.1:
  - Fixed issue with refresher
  0.4.0:
  - The $base variant is now generated if omitted
  - Issues with parsing variant configuration data have now been resolved
  - Added support for adding local frameworks in the references section to customise
    how they're copied and code signed
  - Added more detailed console output when generating variant projects
  1.0.0:
  - Huge stability improvements to parsers for the 1.0.0 and 1.1.0 spec formats
  - Laid the groundwork for spec 1.2.0
  - Xcodegen is now known as struct, install it with gem install struct!
  1.0.1:
  - Fixes for xcconfig-based projects with no configuration settings
  1.1.0:
  - Spec 1.2.0 is here! Spec 1.2.0 supports including xcconfig files to externally
    manage project and target configuration, and the ability to place run scripts
    before or after your build phases
  - Numerous bug fixes to migration, writing projects, and parsing specs
  1.1.1:
  - Fixed issues with migrating projects that reference missing xcconfig files.
  1.2.0:
  - 'There''s now a new way to define your projects! Check out Specfile, a rich DSL
    for defining your projects in Ruby: https://git.io/vyKuh'
  - Cocoapods support has landed! See https://git.io/vyPOj for details.
  - You can now generate individual projects in a multi-variant project. Just type
    'struct -g my-variant'. Simple!
  - Spec profiles now target the latest deployment targets for iOS - iOS 10.2.
  - You can now define framework targets within a spec file. Additional functionality
    was also added so you can run unit tests on framework targets.
  - Fixed an issue where source files were overridden in the wrong order
  1.2.1:
  - 'There''s now a new way to define your projects! Check out Specfile, a rich DSL
    for defining your projects in Ruby: https://git.io/vyKuh'
  - Cocoapods support has landed! See https://git.io/vyPOj for details.
  - You can now generate individual projects in a multi-variant project. Just type
    'struct -g my-variant'. Simple!
  - Spec profiles now target the latest deployment targets for iOS - iOS 10.2.
  - You can now define framework targets within a spec file. Additional functionality
    was also added so you can run unit tests on framework targets.
  - Fixed an issue where source files were overridden in the wrong order
  - Fixed an issue where certain DSL validation errors would not be visible
  1.3.0:
  - Spec 1.3.0 is here! Support for compile flags on source files has been added,
    along with the ability to link to static libraries on targets. You can now generate
    WatchOS targets too!
  - Spec 1.0.0 is now deprecated and will be removed in a future release. Make sure
    to update your spec files to the latest version!
  - Ruby 2.0.0 is now supported! If you're on the latest macOS you can now install
    struct directly without RVM.
  - Improved file excludes, you can now exclude whole directories instead of just
    files.
  - Improved project naming when generating projects for variants - now no transformation
    is done on project names, so you can name your projects whatever you want.
  - The way you use struct has now changed. '--generate' becomes 'generate'. Run 'struct
    help' for the full list of commands!
  - Fixed issues where passing too few arguments in Specfile declarations would bail
    with unhelpful errors.
  - Removed unhelpful warnings from the 'struct watch' command when using symbolic
    links.
  1.3.1:
  - Spec 1.3.0 is here! Support for compile flags on source files has been added,
    along with the ability to link to static libraries on targets. You can now generate
    WatchOS targets too!
  - Spec 1.0.0 is now deprecated and will be removed in a future release. Make sure
    to update your spec files to the latest version!
  - Ruby 2.0.0 is now supported! If you're on the latest macOS you can now install
    struct directly without RVM.
  - Improved file excludes, you can now exclude whole directories instead of just
    files.
  - Improved project naming when generating projects for variants - now no transformation
    is done on project names, so you can name your projects whatever you want.
  - The way you use struct has now changed. '--generate' becomes 'generate'. Run 'struct
    help' for the full list of commands!
  - Fixed issues where passing too few arguments in Specfile declarations would bail
    with unhelpful errors.
  - Removed unhelpful warnings from the 'struct watch' command when using symbolic
    links.
  - Fixed warnings when parsing source options.
  1.3.2:
  - Fixed an issue where files without extensions were not included in the resource
    build phase of a target.
  2.0.0:
  - 'Spec 2.0.0 is here! Support for defining schemes has been added, along with a
    handful of improvements to make defining your specs much simpler. For more information,
    check out the migration guide: https://git.io/vHemR'
  - Also new in Spec 2.0.0 is the ability to hook into the project generation lifecycle.
    You can now perform actions before a project is generated, and after a project
    is generated, and you're provided metadata to enable performing any pre-post processing
    on your projects. This works in both YAML/JSON and Specfile formats!
  - Spec 1.0.0 has now been removed and is no longer supported. If you're still using
    the 1.0.0 format, you can continue to use Struct 1.3.1.
  - Various internal improvements have been made to ensure that new features are much
    easier to add, without negatively affecting the stability of the software. We've
    raised our code coverage considerably to boot!
  - The Struct API exposed when using Struct as a gem has had an overhaul to make
    working with internal models and project generation methods much simpler.
  - Project migration is now much more capable, you'll notice much less complaining
    from Struct when migrating your existing Xcode projects!
  2.0.1:
  - Various bug fixes to the new Spec 2.0.0 format.
  2.1.0:
  - Spec 2.1.0 is here! This contains a few improvements for defining schemes, as
    well as introducing improved syntax in the Specfile format for declaring project
    configurations.
  - You can now declare project configurations as 'debug' or 'Debug', and 'release'
    or 'Release' without specifying the configuration type! This works across any
    spec version, so there's no migration necessary to benefit from this change. Struct
    will continue to maintain backwards compatibility for specifying the types by
    hand, however feel free to remove this declaration if you're using 'Debug' and
    'Release' in your project configuration.
  2.1.1:
  - Fixed migration issues with Spec 2.0.0 and 2.1.0
  2.2.0:
  - Spec 2.2.0 is here! Support for linking and embedding framework targets to an
    application target within the same project has been added. Also, inputs and outputs
    can now be specified for target scripts, and the analyze phase in a scheme can
    now be defined.
  - tvOS is now supported
  - Shared source files between targets are now supported
  - An issue where the product file extension was not correctly defined for certain
    product types has been fixed
  2.2.1:
  - Added support for overriding target names with the PRODUCT_NAME build setting
  3.0.0:
  - Struct 3.0 is here! There's a few breaking changes in this release to allow Struct
    to move forward with the latest improvements in Xcode, Swift and Ruby.
  - Xcode 9 and Swift 4.0 support has landed! The default Swift version is now 4.0,
    and Struct now includes additional project settings introduced in Xcode 9. All
    of the default deployment targets now target the latest releases of each supported
    platform. Xcode 8 is unsupported as of Struct 3.0.0, however critical bug fixes
    will be released for Struct 2 until the next major Xcode release.
  - Ruby 2.2.0 is now the minimum version of Ruby for Struct, following the existing
    strategy of supporting the latest macOS's pre-installed version of Ruby. As such,
    if you currently use the system Ruby in Sierra, please either upgrade to High
    Sierra, or use RVM to maintain your current Ruby version.
  3.1.0:
  - Fixed a bug which would cause launch actions in a scheme to not be generated when
    an archive action is not also defined in that scheme
  - Fixed nil dereference issues with configuration blocks
  - Added support for .c, .cpp and .cxx source files (thanks @steveholt55!)
  3.1.1:
  - Fixed a bug which caused incorrect generation of projects inside dot-folders
  3.1.2:
  - Fixed a bug which prevented plist files ending in 'Info.plist' from being included
    in projects
  3.2.0:
  - Added support for App Extensions (thanks to raptorxcz for the PR!)
  3.2.1:
  - Fixed a bug that prevented unit tests in subprojects from being run (thanks to
    raptorxcz for the PR!)
  4.0.0:
  - Struct 4.0 is here! There's a few breaking changes in this release to allow Struct
    to move forward with the latest improvements in Xcode, Swift and Ruby.
  - Xcode 11 and Swift 5 support has landed! The default Swift version is now 5.2.
  - All of the default deployment targets now target the latest releases of each supported
    platform.
  - Ruby 2.6.3 is now the minimum version of Ruby for Struct, following the existing
    strategy of supporting the latest macOS's pre-installed version of Ruby. As such,
    if you currently use the system Ruby in El Capitan, please either upgrade to Catalina,
    or use RVM to maintain your current Ruby version.
  - Added support for native watchOS applications
  - Removed support for 1.X.X spec files. Check out the migration guide on the wiki
    to move to a newer spec format.
  - Fixed bugs with CocoaPods integration
  4.0.1:
  - Fixed parsing bugs with the latest spec version
