{"variants":[{"paths":["\/tutorials\/swiftuianimationtutorials\/heartrateanimation"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The dash phase of a path can be used to move dashed strokes along a path. This is called the marching ant effect. In this chapter, you will discover how to create animated marching ant effects in SwiftUI. This animation is similar to the heart rate measuring animation you see on watchOS."}]}],"estimatedTimeInMinutes":15,"title":"Replicating the Heart Rate Measuring animation on watchOS","image":"animationBasics.svg","chapter":"Animating path properties: Dash phase","kind":"hero","backgroundImage":"animationBasics.svg"},{"kind":"tasks","tasks":[{"anchor":"Measuring-Heart-Rate","title":"Measuring Heart Rate","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To follow along with this tutorial, you are required to draw a path using the path tool in SwiftUI. Since drawing paths by hand is a difficult task, you can use a design tool like "},{"type":"reference","isActive":true,"identifier":"https:\/\/kiteapp.co\/"},{"type":"text","text":" to generate a Swift code for you. To learn more about how to create complex shape outlines for SwiftUI, check this "},{"type":"reference","isActive":true,"identifier":"https:\/\/youtu.be\/lelBu8q-XZk"},{"type":"text","text":"."}]}],"mediaPosition":"trailing","media":"heartRate.gif"}],"stepsSection":[{"code":"HeartRateMeasuringAnimation.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initially, you should define a state variable and colors to be used for the icon to be animated. This example has two color literals for adding a gradient on the heart icon."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"@State var measuring = false"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"let blue = Color(#colorLiteral(red: 0, green: 0.3725490196, blue: 1, alpha: 1))"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"let red = Color(#colorLiteral(red: 1, green: 0, blue: 0, alpha: 1))"}]}]}],"type":"step","runtimePreview":null,"media":null},{"code":"HeartRateMeasuringAnimation.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a struct to contain the path you want to animate"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"HeartRateMeasuringAnimation.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the body of “some View”, add an instance of the path (icon). Since the animation starts without human-initiated interaction, you should attach the "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":".onAppear"}]},{"type":"text","text":" to the icon and set the final animation state."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To make the dash (open path) move seamlessly around the heart icon, you should use the easing function "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":".linear"}]}]}],"type":"step","runtimePreview":null,"media":null},{"code":"HeartRateMeasuringAnimation.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the final step, you should add the property to be animated (dash phase). This is a parameter of the stroke modifier. So, add the "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":".stroke"}]},{"type":"text","text":" modifier as the first modifier of the icon. Then, use ternary operation to change it over time. You should use the same process to animate the hue rotation as well."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":".stroke(style: StrokeStyle(lineWidth: 4, lineCap: .round, lineJoin: .round, miterLimit: 0, dash: [150, 15], dashPhase: measuring ? -100 : 100))"}]}]}],"type":"step","runtimePreview":null,"media":null}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/ElementLoading","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"SwiftUI Loading Animation","abstract":[{"type":"text","text":"One of the most common animations you may want to create when learning SwiftUI is how to create a loading animation. In this tutorial, you will do exactly that."}]}],"identifier":{"url":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/HeartRateAnimation","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Replicating the Heart Rate Measuring animation on watchOS","categoryPathComponent":"AnimationTutorialTableofContents","role":"project","category":"SwiftUIAnimationLibraryTutorials"},"hierarchy":{"modules":[{"reference":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/AnimationTutorialTableofContents\/Create-your-first-SwiftUI-animation","projects":[{"reference":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/FirstSwiftUIAnimation","sections":[{"kind":"task","reference":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/FirstSwiftUIAnimation#Animating-rotation"}]}]},{"reference":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/AnimationTutorialTableofContents\/Animating-path-properties:-Stroke-start-and-stroke-end","projects":[{"reference":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/AnimateStrokes","sections":[{"kind":"task","reference":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/AnimateStrokes#How-to-animate-stroke-start-and-stroke-end"}]}]},{"reference":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/AnimationTutorialTableofContents\/Animating-path-properties:-Dash-phase","projects":[{"reference":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/HeartRateAnimation","sections":[{"kind":"task","reference":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/HeartRateAnimation#Measuring-Heart-Rate"}]}]},{"reference":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/AnimationTutorialTableofContents\/How-to-animate-a-scale-transform:-Scale-X","projects":[{"reference":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/ElementLoading","sections":[{"kind":"task","reference":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/ElementLoading#How-to-create-a-loading-animation-in-SwiftUI"}]}]},{"reference":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/AnimationTutorialTableofContents\/How-to-animate-a-scale-transform:-Scale-Y","projects":[{"reference":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/AudioMeteringAnimation","sections":[{"kind":"task","reference":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/AudioMeteringAnimation#How-to-create-an-audio-metering-animation-with-SwiftUI"}]}]},{"reference":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/AnimationTutorialTableofContents\/Replicating-Yahoo-Weather:-Sun-and-Wind-Animations","projects":[{"reference":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/SunAndWindAnimations","sections":[{"kind":"task","reference":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/SunAndWindAnimations#Rotation-and-movement-on-a-circular-path"}]}]},{"reference":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/AnimationTutorialTableofContents\/Replicating-Yahoo-Weather:-Today-s-Weather-Animations","projects":[{"reference":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/WeatherAnimationsTut","sections":[{"kind":"task","reference":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/WeatherAnimationsTut#Animate-from-A-to-B,-then-to-C"}]}]}],"reference":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/AnimationTutorialTableofContents","paths":[["doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/AnimationTutorialTableofContents","doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/AnimationTutorialTableofContents\/$volume","doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/AnimationTutorialTableofContents\/Animating-path-properties:-Dash-phase"]]},"references":{"https://developer.apple.com/documentation/swiftui/shape":{"title":"Shapes","titleInlineContent":[{"type":"text","text":"Shapes"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/shape","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/shape"},"doc://Stream.SwiftUIAnimationTutorials/tutorials/SwiftUIAnimationTutorials/HeartRateAnimation#Measuring-Heart-Rate":{"role":"pseudoSymbol","title":"Measuring Heart Rate","abstract":[{"type":"text","text":"The dash phase of a path can be used to move dashed strokes along a path. This is called the marching ant effect. In this chapter, you will discover how to create animated marching ant effects in SwiftUI. This animation is similar to the heart rate measuring animation you see on watchOS."}],"identifier":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/HeartRateAnimation#Measuring-Heart-Rate","kind":"section","type":"section","url":"\/tutorials\/swiftuianimationtutorials\/heartrateanimation#Measuring-Heart-Rate"},"doc://Stream.SwiftUIAnimationTutorials/tutorials/SwiftUIAnimationTutorials/ElementLoading":{"role":"project","title":"SwiftUI Loading Animation","estimatedTime":"10min","abstract":[{"type":"text","text":"One of the most common animations you may want to create when learning SwiftUI is how to create a loading animation. In this tutorial, you will do exactly that."}],"identifier":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/ElementLoading","kind":"project","type":"topic","url":"\/tutorials\/swiftuianimationtutorials\/elementloading"},"doc://Stream.SwiftUIAnimationTutorials/tutorials/SwiftUIAnimationTutorials/AudioMeteringAnimation#How-to-create-an-audio-metering-animation-with-SwiftUI":{"role":"pseudoSymbol","title":"How to create an audio metering animation with SwiftUI","abstract":[{"type":"text","text":"In SwiftUI, you can animate size properties such as height and width. In this tutorial, you will use animation to change the height of rectangles over time."}],"identifier":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/AudioMeteringAnimation#How-to-create-an-audio-metering-animation-with-SwiftUI","kind":"section","type":"section","url":"\/tutorials\/swiftuianimationtutorials\/audiometeringanimation#How-to-create-an-audio-metering-animation-with-SwiftUI"},"doc://Stream.SwiftUIAnimationTutorials/tutorials/SwiftUIAnimationTutorials/SunAndWindAnimations":{"role":"project","title":"How to create an offset-rotational motion in SwiftUI","estimatedTime":"15min","abstract":[{"type":"text","text":"In this tutorial, you will learn about offset-rotation. A technique that can be used to move objects on a circular path."}],"identifier":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/SunAndWindAnimations","kind":"project","type":"topic","url":"\/tutorials\/swiftuianimationtutorials\/sunandwindanimations"},"HeartRateMeasuringAnimation.swift":{"syntax":"swift","content":["\/\/","\/\/  HeartRateMeasuringAnimation.swift","\/\/","import SwiftUI","","struct HeartRateMeasuringAnimation: View {","    ","    @State var measuring = false","    let blue = Color(#colorLiteral(red: 0, green: 0.3725490196, blue: 1, alpha: 1))","    let red = Color(#colorLiteral(red: 1, green: 0, blue: 0, alpha: 1))","    ","    var body: some View {","        VStack {","            Text(\"Measuring Heart Rate\")","            HeartIcon()","                .stroke(style: StrokeStyle(lineWidth: 4, lineCap: .round, lineJoin: .round, miterLimit: 0, dash: [150, 15], dashPhase: measuring ? -100 : 100))","                .frame(width: 64, height: 64)","                .foregroundStyle(","                        .linearGradient(","                            colors: [blue,red],","                            startPoint: .leading,","                            endPoint: .trailing","                        )","                    )","                .hueRotation(.degrees(measuring ? -150 : 150))","                .onAppear{","                    withAnimation(.linear(duration: 5).delay(-1).repeatForever(autoreverses: false).speed(2.5)) {","                        measuring.toggle()","                    }","            }","        }","    }","}","","struct HeartIcon: Shape {","    func path(in rect: CGRect) -> Path {","        var path = Path()","        let width = rect.size.width","        let height = rect.size.height","        ","        path.move(to: CGPoint(x: 0.49616*width, y: 0.89542*height))","        path.addCurve(to: CGPoint(x: 0.48666*width, y: 0.8901*height), control1: CGPoint(x: 0.49477*width, y: 0.89542*height), control2: CGPoint(x: 0.4916*width, y: 0.89365*height))","        path.addCurve(to: CGPoint(x: 0.33791*width, y: 0.769*height), control1: CGPoint(x: 0.43473*width, y: 0.85308*height), control2: CGPoint(x: 0.38515*width, y: 0.81271*height))","        path.addCurve(to: CGPoint(x: 0.21169*width, y: 0.63198*height), control1: CGPoint(x: 0.29067*width, y: 0.72529*height), control2: CGPoint(x: 0.2486*width, y: 0.67961*height))","        path.addCurve(to: CGPoint(x: 0.12417*width, y: 0.48678*height), control1: CGPoint(x: 0.17478*width, y: 0.58434*height), control2: CGPoint(x: 0.14561*width, y: 0.53594*height))","        path.addCurve(to: CGPoint(x: 0.09202*width, y: 0.3411*height), control1: CGPoint(x: 0.10274*width, y: 0.43762*height), control2: CGPoint(x: 0.09202*width, y: 0.38906*height))","        path.addCurve(to: CGPoint(x: 0.11764*width, y: 0.22099*height), control1: CGPoint(x: 0.09202*width, y: 0.29531*height), control2: CGPoint(x: 0.10056*width, y: 0.25527*height))","        path.addCurve(to: CGPoint(x: 0.18729*width, y: 0.14084*height), control1: CGPoint(x: 0.13472*width, y: 0.18672*height), control2: CGPoint(x: 0.15793*width, y: 0.16*height))","        path.addCurve(to: CGPoint(x: 0.28757*width, y: 0.1121*height), control1: CGPoint(x: 0.21665*width, y: 0.12168*height), control2: CGPoint(x: 0.25008*width, y: 0.1121*height))","        path.addCurve(to: CGPoint(x: 0.36607*width, y: 0.12915*height), control1: CGPoint(x: 0.31787*width, y: 0.1121*height), control2: CGPoint(x: 0.34403*width, y: 0.11778*height))","        path.addCurve(to: CGPoint(x: 0.42233*width, y: 0.17195*height), control1: CGPoint(x: 0.38811*width, y: 0.14052*height), control2: CGPoint(x: 0.40686*width, y: 0.15478*height))","        path.addCurve(to: CGPoint(x: 0.46149*width, y: 0.22335*height), control1: CGPoint(x: 0.43779*width, y: 0.18912*height), control2: CGPoint(x: 0.45085*width, y: 0.20626*height))","        path.addCurve(to: CGPoint(x: 0.47917*width, y: 0.24549*height), control1: CGPoint(x: 0.46816*width, y: 0.2342*height), control2: CGPoint(x: 0.47405*width, y: 0.24158*height))","        path.addCurve(to: CGPoint(x: 0.49616*width, y: 0.25135*height), control1: CGPoint(x: 0.48429*width, y: 0.2494*height), control2: CGPoint(x: 0.48995*width, y: 0.25135*height))","        path.addCurve(to: CGPoint(x: 0.5129*width, y: 0.24524*height), control1: CGPoint(x: 0.5024*width, y: 0.25135*height), control2: CGPoint(x: 0.50798*width, y: 0.24931*height))","        path.addCurve(to: CGPoint(x: 0.53079*width, y: 0.22335*height), control1: CGPoint(x: 0.51781*width, y: 0.24116*height), control2: CGPoint(x: 0.52377*width, y: 0.23387*height))","        path.addCurve(to: CGPoint(x: 0.57099*width, y: 0.1724*height), control1: CGPoint(x: 0.54212*width, y: 0.20656*height), control2: CGPoint(x: 0.55552*width, y: 0.18958*height))","        path.addCurve(to: CGPoint(x: 0.62677*width, y: 0.12937*height), control1: CGPoint(x: 0.58645*width, y: 0.15523*height), control2: CGPoint(x: 0.60504*width, y: 0.14089*height))","        path.addCurve(to: CGPoint(x: 0.70475*width, y: 0.1121*height), control1: CGPoint(x: 0.6485*width, y: 0.11786*height), control2: CGPoint(x: 0.67449*width, y: 0.1121*height))","        path.addCurve(to: CGPoint(x: 0.8053*width, y: 0.14084*height), control1: CGPoint(x: 0.74225*width, y: 0.1121*height), control2: CGPoint(x: 0.77576*width, y: 0.12168*height))","        path.addCurve(to: CGPoint(x: 0.87497*width, y: 0.22099*height), control1: CGPoint(x: 0.83483*width, y: 0.16*height), control2: CGPoint(x: 0.85805*width, y: 0.18672*height))","        path.addCurve(to: CGPoint(x: 0.90035*width, y: 0.3411*height), control1: CGPoint(x: 0.89189*width, y: 0.25527*height), control2: CGPoint(x: 0.90035*width, y: 0.29531*height))","        path.addCurve(to: CGPoint(x: 0.8682*width, y: 0.48678*height), control1: CGPoint(x: 0.90035*width, y: 0.38906*height), control2: CGPoint(x: 0.88964*width, y: 0.43762*height))","        path.addCurve(to: CGPoint(x: 0.78066*width, y: 0.63198*height), control1: CGPoint(x: 0.84676*width, y: 0.53594*height), control2: CGPoint(x: 0.81758*width, y: 0.58434*height))","        path.addCurve(to: CGPoint(x: 0.65442*width, y: 0.769*height), control1: CGPoint(x: 0.74374*width, y: 0.67961*height), control2: CGPoint(x: 0.70165*width, y: 0.72529*height))","        path.addCurve(to: CGPoint(x: 0.50567*width, y: 0.8901*height), control1: CGPoint(x: 0.60718*width, y: 0.81271*height), control2: CGPoint(x: 0.55759*width, y: 0.85308*height))","        path.addCurve(to: CGPoint(x: 0.49616*width, y: 0.89542*height), control1: CGPoint(x: 0.50072*width, y: 0.89365*height), control2: CGPoint(x: 0.49755*width, y: 0.89542*height))","        path.closeSubpath()","        return path","    }","}","","struct HeartRateMeasuringAnimation_Previews: PreviewProvider {","    static var previews: some View {","        HeartRateMeasuringAnimation()","            .preferredColorScheme(.dark)","    }","}"],"fileName":"HeartRateMeasuringAnimation.swift","identifier":"HeartRateMeasuringAnimation.swift","type":"file","fileType":"swift","highlights":[]},"doc://Stream.SwiftUIAnimationTutorials/tutorials/SwiftUIAnimationTutorials/WeatherAnimationsTut":{"role":"project","title":"Creating keyframe-based animations in SwiftUI","estimatedTime":"25min","abstract":[{"type":"text","text":"SwiftUI does not have built-in keyframe animations. In this tutorial, you will learn about how to animate an object to move from one point to another point before it comes to rest at its final destination."}],"identifier":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/WeatherAnimationsTut","kind":"project","type":"topic","url":"\/tutorials\/swiftuianimationtutorials\/weatheranimationstut"},"animationBasics.svg":{"alt":"Animation basics","type":"image","identifier":"animationBasics.svg","variants":[{"url":"\/images\/animationBasics.svg","traits":["1x","light"]}]},"doc://Stream.SwiftUIAnimationTutorials/tutorials/AnimationTutorialTableofContents/Replicating-Yahoo-Weather:-Today-s-Weather-Animations":{"role":"article","title":"Replicating Yahoo Weather: Today’s Weather Animations","abstract":[],"identifier":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/AnimationTutorialTableofContents\/Replicating-Yahoo-Weather:-Today-s-Weather-Animations","kind":"article","type":"topic","url":"\/tutorials\/animationtutorialtableofcontents\/replicating-yahoo-weather:-today-s-weather-animations"},"doc://Stream.SwiftUIAnimationTutorials/tutorials/AnimationTutorialTableofContents/How-to-animate-a-scale-transform:-Scale-Y":{"role":"article","title":"How to animate a scale transform: Scale Y","abstract":[],"identifier":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/AnimationTutorialTableofContents\/How-to-animate-a-scale-transform:-Scale-Y","kind":"article","type":"topic","url":"\/tutorials\/animationtutorialtableofcontents\/how-to-animate-a-scale-transform:-scale-y"},"doc://Stream.SwiftUIAnimationTutorials/tutorials/SwiftUIAnimationTutorials/AnimateStrokes":{"role":"project","title":"Animating path properties: Stroke start and stroke end","estimatedTime":"15min","abstract":[{"type":"text","text":"In this chapter, you will learn how to trim path properties in SwiftUI to create drawing and er"},{"type":"text","text":" "},{"type":"text","text":"asing animations. You cann achieve this using the stroke start or the stroke end properties of a SwiftUI path."}],"identifier":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/AnimateStrokes","kind":"project","type":"topic","url":"\/tutorials\/swiftuianimationtutorials\/animatestrokes"},"doc://Stream.SwiftUIAnimationTutorials/tutorials/SwiftUIAnimationTutorials/FirstSwiftUIAnimation":{"role":"project","title":"Create your first SwiftUI animation","estimatedTime":"10min","abstract":[{"type":"text","text":"The first animation you may want to create is learning to rotate a view with animation. In this chapter, you will learn to build a looping rotational animation using the settings icon. Animation takes place when an object is changed over time. To change views over time in SwiftUI, you need what is called a "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/state"},{"type":"text","text":". This property wrapper will be used to set the initial and end states of the animation."}],"identifier":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/FirstSwiftUIAnimation","kind":"project","type":"topic","url":"\/tutorials\/swiftuianimationtutorials\/firstswiftuianimation"},"doc://Stream.SwiftUIAnimationTutorials/tutorials/AnimationTutorialTableofContents/Animating-path-properties:-Dash-phase":{"role":"article","title":"Animating path properties: Dash phase","abstract":[],"identifier":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/AnimationTutorialTableofContents\/Animating-path-properties:-Dash-phase","kind":"article","type":"topic","url":"\/tutorials\/animationtutorialtableofcontents\/animating-path-properties:-dash-phase"},"doc://Stream.SwiftUIAnimationTutorials/tutorials/AnimationTutorialTableofContents":{"role":"overview","title":"SwiftUIAnimationTutorials","abstract":[{"type":"text","text":"These tutorial guide you through creating several animations in SwiftUI using "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/shape"},{"type":"text","text":", the "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/path"},{"type":"text","text":", and other animation properties as well as techniques. You will learn to animate the outlines and properties of a 2D shape such as width, height, line width, dash, dash phase, stroke start, and stroke end. In addition, the tips, tricks, you learn in this tutorial will get you up and running with animations in SwiftUI in general."}],"identifier":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/AnimationTutorialTableofContents","kind":"overview","type":"topic","url":"\/tutorials\/animationtutorialtableofcontents"},"doc://Stream.SwiftUIAnimationTutorials/tutorials/SwiftUIAnimationTutorials/HeartRateAnimation":{"role":"project","title":"Replicating the Heart Rate Measuring animation on watchOS","estimatedTime":"15min","abstract":[{"type":"text","text":"The dash phase of a path can be used to move dashed strokes along a path. This is called the marching ant effect. In this chapter, you will discover how to create animated marching ant effects in SwiftUI. This animation is similar to the heart rate measuring animation you see on watchOS."}],"identifier":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/HeartRateAnimation","kind":"project","type":"topic","url":"\/tutorials\/swiftuianimationtutorials\/heartrateanimation"},"doc://Stream.SwiftUIAnimationTutorials/tutorials/SwiftUIAnimationTutorials/AudioMeteringAnimation":{"role":"project","title":"Animating Scale Transforms in SwiftUI","estimatedTime":"10min","abstract":[{"type":"text","text":"In SwiftUI, you can animate size properties such as height and width. In this tutorial, you will use animation to change the height of rectangles over time."}],"identifier":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/AudioMeteringAnimation","kind":"project","type":"topic","url":"\/tutorials\/swiftuianimationtutorials\/audiometeringanimation"},"https://developer.apple.com/documentation/swiftui/state":{"title":"state variable","titleInlineContent":[{"type":"text","text":"state variable"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/state","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/state"},"https://developer.apple.com/documentation/swiftui/path":{"title":"Path tool","titleInlineContent":[{"type":"text","text":"Path tool"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/path","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/path"},"https://youtu.be/lelBu8q-XZk":{"title":"video","titleInlineContent":[{"type":"text","text":"video"}],"type":"link","identifier":"https:\/\/youtu.be\/lelBu8q-XZk","url":"https:\/\/youtu.be\/lelBu8q-XZk"},"doc://Stream.SwiftUIAnimationTutorials/tutorials/SwiftUIAnimationTutorials/AnimateStrokes#How-to-animate-stroke-start-and-stroke-end":{"role":"pseudoSymbol","title":"How to animate stroke start and stroke end","abstract":[{"type":"text","text":"In this chapter, you will learn how to trim path properties in SwiftUI to create drawing and er"},{"type":"text","text":" "},{"type":"text","text":"asing animations. You cann achieve this using the stroke start or the stroke end properties of a SwiftUI path."}],"identifier":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/AnimateStrokes#How-to-animate-stroke-start-and-stroke-end","kind":"section","type":"section","url":"\/tutorials\/swiftuianimationtutorials\/animatestrokes#How-to-animate-stroke-start-and-stroke-end"},"https://kiteapp.co/":{"title":"Kite Compositor","titleInlineContent":[{"type":"text","text":"Kite Compositor"}],"type":"link","identifier":"https:\/\/kiteapp.co\/","url":"https:\/\/kiteapp.co\/"},"doc://Stream.SwiftUIAnimationTutorials/tutorials/AnimationTutorialTableofContents/How-to-animate-a-scale-transform:-Scale-X":{"role":"article","title":"How to animate a scale transform: Scale X","abstract":[],"identifier":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/AnimationTutorialTableofContents\/How-to-animate-a-scale-transform:-Scale-X","kind":"article","type":"topic","url":"\/tutorials\/animationtutorialtableofcontents\/how-to-animate-a-scale-transform:-scale-x"},"doc://Stream.SwiftUIAnimationTutorials/tutorials/SwiftUIAnimationTutorials/WeatherAnimationsTut#Animate-from-A-to-B,-then-to-C":{"role":"pseudoSymbol","title":"Animate from A to B, then to C","abstract":[{"type":"text","text":"SwiftUI does not have built-in keyframe animations. In this tutorial, you will learn about how to animate an object to move from one point to another point before it comes to rest at its final destination."}],"identifier":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/WeatherAnimationsTut#Animate-from-A-to-B,-then-to-C","kind":"section","type":"section","url":"\/tutorials\/swiftuianimationtutorials\/weatheranimationstut#Animate-from-A-to-B,-then-to-C"},"doc://Stream.SwiftUIAnimationTutorials/tutorials/SwiftUIAnimationTutorials/FirstSwiftUIAnimation#Animating-rotation":{"role":"pseudoSymbol","title":"Animating rotation","abstract":[{"type":"text","text":"The first animation you may want to create is learning to rotate a view with animation. In this chapter, you will learn to build a looping rotational animation using the settings icon. Animation takes place when an object is changed over time. To change views over time in SwiftUI, you need what is called a "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/state"},{"type":"text","text":". This property wrapper will be used to set the initial and end states of the animation."}],"identifier":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/FirstSwiftUIAnimation#Animating-rotation","kind":"section","type":"section","url":"\/tutorials\/swiftuianimationtutorials\/firstswiftuianimation#Animating-rotation"},"doc://Stream.SwiftUIAnimationTutorials/tutorials/AnimationTutorialTableofContents/Replicating-Yahoo-Weather:-Sun-and-Wind-Animations":{"role":"article","title":"Replicating Yahoo Weather: Sun and Wind Animations","abstract":[],"identifier":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/AnimationTutorialTableofContents\/Replicating-Yahoo-Weather:-Sun-and-Wind-Animations","kind":"article","type":"topic","url":"\/tutorials\/animationtutorialtableofcontents\/replicating-yahoo-weather:-sun-and-wind-animations"},"doc://Stream.SwiftUIAnimationTutorials/tutorials/AnimationTutorialTableofContents/Create-your-first-SwiftUI-animation":{"role":"article","title":"Create your first SwiftUI animation","abstract":[],"identifier":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/AnimationTutorialTableofContents\/Create-your-first-SwiftUI-animation","kind":"article","type":"topic","url":"\/tutorials\/animationtutorialtableofcontents\/create-your-first-swiftui-animation"},"doc://Stream.SwiftUIAnimationTutorials/tutorials/SwiftUIAnimationTutorials/SunAndWindAnimations#Rotation-and-movement-on-a-circular-path":{"role":"pseudoSymbol","title":"Rotation and movement on a circular path","abstract":[{"type":"text","text":"In this tutorial, you will learn about offset-rotation. A technique that can be used to move objects on a circular path."}],"identifier":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/SunAndWindAnimations#Rotation-and-movement-on-a-circular-path","kind":"section","type":"section","url":"\/tutorials\/swiftuianimationtutorials\/sunandwindanimations#Rotation-and-movement-on-a-circular-path"},"doc://Stream.SwiftUIAnimationTutorials/tutorials/AnimationTutorialTableofContents/Animating-path-properties:-Stroke-start-and-stroke-end":{"role":"article","title":"Animating path properties: Stroke start and stroke end","abstract":[],"identifier":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/AnimationTutorialTableofContents\/Animating-path-properties:-Stroke-start-and-stroke-end","kind":"article","type":"topic","url":"\/tutorials\/animationtutorialtableofcontents\/animating-path-properties:-stroke-start-and-stroke-end"},"doc://Stream.SwiftUIAnimationTutorials/tutorials/SwiftUIAnimationTutorials/ElementLoading#How-to-create-a-loading-animation-in-SwiftUI":{"role":"pseudoSymbol","title":"How to create a loading animation in SwiftUI","abstract":[{"type":"text","text":"One of the most common animations you may want to create when learning SwiftUI is how to create a loading animation. In this tutorial, you will do exactly that."}],"identifier":"doc:\/\/Stream.SwiftUIAnimationTutorials\/tutorials\/SwiftUIAnimationTutorials\/ElementLoading#How-to-create-a-loading-animation-in-SwiftUI","kind":"section","type":"section","url":"\/tutorials\/swiftuianimationtutorials\/elementloading#How-to-create-a-loading-animation-in-SwiftUI"},"heartRate.gif":{"alt":"Measuring Heart Rate","type":"image","identifier":"heartRate.gif","variants":[{"url":"\/images\/heartRate.gif","traits":["1x","light"]}]}}}