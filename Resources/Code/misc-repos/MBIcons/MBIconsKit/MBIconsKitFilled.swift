//
//  MBIconsKit.swift
//  MBIncons
//
//  Created by Porumbescu Viorel on 06/04/2017.
//  Copyright Â© 2017 MingleBit. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import Cocoa

public class MBIconsKitFilled: NSObject {

    //// Drawing Methods

    public dynamic class func drawMailEnvelope(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// mail-envelope 2 Drawing
        let mailenvelope2Path = NSBezierPath()
        mailenvelope2Path.move(to: NSPoint(x: 4.5, y: 23))
        mailenvelope2Path.curve(to: NSPoint(x: 2.5, y: 21.01), controlPoint1: NSPoint(x: 3.4, y: 23), controlPoint2: NSPoint(x: 2.5, y: 22.11))
        mailenvelope2Path.line(to: NSPoint(x: 2.5, y: 8.99))
        mailenvelope2Path.curve(to: NSPoint(x: 4.5, y: 7), controlPoint1: NSPoint(x: 2.5, y: 7.89), controlPoint2: NSPoint(x: 3.39, y: 7))
        mailenvelope2Path.line(to: NSPoint(x: 25.5, y: 7))
        mailenvelope2Path.curve(to: NSPoint(x: 27.5, y: 8.99), controlPoint1: NSPoint(x: 26.6, y: 7), controlPoint2: NSPoint(x: 27.5, y: 7.89))
        mailenvelope2Path.line(to: NSPoint(x: 27.5, y: 21.01))
        mailenvelope2Path.curve(to: NSPoint(x: 25.5, y: 23), controlPoint1: NSPoint(x: 27.5, y: 22.11), controlPoint2: NSPoint(x: 26.61, y: 23))
        mailenvelope2Path.line(to: NSPoint(x: 4.5, y: 23))
        mailenvelope2Path.close()
        mailenvelope2Path.move(to: NSPoint(x: 5.5, y: 20))
        mailenvelope2Path.line(to: NSPoint(x: 5.5, y: 19))
        mailenvelope2Path.line(to: NSPoint(x: 9.5, y: 19))
        mailenvelope2Path.line(to: NSPoint(x: 9.5, y: 20))
        mailenvelope2Path.line(to: NSPoint(x: 5.5, y: 20))
        mailenvelope2Path.close()
        mailenvelope2Path.move(to: NSPoint(x: 21.5, y: 20))
        mailenvelope2Path.line(to: NSPoint(x: 21.5, y: 17))
        mailenvelope2Path.line(to: NSPoint(x: 24.5, y: 17))
        mailenvelope2Path.line(to: NSPoint(x: 24.5, y: 20))
        mailenvelope2Path.line(to: NSPoint(x: 21.5, y: 20))
        mailenvelope2Path.close()
        mailenvelope2Path.move(to: NSPoint(x: 22.5, y: 19))
        mailenvelope2Path.line(to: NSPoint(x: 22.5, y: 18))
        mailenvelope2Path.line(to: NSPoint(x: 23.5, y: 18))
        mailenvelope2Path.line(to: NSPoint(x: 23.5, y: 19))
        mailenvelope2Path.line(to: NSPoint(x: 22.5, y: 19))
        mailenvelope2Path.close()
        mailenvelope2Path.move(to: NSPoint(x: 5.5, y: 13))
        mailenvelope2Path.line(to: NSPoint(x: 5.5, y: 12))
        mailenvelope2Path.line(to: NSPoint(x: 13.5, y: 12))
        mailenvelope2Path.line(to: NSPoint(x: 13.5, y: 13))
        mailenvelope2Path.line(to: NSPoint(x: 5.5, y: 13))
        mailenvelope2Path.close()
        mailenvelope2Path.move(to: NSPoint(x: 5.5, y: 11))
        mailenvelope2Path.line(to: NSPoint(x: 5.5, y: 10))
        mailenvelope2Path.line(to: NSPoint(x: 13.5, y: 10))
        mailenvelope2Path.line(to: NSPoint(x: 13.5, y: 11))
        mailenvelope2Path.line(to: NSPoint(x: 5.5, y: 11))
        mailenvelope2Path.close()
        mailenvelope2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        mailenvelope2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawMailEnvelopeOpen(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// mail-envelope-open 3 Drawing
        let mailenvelopeopen3Path = NSBezierPath()
        mailenvelopeopen3Path.move(to: NSPoint(x: 9.79, y: 12.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 6.5, y: 15.3))
        mailenvelopeopen3Path.line(to: NSPoint(x: 6.5, y: 23.5))
        mailenvelopeopen3Path.curve(to: NSPoint(x: 7.5, y: 24.5), controlPoint1: NSPoint(x: 6.5, y: 24.06), controlPoint2: NSPoint(x: 6.95, y: 24.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 22.5, y: 24.5))
        mailenvelopeopen3Path.curve(to: NSPoint(x: 23.5, y: 23.5), controlPoint1: NSPoint(x: 23.05, y: 24.5), controlPoint2: NSPoint(x: 23.5, y: 24.05))
        mailenvelopeopen3Path.line(to: NSPoint(x: 23.5, y: 15.3))
        mailenvelopeopen3Path.line(to: NSPoint(x: 20.17, y: 12.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 9.79, y: 12.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 9.79, y: 12.5))
        mailenvelopeopen3Path.close()
        mailenvelopeopen3Path.move(to: NSPoint(x: 10.97, y: 11.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 12.75, y: 9.98))
        mailenvelopeopen3Path.line(to: NSPoint(x: 17.17, y: 9.98))
        mailenvelopeopen3Path.line(to: NSPoint(x: 18.98, y: 11.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 10.97, y: 11.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 10.97, y: 11.5))
        mailenvelopeopen3Path.close()
        mailenvelopeopen3Path.move(to: NSPoint(x: 20.69, y: 11.37))
        mailenvelopeopen3Path.line(to: NSPoint(x: 18.5, y: 9.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 18.5, y: 9.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 24.42, y: 4.42))
        mailenvelopeopen3Path.line(to: NSPoint(x: 24.42, y: 4.42))
        mailenvelopeopen3Path.line(to: NSPoint(x: 23.62, y: 3.62))
        mailenvelopeopen3Path.line(to: NSPoint(x: 17.62, y: 8.75))
        mailenvelopeopen3Path.line(to: NSPoint(x: 12.4, y: 8.73))
        mailenvelopeopen3Path.line(to: NSPoint(x: 12.38, y: 8.75))
        mailenvelopeopen3Path.line(to: NSPoint(x: 6.38, y: 3.62))
        mailenvelopeopen3Path.line(to: NSPoint(x: 5.58, y: 4.42))
        mailenvelopeopen3Path.line(to: NSPoint(x: 5.58, y: 4.42))
        mailenvelopeopen3Path.line(to: NSPoint(x: 11.5, y: 9.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 9.31, y: 11.37))
        mailenvelopeopen3Path.line(to: NSPoint(x: 5.5, y: 14.6))
        mailenvelopeopen3Path.line(to: NSPoint(x: 5.5, y: 20.14))
        mailenvelopeopen3Path.line(to: NSPoint(x: 2.5, y: 17.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 2.5, y: 16.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 2.5, y: 3.49))
        mailenvelopeopen3Path.curve(to: NSPoint(x: 4.5, y: 1.5), controlPoint1: NSPoint(x: 2.5, y: 2.39), controlPoint2: NSPoint(x: 3.39, y: 1.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 25.5, y: 1.5))
        mailenvelopeopen3Path.curve(to: NSPoint(x: 27.5, y: 3.49), controlPoint1: NSPoint(x: 26.6, y: 1.5), controlPoint2: NSPoint(x: 27.5, y: 2.39))
        mailenvelopeopen3Path.line(to: NSPoint(x: 27.5, y: 17.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 24.5, y: 20.14))
        mailenvelopeopen3Path.line(to: NSPoint(x: 24.5, y: 14.6))
        mailenvelopeopen3Path.line(to: NSPoint(x: 20.69, y: 11.37))
        mailenvelopeopen3Path.line(to: NSPoint(x: 20.69, y: 11.37))
        mailenvelopeopen3Path.line(to: NSPoint(x: 20.69, y: 11.37))
        mailenvelopeopen3Path.close()
        mailenvelopeopen3Path.move(to: NSPoint(x: 18.41, y: 25.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 15, y: 28.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 11.59, y: 25.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 18.41, y: 25.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 18.41, y: 25.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 18.41, y: 25.5))
        mailenvelopeopen3Path.close()
        mailenvelopeopen3Path.move(to: NSPoint(x: 8.5, y: 21.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 8.5, y: 20.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 21.5, y: 20.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 21.5, y: 21.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 8.5, y: 21.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 8.5, y: 21.5))
        mailenvelopeopen3Path.close()
        mailenvelopeopen3Path.move(to: NSPoint(x: 8.5, y: 18.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 8.5, y: 17.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 21.5, y: 17.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 21.5, y: 18.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 8.5, y: 18.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 8.5, y: 18.5))
        mailenvelopeopen3Path.close()
        mailenvelopeopen3Path.move(to: NSPoint(x: 8.5, y: 15.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 8.5, y: 14.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 21.5, y: 14.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 21.5, y: 15.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 8.5, y: 15.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 8.5, y: 15.5))
        mailenvelopeopen3Path.close()
        mailenvelopeopen3Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        mailenvelopeopen3Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawMailEnvelopeClosed(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// mail-envelope-closed 3 Drawing
        let mailenvelopeclosed3Path = NSBezierPath()
        mailenvelopeclosed3Path.move(to: NSPoint(x: 5.58, y: 20.08))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 15, y: 12))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 24.42, y: 20.08))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 24.42, y: 20.08))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 23.62, y: 20.88))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 15, y: 13.5))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 6.38, y: 20.88))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 5.58, y: 20.08))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 5.58, y: 20.08))
        mailenvelopeclosed3Path.close()
        mailenvelopeclosed3Path.move(to: NSPoint(x: 4.5, y: 23))
        mailenvelopeclosed3Path.curve(to: NSPoint(x: 2.5, y: 21.01), controlPoint1: NSPoint(x: 3.4, y: 23), controlPoint2: NSPoint(x: 2.5, y: 22.11))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 2.5, y: 8.99))
        mailenvelopeclosed3Path.curve(to: NSPoint(x: 4.5, y: 7), controlPoint1: NSPoint(x: 2.5, y: 7.89), controlPoint2: NSPoint(x: 3.39, y: 7))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 25.5, y: 7))
        mailenvelopeclosed3Path.curve(to: NSPoint(x: 27.5, y: 8.99), controlPoint1: NSPoint(x: 26.6, y: 7), controlPoint2: NSPoint(x: 27.5, y: 7.89))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 27.5, y: 21.01))
        mailenvelopeclosed3Path.curve(to: NSPoint(x: 25.5, y: 23), controlPoint1: NSPoint(x: 27.5, y: 22.11), controlPoint2: NSPoint(x: 26.61, y: 23))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 4.5, y: 23))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 4.5, y: 23))
        mailenvelopeclosed3Path.close()
        mailenvelopeclosed3Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        mailenvelopeclosed3Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawMailEnvelopeOpen2(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-4-mail-envelope-open
        //// mail-envelope-open 3 Drawing
        let mailenvelopeopen3Path = NSBezierPath()
        mailenvelopeopen3Path.move(to: NSPoint(x: 5.58, y: 14.58))
        mailenvelopeopen3Path.line(to: NSPoint(x: 15, y: 6.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 24.42, y: 14.58))
        mailenvelopeopen3Path.line(to: NSPoint(x: 23.6, y: 15.4))
        mailenvelopeopen3Path.line(to: NSPoint(x: 15, y: 8.2))
        mailenvelopeopen3Path.line(to: NSPoint(x: 6.4, y: 15.4))
        mailenvelopeopen3Path.line(to: NSPoint(x: 5.58, y: 14.58))
        mailenvelopeopen3Path.line(to: NSPoint(x: 5.58, y: 14.58))
        mailenvelopeopen3Path.line(to: NSPoint(x: 5.58, y: 14.58))
        mailenvelopeopen3Path.close()
        mailenvelopeopen3Path.move(to: NSPoint(x: 27.5, y: 17.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 27.5, y: 3.49))
        mailenvelopeopen3Path.curve(to: NSPoint(x: 25.5, y: 1.5), controlPoint1: NSPoint(x: 27.5, y: 2.39), controlPoint2: NSPoint(x: 26.6, y: 1.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 4.5, y: 1.5))
        mailenvelopeopen3Path.curve(to: NSPoint(x: 2.5, y: 3.49), controlPoint1: NSPoint(x: 3.39, y: 1.5), controlPoint2: NSPoint(x: 2.5, y: 2.39))
        mailenvelopeopen3Path.line(to: NSPoint(x: 2.5, y: 17.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 15, y: 28.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 27.5, y: 17.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 27.5, y: 17.5))
        mailenvelopeopen3Path.line(to: NSPoint(x: 27.5, y: 17.5))
        mailenvelopeopen3Path.close()
        mailenvelopeopen3Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        mailenvelopeopen3Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawMailEnvelopeClosed2(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-6-mail-envelope-closed
        //// mail-envelope-closed 3 Drawing
        let mailenvelopeclosed3Path = NSBezierPath()
        mailenvelopeclosed3Path.move(to: NSPoint(x: 24.42, y: 9.92))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 18.5, y: 15))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 24.42, y: 20.08))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 24.42, y: 20.08))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 23.62, y: 20.88))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 15, y: 13.5))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 6.38, y: 20.88))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 5.58, y: 20.08))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 5.58, y: 20.08))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 11.5, y: 15))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 5.58, y: 9.92))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 5.58, y: 9.92))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 6.38, y: 9.12))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 12.38, y: 14.25))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 15, y: 12))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 17.62, y: 14.25))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 23.62, y: 9.12))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 24.42, y: 9.92))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 24.42, y: 9.92))
        mailenvelopeclosed3Path.close()
        mailenvelopeclosed3Path.move(to: NSPoint(x: 4.5, y: 23))
        mailenvelopeclosed3Path.curve(to: NSPoint(x: 2.5, y: 21.01), controlPoint1: NSPoint(x: 3.4, y: 23), controlPoint2: NSPoint(x: 2.5, y: 22.11))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 2.5, y: 8.99))
        mailenvelopeclosed3Path.curve(to: NSPoint(x: 4.5, y: 7), controlPoint1: NSPoint(x: 2.5, y: 7.89), controlPoint2: NSPoint(x: 3.39, y: 7))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 25.5, y: 7))
        mailenvelopeclosed3Path.curve(to: NSPoint(x: 27.5, y: 8.99), controlPoint1: NSPoint(x: 26.6, y: 7), controlPoint2: NSPoint(x: 27.5, y: 7.89))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 27.5, y: 21.01))
        mailenvelopeclosed3Path.curve(to: NSPoint(x: 25.5, y: 23), controlPoint1: NSPoint(x: 27.5, y: 22.11), controlPoint2: NSPoint(x: 26.61, y: 23))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 4.5, y: 23))
        mailenvelopeclosed3Path.line(to: NSPoint(x: 4.5, y: 23))
        mailenvelopeclosed3Path.close()
        mailenvelopeclosed3Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        mailenvelopeclosed3Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawMailEnvelopeOpened3(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-5-mail-envelope-open
        //// mail-envelope-open 3 Drawing
        let mailenvelopeopen3Path = NSBezierPath()
        mailenvelopeopen3Path.move(to: NSPoint(x: 20.69, y: 11.17))
        mailenvelopeopen3Path.line(to: NSPoint(x: 18.5, y: 9.3))
        mailenvelopeopen3Path.line(to: NSPoint(x: 18.5, y: 9.3))
        mailenvelopeopen3Path.line(to: NSPoint(x: 24.42, y: 4.22))
        mailenvelopeopen3Path.line(to: NSPoint(x: 24.42, y: 4.22))
        mailenvelopeopen3Path.line(to: NSPoint(x: 23.62, y: 3.42))
        mailenvelopeopen3Path.line(to: NSPoint(x: 17.62, y: 8.55))
        mailenvelopeopen3Path.line(to: NSPoint(x: 12.4, y: 8.53))
        mailenvelopeopen3Path.line(to: NSPoint(x: 12.38, y: 8.55))
        mailenvelopeopen3Path.line(to: NSPoint(x: 6.38, y: 3.42))
        mailenvelopeopen3Path.line(to: NSPoint(x: 5.58, y: 4.22))
        mailenvelopeopen3Path.line(to: NSPoint(x: 5.58, y: 4.22))
        mailenvelopeopen3Path.line(to: NSPoint(x: 11.5, y: 9.3))
        mailenvelopeopen3Path.line(to: NSPoint(x: 9.31, y: 11.17))
        mailenvelopeopen3Path.line(to: NSPoint(x: 5.5, y: 14.4))
        mailenvelopeopen3Path.line(to: NSPoint(x: 5.5, y: 19.94))
        mailenvelopeopen3Path.line(to: NSPoint(x: 2.5, y: 17.3))
        mailenvelopeopen3Path.line(to: NSPoint(x: 2.5, y: 3.29))
        mailenvelopeopen3Path.curve(to: NSPoint(x: 4.5, y: 1.3), controlPoint1: NSPoint(x: 2.5, y: 2.19), controlPoint2: NSPoint(x: 3.39, y: 1.3))
        mailenvelopeopen3Path.line(to: NSPoint(x: 25.5, y: 1.3))
        mailenvelopeopen3Path.curve(to: NSPoint(x: 27.5, y: 3.29), controlPoint1: NSPoint(x: 26.6, y: 1.3), controlPoint2: NSPoint(x: 27.5, y: 2.19))
        mailenvelopeopen3Path.line(to: NSPoint(x: 27.5, y: 17.3))
        mailenvelopeopen3Path.line(to: NSPoint(x: 27.5, y: 17.3))
        mailenvelopeopen3Path.line(to: NSPoint(x: 24.5, y: 19.94))
        mailenvelopeopen3Path.line(to: NSPoint(x: 24.5, y: 14.4))
        mailenvelopeopen3Path.line(to: NSPoint(x: 20.69, y: 11.17))
        mailenvelopeopen3Path.line(to: NSPoint(x: 20.69, y: 11.17))
        mailenvelopeopen3Path.line(to: NSPoint(x: 20.69, y: 11.17))
        mailenvelopeopen3Path.close()
        mailenvelopeopen3Path.move(to: NSPoint(x: 11.59, y: 25.3))
        mailenvelopeopen3Path.line(to: NSPoint(x: 15, y: 28.3))
        mailenvelopeopen3Path.line(to: NSPoint(x: 18.41, y: 25.3))
        mailenvelopeopen3Path.line(to: NSPoint(x: 11.59, y: 25.3))
        mailenvelopeopen3Path.line(to: NSPoint(x: 11.59, y: 25.3))
        mailenvelopeopen3Path.line(to: NSPoint(x: 11.59, y: 25.3))
        mailenvelopeopen3Path.close()
        mailenvelopeopen3Path.move(to: NSPoint(x: 7.5, y: 24.3))
        mailenvelopeopen3Path.curve(to: NSPoint(x: 6.5, y: 23.3), controlPoint1: NSPoint(x: 6.95, y: 24.3), controlPoint2: NSPoint(x: 6.5, y: 23.86))
        mailenvelopeopen3Path.line(to: NSPoint(x: 6.5, y: 15.1))
        mailenvelopeopen3Path.line(to: NSPoint(x: 12.75, y: 9.78))
        mailenvelopeopen3Path.line(to: NSPoint(x: 17.17, y: 9.78))
        mailenvelopeopen3Path.line(to: NSPoint(x: 23.5, y: 15.1))
        mailenvelopeopen3Path.line(to: NSPoint(x: 23.5, y: 23.3))
        mailenvelopeopen3Path.curve(to: NSPoint(x: 22.5, y: 24.3), controlPoint1: NSPoint(x: 23.5, y: 23.85), controlPoint2: NSPoint(x: 23.05, y: 24.3))
        mailenvelopeopen3Path.line(to: NSPoint(x: 7.5, y: 24.3))
        mailenvelopeopen3Path.line(to: NSPoint(x: 7.5, y: 24.3))
        mailenvelopeopen3Path.close()
        mailenvelopeopen3Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        mailenvelopeopen3Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawMailError(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-8-mail-error
        //// mail-error 2 Drawing
        let mailerror2Path = NSBezierPath()
        mailerror2Path.move(to: NSPoint(x: 20.03, y: 13.47))
        mailerror2Path.line(to: NSPoint(x: 16.5, y: 16.5))
        mailerror2Path.line(to: NSPoint(x: 22.42, y: 21.58))
        mailerror2Path.line(to: NSPoint(x: 22.42, y: 21.58))
        mailerror2Path.line(to: NSPoint(x: 21.62, y: 22.38))
        mailerror2Path.line(to: NSPoint(x: 13, y: 15))
        mailerror2Path.line(to: NSPoint(x: 4.38, y: 22.38))
        mailerror2Path.line(to: NSPoint(x: 3.58, y: 21.58))
        mailerror2Path.line(to: NSPoint(x: 3.58, y: 21.58))
        mailerror2Path.line(to: NSPoint(x: 9.5, y: 16.5))
        mailerror2Path.line(to: NSPoint(x: 3.58, y: 11.42))
        mailerror2Path.line(to: NSPoint(x: 3.58, y: 11.42))
        mailerror2Path.line(to: NSPoint(x: 4.38, y: 10.62))
        mailerror2Path.line(to: NSPoint(x: 10.38, y: 15.75))
        mailerror2Path.line(to: NSPoint(x: 13, y: 13.5))
        mailerror2Path.line(to: NSPoint(x: 15.62, y: 15.75))
        mailerror2Path.line(to: NSPoint(x: 19.44, y: 12.48))
        mailerror2Path.line(to: NSPoint(x: 17.1, y: 8.5))
        mailerror2Path.line(to: NSPoint(x: 2.5, y: 8.5))
        mailerror2Path.curve(to: NSPoint(x: 0.5, y: 10.49), controlPoint1: NSPoint(x: 1.39, y: 8.5), controlPoint2: NSPoint(x: 0.5, y: 9.39))
        mailerror2Path.line(to: NSPoint(x: 0.5, y: 22.51))
        mailerror2Path.curve(to: NSPoint(x: 2.5, y: 24.5), controlPoint1: NSPoint(x: 0.5, y: 23.61), controlPoint2: NSPoint(x: 1.4, y: 24.5))
        mailerror2Path.line(to: NSPoint(x: 23.5, y: 24.5))
        mailerror2Path.curve(to: NSPoint(x: 25.5, y: 22.51), controlPoint1: NSPoint(x: 24.61, y: 24.5), controlPoint2: NSPoint(x: 25.5, y: 23.61))
        mailerror2Path.line(to: NSPoint(x: 25.5, y: 14.26))
        mailerror2Path.line(to: NSPoint(x: 23, y: 18.5))
        mailerror2Path.line(to: NSPoint(x: 20.03, y: 13.47))
        mailerror2Path.line(to: NSPoint(x: 20.03, y: 13.47))
        mailerror2Path.line(to: NSPoint(x: 20.03, y: 13.47))
        mailerror2Path.close()
        mailerror2Path.move(to: NSPoint(x: 23, y: 16.5))
        mailerror2Path.line(to: NSPoint(x: 29.5, y: 5.5))
        mailerror2Path.line(to: NSPoint(x: 16.5, y: 5.5))
        mailerror2Path.line(to: NSPoint(x: 23, y: 16.5))
        mailerror2Path.line(to: NSPoint(x: 23, y: 16.5))
        mailerror2Path.close()
        mailerror2Path.move(to: NSPoint(x: 22.5, y: 12.5))
        mailerror2Path.line(to: NSPoint(x: 22.5, y: 9.5))
        mailerror2Path.line(to: NSPoint(x: 23.5, y: 9.5))
        mailerror2Path.line(to: NSPoint(x: 23.5, y: 12.5))
        mailerror2Path.line(to: NSPoint(x: 22.5, y: 12.5))
        mailerror2Path.line(to: NSPoint(x: 22.5, y: 12.5))
        mailerror2Path.close()
        mailerror2Path.move(to: NSPoint(x: 22.5, y: 8.5))
        mailerror2Path.line(to: NSPoint(x: 22.5, y: 7.5))
        mailerror2Path.line(to: NSPoint(x: 23.5, y: 7.5))
        mailerror2Path.line(to: NSPoint(x: 23.5, y: 8.5))
        mailerror2Path.line(to: NSPoint(x: 22.5, y: 8.5))
        mailerror2Path.line(to: NSPoint(x: 22.5, y: 8.5))
        mailerror2Path.close()
        mailerror2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        mailerror2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawMailChecked(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-9-mail-checked
        //// mail-checked 2 Drawing
        let mailchecked2Path = NSBezierPath()
        mailchecked2Path.move(to: NSPoint(x: 18.63, y: 14.67))
        mailchecked2Path.line(to: NSPoint(x: 16.5, y: 16.5))
        mailchecked2Path.line(to: NSPoint(x: 22.42, y: 21.58))
        mailchecked2Path.line(to: NSPoint(x: 22.42, y: 21.58))
        mailchecked2Path.line(to: NSPoint(x: 21.62, y: 22.38))
        mailchecked2Path.line(to: NSPoint(x: 13, y: 15))
        mailchecked2Path.line(to: NSPoint(x: 4.38, y: 22.38))
        mailchecked2Path.line(to: NSPoint(x: 3.58, y: 21.58))
        mailchecked2Path.line(to: NSPoint(x: 3.58, y: 21.58))
        mailchecked2Path.line(to: NSPoint(x: 9.5, y: 16.5))
        mailchecked2Path.line(to: NSPoint(x: 3.58, y: 11.42))
        mailchecked2Path.line(to: NSPoint(x: 3.58, y: 11.42))
        mailchecked2Path.line(to: NSPoint(x: 4.38, y: 10.62))
        mailchecked2Path.line(to: NSPoint(x: 10.38, y: 15.75))
        mailchecked2Path.line(to: NSPoint(x: 13, y: 13.5))
        mailchecked2Path.line(to: NSPoint(x: 15.62, y: 15.75))
        mailchecked2Path.line(to: NSPoint(x: 18.07, y: 13.66))
        mailchecked2Path.curve(to: NSPoint(x: 17.5, y: 11), controlPoint1: NSPoint(x: 17.7, y: 12.85), controlPoint2: NSPoint(x: 17.5, y: 11.95))
        mailchecked2Path.curve(to: NSPoint(x: 18, y: 8.5), controlPoint1: NSPoint(x: 17.5, y: 10.11), controlPoint2: NSPoint(x: 17.68, y: 9.27))
        mailchecked2Path.line(to: NSPoint(x: 2.5, y: 8.5))
        mailchecked2Path.curve(to: NSPoint(x: 0.5, y: 10.49), controlPoint1: NSPoint(x: 1.39, y: 8.5), controlPoint2: NSPoint(x: 0.5, y: 9.39))
        mailchecked2Path.line(to: NSPoint(x: 0.5, y: 22.51))
        mailchecked2Path.curve(to: NSPoint(x: 2.5, y: 24.5), controlPoint1: NSPoint(x: 0.5, y: 23.61), controlPoint2: NSPoint(x: 1.4, y: 24.5))
        mailchecked2Path.line(to: NSPoint(x: 23.5, y: 24.5))
        mailchecked2Path.curve(to: NSPoint(x: 25.5, y: 22.51), controlPoint1: NSPoint(x: 24.61, y: 24.5), controlPoint2: NSPoint(x: 25.5, y: 23.61))
        mailchecked2Path.line(to: NSPoint(x: 25.5, y: 17.33))
        mailchecked2Path.curve(to: NSPoint(x: 24, y: 17.5), controlPoint1: NSPoint(x: 25.02, y: 17.44), controlPoint2: NSPoint(x: 24.52, y: 17.5))
        mailchecked2Path.curve(to: NSPoint(x: 18.63, y: 14.67), controlPoint1: NSPoint(x: 21.77, y: 17.5), controlPoint2: NSPoint(x: 19.81, y: 16.38))
        mailchecked2Path.line(to: NSPoint(x: 18.63, y: 14.67))
        mailchecked2Path.line(to: NSPoint(x: 18.63, y: 14.67))
        mailchecked2Path.close()
        mailchecked2Path.move(to: NSPoint(x: 24, y: 5.5))
        mailchecked2Path.curve(to: NSPoint(x: 29.5, y: 11), controlPoint1: NSPoint(x: 27.04, y: 5.5), controlPoint2: NSPoint(x: 29.5, y: 7.96))
        mailchecked2Path.curve(to: NSPoint(x: 24, y: 16.5), controlPoint1: NSPoint(x: 29.5, y: 14.04), controlPoint2: NSPoint(x: 27.04, y: 16.5))
        mailchecked2Path.curve(to: NSPoint(x: 18.5, y: 11), controlPoint1: NSPoint(x: 20.96, y: 16.5), controlPoint2: NSPoint(x: 18.5, y: 14.04))
        mailchecked2Path.curve(to: NSPoint(x: 24, y: 5.5), controlPoint1: NSPoint(x: 18.5, y: 7.96), controlPoint2: NSPoint(x: 20.96, y: 5.5))
        mailchecked2Path.line(to: NSPoint(x: 24, y: 5.5))
        mailchecked2Path.close()
        mailchecked2Path.move(to: NSPoint(x: 23.5, y: 8.26))
        mailchecked2Path.line(to: NSPoint(x: 21.15, y: 10.61))
        mailchecked2Path.line(to: NSPoint(x: 21.88, y: 11.34))
        mailchecked2Path.line(to: NSPoint(x: 23.5, y: 9.72))
        mailchecked2Path.line(to: NSPoint(x: 26.62, y: 12.84))
        mailchecked2Path.line(to: NSPoint(x: 27.35, y: 12.11))
        mailchecked2Path.line(to: NSPoint(x: 23.5, y: 8.26))
        mailchecked2Path.line(to: NSPoint(x: 23.5, y: 8.26))
        mailchecked2Path.close()
        mailchecked2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        mailchecked2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawMailCancel(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-10-mail-cancel
        //// mail-cancel 2 Drawing
        let mailcancel2Path = NSBezierPath()
        mailcancel2Path.move(to: NSPoint(x: 24, y: 10.29))
        mailcancel2Path.line(to: NSPoint(x: 21.88, y: 8.17))
        mailcancel2Path.line(to: NSPoint(x: 21.17, y: 8.88))
        mailcancel2Path.line(to: NSPoint(x: 23.29, y: 11))
        mailcancel2Path.line(to: NSPoint(x: 21.17, y: 13.12))
        mailcancel2Path.line(to: NSPoint(x: 21.88, y: 13.83))
        mailcancel2Path.line(to: NSPoint(x: 24, y: 11.71))
        mailcancel2Path.line(to: NSPoint(x: 26.12, y: 13.83))
        mailcancel2Path.line(to: NSPoint(x: 26.83, y: 13.12))
        mailcancel2Path.line(to: NSPoint(x: 24.71, y: 11))
        mailcancel2Path.line(to: NSPoint(x: 26.83, y: 8.88))
        mailcancel2Path.line(to: NSPoint(x: 26.12, y: 8.17))
        mailcancel2Path.line(to: NSPoint(x: 24, y: 10.29))
        mailcancel2Path.line(to: NSPoint(x: 24, y: 10.29))
        mailcancel2Path.close()
        mailcancel2Path.move(to: NSPoint(x: 18.63, y: 14.67))
        mailcancel2Path.line(to: NSPoint(x: 16.5, y: 16.5))
        mailcancel2Path.line(to: NSPoint(x: 22.42, y: 21.58))
        mailcancel2Path.line(to: NSPoint(x: 22.42, y: 21.58))
        mailcancel2Path.line(to: NSPoint(x: 21.62, y: 22.38))
        mailcancel2Path.line(to: NSPoint(x: 13, y: 15))
        mailcancel2Path.line(to: NSPoint(x: 4.38, y: 22.38))
        mailcancel2Path.line(to: NSPoint(x: 3.58, y: 21.58))
        mailcancel2Path.line(to: NSPoint(x: 3.58, y: 21.58))
        mailcancel2Path.line(to: NSPoint(x: 9.5, y: 16.5))
        mailcancel2Path.line(to: NSPoint(x: 3.58, y: 11.42))
        mailcancel2Path.line(to: NSPoint(x: 3.58, y: 11.42))
        mailcancel2Path.line(to: NSPoint(x: 4.38, y: 10.62))
        mailcancel2Path.line(to: NSPoint(x: 10.38, y: 15.75))
        mailcancel2Path.line(to: NSPoint(x: 13, y: 13.5))
        mailcancel2Path.line(to: NSPoint(x: 15.62, y: 15.75))
        mailcancel2Path.line(to: NSPoint(x: 18.07, y: 13.66))
        mailcancel2Path.curve(to: NSPoint(x: 17.5, y: 11), controlPoint1: NSPoint(x: 17.7, y: 12.85), controlPoint2: NSPoint(x: 17.5, y: 11.95))
        mailcancel2Path.curve(to: NSPoint(x: 18, y: 8.5), controlPoint1: NSPoint(x: 17.5, y: 10.11), controlPoint2: NSPoint(x: 17.68, y: 9.27))
        mailcancel2Path.line(to: NSPoint(x: 2.5, y: 8.5))
        mailcancel2Path.curve(to: NSPoint(x: 0.5, y: 10.49), controlPoint1: NSPoint(x: 1.39, y: 8.5), controlPoint2: NSPoint(x: 0.5, y: 9.39))
        mailcancel2Path.line(to: NSPoint(x: 0.5, y: 22.51))
        mailcancel2Path.curve(to: NSPoint(x: 2.5, y: 24.5), controlPoint1: NSPoint(x: 0.5, y: 23.61), controlPoint2: NSPoint(x: 1.4, y: 24.5))
        mailcancel2Path.line(to: NSPoint(x: 23.5, y: 24.5))
        mailcancel2Path.curve(to: NSPoint(x: 25.5, y: 22.51), controlPoint1: NSPoint(x: 24.61, y: 24.5), controlPoint2: NSPoint(x: 25.5, y: 23.61))
        mailcancel2Path.line(to: NSPoint(x: 25.5, y: 17.33))
        mailcancel2Path.curve(to: NSPoint(x: 24, y: 17.5), controlPoint1: NSPoint(x: 25.02, y: 17.44), controlPoint2: NSPoint(x: 24.52, y: 17.5))
        mailcancel2Path.curve(to: NSPoint(x: 18.63, y: 14.67), controlPoint1: NSPoint(x: 21.77, y: 17.5), controlPoint2: NSPoint(x: 19.81, y: 16.38))
        mailcancel2Path.line(to: NSPoint(x: 18.63, y: 14.67))
        mailcancel2Path.line(to: NSPoint(x: 18.63, y: 14.67))
        mailcancel2Path.close()
        mailcancel2Path.move(to: NSPoint(x: 24, y: 5.5))
        mailcancel2Path.curve(to: NSPoint(x: 29.5, y: 11), controlPoint1: NSPoint(x: 27.04, y: 5.5), controlPoint2: NSPoint(x: 29.5, y: 7.96))
        mailcancel2Path.curve(to: NSPoint(x: 24, y: 16.5), controlPoint1: NSPoint(x: 29.5, y: 14.04), controlPoint2: NSPoint(x: 27.04, y: 16.5))
        mailcancel2Path.curve(to: NSPoint(x: 18.5, y: 11), controlPoint1: NSPoint(x: 20.96, y: 16.5), controlPoint2: NSPoint(x: 18.5, y: 14.04))
        mailcancel2Path.curve(to: NSPoint(x: 24, y: 5.5), controlPoint1: NSPoint(x: 18.5, y: 7.96), controlPoint2: NSPoint(x: 20.96, y: 5.5))
        mailcancel2Path.line(to: NSPoint(x: 24, y: 5.5))
        mailcancel2Path.close()
        mailcancel2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        mailcancel2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawMailForbidden(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-11-mail--forbidden
        //// mail--forbidden 2 Drawing
        let mailforbidden2Path = NSBezierPath()
        mailforbidden2Path.move(to: NSPoint(x: 28.23, y: 14.52))
        mailforbidden2Path.curve(to: NSPoint(x: 29.5, y: 11), controlPoint1: NSPoint(x: 29.02, y: 13.57), controlPoint2: NSPoint(x: 29.5, y: 12.34))
        mailforbidden2Path.curve(to: NSPoint(x: 24, y: 5.5), controlPoint1: NSPoint(x: 29.5, y: 7.96), controlPoint2: NSPoint(x: 27.04, y: 5.5))
        mailforbidden2Path.curve(to: NSPoint(x: 20.48, y: 6.77), controlPoint1: NSPoint(x: 22.66, y: 5.5), controlPoint2: NSPoint(x: 21.43, y: 5.98))
        mailforbidden2Path.line(to: NSPoint(x: 28.23, y: 14.52))
        mailforbidden2Path.line(to: NSPoint(x: 28.23, y: 14.52))
        mailforbidden2Path.close()
        mailforbidden2Path.move(to: NSPoint(x: 27.52, y: 15.23))
        mailforbidden2Path.curve(to: NSPoint(x: 24, y: 16.5), controlPoint1: NSPoint(x: 26.57, y: 16.02), controlPoint2: NSPoint(x: 25.34, y: 16.5))
        mailforbidden2Path.curve(to: NSPoint(x: 18.5, y: 11), controlPoint1: NSPoint(x: 20.96, y: 16.5), controlPoint2: NSPoint(x: 18.5, y: 14.04))
        mailforbidden2Path.curve(to: NSPoint(x: 19.77, y: 7.48), controlPoint1: NSPoint(x: 18.5, y: 9.66), controlPoint2: NSPoint(x: 18.98, y: 8.43))
        mailforbidden2Path.line(to: NSPoint(x: 27.52, y: 15.23))
        mailforbidden2Path.line(to: NSPoint(x: 27.52, y: 15.23))
        mailforbidden2Path.close()
        mailforbidden2Path.move(to: NSPoint(x: 18.63, y: 14.67))
        mailforbidden2Path.line(to: NSPoint(x: 16.5, y: 16.5))
        mailforbidden2Path.line(to: NSPoint(x: 22.42, y: 21.58))
        mailforbidden2Path.line(to: NSPoint(x: 22.42, y: 21.58))
        mailforbidden2Path.line(to: NSPoint(x: 21.62, y: 22.38))
        mailforbidden2Path.line(to: NSPoint(x: 13, y: 15))
        mailforbidden2Path.line(to: NSPoint(x: 4.38, y: 22.38))
        mailforbidden2Path.line(to: NSPoint(x: 3.58, y: 21.58))
        mailforbidden2Path.line(to: NSPoint(x: 3.58, y: 21.58))
        mailforbidden2Path.line(to: NSPoint(x: 9.5, y: 16.5))
        mailforbidden2Path.line(to: NSPoint(x: 3.58, y: 11.42))
        mailforbidden2Path.line(to: NSPoint(x: 3.58, y: 11.42))
        mailforbidden2Path.line(to: NSPoint(x: 4.38, y: 10.62))
        mailforbidden2Path.line(to: NSPoint(x: 10.38, y: 15.75))
        mailforbidden2Path.line(to: NSPoint(x: 13, y: 13.5))
        mailforbidden2Path.line(to: NSPoint(x: 15.62, y: 15.75))
        mailforbidden2Path.line(to: NSPoint(x: 18.07, y: 13.66))
        mailforbidden2Path.curve(to: NSPoint(x: 17.5, y: 11), controlPoint1: NSPoint(x: 17.7, y: 12.85), controlPoint2: NSPoint(x: 17.5, y: 11.95))
        mailforbidden2Path.curve(to: NSPoint(x: 18, y: 8.5), controlPoint1: NSPoint(x: 17.5, y: 10.11), controlPoint2: NSPoint(x: 17.68, y: 9.27))
        mailforbidden2Path.line(to: NSPoint(x: 2.5, y: 8.5))
        mailforbidden2Path.curve(to: NSPoint(x: 0.5, y: 10.49), controlPoint1: NSPoint(x: 1.39, y: 8.5), controlPoint2: NSPoint(x: 0.5, y: 9.39))
        mailforbidden2Path.line(to: NSPoint(x: 0.5, y: 22.51))
        mailforbidden2Path.curve(to: NSPoint(x: 2.5, y: 24.5), controlPoint1: NSPoint(x: 0.5, y: 23.61), controlPoint2: NSPoint(x: 1.4, y: 24.5))
        mailforbidden2Path.line(to: NSPoint(x: 23.5, y: 24.5))
        mailforbidden2Path.curve(to: NSPoint(x: 25.5, y: 22.51), controlPoint1: NSPoint(x: 24.61, y: 24.5), controlPoint2: NSPoint(x: 25.5, y: 23.61))
        mailforbidden2Path.line(to: NSPoint(x: 25.5, y: 17.33))
        mailforbidden2Path.curve(to: NSPoint(x: 24, y: 17.5), controlPoint1: NSPoint(x: 25.02, y: 17.44), controlPoint2: NSPoint(x: 24.52, y: 17.5))
        mailforbidden2Path.curve(to: NSPoint(x: 18.63, y: 14.67), controlPoint1: NSPoint(x: 21.77, y: 17.5), controlPoint2: NSPoint(x: 19.81, y: 16.38))
        mailforbidden2Path.line(to: NSPoint(x: 18.63, y: 14.67))
        mailforbidden2Path.line(to: NSPoint(x: 18.63, y: 14.67))
        mailforbidden2Path.close()
        mailforbidden2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        mailforbidden2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawMailAdd(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-12-mail-add
        //// mail-add 2 Drawing
        let mailadd2Path = NSBezierPath()
        mailadd2Path.move(to: NSPoint(x: 23.5, y: 10.5))
        mailadd2Path.line(to: NSPoint(x: 20.5, y: 10.5))
        mailadd2Path.line(to: NSPoint(x: 20.5, y: 11.5))
        mailadd2Path.line(to: NSPoint(x: 23.5, y: 11.5))
        mailadd2Path.line(to: NSPoint(x: 23.5, y: 14.5))
        mailadd2Path.line(to: NSPoint(x: 24.5, y: 14.5))
        mailadd2Path.line(to: NSPoint(x: 24.5, y: 11.5))
        mailadd2Path.line(to: NSPoint(x: 27.5, y: 11.5))
        mailadd2Path.line(to: NSPoint(x: 27.5, y: 10.5))
        mailadd2Path.line(to: NSPoint(x: 24.5, y: 10.5))
        mailadd2Path.line(to: NSPoint(x: 24.5, y: 7.5))
        mailadd2Path.line(to: NSPoint(x: 23.5, y: 7.5))
        mailadd2Path.line(to: NSPoint(x: 23.5, y: 10.5))
        mailadd2Path.line(to: NSPoint(x: 23.5, y: 10.5))
        mailadd2Path.close()
        mailadd2Path.move(to: NSPoint(x: 18.63, y: 14.67))
        mailadd2Path.line(to: NSPoint(x: 16.5, y: 16.5))
        mailadd2Path.line(to: NSPoint(x: 22.42, y: 21.58))
        mailadd2Path.line(to: NSPoint(x: 22.42, y: 21.58))
        mailadd2Path.line(to: NSPoint(x: 21.62, y: 22.38))
        mailadd2Path.line(to: NSPoint(x: 13, y: 15))
        mailadd2Path.line(to: NSPoint(x: 4.38, y: 22.38))
        mailadd2Path.line(to: NSPoint(x: 3.58, y: 21.58))
        mailadd2Path.line(to: NSPoint(x: 3.58, y: 21.58))
        mailadd2Path.line(to: NSPoint(x: 9.5, y: 16.5))
        mailadd2Path.line(to: NSPoint(x: 3.58, y: 11.42))
        mailadd2Path.line(to: NSPoint(x: 3.58, y: 11.42))
        mailadd2Path.line(to: NSPoint(x: 4.38, y: 10.62))
        mailadd2Path.line(to: NSPoint(x: 10.38, y: 15.75))
        mailadd2Path.line(to: NSPoint(x: 13, y: 13.5))
        mailadd2Path.line(to: NSPoint(x: 15.62, y: 15.75))
        mailadd2Path.line(to: NSPoint(x: 18.07, y: 13.66))
        mailadd2Path.curve(to: NSPoint(x: 17.5, y: 11), controlPoint1: NSPoint(x: 17.7, y: 12.85), controlPoint2: NSPoint(x: 17.5, y: 11.95))
        mailadd2Path.curve(to: NSPoint(x: 18, y: 8.5), controlPoint1: NSPoint(x: 17.5, y: 10.11), controlPoint2: NSPoint(x: 17.68, y: 9.27))
        mailadd2Path.line(to: NSPoint(x: 2.5, y: 8.5))
        mailadd2Path.curve(to: NSPoint(x: 0.5, y: 10.49), controlPoint1: NSPoint(x: 1.39, y: 8.5), controlPoint2: NSPoint(x: 0.5, y: 9.39))
        mailadd2Path.line(to: NSPoint(x: 0.5, y: 22.51))
        mailadd2Path.curve(to: NSPoint(x: 2.5, y: 24.5), controlPoint1: NSPoint(x: 0.5, y: 23.61), controlPoint2: NSPoint(x: 1.4, y: 24.5))
        mailadd2Path.line(to: NSPoint(x: 23.5, y: 24.5))
        mailadd2Path.curve(to: NSPoint(x: 25.5, y: 22.51), controlPoint1: NSPoint(x: 24.61, y: 24.5), controlPoint2: NSPoint(x: 25.5, y: 23.61))
        mailadd2Path.line(to: NSPoint(x: 25.5, y: 17.33))
        mailadd2Path.curve(to: NSPoint(x: 24, y: 17.5), controlPoint1: NSPoint(x: 25.02, y: 17.44), controlPoint2: NSPoint(x: 24.52, y: 17.5))
        mailadd2Path.curve(to: NSPoint(x: 18.63, y: 14.67), controlPoint1: NSPoint(x: 21.77, y: 17.5), controlPoint2: NSPoint(x: 19.81, y: 16.38))
        mailadd2Path.line(to: NSPoint(x: 18.63, y: 14.67))
        mailadd2Path.line(to: NSPoint(x: 18.63, y: 14.67))
        mailadd2Path.close()
        mailadd2Path.move(to: NSPoint(x: 24, y: 5.5))
        mailadd2Path.curve(to: NSPoint(x: 29.5, y: 11), controlPoint1: NSPoint(x: 27.04, y: 5.5), controlPoint2: NSPoint(x: 29.5, y: 7.96))
        mailadd2Path.curve(to: NSPoint(x: 24, y: 16.5), controlPoint1: NSPoint(x: 29.5, y: 14.04), controlPoint2: NSPoint(x: 27.04, y: 16.5))
        mailadd2Path.curve(to: NSPoint(x: 18.5, y: 11), controlPoint1: NSPoint(x: 20.96, y: 16.5), controlPoint2: NSPoint(x: 18.5, y: 14.04))
        mailadd2Path.curve(to: NSPoint(x: 24, y: 5.5), controlPoint1: NSPoint(x: 18.5, y: 7.96), controlPoint2: NSPoint(x: 20.96, y: 5.5))
        mailadd2Path.line(to: NSPoint(x: 24, y: 5.5))
        mailadd2Path.close()
        mailadd2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        mailadd2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawMailRemove(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-13-mail-remove
        //// mail-remove 2 Drawing
        let mailremove2Path = NSBezierPath()
        mailremove2Path.move(to: NSPoint(x: 18.63, y: 14.67))
        mailremove2Path.line(to: NSPoint(x: 16.5, y: 16.5))
        mailremove2Path.line(to: NSPoint(x: 22.42, y: 21.58))
        mailremove2Path.line(to: NSPoint(x: 22.42, y: 21.58))
        mailremove2Path.line(to: NSPoint(x: 21.62, y: 22.38))
        mailremove2Path.line(to: NSPoint(x: 13, y: 15))
        mailremove2Path.line(to: NSPoint(x: 4.38, y: 22.38))
        mailremove2Path.line(to: NSPoint(x: 3.58, y: 21.58))
        mailremove2Path.line(to: NSPoint(x: 3.58, y: 21.58))
        mailremove2Path.line(to: NSPoint(x: 9.5, y: 16.5))
        mailremove2Path.line(to: NSPoint(x: 3.58, y: 11.42))
        mailremove2Path.line(to: NSPoint(x: 3.58, y: 11.42))
        mailremove2Path.line(to: NSPoint(x: 4.38, y: 10.62))
        mailremove2Path.line(to: NSPoint(x: 10.38, y: 15.75))
        mailremove2Path.line(to: NSPoint(x: 13, y: 13.5))
        mailremove2Path.line(to: NSPoint(x: 15.62, y: 15.75))
        mailremove2Path.line(to: NSPoint(x: 18.07, y: 13.66))
        mailremove2Path.curve(to: NSPoint(x: 17.5, y: 11), controlPoint1: NSPoint(x: 17.7, y: 12.85), controlPoint2: NSPoint(x: 17.5, y: 11.95))
        mailremove2Path.curve(to: NSPoint(x: 18, y: 8.5), controlPoint1: NSPoint(x: 17.5, y: 10.11), controlPoint2: NSPoint(x: 17.68, y: 9.27))
        mailremove2Path.line(to: NSPoint(x: 2.5, y: 8.5))
        mailremove2Path.curve(to: NSPoint(x: 0.5, y: 10.49), controlPoint1: NSPoint(x: 1.39, y: 8.5), controlPoint2: NSPoint(x: 0.5, y: 9.39))
        mailremove2Path.line(to: NSPoint(x: 0.5, y: 22.51))
        mailremove2Path.curve(to: NSPoint(x: 2.5, y: 24.5), controlPoint1: NSPoint(x: 0.5, y: 23.61), controlPoint2: NSPoint(x: 1.4, y: 24.5))
        mailremove2Path.line(to: NSPoint(x: 23.5, y: 24.5))
        mailremove2Path.curve(to: NSPoint(x: 25.5, y: 22.51), controlPoint1: NSPoint(x: 24.61, y: 24.5), controlPoint2: NSPoint(x: 25.5, y: 23.61))
        mailremove2Path.line(to: NSPoint(x: 25.5, y: 17.33))
        mailremove2Path.curve(to: NSPoint(x: 24, y: 17.5), controlPoint1: NSPoint(x: 25.02, y: 17.44), controlPoint2: NSPoint(x: 24.52, y: 17.5))
        mailremove2Path.curve(to: NSPoint(x: 18.63, y: 14.67), controlPoint1: NSPoint(x: 21.77, y: 17.5), controlPoint2: NSPoint(x: 19.81, y: 16.38))
        mailremove2Path.line(to: NSPoint(x: 18.63, y: 14.67))
        mailremove2Path.line(to: NSPoint(x: 18.63, y: 14.67))
        mailremove2Path.close()
        mailremove2Path.move(to: NSPoint(x: 24, y: 5.5))
        mailremove2Path.curve(to: NSPoint(x: 29.5, y: 11), controlPoint1: NSPoint(x: 27.04, y: 5.5), controlPoint2: NSPoint(x: 29.5, y: 7.96))
        mailremove2Path.curve(to: NSPoint(x: 24, y: 16.5), controlPoint1: NSPoint(x: 29.5, y: 14.04), controlPoint2: NSPoint(x: 27.04, y: 16.5))
        mailremove2Path.curve(to: NSPoint(x: 18.5, y: 11), controlPoint1: NSPoint(x: 20.96, y: 16.5), controlPoint2: NSPoint(x: 18.5, y: 14.04))
        mailremove2Path.curve(to: NSPoint(x: 24, y: 5.5), controlPoint1: NSPoint(x: 18.5, y: 7.96), controlPoint2: NSPoint(x: 20.96, y: 5.5))
        mailremove2Path.line(to: NSPoint(x: 24, y: 5.5))
        mailremove2Path.close()
        mailremove2Path.move(to: NSPoint(x: 20.5, y: 11.5))
        mailremove2Path.line(to: NSPoint(x: 20.5, y: 10.5))
        mailremove2Path.line(to: NSPoint(x: 27.5, y: 10.5))
        mailremove2Path.line(to: NSPoint(x: 27.5, y: 11.5))
        mailremove2Path.line(to: NSPoint(x: 20.5, y: 11.5))
        mailremove2Path.line(to: NSPoint(x: 20.5, y: 11.5))
        mailremove2Path.close()
        mailremove2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        mailremove2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawFlag(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-14-flag
        //// flag 5 Drawing
        let flag5Path = NSBezierPath()
        flag5Path.move(to: NSPoint(x: 7, y: 20.5))
        flag5Path.line(to: NSPoint(x: 7, y: 2))
        flag5Path.line(to: NSPoint(x: 8, y: 2))
        flag5Path.line(to: NSPoint(x: 8, y: 16.5))
        flag5Path.curve(to: NSPoint(x: 15, y: 16), controlPoint1: NSPoint(x: 9.27, y: 16.98), controlPoint2: NSPoint(x: 11.69, y: 17.44))
        flag5Path.curve(to: NSPoint(x: 23, y: 16), controlPoint1: NSPoint(x: 20.02, y: 13.81), controlPoint2: NSPoint(x: 23, y: 16))
        flag5Path.line(to: NSPoint(x: 23, y: 27))
        flag5Path.curve(to: NSPoint(x: 15, y: 27), controlPoint1: NSPoint(x: 23, y: 27), controlPoint2: NSPoint(x: 20.02, y: 24.76))
        flag5Path.curve(to: NSPoint(x: 7, y: 27), controlPoint1: NSPoint(x: 9.98, y: 29.24), controlPoint2: NSPoint(x: 7, y: 27))
        flag5Path.line(to: NSPoint(x: 7, y: 20.5))
        flag5Path.line(to: NSPoint(x: 7, y: 20.5))
        flag5Path.close()
        flag5Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        flag5Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawFlag2(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-15-flag
        //// flag 5 Drawing
        let flag5Path = NSBezierPath()
        flag5Path.move(to: NSPoint(x: 7, y: 22.5))
        flag5Path.line(to: NSPoint(x: 7, y: 2))
        flag5Path.line(to: NSPoint(x: 8, y: 2))
        flag5Path.line(to: NSPoint(x: 8, y: 17))
        flag5Path.line(to: NSPoint(x: 23, y: 17))
        flag5Path.line(to: NSPoint(x: 17.5, y: 22.5))
        flag5Path.line(to: NSPoint(x: 23, y: 28))
        flag5Path.line(to: NSPoint(x: 7, y: 28))
        flag5Path.line(to: NSPoint(x: 7, y: 22.5))
        flag5Path.line(to: NSPoint(x: 7, y: 22.5))
        flag5Path.close()
        flag5Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        flag5Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawFlag3(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-16-flag
        //// flag 5 Drawing
        let flag5Path = NSBezierPath()
        flag5Path.move(to: NSPoint(x: 8, y: 21.5))
        flag5Path.line(to: NSPoint(x: 8, y: 2))
        flag5Path.line(to: NSPoint(x: 9, y: 2))
        flag5Path.line(to: NSPoint(x: 9, y: 16.43))
        flag5Path.line(to: NSPoint(x: 22, y: 22))
        flag5Path.line(to: NSPoint(x: 8, y: 28))
        flag5Path.line(to: NSPoint(x: 8, y: 21.5))
        flag5Path.line(to: NSPoint(x: 8, y: 21.5))
        flag5Path.close()
        flag5Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        flag5Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawFlag4(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-17-flag
        //// flag 5 Drawing
        let flag5Path = NSBezierPath()
        flag5Path.move(to: NSPoint(x: 7, y: 22.5))
        flag5Path.line(to: NSPoint(x: 7, y: 2))
        flag5Path.line(to: NSPoint(x: 8, y: 2))
        flag5Path.line(to: NSPoint(x: 8, y: 17))
        flag5Path.line(to: NSPoint(x: 23, y: 17))
        flag5Path.line(to: NSPoint(x: 23, y: 28))
        flag5Path.line(to: NSPoint(x: 7, y: 28))
        flag5Path.line(to: NSPoint(x: 7, y: 22.5))
        flag5Path.line(to: NSPoint(x: 7, y: 22.5))
        flag5Path.close()
        flag5Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        flag5Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawBookmark(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-18-bookmark
        //// bookmark 2 Drawing
        let bookmark2Path = NSBezierPath()
        bookmark2Path.move(to: NSPoint(x: 12, y: 27))
        bookmark2Path.curve(to: NSPoint(x: 9, y: 24.01), controlPoint1: NSPoint(x: 10.34, y: 27), controlPoint2: NSPoint(x: 9, y: 25.66))
        bookmark2Path.line(to: NSPoint(x: 9, y: 3))
        bookmark2Path.line(to: NSPoint(x: 15, y: 9))
        bookmark2Path.line(to: NSPoint(x: 21, y: 3))
        bookmark2Path.line(to: NSPoint(x: 21, y: 24.01))
        bookmark2Path.curve(to: NSPoint(x: 18, y: 27), controlPoint1: NSPoint(x: 21, y: 25.66), controlPoint2: NSPoint(x: 19.66, y: 27))
        bookmark2Path.line(to: NSPoint(x: 12, y: 27))
        bookmark2Path.close()
        bookmark2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        bookmark2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawBookmarkAdd(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-19-bookmark-add
        //// bookmark-add 2 Drawing
        let bookmarkadd2Path = NSBezierPath()
        bookmarkadd2Path.move(to: NSPoint(x: 17.5, y: 18))
        bookmarkadd2Path.line(to: NSPoint(x: 17.5, y: 21))
        bookmarkadd2Path.line(to: NSPoint(x: 18.5, y: 21))
        bookmarkadd2Path.line(to: NSPoint(x: 18.5, y: 18))
        bookmarkadd2Path.line(to: NSPoint(x: 21.5, y: 18))
        bookmarkadd2Path.line(to: NSPoint(x: 21.5, y: 17))
        bookmarkadd2Path.line(to: NSPoint(x: 18.5, y: 17))
        bookmarkadd2Path.line(to: NSPoint(x: 18.5, y: 14))
        bookmarkadd2Path.line(to: NSPoint(x: 17.5, y: 14))
        bookmarkadd2Path.line(to: NSPoint(x: 17.5, y: 17))
        bookmarkadd2Path.line(to: NSPoint(x: 14.5, y: 17))
        bookmarkadd2Path.line(to: NSPoint(x: 14.5, y: 18))
        bookmarkadd2Path.line(to: NSPoint(x: 17.5, y: 18))
        bookmarkadd2Path.line(to: NSPoint(x: 17.5, y: 18))
        bookmarkadd2Path.close()
        bookmarkadd2Path.move(to: NSPoint(x: 18.5, y: 11.02))
        bookmarkadd2Path.line(to: NSPoint(x: 18.5, y: 3))
        bookmarkadd2Path.line(to: NSPoint(x: 12.5, y: 9))
        bookmarkadd2Path.line(to: NSPoint(x: 6.5, y: 3))
        bookmarkadd2Path.line(to: NSPoint(x: 6.5, y: 24.01))
        bookmarkadd2Path.curve(to: NSPoint(x: 9.5, y: 27), controlPoint1: NSPoint(x: 6.5, y: 25.66), controlPoint2: NSPoint(x: 7.84, y: 27))
        bookmarkadd2Path.line(to: NSPoint(x: 15.5, y: 27))
        bookmarkadd2Path.curve(to: NSPoint(x: 18.5, y: 24.01), controlPoint1: NSPoint(x: 17.16, y: 27), controlPoint2: NSPoint(x: 18.5, y: 25.66))
        bookmarkadd2Path.line(to: NSPoint(x: 18.5, y: 23.98))
        bookmarkadd2Path.curve(to: NSPoint(x: 18, y: 24), controlPoint1: NSPoint(x: 18.33, y: 23.99), controlPoint2: NSPoint(x: 18.17, y: 24))
        bookmarkadd2Path.curve(to: NSPoint(x: 11.5, y: 17.5), controlPoint1: NSPoint(x: 14.41, y: 24), controlPoint2: NSPoint(x: 11.5, y: 21.09))
        bookmarkadd2Path.curve(to: NSPoint(x: 18, y: 11), controlPoint1: NSPoint(x: 11.5, y: 13.91), controlPoint2: NSPoint(x: 14.41, y: 11))
        bookmarkadd2Path.curve(to: NSPoint(x: 18.5, y: 11.02), controlPoint1: NSPoint(x: 18.17, y: 11), controlPoint2: NSPoint(x: 18.33, y: 11.01))
        bookmarkadd2Path.line(to: NSPoint(x: 18.5, y: 11.02))
        bookmarkadd2Path.line(to: NSPoint(x: 18.5, y: 11.02))
        bookmarkadd2Path.close()
        bookmarkadd2Path.move(to: NSPoint(x: 18, y: 12))
        bookmarkadd2Path.curve(to: NSPoint(x: 23.5, y: 17.5), controlPoint1: NSPoint(x: 21.04, y: 12), controlPoint2: NSPoint(x: 23.5, y: 14.46))
        bookmarkadd2Path.curve(to: NSPoint(x: 18, y: 23), controlPoint1: NSPoint(x: 23.5, y: 20.54), controlPoint2: NSPoint(x: 21.04, y: 23))
        bookmarkadd2Path.curve(to: NSPoint(x: 12.5, y: 17.5), controlPoint1: NSPoint(x: 14.96, y: 23), controlPoint2: NSPoint(x: 12.5, y: 20.54))
        bookmarkadd2Path.curve(to: NSPoint(x: 18, y: 12), controlPoint1: NSPoint(x: 12.5, y: 14.46), controlPoint2: NSPoint(x: 14.96, y: 12))
        bookmarkadd2Path.line(to: NSPoint(x: 18, y: 12))
        bookmarkadd2Path.close()
        bookmarkadd2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        bookmarkadd2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawBookmarkRemove(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-20-bookmark-remove
        //// bookmark-remove 2 Drawing
        let bookmarkremove2Path = NSBezierPath()
        bookmarkremove2Path.move(to: NSPoint(x: 18.5, y: 11.02))
        bookmarkremove2Path.line(to: NSPoint(x: 18.5, y: 3))
        bookmarkremove2Path.line(to: NSPoint(x: 12.5, y: 9))
        bookmarkremove2Path.line(to: NSPoint(x: 6.5, y: 3))
        bookmarkremove2Path.line(to: NSPoint(x: 6.5, y: 24.01))
        bookmarkremove2Path.curve(to: NSPoint(x: 9.5, y: 27), controlPoint1: NSPoint(x: 6.5, y: 25.66), controlPoint2: NSPoint(x: 7.84, y: 27))
        bookmarkremove2Path.line(to: NSPoint(x: 15.5, y: 27))
        bookmarkremove2Path.curve(to: NSPoint(x: 18.5, y: 24.01), controlPoint1: NSPoint(x: 17.16, y: 27), controlPoint2: NSPoint(x: 18.5, y: 25.66))
        bookmarkremove2Path.line(to: NSPoint(x: 18.5, y: 23.98))
        bookmarkremove2Path.curve(to: NSPoint(x: 18, y: 24), controlPoint1: NSPoint(x: 18.33, y: 23.99), controlPoint2: NSPoint(x: 18.17, y: 24))
        bookmarkremove2Path.curve(to: NSPoint(x: 11.5, y: 17.5), controlPoint1: NSPoint(x: 14.41, y: 24), controlPoint2: NSPoint(x: 11.5, y: 21.09))
        bookmarkremove2Path.curve(to: NSPoint(x: 18, y: 11), controlPoint1: NSPoint(x: 11.5, y: 13.91), controlPoint2: NSPoint(x: 14.41, y: 11))
        bookmarkremove2Path.curve(to: NSPoint(x: 18.5, y: 11.02), controlPoint1: NSPoint(x: 18.17, y: 11), controlPoint2: NSPoint(x: 18.33, y: 11.01))
        bookmarkremove2Path.line(to: NSPoint(x: 18.5, y: 11.02))
        bookmarkremove2Path.line(to: NSPoint(x: 18.5, y: 11.02))
        bookmarkremove2Path.close()
        bookmarkremove2Path.move(to: NSPoint(x: 18, y: 12))
        bookmarkremove2Path.curve(to: NSPoint(x: 23.5, y: 17.5), controlPoint1: NSPoint(x: 21.04, y: 12), controlPoint2: NSPoint(x: 23.5, y: 14.46))
        bookmarkremove2Path.curve(to: NSPoint(x: 18, y: 23), controlPoint1: NSPoint(x: 23.5, y: 20.54), controlPoint2: NSPoint(x: 21.04, y: 23))
        bookmarkremove2Path.curve(to: NSPoint(x: 12.5, y: 17.5), controlPoint1: NSPoint(x: 14.96, y: 23), controlPoint2: NSPoint(x: 12.5, y: 20.54))
        bookmarkremove2Path.curve(to: NSPoint(x: 18, y: 12), controlPoint1: NSPoint(x: 12.5, y: 14.46), controlPoint2: NSPoint(x: 14.96, y: 12))
        bookmarkremove2Path.line(to: NSPoint(x: 18, y: 12))
        bookmarkremove2Path.close()
        bookmarkremove2Path.move(to: NSPoint(x: 14.5, y: 18))
        bookmarkremove2Path.line(to: NSPoint(x: 14.5, y: 17))
        bookmarkremove2Path.line(to: NSPoint(x: 21.5, y: 17))
        bookmarkremove2Path.line(to: NSPoint(x: 21.5, y: 18))
        bookmarkremove2Path.line(to: NSPoint(x: 14.5, y: 18))
        bookmarkremove2Path.line(to: NSPoint(x: 14.5, y: 18))
        bookmarkremove2Path.close()
        bookmarkremove2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        bookmarkremove2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawEyeHidden(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-21-eye-hidden
        //// eye-hidden 2 Drawing
        let eyehidden2Path = NSBezierPath()
        eyehidden2Path.move(to: NSPoint(x: 7.11, y: 10.11))
        eyehidden2Path.curve(to: NSPoint(x: 2, y: 15), controlPoint1: NSPoint(x: 3.62, y: 12.17), controlPoint2: NSPoint(x: 2, y: 15))
        eyehidden2Path.curve(to: NSPoint(x: 15, y: 22), controlPoint1: NSPoint(x: 2, y: 15), controlPoint2: NSPoint(x: 6, y: 22))
        eyehidden2Path.curve(to: NSPoint(x: 18.6, y: 21.6), controlPoint1: NSPoint(x: 16.3, y: 22), controlPoint2: NSPoint(x: 17.5, y: 21.85))
        eyehidden2Path.line(to: NSPoint(x: 15.9, y: 18.9))
        eyehidden2Path.curve(to: NSPoint(x: 15, y: 19), controlPoint1: NSPoint(x: 15.61, y: 18.96), controlPoint2: NSPoint(x: 15.31, y: 19))
        eyehidden2Path.curve(to: NSPoint(x: 11, y: 15), controlPoint1: NSPoint(x: 12.79, y: 19), controlPoint2: NSPoint(x: 11, y: 17.21))
        eyehidden2Path.curve(to: NSPoint(x: 11.1, y: 14.1), controlPoint1: NSPoint(x: 11, y: 14.69), controlPoint2: NSPoint(x: 11.04, y: 14.39))
        eyehidden2Path.line(to: NSPoint(x: 7.11, y: 10.11))
        eyehidden2Path.line(to: NSPoint(x: 7.11, y: 10.11))
        eyehidden2Path.line(to: NSPoint(x: 7.11, y: 10.11))
        eyehidden2Path.close()
        eyehidden2Path.move(to: NSPoint(x: 11.4, y: 8.4))
        eyehidden2Path.curve(to: NSPoint(x: 15, y: 8), controlPoint1: NSPoint(x: 12.5, y: 8.15), controlPoint2: NSPoint(x: 13.7, y: 8))
        eyehidden2Path.curve(to: NSPoint(x: 28, y: 15), controlPoint1: NSPoint(x: 24, y: 8), controlPoint2: NSPoint(x: 28, y: 15))
        eyehidden2Path.curve(to: NSPoint(x: 22.89, y: 19.89), controlPoint1: NSPoint(x: 28, y: 15), controlPoint2: NSPoint(x: 26.38, y: 17.83))
        eyehidden2Path.line(to: NSPoint(x: 18.9, y: 15.9))
        eyehidden2Path.curve(to: NSPoint(x: 19, y: 15), controlPoint1: NSPoint(x: 18.96, y: 15.61), controlPoint2: NSPoint(x: 19, y: 15.31))
        eyehidden2Path.curve(to: NSPoint(x: 15, y: 11), controlPoint1: NSPoint(x: 19, y: 12.79), controlPoint2: NSPoint(x: 17.21, y: 11))
        eyehidden2Path.curve(to: NSPoint(x: 14.1, y: 11.1), controlPoint1: NSPoint(x: 14.69, y: 11), controlPoint2: NSPoint(x: 14.39, y: 11.04))
        eyehidden2Path.line(to: NSPoint(x: 11.4, y: 8.4))
        eyehidden2Path.line(to: NSPoint(x: 11.4, y: 8.4))
        eyehidden2Path.line(to: NSPoint(x: 11.4, y: 8.4))
        eyehidden2Path.close()
        eyehidden2Path.move(to: NSPoint(x: 18, y: 15))
        eyehidden2Path.curve(to: NSPoint(x: 17.12, y: 12.88), controlPoint1: NSPoint(x: 18, y: 14.23), controlPoint2: NSPoint(x: 17.71, y: 13.46))
        eyehidden2Path.curve(to: NSPoint(x: 15, y: 12), controlPoint1: NSPoint(x: 16.54, y: 12.29), controlPoint2: NSPoint(x: 15.77, y: 12))
        eyehidden2Path.line(to: NSPoint(x: 18, y: 15))
        eyehidden2Path.line(to: NSPoint(x: 18, y: 15))
        eyehidden2Path.line(to: NSPoint(x: 18, y: 15))
        eyehidden2Path.close()
        eyehidden2Path.move(to: NSPoint(x: 15, y: 18))
        eyehidden2Path.curve(to: NSPoint(x: 12.88, y: 17.12), controlPoint1: NSPoint(x: 14.23, y: 18), controlPoint2: NSPoint(x: 13.46, y: 17.71))
        eyehidden2Path.curve(to: NSPoint(x: 12, y: 15), controlPoint1: NSPoint(x: 12.29, y: 16.54), controlPoint2: NSPoint(x: 12, y: 15.77))
        eyehidden2Path.line(to: NSPoint(x: 15, y: 18))
        eyehidden2Path.line(to: NSPoint(x: 15, y: 18))
        eyehidden2Path.line(to: NSPoint(x: 15, y: 18))
        eyehidden2Path.close()
        eyehidden2Path.move(to: NSPoint(x: 23, y: 24))
        eyehidden2Path.line(to: NSPoint(x: 6, y: 7))
        eyehidden2Path.line(to: NSPoint(x: 7, y: 6))
        eyehidden2Path.line(to: NSPoint(x: 24, y: 23))
        eyehidden2Path.line(to: NSPoint(x: 23, y: 24))
        eyehidden2Path.line(to: NSPoint(x: 23, y: 24))
        eyehidden2Path.close()
        eyehidden2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        eyehidden2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawEye(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-22-eye
        //// eye 2 Drawing
        let eye2Path = NSBezierPath()
        eye2Path.move(to: NSPoint(x: 15, y: 22))
        eye2Path.curve(to: NSPoint(x: 2, y: 15), controlPoint1: NSPoint(x: 6, y: 22), controlPoint2: NSPoint(x: 2, y: 15))
        eye2Path.curve(to: NSPoint(x: 15, y: 8), controlPoint1: NSPoint(x: 2, y: 15), controlPoint2: NSPoint(x: 6, y: 8))
        eye2Path.curve(to: NSPoint(x: 28, y: 15), controlPoint1: NSPoint(x: 24, y: 8), controlPoint2: NSPoint(x: 28, y: 15))
        eye2Path.curve(to: NSPoint(x: 15, y: 22), controlPoint1: NSPoint(x: 28, y: 15), controlPoint2: NSPoint(x: 24, y: 22))
        eye2Path.line(to: NSPoint(x: 15, y: 22))
        eye2Path.close()
        eye2Path.move(to: NSPoint(x: 15, y: 11))
        eye2Path.curve(to: NSPoint(x: 19, y: 15), controlPoint1: NSPoint(x: 17.21, y: 11), controlPoint2: NSPoint(x: 19, y: 12.79))
        eye2Path.curve(to: NSPoint(x: 15, y: 19), controlPoint1: NSPoint(x: 19, y: 17.21), controlPoint2: NSPoint(x: 17.21, y: 19))
        eye2Path.curve(to: NSPoint(x: 11, y: 15), controlPoint1: NSPoint(x: 12.79, y: 19), controlPoint2: NSPoint(x: 11, y: 17.21))
        eye2Path.curve(to: NSPoint(x: 15, y: 11), controlPoint1: NSPoint(x: 11, y: 12.79), controlPoint2: NSPoint(x: 12.79, y: 11))
        eye2Path.line(to: NSPoint(x: 15, y: 11))
        eye2Path.close()
        eye2Path.move(to: NSPoint(x: 15, y: 12))
        eye2Path.curve(to: NSPoint(x: 18, y: 15), controlPoint1: NSPoint(x: 16.66, y: 12), controlPoint2: NSPoint(x: 18, y: 13.34))
        eye2Path.curve(to: NSPoint(x: 15, y: 18), controlPoint1: NSPoint(x: 18, y: 16.66), controlPoint2: NSPoint(x: 16.66, y: 18))
        eye2Path.curve(to: NSPoint(x: 12, y: 15), controlPoint1: NSPoint(x: 13.34, y: 18), controlPoint2: NSPoint(x: 12, y: 16.66))
        eye2Path.curve(to: NSPoint(x: 15, y: 12), controlPoint1: NSPoint(x: 12, y: 13.34), controlPoint2: NSPoint(x: 13.34, y: 12))
        eye2Path.line(to: NSPoint(x: 15, y: 12))
        eye2Path.close()
        eye2Path.move(to: NSPoint(x: 15, y: 14))
        eye2Path.curve(to: NSPoint(x: 16, y: 15), controlPoint1: NSPoint(x: 15.55, y: 14), controlPoint2: NSPoint(x: 16, y: 14.45))
        eye2Path.curve(to: NSPoint(x: 15, y: 16), controlPoint1: NSPoint(x: 16, y: 15.55), controlPoint2: NSPoint(x: 15.55, y: 16))
        eye2Path.curve(to: NSPoint(x: 14, y: 15), controlPoint1: NSPoint(x: 14.45, y: 16), controlPoint2: NSPoint(x: 14, y: 15.55))
        eye2Path.curve(to: NSPoint(x: 15, y: 14), controlPoint1: NSPoint(x: 14, y: 14.45), controlPoint2: NSPoint(x: 14.45, y: 14))
        eye2Path.line(to: NSPoint(x: 15, y: 14))
        eye2Path.close()
        eye2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        eye2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawStar(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-23-star
        //// star 2 Drawing
        let star2Path = NSBezierPath()
        star2Path.move(to: NSPoint(x: 15, y: 8))
        star2Path.line(to: NSPoint(x: 6, y: 2))
        star2Path.line(to: NSPoint(x: 10, y: 12))
        star2Path.line(to: NSPoint(x: 1, y: 18))
        star2Path.line(to: NSPoint(x: 11, y: 18))
        star2Path.line(to: NSPoint(x: 15, y: 28))
        star2Path.line(to: NSPoint(x: 19, y: 18))
        star2Path.line(to: NSPoint(x: 29, y: 18))
        star2Path.line(to: NSPoint(x: 20, y: 12))
        star2Path.line(to: NSPoint(x: 24, y: 2))
        star2Path.line(to: NSPoint(x: 15, y: 8))
        star2Path.close()
        star2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        star2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawKey(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-24-key
        //// key 3 Drawing
        let key3Path = NSBezierPath()
        key3Path.move(to: NSPoint(x: 17.03, y: 12.03))
        key3Path.line(to: NSPoint(x: 12.5, y: 7.5))
        key3Path.line(to: NSPoint(x: 9.5, y: 7.5))
        key3Path.line(to: NSPoint(x: 9.5, y: 4.5))
        key3Path.line(to: NSPoint(x: 6.5, y: 4.5))
        key3Path.line(to: NSPoint(x: 6.5, y: 1.5))
        key3Path.line(to: NSPoint(x: 1.5, y: 1.5))
        key3Path.line(to: NSPoint(x: 1.5, y: 6.5))
        key3Path.line(to: NSPoint(x: 12.03, y: 17.03))
        key3Path.curve(to: NSPoint(x: 11.5, y: 20), controlPoint1: NSPoint(x: 11.69, y: 17.96), controlPoint2: NSPoint(x: 11.5, y: 18.96))
        key3Path.curve(to: NSPoint(x: 20, y: 28.5), controlPoint1: NSPoint(x: 11.5, y: 24.69), controlPoint2: NSPoint(x: 15.31, y: 28.5))
        key3Path.curve(to: NSPoint(x: 28.5, y: 20), controlPoint1: NSPoint(x: 24.69, y: 28.5), controlPoint2: NSPoint(x: 28.5, y: 24.69))
        key3Path.curve(to: NSPoint(x: 20, y: 11.5), controlPoint1: NSPoint(x: 28.5, y: 15.31), controlPoint2: NSPoint(x: 24.69, y: 11.5))
        key3Path.curve(to: NSPoint(x: 17.03, y: 12.03), controlPoint1: NSPoint(x: 18.96, y: 11.5), controlPoint2: NSPoint(x: 17.96, y: 11.69))
        key3Path.line(to: NSPoint(x: 17.03, y: 12.03))
        key3Path.line(to: NSPoint(x: 17.03, y: 12.03))
        key3Path.close()
        key3Path.move(to: NSPoint(x: 25.5, y: 22.5))
        key3Path.curve(to: NSPoint(x: 22.5, y: 25.5), controlPoint1: NSPoint(x: 25.5, y: 24.16), controlPoint2: NSPoint(x: 24.16, y: 25.5))
        key3Path.curve(to: NSPoint(x: 19.5, y: 22.5), controlPoint1: NSPoint(x: 20.84, y: 25.5), controlPoint2: NSPoint(x: 19.5, y: 24.16))
        key3Path.curve(to: NSPoint(x: 22.5, y: 19.5), controlPoint1: NSPoint(x: 19.5, y: 20.84), controlPoint2: NSPoint(x: 20.84, y: 19.5))
        key3Path.curve(to: NSPoint(x: 25.5, y: 22.5), controlPoint1: NSPoint(x: 24.16, y: 19.5), controlPoint2: NSPoint(x: 25.5, y: 20.84))
        key3Path.line(to: NSPoint(x: 25.5, y: 22.5))
        key3Path.close()
        key3Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        key3Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawKey2(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-25-key
        //// key 3 Drawing
        let key3Path = NSBezierPath()
        key3Path.move(to: NSPoint(x: 12.01, y: 9))
        key3Path.line(to: NSPoint(x: 10.51, y: 7.5))
        key3Path.line(to: NSPoint(x: 10.51, y: 7.5))
        key3Path.line(to: NSPoint(x: 13.01, y: 5))
        key3Path.line(to: NSPoint(x: 10.01, y: 2))
        key3Path.line(to: NSPoint(x: 7.51, y: 4.5))
        key3Path.line(to: NSPoint(x: 5.63, y: 2.62))
        key3Path.curve(to: NSPoint(x: 2.59, y: 2.62), controlPoint1: NSPoint(x: 4.79, y: 1.78), controlPoint2: NSPoint(x: 3.43, y: 1.78))
        key3Path.line(to: NSPoint(x: 2.63, y: 2.58))
        key3Path.curve(to: NSPoint(x: 2.63, y: 5.62), controlPoint1: NSPoint(x: 1.79, y: 3.42), controlPoint2: NSPoint(x: 1.79, y: 4.78))
        key3Path.line(to: NSPoint(x: 14.79, y: 17.78))
        key3Path.curve(to: NSPoint(x: 14.01, y: 21), controlPoint1: NSPoint(x: 14.29, y: 18.75), controlPoint2: NSPoint(x: 14.01, y: 19.84))
        key3Path.curve(to: NSPoint(x: 21.01, y: 28), controlPoint1: NSPoint(x: 14.01, y: 24.87), controlPoint2: NSPoint(x: 17.14, y: 28))
        key3Path.curve(to: NSPoint(x: 28.01, y: 21), controlPoint1: NSPoint(x: 24.87, y: 28), controlPoint2: NSPoint(x: 28.01, y: 24.87))
        key3Path.curve(to: NSPoint(x: 21.01, y: 14), controlPoint1: NSPoint(x: 28.01, y: 17.13), controlPoint2: NSPoint(x: 24.87, y: 14))
        key3Path.curve(to: NSPoint(x: 17.79, y: 14.78), controlPoint1: NSPoint(x: 19.85, y: 14), controlPoint2: NSPoint(x: 18.75, y: 14.28))
        key3Path.line(to: NSPoint(x: 17.79, y: 14.78))
        key3Path.line(to: NSPoint(x: 15.01, y: 12))
        key3Path.line(to: NSPoint(x: 17.01, y: 10))
        key3Path.line(to: NSPoint(x: 14.01, y: 7))
        key3Path.line(to: NSPoint(x: 12.01, y: 9))
        key3Path.line(to: NSPoint(x: 12.01, y: 9))
        key3Path.line(to: NSPoint(x: 12.01, y: 9))
        key3Path.close()
        key3Path.move(to: NSPoint(x: 21.01, y: 17))
        key3Path.curve(to: NSPoint(x: 25.01, y: 21), controlPoint1: NSPoint(x: 23.22, y: 17), controlPoint2: NSPoint(x: 25.01, y: 18.79))
        key3Path.curve(to: NSPoint(x: 21.01, y: 25), controlPoint1: NSPoint(x: 25.01, y: 23.21), controlPoint2: NSPoint(x: 23.22, y: 25))
        key3Path.curve(to: NSPoint(x: 17.01, y: 21), controlPoint1: NSPoint(x: 18.8, y: 25), controlPoint2: NSPoint(x: 17.01, y: 23.21))
        key3Path.curve(to: NSPoint(x: 21.01, y: 17), controlPoint1: NSPoint(x: 17.01, y: 18.79), controlPoint2: NSPoint(x: 18.8, y: 17))
        key3Path.line(to: NSPoint(x: 21.01, y: 17))
        key3Path.close()
        key3Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        key3Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawTrashCan(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-26-trash-can
        //// trash-can 3 Drawing
        let trashcan3Path = NSBezierPath()
        trashcan3Path.move(to: NSPoint(x: 19.5, y: 25.5))
        trashcan3Path.line(to: NSPoint(x: 23.5, y: 25.5))
        trashcan3Path.line(to: NSPoint(x: 23.5, y: 24.5))
        trashcan3Path.line(to: NSPoint(x: 6.5, y: 24.5))
        trashcan3Path.line(to: NSPoint(x: 6.5, y: 25.5))
        trashcan3Path.line(to: NSPoint(x: 10.5, y: 25.5))
        trashcan3Path.line(to: NSPoint(x: 10.5, y: 26.5))
        trashcan3Path.curve(to: NSPoint(x: 12.5, y: 28.5), controlPoint1: NSPoint(x: 10.5, y: 27.61), controlPoint2: NSPoint(x: 11.39, y: 28.5))
        trashcan3Path.line(to: NSPoint(x: 17.5, y: 28.5))
        trashcan3Path.curve(to: NSPoint(x: 19.5, y: 26.5), controlPoint1: NSPoint(x: 18.6, y: 28.5), controlPoint2: NSPoint(x: 19.5, y: 27.6))
        trashcan3Path.line(to: NSPoint(x: 19.5, y: 25.5))
        trashcan3Path.line(to: NSPoint(x: 19.5, y: 25.5))
        trashcan3Path.close()
        trashcan3Path.move(to: NSPoint(x: 6.5, y: 23.5))
        trashcan3Path.line(to: NSPoint(x: 6.5, y: 4.5))
        trashcan3Path.curve(to: NSPoint(x: 9.5, y: 1.5), controlPoint1: NSPoint(x: 6.5, y: 2.84), controlPoint2: NSPoint(x: 7.83, y: 1.5))
        trashcan3Path.line(to: NSPoint(x: 20.5, y: 1.5))
        trashcan3Path.curve(to: NSPoint(x: 23.5, y: 4.5), controlPoint1: NSPoint(x: 22.16, y: 1.5), controlPoint2: NSPoint(x: 23.5, y: 2.84))
        trashcan3Path.line(to: NSPoint(x: 23.5, y: 23.5))
        trashcan3Path.line(to: NSPoint(x: 6.5, y: 23.5))
        trashcan3Path.line(to: NSPoint(x: 6.5, y: 23.5))
        trashcan3Path.close()
        trashcan3Path.move(to: NSPoint(x: 10.5, y: 20.5))
        trashcan3Path.line(to: NSPoint(x: 10.5, y: 4.5))
        trashcan3Path.line(to: NSPoint(x: 11.5, y: 4.5))
        trashcan3Path.line(to: NSPoint(x: 11.5, y: 20.5))
        trashcan3Path.line(to: NSPoint(x: 10.5, y: 20.5))
        trashcan3Path.line(to: NSPoint(x: 10.5, y: 20.5))
        trashcan3Path.close()
        trashcan3Path.move(to: NSPoint(x: 14.5, y: 20.5))
        trashcan3Path.line(to: NSPoint(x: 14.5, y: 4.5))
        trashcan3Path.line(to: NSPoint(x: 15.5, y: 4.5))
        trashcan3Path.line(to: NSPoint(x: 15.5, y: 20.5))
        trashcan3Path.line(to: NSPoint(x: 14.5, y: 20.5))
        trashcan3Path.line(to: NSPoint(x: 14.5, y: 20.5))
        trashcan3Path.close()
        trashcan3Path.move(to: NSPoint(x: 18.5, y: 20.5))
        trashcan3Path.line(to: NSPoint(x: 18.5, y: 4.5))
        trashcan3Path.line(to: NSPoint(x: 19.5, y: 4.5))
        trashcan3Path.line(to: NSPoint(x: 19.5, y: 20.5))
        trashcan3Path.line(to: NSPoint(x: 18.5, y: 20.5))
        trashcan3Path.line(to: NSPoint(x: 18.5, y: 20.5))
        trashcan3Path.close()
        trashcan3Path.move(to: NSPoint(x: 12.5, y: 27.5))
        trashcan3Path.curve(to: NSPoint(x: 11.5, y: 26.5), controlPoint1: NSPoint(x: 11.95, y: 27.5), controlPoint2: NSPoint(x: 11.5, y: 27.06))
        trashcan3Path.line(to: NSPoint(x: 11.5, y: 25.5))
        trashcan3Path.line(to: NSPoint(x: 18.5, y: 25.5))
        trashcan3Path.line(to: NSPoint(x: 18.5, y: 26.5))
        trashcan3Path.curve(to: NSPoint(x: 17.5, y: 27.5), controlPoint1: NSPoint(x: 18.5, y: 27.05), controlPoint2: NSPoint(x: 18.06, y: 27.5))
        trashcan3Path.line(to: NSPoint(x: 12.5, y: 27.5))
        trashcan3Path.line(to: NSPoint(x: 12.5, y: 27.5))
        trashcan3Path.close()
        trashcan3Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        trashcan3Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawTrashCan2(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-27-trash-can
        //// trash-can 3 Drawing
        let trashcan3Path = NSBezierPath()
        trashcan3Path.move(to: NSPoint(x: 21.5, y: 24.5))
        trashcan3Path.line(to: NSPoint(x: 19.5, y: 24.5))
        trashcan3Path.line(to: NSPoint(x: 19.5, y: 24.5))
        trashcan3Path.line(to: NSPoint(x: 19.5, y: 26.5))
        trashcan3Path.curve(to: NSPoint(x: 17.5, y: 28.5), controlPoint1: NSPoint(x: 19.5, y: 27.6), controlPoint2: NSPoint(x: 18.6, y: 28.5))
        trashcan3Path.line(to: NSPoint(x: 12.5, y: 28.5))
        trashcan3Path.curve(to: NSPoint(x: 10.5, y: 26.5), controlPoint1: NSPoint(x: 11.39, y: 28.5), controlPoint2: NSPoint(x: 10.5, y: 27.61))
        trashcan3Path.line(to: NSPoint(x: 10.5, y: 24.5))
        trashcan3Path.line(to: NSPoint(x: 8.5, y: 24.5))
        trashcan3Path.line(to: NSPoint(x: 4.5, y: 24.5))
        trashcan3Path.line(to: NSPoint(x: 4.5, y: 23.5))
        trashcan3Path.line(to: NSPoint(x: 6.5, y: 23.5))
        trashcan3Path.line(to: NSPoint(x: 6.5, y: 4.51))
        trashcan3Path.curve(to: NSPoint(x: 9.5, y: 1.5), controlPoint1: NSPoint(x: 6.5, y: 2.85), controlPoint2: NSPoint(x: 7.83, y: 1.5))
        trashcan3Path.line(to: NSPoint(x: 20.5, y: 1.5))
        trashcan3Path.curve(to: NSPoint(x: 23.5, y: 4.51), controlPoint1: NSPoint(x: 22.16, y: 1.5), controlPoint2: NSPoint(x: 23.5, y: 2.84))
        trashcan3Path.line(to: NSPoint(x: 23.5, y: 23.5))
        trashcan3Path.line(to: NSPoint(x: 25.5, y: 23.5))
        trashcan3Path.line(to: NSPoint(x: 25.5, y: 24.5))
        trashcan3Path.line(to: NSPoint(x: 21.5, y: 24.5))
        trashcan3Path.line(to: NSPoint(x: 21.5, y: 24.5))
        trashcan3Path.close()
        trashcan3Path.move(to: NSPoint(x: 10.5, y: 21.5))
        trashcan3Path.line(to: NSPoint(x: 10.5, y: 4.5))
        trashcan3Path.line(to: NSPoint(x: 11.5, y: 4.5))
        trashcan3Path.line(to: NSPoint(x: 11.5, y: 21.5))
        trashcan3Path.line(to: NSPoint(x: 10.5, y: 21.5))
        trashcan3Path.line(to: NSPoint(x: 10.5, y: 21.5))
        trashcan3Path.close()
        trashcan3Path.move(to: NSPoint(x: 14.5, y: 21.5))
        trashcan3Path.line(to: NSPoint(x: 14.5, y: 4.5))
        trashcan3Path.line(to: NSPoint(x: 15.5, y: 4.5))
        trashcan3Path.line(to: NSPoint(x: 15.5, y: 21.5))
        trashcan3Path.line(to: NSPoint(x: 14.5, y: 21.5))
        trashcan3Path.line(to: NSPoint(x: 14.5, y: 21.5))
        trashcan3Path.close()
        trashcan3Path.move(to: NSPoint(x: 18.5, y: 21.5))
        trashcan3Path.line(to: NSPoint(x: 18.5, y: 4.5))
        trashcan3Path.line(to: NSPoint(x: 19.5, y: 4.5))
        trashcan3Path.line(to: NSPoint(x: 19.5, y: 21.5))
        trashcan3Path.line(to: NSPoint(x: 18.5, y: 21.5))
        trashcan3Path.line(to: NSPoint(x: 18.5, y: 21.5))
        trashcan3Path.close()
        trashcan3Path.move(to: NSPoint(x: 12.5, y: 27.5))
        trashcan3Path.curve(to: NSPoint(x: 11.5, y: 26.5), controlPoint1: NSPoint(x: 11.95, y: 27.5), controlPoint2: NSPoint(x: 11.5, y: 27.06))
        trashcan3Path.line(to: NSPoint(x: 11.5, y: 24.5))
        trashcan3Path.line(to: NSPoint(x: 18.5, y: 24.5))
        trashcan3Path.line(to: NSPoint(x: 18.5, y: 26.5))
        trashcan3Path.curve(to: NSPoint(x: 17.5, y: 27.5), controlPoint1: NSPoint(x: 18.5, y: 27.05), controlPoint2: NSPoint(x: 18.06, y: 27.5))
        trashcan3Path.line(to: NSPoint(x: 12.5, y: 27.5))
        trashcan3Path.line(to: NSPoint(x: 12.5, y: 27.5))
        trashcan3Path.close()
        trashcan3Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        trashcan3Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawInformation(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-28-information
        //// information 3 Drawing
        let information3Path = NSBezierPath()
        information3Path.move(to: NSPoint(x: 15, y: 5.5))
        information3Path.curve(to: NSPoint(x: 24.5, y: 15), controlPoint1: NSPoint(x: 20.25, y: 5.5), controlPoint2: NSPoint(x: 24.5, y: 9.75))
        information3Path.curve(to: NSPoint(x: 15, y: 24.5), controlPoint1: NSPoint(x: 24.5, y: 20.25), controlPoint2: NSPoint(x: 20.25, y: 24.5))
        information3Path.curve(to: NSPoint(x: 5.5, y: 15), controlPoint1: NSPoint(x: 9.75, y: 24.5), controlPoint2: NSPoint(x: 5.5, y: 20.25))
        information3Path.curve(to: NSPoint(x: 15, y: 5.5), controlPoint1: NSPoint(x: 5.5, y: 9.75), controlPoint2: NSPoint(x: 9.75, y: 5.5))
        information3Path.line(to: NSPoint(x: 15, y: 5.5))
        information3Path.close()
        information3Path.move(to: NSPoint(x: 15.5, y: 10.5))
        information3Path.line(to: NSPoint(x: 15.5, y: 15.5))
        information3Path.line(to: NSPoint(x: 15, y: 15.5))
        information3Path.line(to: NSPoint(x: 12.5, y: 15.5))
        information3Path.line(to: NSPoint(x: 12.5, y: 14.5))
        information3Path.line(to: NSPoint(x: 14.5, y: 14.5))
        information3Path.line(to: NSPoint(x: 14.5, y: 10.5))
        information3Path.line(to: NSPoint(x: 12.5, y: 10.5))
        information3Path.line(to: NSPoint(x: 12.5, y: 9.5))
        information3Path.line(to: NSPoint(x: 17.5, y: 9.5))
        information3Path.line(to: NSPoint(x: 17.5, y: 10.5))
        information3Path.line(to: NSPoint(x: 15.5, y: 10.5))
        information3Path.line(to: NSPoint(x: 15.5, y: 10.5))
        information3Path.close()
        information3Path.move(to: NSPoint(x: 15, y: 17.5))
        information3Path.curve(to: NSPoint(x: 16.5, y: 19), controlPoint1: NSPoint(x: 15.83, y: 17.5), controlPoint2: NSPoint(x: 16.5, y: 18.17))
        information3Path.curve(to: NSPoint(x: 15, y: 20.5), controlPoint1: NSPoint(x: 16.5, y: 19.83), controlPoint2: NSPoint(x: 15.83, y: 20.5))
        information3Path.curve(to: NSPoint(x: 13.5, y: 19), controlPoint1: NSPoint(x: 14.17, y: 20.5), controlPoint2: NSPoint(x: 13.5, y: 19.83))
        information3Path.curve(to: NSPoint(x: 15, y: 17.5), controlPoint1: NSPoint(x: 13.5, y: 18.17), controlPoint2: NSPoint(x: 14.17, y: 17.5))
        information3Path.line(to: NSPoint(x: 15, y: 17.5))
        information3Path.close()
        information3Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        information3Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawInformation2(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-29-information
        //// information 3 Drawing
        let information3Path = NSBezierPath()
        information3Path.move(to: NSPoint(x: 15, y: 2.5))
        information3Path.curve(to: NSPoint(x: 27.5, y: 15), controlPoint1: NSPoint(x: 21.9, y: 2.5), controlPoint2: NSPoint(x: 27.5, y: 8.1))
        information3Path.curve(to: NSPoint(x: 15, y: 27.5), controlPoint1: NSPoint(x: 27.5, y: 21.9), controlPoint2: NSPoint(x: 21.9, y: 27.5))
        information3Path.curve(to: NSPoint(x: 2.5, y: 15), controlPoint1: NSPoint(x: 8.1, y: 27.5), controlPoint2: NSPoint(x: 2.5, y: 21.9))
        information3Path.curve(to: NSPoint(x: 15, y: 2.5), controlPoint1: NSPoint(x: 2.5, y: 8.1), controlPoint2: NSPoint(x: 8.1, y: 2.5))
        information3Path.line(to: NSPoint(x: 15, y: 2.5))
        information3Path.close()
        information3Path.move(to: NSPoint(x: 15.5, y: 9.5))
        information3Path.line(to: NSPoint(x: 15.5, y: 15.75))
        information3Path.line(to: NSPoint(x: 15.5, y: 16.5))
        information3Path.line(to: NSPoint(x: 12.5, y: 16.5))
        information3Path.line(to: NSPoint(x: 12.5, y: 15.5))
        information3Path.line(to: NSPoint(x: 14.5, y: 15.5))
        information3Path.line(to: NSPoint(x: 14.5, y: 9.5))
        information3Path.line(to: NSPoint(x: 12.5, y: 9.5))
        information3Path.line(to: NSPoint(x: 12.5, y: 8.5))
        information3Path.line(to: NSPoint(x: 17.5, y: 8.5))
        information3Path.line(to: NSPoint(x: 17.5, y: 9.5))
        information3Path.line(to: NSPoint(x: 15.5, y: 9.5))
        information3Path.line(to: NSPoint(x: 15.5, y: 9.5))
        information3Path.line(to: NSPoint(x: 15.5, y: 9.5))
        information3Path.close()
        information3Path.move(to: NSPoint(x: 15, y: 18.5))
        information3Path.curve(to: NSPoint(x: 16.5, y: 20), controlPoint1: NSPoint(x: 15.83, y: 18.5), controlPoint2: NSPoint(x: 16.5, y: 19.17))
        information3Path.curve(to: NSPoint(x: 15, y: 21.5), controlPoint1: NSPoint(x: 16.5, y: 20.83), controlPoint2: NSPoint(x: 15.83, y: 21.5))
        information3Path.curve(to: NSPoint(x: 13.5, y: 20), controlPoint1: NSPoint(x: 14.17, y: 21.5), controlPoint2: NSPoint(x: 13.5, y: 20.83))
        information3Path.curve(to: NSPoint(x: 15, y: 18.5), controlPoint1: NSPoint(x: 13.5, y: 19.17), controlPoint2: NSPoint(x: 14.17, y: 18.5))
        information3Path.line(to: NSPoint(x: 15, y: 18.5))
        information3Path.close()
        information3Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        information3Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawBook(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-30-book
        //// book 2 Drawing
        let book2Path = NSBezierPath()
        book2Path.move(to: NSPoint(x: 7.99, y: 2.5))
        book2Path.curve(to: NSPoint(x: 5, y: 5.5), controlPoint1: NSPoint(x: 6.34, y: 2.5), controlPoint2: NSPoint(x: 5, y: 3.84))
        book2Path.line(to: NSPoint(x: 5, y: 25))
        book2Path.curve(to: NSPoint(x: 7.49, y: 27.5), controlPoint1: NSPoint(x: 5, y: 26.39), controlPoint2: NSPoint(x: 6.12, y: 27.5))
        book2Path.line(to: NSPoint(x: 25, y: 27.5))
        book2Path.line(to: NSPoint(x: 25, y: 26.5))
        book2Path.line(to: NSPoint(x: 24.5, y: 26.5))
        book2Path.curve(to: NSPoint(x: 23, y: 25), controlPoint1: NSPoint(x: 23.68, y: 26.5), controlPoint2: NSPoint(x: 23, y: 25.83))
        book2Path.curve(to: NSPoint(x: 24.5, y: 23.5), controlPoint1: NSPoint(x: 23, y: 24.17), controlPoint2: NSPoint(x: 23.67, y: 23.5))
        book2Path.line(to: NSPoint(x: 25, y: 23.5))
        book2Path.line(to: NSPoint(x: 25, y: 2.5))
        book2Path.line(to: NSPoint(x: 10, y: 2.5))
        book2Path.line(to: NSPoint(x: 10, y: 23.5))
        book2Path.line(to: NSPoint(x: 22.5, y: 23.5))
        book2Path.curve(to: NSPoint(x: 22, y: 25.03), controlPoint1: NSPoint(x: 22.5, y: 23.5), controlPoint2: NSPoint(x: 22, y: 24.29))
        book2Path.curve(to: NSPoint(x: 22.5, y: 26.5), controlPoint1: NSPoint(x: 22, y: 25.76), controlPoint2: NSPoint(x: 22.5, y: 26.5))
        book2Path.line(to: NSPoint(x: 7.49, y: 26.5))
        book2Path.curve(to: NSPoint(x: 6, y: 25), controlPoint1: NSPoint(x: 6.67, y: 26.5), controlPoint2: NSPoint(x: 6, y: 25.83))
        book2Path.curve(to: NSPoint(x: 7.49, y: 23.5), controlPoint1: NSPoint(x: 6, y: 24.17), controlPoint2: NSPoint(x: 6.67, y: 23.5))
        book2Path.line(to: NSPoint(x: 9, y: 23.5))
        book2Path.line(to: NSPoint(x: 9, y: 2.5))
        book2Path.line(to: NSPoint(x: 7.99, y: 2.5))
        book2Path.close()
        book2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        book2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawBookBookmark(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-31-book-bookmark
        //// book-bookmark 2 Drawing
        let bookbookmark2Path = NSBezierPath()
        bookbookmark2Path.move(to: NSPoint(x: 14, y: 23.5))
        bookbookmark2Path.line(to: NSPoint(x: 10, y: 23.5))
        bookbookmark2Path.line(to: NSPoint(x: 10, y: 2.5))
        bookbookmark2Path.line(to: NSPoint(x: 25, y: 2.5))
        bookbookmark2Path.line(to: NSPoint(x: 25, y: 23))
        bookbookmark2Path.line(to: NSPoint(x: 25, y: 23.5))
        bookbookmark2Path.line(to: NSPoint(x: 24.5, y: 23.5))
        bookbookmark2Path.curve(to: NSPoint(x: 23, y: 25), controlPoint1: NSPoint(x: 23.67, y: 23.5), controlPoint2: NSPoint(x: 23, y: 24.17))
        bookbookmark2Path.curve(to: NSPoint(x: 24.5, y: 26.5), controlPoint1: NSPoint(x: 23, y: 25.83), controlPoint2: NSPoint(x: 23.68, y: 26.5))
        bookbookmark2Path.line(to: NSPoint(x: 25, y: 26.5))
        bookbookmark2Path.line(to: NSPoint(x: 25, y: 27.5))
        bookbookmark2Path.line(to: NSPoint(x: 7.49, y: 27.5))
        bookbookmark2Path.curve(to: NSPoint(x: 5, y: 25), controlPoint1: NSPoint(x: 6.12, y: 27.5), controlPoint2: NSPoint(x: 5, y: 26.39))
        bookbookmark2Path.line(to: NSPoint(x: 5, y: 5.5))
        bookbookmark2Path.curve(to: NSPoint(x: 7.99, y: 2.5), controlPoint1: NSPoint(x: 5, y: 3.84), controlPoint2: NSPoint(x: 6.34, y: 2.5))
        bookbookmark2Path.line(to: NSPoint(x: 9, y: 2.5))
        bookbookmark2Path.line(to: NSPoint(x: 9, y: 23.5))
        bookbookmark2Path.line(to: NSPoint(x: 7.49, y: 23.5))
        bookbookmark2Path.curve(to: NSPoint(x: 6, y: 25), controlPoint1: NSPoint(x: 6.67, y: 23.5), controlPoint2: NSPoint(x: 6, y: 24.17))
        bookbookmark2Path.curve(to: NSPoint(x: 7.49, y: 26.5), controlPoint1: NSPoint(x: 6, y: 25.83), controlPoint2: NSPoint(x: 6.67, y: 26.5))
        bookbookmark2Path.line(to: NSPoint(x: 22.5, y: 26.5))
        bookbookmark2Path.curve(to: NSPoint(x: 22, y: 25.03), controlPoint1: NSPoint(x: 22.5, y: 26.5), controlPoint2: NSPoint(x: 22, y: 25.76))
        bookbookmark2Path.curve(to: NSPoint(x: 22.5, y: 23.5), controlPoint1: NSPoint(x: 22, y: 24.29), controlPoint2: NSPoint(x: 22.5, y: 23.5))
        bookbookmark2Path.line(to: NSPoint(x: 20, y: 23.5))
        bookbookmark2Path.line(to: NSPoint(x: 20, y: 11.5))
        bookbookmark2Path.line(to: NSPoint(x: 17, y: 14.5))
        bookbookmark2Path.line(to: NSPoint(x: 14, y: 11.5))
        bookbookmark2Path.line(to: NSPoint(x: 14, y: 23.5))
        bookbookmark2Path.line(to: NSPoint(x: 14, y: 23.5))
        bookbookmark2Path.close()
        bookbookmark2Path.move(to: NSPoint(x: 15, y: 23.5))
        bookbookmark2Path.line(to: NSPoint(x: 15, y: 13.9))
        bookbookmark2Path.line(to: NSPoint(x: 17, y: 15.9))
        bookbookmark2Path.line(to: NSPoint(x: 19, y: 13.9))
        bookbookmark2Path.line(to: NSPoint(x: 19, y: 23.5))
        bookbookmark2Path.line(to: NSPoint(x: 15, y: 23.5))
        bookbookmark2Path.line(to: NSPoint(x: 15, y: 23.5))
        bookbookmark2Path.close()
        bookbookmark2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        bookbookmark2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawClipboardEdit(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-32-clipboard-edit
        //// clipboard-edit 2 Drawing
        let clipboardedit2Path = NSBezierPath()
        clipboardedit2Path.move(to: NSPoint(x: 24.94, y: 18.35))
        clipboardedit2Path.line(to: NSPoint(x: 13.66, y: 7.05))
        clipboardedit2Path.line(to: NSPoint(x: 13.66, y: 7.05))
        clipboardedit2Path.line(to: NSPoint(x: 11.05, y: 9.66))
        clipboardedit2Path.line(to: NSPoint(x: 22.34, y: 20.95))
        clipboardedit2Path.line(to: NSPoint(x: 24.94, y: 18.35))
        clipboardedit2Path.line(to: NSPoint(x: 24.94, y: 18.35))
        clipboardedit2Path.close()
        clipboardedit2Path.move(to: NSPoint(x: 25.65, y: 19.06))
        clipboardedit2Path.line(to: NSPoint(x: 27.38, y: 20.79))
        clipboardedit2Path.curve(to: NSPoint(x: 27.37, y: 22.2), controlPoint1: NSPoint(x: 27.77, y: 21.18), controlPoint2: NSPoint(x: 27.77, y: 21.81))
        clipboardedit2Path.line(to: NSPoint(x: 26.19, y: 23.38))
        clipboardedit2Path.curve(to: NSPoint(x: 24.78, y: 23.38), controlPoint1: NSPoint(x: 25.8, y: 23.77), controlPoint2: NSPoint(x: 25.17, y: 23.78))
        clipboardedit2Path.line(to: NSPoint(x: 23.05, y: 21.66))
        clipboardedit2Path.line(to: NSPoint(x: 25.65, y: 19.06))
        clipboardedit2Path.line(to: NSPoint(x: 25.65, y: 19.06))
        clipboardedit2Path.close()
        clipboardedit2Path.move(to: NSPoint(x: 10.4, y: 8.89))
        clipboardedit2Path.line(to: NSPoint(x: 9.76, y: 5.78))
        clipboardedit2Path.line(to: NSPoint(x: 12.9, y: 6.39))
        clipboardedit2Path.line(to: NSPoint(x: 10.4, y: 8.89))
        clipboardedit2Path.line(to: NSPoint(x: 10.4, y: 8.89))
        clipboardedit2Path.line(to: NSPoint(x: 10.4, y: 8.89))
        clipboardedit2Path.close()
        clipboardedit2Path.move(to: NSPoint(x: 20.5, y: 20.5))
        clipboardedit2Path.line(to: NSPoint(x: 20.5, y: 23.5))
        clipboardedit2Path.curve(to: NSPoint(x: 18.5, y: 25.5), controlPoint1: NSPoint(x: 20.5, y: 24.6), controlPoint2: NSPoint(x: 19.61, y: 25.5))
        clipboardedit2Path.line(to: NSPoint(x: 17.5, y: 25.5))
        clipboardedit2Path.line(to: NSPoint(x: 17.5, y: 25.5))
        clipboardedit2Path.curve(to: NSPoint(x: 17.5, y: 25.5), controlPoint1: NSPoint(x: 17.5, y: 25.5), controlPoint2: NSPoint(x: 17.5, y: 25.5))
        clipboardedit2Path.line(to: NSPoint(x: 17.5, y: 24.5))
        clipboardedit2Path.curve(to: NSPoint(x: 15.5, y: 22.5), controlPoint1: NSPoint(x: 17.5, y: 23.39), controlPoint2: NSPoint(x: 16.6, y: 22.5))
        clipboardedit2Path.line(to: NSPoint(x: 6.5, y: 22.5))
        clipboardedit2Path.curve(to: NSPoint(x: 4.5, y: 24.5), controlPoint1: NSPoint(x: 5.39, y: 22.5), controlPoint2: NSPoint(x: 4.5, y: 23.4))
        clipboardedit2Path.line(to: NSPoint(x: 4.5, y: 25.5))
        clipboardedit2Path.curve(to: NSPoint(x: 4.5, y: 25.5), controlPoint1: NSPoint(x: 4.5, y: 25.5), controlPoint2: NSPoint(x: 4.5, y: 25.5))
        clipboardedit2Path.line(to: NSPoint(x: 3.5, y: 25.5))
        clipboardedit2Path.curve(to: NSPoint(x: 1.5, y: 23.5), controlPoint1: NSPoint(x: 2.39, y: 25.5), controlPoint2: NSPoint(x: 1.5, y: 24.61))
        clipboardedit2Path.line(to: NSPoint(x: 1.5, y: 2.5))
        clipboardedit2Path.curve(to: NSPoint(x: 3.5, y: 0.5), controlPoint1: NSPoint(x: 1.5, y: 1.4), controlPoint2: NSPoint(x: 2.39, y: 0.5))
        clipboardedit2Path.line(to: NSPoint(x: 18.5, y: 0.5))
        clipboardedit2Path.curve(to: NSPoint(x: 20.5, y: 2.5), controlPoint1: NSPoint(x: 19.61, y: 0.5), controlPoint2: NSPoint(x: 20.5, y: 1.39))
        clipboardedit2Path.line(to: NSPoint(x: 20.5, y: 12.5))
        clipboardedit2Path.line(to: NSPoint(x: 28.08, y: 20.08))
        clipboardedit2Path.curve(to: NSPoint(x: 28.09, y: 22.91), controlPoint1: NSPoint(x: 28.86, y: 20.86), controlPoint2: NSPoint(x: 28.87, y: 22.13))
        clipboardedit2Path.line(to: NSPoint(x: 26.91, y: 24.09))
        clipboardedit2Path.curve(to: NSPoint(x: 24.08, y: 24.08), controlPoint1: NSPoint(x: 26.13, y: 24.87), controlPoint2: NSPoint(x: 24.87, y: 24.87))
        clipboardedit2Path.line(to: NSPoint(x: 20.5, y: 20.5))
        clipboardedit2Path.line(to: NSPoint(x: 20.5, y: 20.5))
        clipboardedit2Path.line(to: NSPoint(x: 20.5, y: 20.5))
        clipboardedit2Path.close()
        clipboardedit2Path.move(to: NSPoint(x: 8.5, y: 26.5))
        clipboardedit2Path.line(to: NSPoint(x: 8.5, y: 27.5))
        clipboardedit2Path.curve(to: NSPoint(x: 10.5, y: 29.5), controlPoint1: NSPoint(x: 8.5, y: 28.6), controlPoint2: NSPoint(x: 9.4, y: 29.5))
        clipboardedit2Path.line(to: NSPoint(x: 11.5, y: 29.5))
        clipboardedit2Path.curve(to: NSPoint(x: 13.5, y: 27.5), controlPoint1: NSPoint(x: 12.61, y: 29.5), controlPoint2: NSPoint(x: 13.5, y: 28.61))
        clipboardedit2Path.line(to: NSPoint(x: 13.5, y: 26.5))
        clipboardedit2Path.line(to: NSPoint(x: 15.5, y: 26.5))
        clipboardedit2Path.curve(to: NSPoint(x: 16.5, y: 25.5), controlPoint1: NSPoint(x: 16.06, y: 26.5), controlPoint2: NSPoint(x: 16.5, y: 26.05))
        clipboardedit2Path.line(to: NSPoint(x: 16.5, y: 24.5))
        clipboardedit2Path.curve(to: NSPoint(x: 15.5, y: 23.5), controlPoint1: NSPoint(x: 16.5, y: 23.94), controlPoint2: NSPoint(x: 16.05, y: 23.5))
        clipboardedit2Path.line(to: NSPoint(x: 6.5, y: 23.5))
        clipboardedit2Path.curve(to: NSPoint(x: 5.5, y: 24.5), controlPoint1: NSPoint(x: 5.94, y: 23.5), controlPoint2: NSPoint(x: 5.5, y: 23.95))
        clipboardedit2Path.line(to: NSPoint(x: 5.5, y: 25.5))
        clipboardedit2Path.curve(to: NSPoint(x: 6.5, y: 26.5), controlPoint1: NSPoint(x: 5.5, y: 26.06), controlPoint2: NSPoint(x: 5.95, y: 26.5))
        clipboardedit2Path.line(to: NSPoint(x: 8.5, y: 26.5))
        clipboardedit2Path.line(to: NSPoint(x: 8.5, y: 26.5))
        clipboardedit2Path.close()
        clipboardedit2Path.move(to: NSPoint(x: 11, y: 26.5))
        clipboardedit2Path.curve(to: NSPoint(x: 11.5, y: 27), controlPoint1: NSPoint(x: 11.28, y: 26.5), controlPoint2: NSPoint(x: 11.5, y: 26.72))
        clipboardedit2Path.curve(to: NSPoint(x: 11, y: 27.5), controlPoint1: NSPoint(x: 11.5, y: 27.28), controlPoint2: NSPoint(x: 11.28, y: 27.5))
        clipboardedit2Path.curve(to: NSPoint(x: 10.5, y: 27), controlPoint1: NSPoint(x: 10.72, y: 27.5), controlPoint2: NSPoint(x: 10.5, y: 27.28))
        clipboardedit2Path.curve(to: NSPoint(x: 11, y: 26.5), controlPoint1: NSPoint(x: 10.5, y: 26.72), controlPoint2: NSPoint(x: 10.72, y: 26.5))
        clipboardedit2Path.line(to: NSPoint(x: 11, y: 26.5))
        clipboardedit2Path.close()
        clipboardedit2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        clipboardedit2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawClipboardAdd(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-33-clipboard-add
        //// clipboard-add 2 Drawing
        let clipboardadd2Path = NSBezierPath()
        clipboardadd2Path.move(to: NSPoint(x: 19.77, y: 4.84))
        clipboardadd2Path.line(to: NSPoint(x: 16.91, y: 4.84))
        clipboardadd2Path.line(to: NSPoint(x: 16.91, y: 5.81))
        clipboardadd2Path.line(to: NSPoint(x: 19.77, y: 5.81))
        clipboardadd2Path.line(to: NSPoint(x: 19.77, y: 8.71))
        clipboardadd2Path.line(to: NSPoint(x: 20.73, y: 8.71))
        clipboardadd2Path.line(to: NSPoint(x: 20.73, y: 5.81))
        clipboardadd2Path.line(to: NSPoint(x: 23.59, y: 5.81))
        clipboardadd2Path.line(to: NSPoint(x: 23.59, y: 4.84))
        clipboardadd2Path.line(to: NSPoint(x: 20.73, y: 4.84))
        clipboardadd2Path.line(to: NSPoint(x: 20.73, y: 1.94))
        clipboardadd2Path.line(to: NSPoint(x: 19.77, y: 1.94))
        clipboardadd2Path.line(to: NSPoint(x: 19.77, y: 4.84))
        clipboardadd2Path.line(to: NSPoint(x: 19.77, y: 4.84))
        clipboardadd2Path.close()
        clipboardadd2Path.move(to: NSPoint(x: 22.64, y: 11.13))
        clipboardadd2Path.line(to: NSPoint(x: 22.64, y: 24.19))
        clipboardadd2Path.curve(to: NSPoint(x: 20.73, y: 26.13), controlPoint1: NSPoint(x: 22.64, y: 25.26), controlPoint2: NSPoint(x: 21.79, y: 26.13))
        clipboardadd2Path.line(to: NSPoint(x: 19.77, y: 26.13))
        clipboardadd2Path.line(to: NSPoint(x: 19.77, y: 26.13))
        clipboardadd2Path.curve(to: NSPoint(x: 19.77, y: 26.12), controlPoint1: NSPoint(x: 19.77, y: 26.13), controlPoint2: NSPoint(x: 19.77, y: 26.13))
        clipboardadd2Path.line(to: NSPoint(x: 19.77, y: 25.17))
        clipboardadd2Path.curve(to: NSPoint(x: 17.86, y: 23.23), controlPoint1: NSPoint(x: 19.77, y: 24.09), controlPoint2: NSPoint(x: 18.92, y: 23.23))
        clipboardadd2Path.line(to: NSPoint(x: 9.28, y: 23.23))
        clipboardadd2Path.curve(to: NSPoint(x: 7.36, y: 25.17), controlPoint1: NSPoint(x: 8.22, y: 23.23), controlPoint2: NSPoint(x: 7.36, y: 24.09))
        clipboardadd2Path.line(to: NSPoint(x: 7.36, y: 26.12))
        clipboardadd2Path.curve(to: NSPoint(x: 7.36, y: 26.13), controlPoint1: NSPoint(x: 7.36, y: 26.13), controlPoint2: NSPoint(x: 7.36, y: 26.13))
        clipboardadd2Path.line(to: NSPoint(x: 6.41, y: 26.13))
        clipboardadd2Path.curve(to: NSPoint(x: 4.5, y: 24.19), controlPoint1: NSPoint(x: 5.35, y: 26.13), controlPoint2: NSPoint(x: 4.5, y: 25.27))
        clipboardadd2Path.line(to: NSPoint(x: 4.5, y: 3.87))
        clipboardadd2Path.curve(to: NSPoint(x: 6.41, y: 1.94), controlPoint1: NSPoint(x: 4.5, y: 2.8), controlPoint2: NSPoint(x: 5.35, y: 1.94))
        clipboardadd2Path.line(to: NSPoint(x: 15.02, y: 1.94))
        clipboardadd2Path.curve(to: NSPoint(x: 14.05, y: 5.32), controlPoint1: NSPoint(x: 14.4, y: 2.91), controlPoint2: NSPoint(x: 14.05, y: 4.08))
        clipboardadd2Path.curve(to: NSPoint(x: 20.25, y: 11.61), controlPoint1: NSPoint(x: 14.05, y: 8.8), controlPoint2: NSPoint(x: 16.82, y: 11.61))
        clipboardadd2Path.curve(to: NSPoint(x: 22.64, y: 11.13), controlPoint1: NSPoint(x: 21.1, y: 11.61), controlPoint2: NSPoint(x: 21.9, y: 11.44))
        clipboardadd2Path.line(to: NSPoint(x: 22.64, y: 11.13))
        clipboardadd2Path.close()
        clipboardadd2Path.move(to: NSPoint(x: 11.18, y: 27.1))
        clipboardadd2Path.line(to: NSPoint(x: 11.18, y: 28.07))
        clipboardadd2Path.curve(to: NSPoint(x: 13.1, y: 30), controlPoint1: NSPoint(x: 11.18, y: 29.13), controlPoint2: NSPoint(x: 12.04, y: 30))
        clipboardadd2Path.line(to: NSPoint(x: 14.04, y: 30))
        clipboardadd2Path.curve(to: NSPoint(x: 15.95, y: 28.07), controlPoint1: NSPoint(x: 15.1, y: 30), controlPoint2: NSPoint(x: 15.95, y: 29.13))
        clipboardadd2Path.line(to: NSPoint(x: 15.95, y: 27.1))
        clipboardadd2Path.line(to: NSPoint(x: 17.87, y: 27.1))
        clipboardadd2Path.curve(to: NSPoint(x: 18.82, y: 26.13), controlPoint1: NSPoint(x: 18.39, y: 27.1), controlPoint2: NSPoint(x: 18.82, y: 26.66))
        clipboardadd2Path.line(to: NSPoint(x: 18.82, y: 25.16))
        clipboardadd2Path.curve(to: NSPoint(x: 17.87, y: 24.19), controlPoint1: NSPoint(x: 18.82, y: 24.62), controlPoint2: NSPoint(x: 18.39, y: 24.19))
        clipboardadd2Path.line(to: NSPoint(x: 9.27, y: 24.19))
        clipboardadd2Path.curve(to: NSPoint(x: 8.32, y: 25.16), controlPoint1: NSPoint(x: 8.74, y: 24.19), controlPoint2: NSPoint(x: 8.32, y: 24.63))
        clipboardadd2Path.line(to: NSPoint(x: 8.32, y: 26.13))
        clipboardadd2Path.curve(to: NSPoint(x: 9.27, y: 27.1), controlPoint1: NSPoint(x: 8.32, y: 26.67), controlPoint2: NSPoint(x: 8.74, y: 27.1))
        clipboardadd2Path.line(to: NSPoint(x: 11.18, y: 27.1))
        clipboardadd2Path.line(to: NSPoint(x: 11.18, y: 27.1))
        clipboardadd2Path.close()
        clipboardadd2Path.move(to: NSPoint(x: 13.57, y: 27.1))
        clipboardadd2Path.curve(to: NSPoint(x: 14.05, y: 27.58), controlPoint1: NSPoint(x: 13.83, y: 27.1), controlPoint2: NSPoint(x: 14.05, y: 27.31))
        clipboardadd2Path.curve(to: NSPoint(x: 13.57, y: 28.06), controlPoint1: NSPoint(x: 14.05, y: 27.85), controlPoint2: NSPoint(x: 13.83, y: 28.06))
        clipboardadd2Path.curve(to: NSPoint(x: 13.09, y: 27.58), controlPoint1: NSPoint(x: 13.3, y: 28.06), controlPoint2: NSPoint(x: 13.09, y: 27.85))
        clipboardadd2Path.curve(to: NSPoint(x: 13.57, y: 27.1), controlPoint1: NSPoint(x: 13.09, y: 27.31), controlPoint2: NSPoint(x: 13.3, y: 27.1))
        clipboardadd2Path.line(to: NSPoint(x: 13.57, y: 27.1))
        clipboardadd2Path.close()
        clipboardadd2Path.move(to: NSPoint(x: 20.25, y: 0))
        clipboardadd2Path.curve(to: NSPoint(x: 25.5, y: 5.32), controlPoint1: NSPoint(x: 23.15, y: 0), controlPoint2: NSPoint(x: 25.5, y: 2.38))
        clipboardadd2Path.curve(to: NSPoint(x: 20.25, y: 10.65), controlPoint1: NSPoint(x: 25.5, y: 8.26), controlPoint2: NSPoint(x: 23.15, y: 10.65))
        clipboardadd2Path.curve(to: NSPoint(x: 15, y: 5.32), controlPoint1: NSPoint(x: 17.35, y: 10.65), controlPoint2: NSPoint(x: 15, y: 8.26))
        clipboardadd2Path.curve(to: NSPoint(x: 20.25, y: 0), controlPoint1: NSPoint(x: 15, y: 2.38), controlPoint2: NSPoint(x: 17.35, y: 0))
        clipboardadd2Path.line(to: NSPoint(x: 20.25, y: 0))
        clipboardadd2Path.close()
        clipboardadd2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        clipboardadd2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawClipboardRemove(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-34-clipboard-remove
        //// clipboard-remove 2 Drawing
        let clipboardremove2Path = NSBezierPath()
        clipboardremove2Path.move(to: NSPoint(x: 22.64, y: 11.13))
        clipboardremove2Path.line(to: NSPoint(x: 22.64, y: 24.19))
        clipboardremove2Path.curve(to: NSPoint(x: 20.73, y: 26.13), controlPoint1: NSPoint(x: 22.64, y: 25.26), controlPoint2: NSPoint(x: 21.79, y: 26.13))
        clipboardremove2Path.line(to: NSPoint(x: 19.77, y: 26.13))
        clipboardremove2Path.line(to: NSPoint(x: 19.77, y: 26.13))
        clipboardremove2Path.curve(to: NSPoint(x: 19.77, y: 26.12), controlPoint1: NSPoint(x: 19.77, y: 26.13), controlPoint2: NSPoint(x: 19.77, y: 26.13))
        clipboardremove2Path.line(to: NSPoint(x: 19.77, y: 25.17))
        clipboardremove2Path.curve(to: NSPoint(x: 17.86, y: 23.23), controlPoint1: NSPoint(x: 19.77, y: 24.09), controlPoint2: NSPoint(x: 18.92, y: 23.23))
        clipboardremove2Path.line(to: NSPoint(x: 9.28, y: 23.23))
        clipboardremove2Path.curve(to: NSPoint(x: 7.36, y: 25.17), controlPoint1: NSPoint(x: 8.22, y: 23.23), controlPoint2: NSPoint(x: 7.36, y: 24.09))
        clipboardremove2Path.line(to: NSPoint(x: 7.36, y: 26.12))
        clipboardremove2Path.curve(to: NSPoint(x: 7.36, y: 26.13), controlPoint1: NSPoint(x: 7.36, y: 26.13), controlPoint2: NSPoint(x: 7.36, y: 26.13))
        clipboardremove2Path.line(to: NSPoint(x: 6.41, y: 26.13))
        clipboardremove2Path.curve(to: NSPoint(x: 4.5, y: 24.19), controlPoint1: NSPoint(x: 5.35, y: 26.13), controlPoint2: NSPoint(x: 4.5, y: 25.27))
        clipboardremove2Path.line(to: NSPoint(x: 4.5, y: 3.87))
        clipboardremove2Path.curve(to: NSPoint(x: 6.41, y: 1.94), controlPoint1: NSPoint(x: 4.5, y: 2.8), controlPoint2: NSPoint(x: 5.35, y: 1.94))
        clipboardremove2Path.line(to: NSPoint(x: 15.02, y: 1.94))
        clipboardremove2Path.curve(to: NSPoint(x: 14.05, y: 5.32), controlPoint1: NSPoint(x: 14.4, y: 2.91), controlPoint2: NSPoint(x: 14.05, y: 4.08))
        clipboardremove2Path.curve(to: NSPoint(x: 20.25, y: 11.61), controlPoint1: NSPoint(x: 14.05, y: 8.8), controlPoint2: NSPoint(x: 16.82, y: 11.61))
        clipboardremove2Path.curve(to: NSPoint(x: 22.64, y: 11.13), controlPoint1: NSPoint(x: 21.1, y: 11.61), controlPoint2: NSPoint(x: 21.9, y: 11.44))
        clipboardremove2Path.line(to: NSPoint(x: 22.64, y: 11.13))
        clipboardremove2Path.close()
        clipboardremove2Path.move(to: NSPoint(x: 11.18, y: 27.1))
        clipboardremove2Path.line(to: NSPoint(x: 11.18, y: 28.07))
        clipboardremove2Path.curve(to: NSPoint(x: 13.1, y: 30), controlPoint1: NSPoint(x: 11.18, y: 29.13), controlPoint2: NSPoint(x: 12.04, y: 30))
        clipboardremove2Path.line(to: NSPoint(x: 14.04, y: 30))
        clipboardremove2Path.curve(to: NSPoint(x: 15.95, y: 28.07), controlPoint1: NSPoint(x: 15.1, y: 30), controlPoint2: NSPoint(x: 15.95, y: 29.13))
        clipboardremove2Path.line(to: NSPoint(x: 15.95, y: 27.1))
        clipboardremove2Path.line(to: NSPoint(x: 17.87, y: 27.1))
        clipboardremove2Path.curve(to: NSPoint(x: 18.82, y: 26.13), controlPoint1: NSPoint(x: 18.39, y: 27.1), controlPoint2: NSPoint(x: 18.82, y: 26.66))
        clipboardremove2Path.line(to: NSPoint(x: 18.82, y: 25.16))
        clipboardremove2Path.curve(to: NSPoint(x: 17.87, y: 24.19), controlPoint1: NSPoint(x: 18.82, y: 24.62), controlPoint2: NSPoint(x: 18.39, y: 24.19))
        clipboardremove2Path.line(to: NSPoint(x: 9.27, y: 24.19))
        clipboardremove2Path.curve(to: NSPoint(x: 8.32, y: 25.16), controlPoint1: NSPoint(x: 8.74, y: 24.19), controlPoint2: NSPoint(x: 8.32, y: 24.63))
        clipboardremove2Path.line(to: NSPoint(x: 8.32, y: 26.13))
        clipboardremove2Path.curve(to: NSPoint(x: 9.27, y: 27.1), controlPoint1: NSPoint(x: 8.32, y: 26.67), controlPoint2: NSPoint(x: 8.74, y: 27.1))
        clipboardremove2Path.line(to: NSPoint(x: 11.18, y: 27.1))
        clipboardremove2Path.line(to: NSPoint(x: 11.18, y: 27.1))
        clipboardremove2Path.close()
        clipboardremove2Path.move(to: NSPoint(x: 13.57, y: 27.1))
        clipboardremove2Path.curve(to: NSPoint(x: 14.05, y: 27.58), controlPoint1: NSPoint(x: 13.83, y: 27.1), controlPoint2: NSPoint(x: 14.05, y: 27.31))
        clipboardremove2Path.curve(to: NSPoint(x: 13.57, y: 28.06), controlPoint1: NSPoint(x: 14.05, y: 27.85), controlPoint2: NSPoint(x: 13.83, y: 28.06))
        clipboardremove2Path.curve(to: NSPoint(x: 13.09, y: 27.58), controlPoint1: NSPoint(x: 13.3, y: 28.06), controlPoint2: NSPoint(x: 13.09, y: 27.85))
        clipboardremove2Path.curve(to: NSPoint(x: 13.57, y: 27.1), controlPoint1: NSPoint(x: 13.09, y: 27.31), controlPoint2: NSPoint(x: 13.3, y: 27.1))
        clipboardremove2Path.line(to: NSPoint(x: 13.57, y: 27.1))
        clipboardremove2Path.close()
        clipboardremove2Path.move(to: NSPoint(x: 20.25, y: 0))
        clipboardremove2Path.curve(to: NSPoint(x: 25.5, y: 5.32), controlPoint1: NSPoint(x: 23.15, y: 0), controlPoint2: NSPoint(x: 25.5, y: 2.38))
        clipboardremove2Path.curve(to: NSPoint(x: 20.25, y: 10.65), controlPoint1: NSPoint(x: 25.5, y: 8.26), controlPoint2: NSPoint(x: 23.15, y: 10.65))
        clipboardremove2Path.curve(to: NSPoint(x: 15, y: 5.32), controlPoint1: NSPoint(x: 17.35, y: 10.65), controlPoint2: NSPoint(x: 15, y: 8.26))
        clipboardremove2Path.curve(to: NSPoint(x: 20.25, y: 0), controlPoint1: NSPoint(x: 15, y: 2.38), controlPoint2: NSPoint(x: 17.35, y: 0))
        clipboardremove2Path.line(to: NSPoint(x: 20.25, y: 0))
        clipboardremove2Path.close()
        clipboardremove2Path.move(to: NSPoint(x: 16.91, y: 5.81))
        clipboardremove2Path.line(to: NSPoint(x: 16.91, y: 4.84))
        clipboardremove2Path.line(to: NSPoint(x: 23.59, y: 4.84))
        clipboardremove2Path.line(to: NSPoint(x: 23.59, y: 5.81))
        clipboardremove2Path.line(to: NSPoint(x: 16.91, y: 5.81))
        clipboardremove2Path.line(to: NSPoint(x: 16.91, y: 5.81))
        clipboardremove2Path.close()
        clipboardremove2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        clipboardremove2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawClipboard(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-35-clipboard
        //// clipboard 2 Drawing
        let clipboard2Path = NSBezierPath()
        clipboard2Path.move(to: NSPoint(x: 12.5, y: 26.5))
        clipboard2Path.line(to: NSPoint(x: 12.5, y: 27.5))
        clipboard2Path.curve(to: NSPoint(x: 14.5, y: 29.5), controlPoint1: NSPoint(x: 12.5, y: 28.6), controlPoint2: NSPoint(x: 13.4, y: 29.5))
        clipboard2Path.line(to: NSPoint(x: 15.5, y: 29.5))
        clipboard2Path.curve(to: NSPoint(x: 17.5, y: 27.5), controlPoint1: NSPoint(x: 16.61, y: 29.5), controlPoint2: NSPoint(x: 17.5, y: 28.61))
        clipboard2Path.line(to: NSPoint(x: 17.5, y: 26.5))
        clipboard2Path.line(to: NSPoint(x: 19.5, y: 26.5))
        clipboard2Path.curve(to: NSPoint(x: 20.5, y: 25.5), controlPoint1: NSPoint(x: 20.06, y: 26.5), controlPoint2: NSPoint(x: 20.5, y: 26.05))
        clipboard2Path.line(to: NSPoint(x: 20.5, y: 24.5))
        clipboard2Path.curve(to: NSPoint(x: 19.5, y: 23.5), controlPoint1: NSPoint(x: 20.5, y: 23.94), controlPoint2: NSPoint(x: 20.05, y: 23.5))
        clipboard2Path.line(to: NSPoint(x: 10.5, y: 23.5))
        clipboard2Path.curve(to: NSPoint(x: 9.5, y: 24.5), controlPoint1: NSPoint(x: 9.94, y: 23.5), controlPoint2: NSPoint(x: 9.5, y: 23.95))
        clipboard2Path.line(to: NSPoint(x: 9.5, y: 25.5))
        clipboard2Path.curve(to: NSPoint(x: 10.5, y: 26.5), controlPoint1: NSPoint(x: 9.5, y: 26.06), controlPoint2: NSPoint(x: 9.95, y: 26.5))
        clipboard2Path.line(to: NSPoint(x: 12.5, y: 26.5))
        clipboard2Path.line(to: NSPoint(x: 12.5, y: 26.5))
        clipboard2Path.close()
        clipboard2Path.move(to: NSPoint(x: 21.5, y: 25.5))
        clipboard2Path.line(to: NSPoint(x: 22.5, y: 25.5))
        clipboard2Path.curve(to: NSPoint(x: 24.5, y: 23.5), controlPoint1: NSPoint(x: 23.61, y: 25.5), controlPoint2: NSPoint(x: 24.5, y: 24.6))
        clipboard2Path.line(to: NSPoint(x: 24.5, y: 2.5))
        clipboard2Path.curve(to: NSPoint(x: 22.5, y: 0.5), controlPoint1: NSPoint(x: 24.5, y: 1.39), controlPoint2: NSPoint(x: 23.61, y: 0.5))
        clipboard2Path.line(to: NSPoint(x: 7.5, y: 0.5))
        clipboard2Path.curve(to: NSPoint(x: 5.5, y: 2.5), controlPoint1: NSPoint(x: 6.39, y: 0.5), controlPoint2: NSPoint(x: 5.5, y: 1.4))
        clipboard2Path.line(to: NSPoint(x: 5.5, y: 23.5))
        clipboard2Path.curve(to: NSPoint(x: 7.5, y: 25.5), controlPoint1: NSPoint(x: 5.5, y: 24.61), controlPoint2: NSPoint(x: 6.39, y: 25.5))
        clipboard2Path.line(to: NSPoint(x: 8.5, y: 25.5))
        clipboard2Path.curve(to: NSPoint(x: 8.5, y: 25.5), controlPoint1: NSPoint(x: 8.5, y: 25.5), controlPoint2: NSPoint(x: 8.5, y: 25.5))
        clipboard2Path.line(to: NSPoint(x: 8.5, y: 24.5))
        clipboard2Path.curve(to: NSPoint(x: 10.5, y: 22.5), controlPoint1: NSPoint(x: 8.5, y: 23.4), controlPoint2: NSPoint(x: 9.39, y: 22.5))
        clipboard2Path.line(to: NSPoint(x: 19.5, y: 22.5))
        clipboard2Path.curve(to: NSPoint(x: 21.5, y: 24.5), controlPoint1: NSPoint(x: 20.6, y: 22.5), controlPoint2: NSPoint(x: 21.5, y: 23.39))
        clipboard2Path.line(to: NSPoint(x: 21.5, y: 25.5))
        clipboard2Path.curve(to: NSPoint(x: 21.5, y: 25.5), controlPoint1: NSPoint(x: 21.5, y: 25.5), controlPoint2: NSPoint(x: 21.5, y: 25.5))
        clipboard2Path.line(to: NSPoint(x: 21.5, y: 25.5))
        clipboard2Path.line(to: NSPoint(x: 21.5, y: 25.5))
        clipboard2Path.close()
        clipboard2Path.move(to: NSPoint(x: 15, y: 26.5))
        clipboard2Path.curve(to: NSPoint(x: 15.5, y: 27), controlPoint1: NSPoint(x: 15.28, y: 26.5), controlPoint2: NSPoint(x: 15.5, y: 26.72))
        clipboard2Path.curve(to: NSPoint(x: 15, y: 27.5), controlPoint1: NSPoint(x: 15.5, y: 27.28), controlPoint2: NSPoint(x: 15.28, y: 27.5))
        clipboard2Path.curve(to: NSPoint(x: 14.5, y: 27), controlPoint1: NSPoint(x: 14.72, y: 27.5), controlPoint2: NSPoint(x: 14.5, y: 27.28))
        clipboard2Path.curve(to: NSPoint(x: 15, y: 26.5), controlPoint1: NSPoint(x: 14.5, y: 26.72), controlPoint2: NSPoint(x: 14.72, y: 26.5))
        clipboard2Path.line(to: NSPoint(x: 15, y: 26.5))
        clipboard2Path.close()
        clipboard2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        clipboard2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawClipboardDownload(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-36-clipboard-download
        //// clipboard-download 2 Drawing
        let clipboarddownload2Path = NSBezierPath()
        clipboarddownload2Path.move(to: NSPoint(x: 14.5, y: 7.45))
        clipboarddownload2Path.line(to: NSPoint(x: 11.25, y: 10.7))
        clipboarddownload2Path.line(to: NSPoint(x: 10.5, y: 9.95))
        clipboarddownload2Path.line(to: NSPoint(x: 15, y: 5.45))
        clipboarddownload2Path.line(to: NSPoint(x: 19.5, y: 9.95))
        clipboarddownload2Path.line(to: NSPoint(x: 18.75, y: 10.7))
        clipboarddownload2Path.line(to: NSPoint(x: 15.5, y: 7.45))
        clipboarddownload2Path.line(to: NSPoint(x: 15.5, y: 18.5))
        clipboarddownload2Path.line(to: NSPoint(x: 14.5, y: 18.5))
        clipboarddownload2Path.line(to: NSPoint(x: 14.5, y: 7.45))
        clipboarddownload2Path.line(to: NSPoint(x: 14.5, y: 7.45))
        clipboarddownload2Path.close()
        clipboarddownload2Path.move(to: NSPoint(x: 12.5, y: 26.5))
        clipboarddownload2Path.line(to: NSPoint(x: 12.5, y: 27.5))
        clipboarddownload2Path.curve(to: NSPoint(x: 14.5, y: 29.5), controlPoint1: NSPoint(x: 12.5, y: 28.6), controlPoint2: NSPoint(x: 13.4, y: 29.5))
        clipboarddownload2Path.line(to: NSPoint(x: 15.5, y: 29.5))
        clipboarddownload2Path.curve(to: NSPoint(x: 17.5, y: 27.5), controlPoint1: NSPoint(x: 16.61, y: 29.5), controlPoint2: NSPoint(x: 17.5, y: 28.61))
        clipboarddownload2Path.line(to: NSPoint(x: 17.5, y: 26.5))
        clipboarddownload2Path.line(to: NSPoint(x: 19.5, y: 26.5))
        clipboarddownload2Path.curve(to: NSPoint(x: 20.5, y: 25.5), controlPoint1: NSPoint(x: 20.06, y: 26.5), controlPoint2: NSPoint(x: 20.5, y: 26.05))
        clipboarddownload2Path.line(to: NSPoint(x: 20.5, y: 24.5))
        clipboarddownload2Path.curve(to: NSPoint(x: 19.5, y: 23.5), controlPoint1: NSPoint(x: 20.5, y: 23.94), controlPoint2: NSPoint(x: 20.05, y: 23.5))
        clipboarddownload2Path.line(to: NSPoint(x: 10.5, y: 23.5))
        clipboarddownload2Path.curve(to: NSPoint(x: 9.5, y: 24.5), controlPoint1: NSPoint(x: 9.94, y: 23.5), controlPoint2: NSPoint(x: 9.5, y: 23.95))
        clipboarddownload2Path.line(to: NSPoint(x: 9.5, y: 25.5))
        clipboarddownload2Path.curve(to: NSPoint(x: 10.5, y: 26.5), controlPoint1: NSPoint(x: 9.5, y: 26.06), controlPoint2: NSPoint(x: 9.95, y: 26.5))
        clipboarddownload2Path.line(to: NSPoint(x: 12.5, y: 26.5))
        clipboarddownload2Path.line(to: NSPoint(x: 12.5, y: 26.5))
        clipboarddownload2Path.close()
        clipboarddownload2Path.move(to: NSPoint(x: 21.5, y: 25.5))
        clipboarddownload2Path.line(to: NSPoint(x: 22.5, y: 25.5))
        clipboarddownload2Path.curve(to: NSPoint(x: 24.5, y: 23.5), controlPoint1: NSPoint(x: 23.61, y: 25.5), controlPoint2: NSPoint(x: 24.5, y: 24.6))
        clipboarddownload2Path.line(to: NSPoint(x: 24.5, y: 2.5))
        clipboarddownload2Path.curve(to: NSPoint(x: 22.5, y: 0.5), controlPoint1: NSPoint(x: 24.5, y: 1.39), controlPoint2: NSPoint(x: 23.61, y: 0.5))
        clipboarddownload2Path.line(to: NSPoint(x: 7.5, y: 0.5))
        clipboarddownload2Path.curve(to: NSPoint(x: 5.5, y: 2.5), controlPoint1: NSPoint(x: 6.39, y: 0.5), controlPoint2: NSPoint(x: 5.5, y: 1.4))
        clipboarddownload2Path.line(to: NSPoint(x: 5.5, y: 23.5))
        clipboarddownload2Path.curve(to: NSPoint(x: 7.5, y: 25.5), controlPoint1: NSPoint(x: 5.5, y: 24.61), controlPoint2: NSPoint(x: 6.39, y: 25.5))
        clipboarddownload2Path.line(to: NSPoint(x: 8.5, y: 25.5))
        clipboarddownload2Path.curve(to: NSPoint(x: 8.5, y: 25.5), controlPoint1: NSPoint(x: 8.5, y: 25.5), controlPoint2: NSPoint(x: 8.5, y: 25.5))
        clipboarddownload2Path.line(to: NSPoint(x: 8.5, y: 24.5))
        clipboarddownload2Path.curve(to: NSPoint(x: 10.5, y: 22.5), controlPoint1: NSPoint(x: 8.5, y: 23.4), controlPoint2: NSPoint(x: 9.39, y: 22.5))
        clipboarddownload2Path.line(to: NSPoint(x: 19.5, y: 22.5))
        clipboarddownload2Path.curve(to: NSPoint(x: 21.5, y: 24.5), controlPoint1: NSPoint(x: 20.6, y: 22.5), controlPoint2: NSPoint(x: 21.5, y: 23.39))
        clipboarddownload2Path.line(to: NSPoint(x: 21.5, y: 25.5))
        clipboarddownload2Path.curve(to: NSPoint(x: 21.5, y: 25.5), controlPoint1: NSPoint(x: 21.5, y: 25.5), controlPoint2: NSPoint(x: 21.5, y: 25.5))
        clipboarddownload2Path.line(to: NSPoint(x: 21.5, y: 25.5))
        clipboarddownload2Path.line(to: NSPoint(x: 21.5, y: 25.5))
        clipboarddownload2Path.close()
        clipboarddownload2Path.move(to: NSPoint(x: 15, y: 26.5))
        clipboarddownload2Path.curve(to: NSPoint(x: 15.5, y: 27), controlPoint1: NSPoint(x: 15.28, y: 26.5), controlPoint2: NSPoint(x: 15.5, y: 26.72))
        clipboarddownload2Path.curve(to: NSPoint(x: 15, y: 27.5), controlPoint1: NSPoint(x: 15.5, y: 27.28), controlPoint2: NSPoint(x: 15.28, y: 27.5))
        clipboarddownload2Path.curve(to: NSPoint(x: 14.5, y: 27), controlPoint1: NSPoint(x: 14.72, y: 27.5), controlPoint2: NSPoint(x: 14.5, y: 27.28))
        clipboarddownload2Path.curve(to: NSPoint(x: 15, y: 26.5), controlPoint1: NSPoint(x: 14.5, y: 26.72), controlPoint2: NSPoint(x: 14.72, y: 26.5))
        clipboarddownload2Path.line(to: NSPoint(x: 15, y: 26.5))
        clipboarddownload2Path.close()
        clipboarddownload2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        clipboarddownload2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawClipboardUpload(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-37-clipboard-upload
        //// clipboard-upload 2 Drawing
        let clipboardupload2Path = NSBezierPath()
        clipboardupload2Path.move(to: NSPoint(x: 14.5, y: 11.5))
        clipboardupload2Path.line(to: NSPoint(x: 11.25, y: 8.25))
        clipboardupload2Path.line(to: NSPoint(x: 10.5, y: 9))
        clipboardupload2Path.line(to: NSPoint(x: 15, y: 13.5))
        clipboardupload2Path.line(to: NSPoint(x: 19.5, y: 9))
        clipboardupload2Path.line(to: NSPoint(x: 18.75, y: 8.25))
        clipboardupload2Path.line(to: NSPoint(x: 15.5, y: 11.5))
        clipboardupload2Path.line(to: NSPoint(x: 15.5, y: 0.5))
        clipboardupload2Path.line(to: NSPoint(x: 14.5, y: 0.5))
        clipboardupload2Path.line(to: NSPoint(x: 14.5, y: 11.5))
        clipboardupload2Path.line(to: NSPoint(x: 14.5, y: 11.5))
        clipboardupload2Path.close()
        clipboardupload2Path.move(to: NSPoint(x: 12.5, y: 26.5))
        clipboardupload2Path.line(to: NSPoint(x: 12.5, y: 27.5))
        clipboardupload2Path.curve(to: NSPoint(x: 14.5, y: 29.5), controlPoint1: NSPoint(x: 12.5, y: 28.6), controlPoint2: NSPoint(x: 13.4, y: 29.5))
        clipboardupload2Path.line(to: NSPoint(x: 15.5, y: 29.5))
        clipboardupload2Path.curve(to: NSPoint(x: 17.5, y: 27.5), controlPoint1: NSPoint(x: 16.61, y: 29.5), controlPoint2: NSPoint(x: 17.5, y: 28.61))
        clipboardupload2Path.line(to: NSPoint(x: 17.5, y: 26.5))
        clipboardupload2Path.line(to: NSPoint(x: 19.5, y: 26.5))
        clipboardupload2Path.curve(to: NSPoint(x: 20.5, y: 25.5), controlPoint1: NSPoint(x: 20.06, y: 26.5), controlPoint2: NSPoint(x: 20.5, y: 26.05))
        clipboardupload2Path.line(to: NSPoint(x: 20.5, y: 24.5))
        clipboardupload2Path.curve(to: NSPoint(x: 19.5, y: 23.5), controlPoint1: NSPoint(x: 20.5, y: 23.94), controlPoint2: NSPoint(x: 20.05, y: 23.5))
        clipboardupload2Path.line(to: NSPoint(x: 10.5, y: 23.5))
        clipboardupload2Path.curve(to: NSPoint(x: 9.5, y: 24.5), controlPoint1: NSPoint(x: 9.94, y: 23.5), controlPoint2: NSPoint(x: 9.5, y: 23.95))
        clipboardupload2Path.line(to: NSPoint(x: 9.5, y: 25.5))
        clipboardupload2Path.curve(to: NSPoint(x: 10.5, y: 26.5), controlPoint1: NSPoint(x: 9.5, y: 26.06), controlPoint2: NSPoint(x: 9.95, y: 26.5))
        clipboardupload2Path.line(to: NSPoint(x: 12.5, y: 26.5))
        clipboardupload2Path.line(to: NSPoint(x: 12.5, y: 26.5))
        clipboardupload2Path.close()
        clipboardupload2Path.move(to: NSPoint(x: 21.5, y: 25.5))
        clipboardupload2Path.line(to: NSPoint(x: 22.5, y: 25.5))
        clipboardupload2Path.curve(to: NSPoint(x: 24.5, y: 23.5), controlPoint1: NSPoint(x: 23.61, y: 25.5), controlPoint2: NSPoint(x: 24.5, y: 24.6))
        clipboardupload2Path.line(to: NSPoint(x: 24.5, y: 2.5))
        clipboardupload2Path.curve(to: NSPoint(x: 22.5, y: 0.5), controlPoint1: NSPoint(x: 24.5, y: 1.39), controlPoint2: NSPoint(x: 23.61, y: 0.5))
        clipboardupload2Path.line(to: NSPoint(x: 7.5, y: 0.5))
        clipboardupload2Path.curve(to: NSPoint(x: 5.5, y: 2.5), controlPoint1: NSPoint(x: 6.39, y: 0.5), controlPoint2: NSPoint(x: 5.5, y: 1.4))
        clipboardupload2Path.line(to: NSPoint(x: 5.5, y: 23.5))
        clipboardupload2Path.curve(to: NSPoint(x: 7.5, y: 25.5), controlPoint1: NSPoint(x: 5.5, y: 24.61), controlPoint2: NSPoint(x: 6.39, y: 25.5))
        clipboardupload2Path.line(to: NSPoint(x: 8.5, y: 25.5))
        clipboardupload2Path.curve(to: NSPoint(x: 8.5, y: 25.5), controlPoint1: NSPoint(x: 8.5, y: 25.5), controlPoint2: NSPoint(x: 8.5, y: 25.5))
        clipboardupload2Path.line(to: NSPoint(x: 8.5, y: 24.5))
        clipboardupload2Path.curve(to: NSPoint(x: 10.5, y: 22.5), controlPoint1: NSPoint(x: 8.5, y: 23.4), controlPoint2: NSPoint(x: 9.39, y: 22.5))
        clipboardupload2Path.line(to: NSPoint(x: 19.5, y: 22.5))
        clipboardupload2Path.curve(to: NSPoint(x: 21.5, y: 24.5), controlPoint1: NSPoint(x: 20.6, y: 22.5), controlPoint2: NSPoint(x: 21.5, y: 23.39))
        clipboardupload2Path.line(to: NSPoint(x: 21.5, y: 25.5))
        clipboardupload2Path.curve(to: NSPoint(x: 21.5, y: 25.5), controlPoint1: NSPoint(x: 21.5, y: 25.5), controlPoint2: NSPoint(x: 21.5, y: 25.5))
        clipboardupload2Path.line(to: NSPoint(x: 21.5, y: 25.5))
        clipboardupload2Path.line(to: NSPoint(x: 21.5, y: 25.5))
        clipboardupload2Path.close()
        clipboardupload2Path.move(to: NSPoint(x: 15, y: 26.5))
        clipboardupload2Path.curve(to: NSPoint(x: 15.5, y: 27), controlPoint1: NSPoint(x: 15.28, y: 26.5), controlPoint2: NSPoint(x: 15.5, y: 26.72))
        clipboardupload2Path.curve(to: NSPoint(x: 15, y: 27.5), controlPoint1: NSPoint(x: 15.5, y: 27.28), controlPoint2: NSPoint(x: 15.28, y: 27.5))
        clipboardupload2Path.curve(to: NSPoint(x: 14.5, y: 27), controlPoint1: NSPoint(x: 14.72, y: 27.5), controlPoint2: NSPoint(x: 14.5, y: 27.28))
        clipboardupload2Path.curve(to: NSPoint(x: 15, y: 26.5), controlPoint1: NSPoint(x: 14.5, y: 26.72), controlPoint2: NSPoint(x: 14.72, y: 26.5))
        clipboardupload2Path.line(to: NSPoint(x: 15, y: 26.5))
        clipboardupload2Path.close()
        clipboardupload2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        clipboardupload2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawClipboardChecked(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-38-clipboard-checked
        //// clipboard-checked 2 Drawing
        let clipboardchecked2Path = NSBezierPath()
        clipboardchecked2Path.move(to: NSPoint(x: 12.5, y: 26.5))
        clipboardchecked2Path.line(to: NSPoint(x: 12.5, y: 27.5))
        clipboardchecked2Path.curve(to: NSPoint(x: 14.5, y: 29.5), controlPoint1: NSPoint(x: 12.5, y: 28.6), controlPoint2: NSPoint(x: 13.4, y: 29.5))
        clipboardchecked2Path.line(to: NSPoint(x: 15.5, y: 29.5))
        clipboardchecked2Path.curve(to: NSPoint(x: 17.5, y: 27.5), controlPoint1: NSPoint(x: 16.61, y: 29.5), controlPoint2: NSPoint(x: 17.5, y: 28.61))
        clipboardchecked2Path.line(to: NSPoint(x: 17.5, y: 26.5))
        clipboardchecked2Path.line(to: NSPoint(x: 19.5, y: 26.5))
        clipboardchecked2Path.curve(to: NSPoint(x: 20.5, y: 25.5), controlPoint1: NSPoint(x: 20.06, y: 26.5), controlPoint2: NSPoint(x: 20.5, y: 26.05))
        clipboardchecked2Path.line(to: NSPoint(x: 20.5, y: 24.5))
        clipboardchecked2Path.curve(to: NSPoint(x: 19.5, y: 23.5), controlPoint1: NSPoint(x: 20.5, y: 23.94), controlPoint2: NSPoint(x: 20.05, y: 23.5))
        clipboardchecked2Path.line(to: NSPoint(x: 10.5, y: 23.5))
        clipboardchecked2Path.curve(to: NSPoint(x: 9.5, y: 24.5), controlPoint1: NSPoint(x: 9.94, y: 23.5), controlPoint2: NSPoint(x: 9.5, y: 23.95))
        clipboardchecked2Path.line(to: NSPoint(x: 9.5, y: 25.5))
        clipboardchecked2Path.curve(to: NSPoint(x: 10.5, y: 26.5), controlPoint1: NSPoint(x: 9.5, y: 26.06), controlPoint2: NSPoint(x: 9.95, y: 26.5))
        clipboardchecked2Path.line(to: NSPoint(x: 12.5, y: 26.5))
        clipboardchecked2Path.line(to: NSPoint(x: 12.5, y: 26.5))
        clipboardchecked2Path.close()
        clipboardchecked2Path.move(to: NSPoint(x: 21.5, y: 25.5))
        clipboardchecked2Path.line(to: NSPoint(x: 22.5, y: 25.5))
        clipboardchecked2Path.curve(to: NSPoint(x: 24.5, y: 23.5), controlPoint1: NSPoint(x: 23.61, y: 25.5), controlPoint2: NSPoint(x: 24.5, y: 24.6))
        clipboardchecked2Path.line(to: NSPoint(x: 24.5, y: 2.5))
        clipboardchecked2Path.curve(to: NSPoint(x: 22.5, y: 0.5), controlPoint1: NSPoint(x: 24.5, y: 1.39), controlPoint2: NSPoint(x: 23.61, y: 0.5))
        clipboardchecked2Path.line(to: NSPoint(x: 7.5, y: 0.5))
        clipboardchecked2Path.curve(to: NSPoint(x: 5.5, y: 2.5), controlPoint1: NSPoint(x: 6.39, y: 0.5), controlPoint2: NSPoint(x: 5.5, y: 1.4))
        clipboardchecked2Path.line(to: NSPoint(x: 5.5, y: 23.5))
        clipboardchecked2Path.curve(to: NSPoint(x: 7.5, y: 25.5), controlPoint1: NSPoint(x: 5.5, y: 24.61), controlPoint2: NSPoint(x: 6.39, y: 25.5))
        clipboardchecked2Path.line(to: NSPoint(x: 8.5, y: 25.5))
        clipboardchecked2Path.curve(to: NSPoint(x: 8.5, y: 25.5), controlPoint1: NSPoint(x: 8.5, y: 25.5), controlPoint2: NSPoint(x: 8.5, y: 25.5))
        clipboardchecked2Path.line(to: NSPoint(x: 8.5, y: 24.5))
        clipboardchecked2Path.curve(to: NSPoint(x: 10.5, y: 22.5), controlPoint1: NSPoint(x: 8.5, y: 23.4), controlPoint2: NSPoint(x: 9.39, y: 22.5))
        clipboardchecked2Path.line(to: NSPoint(x: 19.5, y: 22.5))
        clipboardchecked2Path.curve(to: NSPoint(x: 21.5, y: 24.5), controlPoint1: NSPoint(x: 20.6, y: 22.5), controlPoint2: NSPoint(x: 21.5, y: 23.39))
        clipboardchecked2Path.line(to: NSPoint(x: 21.5, y: 25.5))
        clipboardchecked2Path.curve(to: NSPoint(x: 21.5, y: 25.5), controlPoint1: NSPoint(x: 21.5, y: 25.5), controlPoint2: NSPoint(x: 21.5, y: 25.5))
        clipboardchecked2Path.line(to: NSPoint(x: 21.5, y: 25.5))
        clipboardchecked2Path.line(to: NSPoint(x: 21.5, y: 25.5))
        clipboardchecked2Path.close()
        clipboardchecked2Path.move(to: NSPoint(x: 15, y: 26.5))
        clipboardchecked2Path.curve(to: NSPoint(x: 15.5, y: 27), controlPoint1: NSPoint(x: 15.28, y: 26.5), controlPoint2: NSPoint(x: 15.5, y: 26.72))
        clipboardchecked2Path.curve(to: NSPoint(x: 15, y: 27.5), controlPoint1: NSPoint(x: 15.5, y: 27.28), controlPoint2: NSPoint(x: 15.28, y: 27.5))
        clipboardchecked2Path.curve(to: NSPoint(x: 14.5, y: 27), controlPoint1: NSPoint(x: 14.72, y: 27.5), controlPoint2: NSPoint(x: 14.5, y: 27.28))
        clipboardchecked2Path.curve(to: NSPoint(x: 15, y: 26.5), controlPoint1: NSPoint(x: 14.5, y: 26.72), controlPoint2: NSPoint(x: 14.72, y: 26.5))
        clipboardchecked2Path.line(to: NSPoint(x: 15, y: 26.5))
        clipboardchecked2Path.close()
        clipboardchecked2Path.move(to: NSPoint(x: 13.75, y: 7.81))
        clipboardchecked2Path.line(to: NSPoint(x: 21.53, y: 15.59))
        clipboardchecked2Path.line(to: NSPoint(x: 20.82, y: 16.3))
        clipboardchecked2Path.line(to: NSPoint(x: 13.75, y: 9.23))
        clipboardchecked2Path.line(to: NSPoint(x: 10.01, y: 12.97))
        clipboardchecked2Path.line(to: NSPoint(x: 9.3, y: 12.26))
        clipboardchecked2Path.line(to: NSPoint(x: 13.75, y: 7.81))
        clipboardchecked2Path.line(to: NSPoint(x: 13.75, y: 7.81))
        clipboardchecked2Path.close()
        clipboardchecked2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        clipboardchecked2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawClipboardText(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-39-clipboard-text
        //// clipboard-text 2 Drawing
        let clipboardtext2Path = NSBezierPath()
        clipboardtext2Path.move(to: NSPoint(x: 12.5, y: 26.5))
        clipboardtext2Path.line(to: NSPoint(x: 12.5, y: 27.5))
        clipboardtext2Path.curve(to: NSPoint(x: 14.5, y: 29.5), controlPoint1: NSPoint(x: 12.5, y: 28.6), controlPoint2: NSPoint(x: 13.4, y: 29.5))
        clipboardtext2Path.line(to: NSPoint(x: 15.5, y: 29.5))
        clipboardtext2Path.curve(to: NSPoint(x: 17.5, y: 27.5), controlPoint1: NSPoint(x: 16.61, y: 29.5), controlPoint2: NSPoint(x: 17.5, y: 28.61))
        clipboardtext2Path.line(to: NSPoint(x: 17.5, y: 26.5))
        clipboardtext2Path.line(to: NSPoint(x: 19.5, y: 26.5))
        clipboardtext2Path.curve(to: NSPoint(x: 20.5, y: 25.5), controlPoint1: NSPoint(x: 20.06, y: 26.5), controlPoint2: NSPoint(x: 20.5, y: 26.05))
        clipboardtext2Path.line(to: NSPoint(x: 20.5, y: 24.5))
        clipboardtext2Path.curve(to: NSPoint(x: 19.5, y: 23.5), controlPoint1: NSPoint(x: 20.5, y: 23.94), controlPoint2: NSPoint(x: 20.05, y: 23.5))
        clipboardtext2Path.line(to: NSPoint(x: 10.5, y: 23.5))
        clipboardtext2Path.curve(to: NSPoint(x: 9.5, y: 24.5), controlPoint1: NSPoint(x: 9.94, y: 23.5), controlPoint2: NSPoint(x: 9.5, y: 23.95))
        clipboardtext2Path.line(to: NSPoint(x: 9.5, y: 25.5))
        clipboardtext2Path.curve(to: NSPoint(x: 10.5, y: 26.5), controlPoint1: NSPoint(x: 9.5, y: 26.06), controlPoint2: NSPoint(x: 9.95, y: 26.5))
        clipboardtext2Path.line(to: NSPoint(x: 12.5, y: 26.5))
        clipboardtext2Path.line(to: NSPoint(x: 12.5, y: 26.5))
        clipboardtext2Path.close()
        clipboardtext2Path.move(to: NSPoint(x: 21.5, y: 25.5))
        clipboardtext2Path.line(to: NSPoint(x: 22.5, y: 25.5))
        clipboardtext2Path.curve(to: NSPoint(x: 24.5, y: 23.5), controlPoint1: NSPoint(x: 23.61, y: 25.5), controlPoint2: NSPoint(x: 24.5, y: 24.6))
        clipboardtext2Path.line(to: NSPoint(x: 24.5, y: 2.5))
        clipboardtext2Path.curve(to: NSPoint(x: 22.5, y: 0.5), controlPoint1: NSPoint(x: 24.5, y: 1.39), controlPoint2: NSPoint(x: 23.61, y: 0.5))
        clipboardtext2Path.line(to: NSPoint(x: 7.5, y: 0.5))
        clipboardtext2Path.curve(to: NSPoint(x: 5.5, y: 2.5), controlPoint1: NSPoint(x: 6.39, y: 0.5), controlPoint2: NSPoint(x: 5.5, y: 1.4))
        clipboardtext2Path.line(to: NSPoint(x: 5.5, y: 23.5))
        clipboardtext2Path.curve(to: NSPoint(x: 7.5, y: 25.5), controlPoint1: NSPoint(x: 5.5, y: 24.61), controlPoint2: NSPoint(x: 6.39, y: 25.5))
        clipboardtext2Path.line(to: NSPoint(x: 8.5, y: 25.5))
        clipboardtext2Path.curve(to: NSPoint(x: 8.5, y: 25.5), controlPoint1: NSPoint(x: 8.5, y: 25.5), controlPoint2: NSPoint(x: 8.5, y: 25.5))
        clipboardtext2Path.line(to: NSPoint(x: 8.5, y: 24.5))
        clipboardtext2Path.curve(to: NSPoint(x: 10.5, y: 22.5), controlPoint1: NSPoint(x: 8.5, y: 23.4), controlPoint2: NSPoint(x: 9.39, y: 22.5))
        clipboardtext2Path.line(to: NSPoint(x: 19.5, y: 22.5))
        clipboardtext2Path.curve(to: NSPoint(x: 21.5, y: 24.5), controlPoint1: NSPoint(x: 20.6, y: 22.5), controlPoint2: NSPoint(x: 21.5, y: 23.39))
        clipboardtext2Path.line(to: NSPoint(x: 21.5, y: 25.5))
        clipboardtext2Path.curve(to: NSPoint(x: 21.5, y: 25.5), controlPoint1: NSPoint(x: 21.5, y: 25.5), controlPoint2: NSPoint(x: 21.5, y: 25.5))
        clipboardtext2Path.line(to: NSPoint(x: 21.5, y: 25.5))
        clipboardtext2Path.line(to: NSPoint(x: 21.5, y: 25.5))
        clipboardtext2Path.close()
        clipboardtext2Path.move(to: NSPoint(x: 15, y: 26.5))
        clipboardtext2Path.curve(to: NSPoint(x: 15.5, y: 27), controlPoint1: NSPoint(x: 15.28, y: 26.5), controlPoint2: NSPoint(x: 15.5, y: 26.72))
        clipboardtext2Path.curve(to: NSPoint(x: 15, y: 27.5), controlPoint1: NSPoint(x: 15.5, y: 27.28), controlPoint2: NSPoint(x: 15.28, y: 27.5))
        clipboardtext2Path.curve(to: NSPoint(x: 14.5, y: 27), controlPoint1: NSPoint(x: 14.72, y: 27.5), controlPoint2: NSPoint(x: 14.5, y: 27.28))
        clipboardtext2Path.curve(to: NSPoint(x: 15, y: 26.5), controlPoint1: NSPoint(x: 14.5, y: 26.72), controlPoint2: NSPoint(x: 14.72, y: 26.5))
        clipboardtext2Path.line(to: NSPoint(x: 15, y: 26.5))
        clipboardtext2Path.close()
        clipboardtext2Path.move(to: NSPoint(x: 8.5, y: 18.5))
        clipboardtext2Path.line(to: NSPoint(x: 8.5, y: 17.5))
        clipboardtext2Path.line(to: NSPoint(x: 21.5, y: 17.5))
        clipboardtext2Path.line(to: NSPoint(x: 21.5, y: 18.5))
        clipboardtext2Path.line(to: NSPoint(x: 8.5, y: 18.5))
        clipboardtext2Path.line(to: NSPoint(x: 8.5, y: 18.5))
        clipboardtext2Path.close()
        clipboardtext2Path.move(to: NSPoint(x: 8.5, y: 15.5))
        clipboardtext2Path.line(to: NSPoint(x: 8.5, y: 14.5))
        clipboardtext2Path.line(to: NSPoint(x: 21.5, y: 14.5))
        clipboardtext2Path.line(to: NSPoint(x: 21.5, y: 15.5))
        clipboardtext2Path.line(to: NSPoint(x: 8.5, y: 15.5))
        clipboardtext2Path.line(to: NSPoint(x: 8.5, y: 15.5))
        clipboardtext2Path.close()
        clipboardtext2Path.move(to: NSPoint(x: 8.5, y: 12.5))
        clipboardtext2Path.line(to: NSPoint(x: 8.5, y: 11.5))
        clipboardtext2Path.line(to: NSPoint(x: 21.5, y: 11.5))
        clipboardtext2Path.line(to: NSPoint(x: 21.5, y: 12.5))
        clipboardtext2Path.line(to: NSPoint(x: 8.5, y: 12.5))
        clipboardtext2Path.line(to: NSPoint(x: 8.5, y: 12.5))
        clipboardtext2Path.close()
        clipboardtext2Path.move(to: NSPoint(x: 8.5, y: 9.5))
        clipboardtext2Path.line(to: NSPoint(x: 8.5, y: 8.5))
        clipboardtext2Path.line(to: NSPoint(x: 21.5, y: 8.5))
        clipboardtext2Path.line(to: NSPoint(x: 21.5, y: 9.5))
        clipboardtext2Path.line(to: NSPoint(x: 8.5, y: 9.5))
        clipboardtext2Path.line(to: NSPoint(x: 8.5, y: 9.5))
        clipboardtext2Path.close()
        clipboardtext2Path.move(to: NSPoint(x: 8.5, y: 6.5))
        clipboardtext2Path.line(to: NSPoint(x: 8.5, y: 5.5))
        clipboardtext2Path.line(to: NSPoint(x: 21.5, y: 5.5))
        clipboardtext2Path.line(to: NSPoint(x: 21.5, y: 6.5))
        clipboardtext2Path.line(to: NSPoint(x: 8.5, y: 6.5))
        clipboardtext2Path.line(to: NSPoint(x: 8.5, y: 6.5))
        clipboardtext2Path.close()
        clipboardtext2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        clipboardtext2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawClipboardList(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-40-clipboard-list
        //// clipboard-list 2 Drawing
        let clipboardlist2Path = NSBezierPath()
        clipboardlist2Path.move(to: NSPoint(x: 12.5, y: 26.5))
        clipboardlist2Path.line(to: NSPoint(x: 12.5, y: 27.5))
        clipboardlist2Path.curve(to: NSPoint(x: 14.5, y: 29.5), controlPoint1: NSPoint(x: 12.5, y: 28.6), controlPoint2: NSPoint(x: 13.4, y: 29.5))
        clipboardlist2Path.line(to: NSPoint(x: 15.5, y: 29.5))
        clipboardlist2Path.curve(to: NSPoint(x: 17.5, y: 27.5), controlPoint1: NSPoint(x: 16.61, y: 29.5), controlPoint2: NSPoint(x: 17.5, y: 28.61))
        clipboardlist2Path.line(to: NSPoint(x: 17.5, y: 26.5))
        clipboardlist2Path.line(to: NSPoint(x: 19.5, y: 26.5))
        clipboardlist2Path.curve(to: NSPoint(x: 20.5, y: 25.5), controlPoint1: NSPoint(x: 20.06, y: 26.5), controlPoint2: NSPoint(x: 20.5, y: 26.05))
        clipboardlist2Path.line(to: NSPoint(x: 20.5, y: 24.5))
        clipboardlist2Path.curve(to: NSPoint(x: 19.5, y: 23.5), controlPoint1: NSPoint(x: 20.5, y: 23.94), controlPoint2: NSPoint(x: 20.05, y: 23.5))
        clipboardlist2Path.line(to: NSPoint(x: 10.5, y: 23.5))
        clipboardlist2Path.curve(to: NSPoint(x: 9.5, y: 24.5), controlPoint1: NSPoint(x: 9.94, y: 23.5), controlPoint2: NSPoint(x: 9.5, y: 23.95))
        clipboardlist2Path.line(to: NSPoint(x: 9.5, y: 25.5))
        clipboardlist2Path.curve(to: NSPoint(x: 10.5, y: 26.5), controlPoint1: NSPoint(x: 9.5, y: 26.06), controlPoint2: NSPoint(x: 9.95, y: 26.5))
        clipboardlist2Path.line(to: NSPoint(x: 12.5, y: 26.5))
        clipboardlist2Path.line(to: NSPoint(x: 12.5, y: 26.5))
        clipboardlist2Path.close()
        clipboardlist2Path.move(to: NSPoint(x: 21.5, y: 25.5))
        clipboardlist2Path.line(to: NSPoint(x: 22.5, y: 25.5))
        clipboardlist2Path.curve(to: NSPoint(x: 24.5, y: 23.5), controlPoint1: NSPoint(x: 23.61, y: 25.5), controlPoint2: NSPoint(x: 24.5, y: 24.6))
        clipboardlist2Path.line(to: NSPoint(x: 24.5, y: 2.5))
        clipboardlist2Path.curve(to: NSPoint(x: 22.5, y: 0.5), controlPoint1: NSPoint(x: 24.5, y: 1.39), controlPoint2: NSPoint(x: 23.61, y: 0.5))
        clipboardlist2Path.line(to: NSPoint(x: 7.5, y: 0.5))
        clipboardlist2Path.curve(to: NSPoint(x: 5.5, y: 2.5), controlPoint1: NSPoint(x: 6.39, y: 0.5), controlPoint2: NSPoint(x: 5.5, y: 1.4))
        clipboardlist2Path.line(to: NSPoint(x: 5.5, y: 23.5))
        clipboardlist2Path.curve(to: NSPoint(x: 7.5, y: 25.5), controlPoint1: NSPoint(x: 5.5, y: 24.61), controlPoint2: NSPoint(x: 6.39, y: 25.5))
        clipboardlist2Path.line(to: NSPoint(x: 8.5, y: 25.5))
        clipboardlist2Path.curve(to: NSPoint(x: 8.5, y: 25.5), controlPoint1: NSPoint(x: 8.5, y: 25.5), controlPoint2: NSPoint(x: 8.5, y: 25.5))
        clipboardlist2Path.line(to: NSPoint(x: 8.5, y: 24.5))
        clipboardlist2Path.curve(to: NSPoint(x: 10.5, y: 22.5), controlPoint1: NSPoint(x: 8.5, y: 23.4), controlPoint2: NSPoint(x: 9.39, y: 22.5))
        clipboardlist2Path.line(to: NSPoint(x: 19.5, y: 22.5))
        clipboardlist2Path.curve(to: NSPoint(x: 21.5, y: 24.5), controlPoint1: NSPoint(x: 20.6, y: 22.5), controlPoint2: NSPoint(x: 21.5, y: 23.39))
        clipboardlist2Path.line(to: NSPoint(x: 21.5, y: 25.5))
        clipboardlist2Path.curve(to: NSPoint(x: 21.5, y: 25.5), controlPoint1: NSPoint(x: 21.5, y: 25.5), controlPoint2: NSPoint(x: 21.5, y: 25.5))
        clipboardlist2Path.line(to: NSPoint(x: 21.5, y: 25.5))
        clipboardlist2Path.line(to: NSPoint(x: 21.5, y: 25.5))
        clipboardlist2Path.close()
        clipboardlist2Path.move(to: NSPoint(x: 15, y: 26.5))
        clipboardlist2Path.curve(to: NSPoint(x: 15.5, y: 27), controlPoint1: NSPoint(x: 15.28, y: 26.5), controlPoint2: NSPoint(x: 15.5, y: 26.72))
        clipboardlist2Path.curve(to: NSPoint(x: 15, y: 27.5), controlPoint1: NSPoint(x: 15.5, y: 27.28), controlPoint2: NSPoint(x: 15.28, y: 27.5))
        clipboardlist2Path.curve(to: NSPoint(x: 14.5, y: 27), controlPoint1: NSPoint(x: 14.72, y: 27.5), controlPoint2: NSPoint(x: 14.5, y: 27.28))
        clipboardlist2Path.curve(to: NSPoint(x: 15, y: 26.5), controlPoint1: NSPoint(x: 14.5, y: 26.72), controlPoint2: NSPoint(x: 14.72, y: 26.5))
        clipboardlist2Path.line(to: NSPoint(x: 15, y: 26.5))
        clipboardlist2Path.close()
        clipboardlist2Path.move(to: NSPoint(x: 13.5, y: 17.5))
        clipboardlist2Path.line(to: NSPoint(x: 13.5, y: 16.5))
        clipboardlist2Path.line(to: NSPoint(x: 21.5, y: 16.5))
        clipboardlist2Path.line(to: NSPoint(x: 21.5, y: 17.5))
        clipboardlist2Path.line(to: NSPoint(x: 13.5, y: 17.5))
        clipboardlist2Path.line(to: NSPoint(x: 13.5, y: 17.5))
        clipboardlist2Path.close()
        clipboardlist2Path.move(to: NSPoint(x: 8.5, y: 18.5))
        clipboardlist2Path.line(to: NSPoint(x: 8.5, y: 15.5))
        clipboardlist2Path.line(to: NSPoint(x: 11.5, y: 15.5))
        clipboardlist2Path.line(to: NSPoint(x: 11.5, y: 18.5))
        clipboardlist2Path.line(to: NSPoint(x: 8.5, y: 18.5))
        clipboardlist2Path.line(to: NSPoint(x: 8.5, y: 18.5))
        clipboardlist2Path.close()
        clipboardlist2Path.move(to: NSPoint(x: 9.5, y: 17.5))
        clipboardlist2Path.line(to: NSPoint(x: 9.5, y: 16.5))
        clipboardlist2Path.line(to: NSPoint(x: 10.5, y: 16.5))
        clipboardlist2Path.line(to: NSPoint(x: 10.5, y: 17.5))
        clipboardlist2Path.line(to: NSPoint(x: 9.5, y: 17.5))
        clipboardlist2Path.line(to: NSPoint(x: 9.5, y: 17.5))
        clipboardlist2Path.close()
        clipboardlist2Path.move(to: NSPoint(x: 8.5, y: 13.5))
        clipboardlist2Path.line(to: NSPoint(x: 8.5, y: 10.5))
        clipboardlist2Path.line(to: NSPoint(x: 11.5, y: 10.5))
        clipboardlist2Path.line(to: NSPoint(x: 11.5, y: 13.5))
        clipboardlist2Path.line(to: NSPoint(x: 8.5, y: 13.5))
        clipboardlist2Path.line(to: NSPoint(x: 8.5, y: 13.5))
        clipboardlist2Path.close()
        clipboardlist2Path.move(to: NSPoint(x: 9.5, y: 12.5))
        clipboardlist2Path.line(to: NSPoint(x: 9.5, y: 11.5))
        clipboardlist2Path.line(to: NSPoint(x: 10.5, y: 11.5))
        clipboardlist2Path.line(to: NSPoint(x: 10.5, y: 12.5))
        clipboardlist2Path.line(to: NSPoint(x: 9.5, y: 12.5))
        clipboardlist2Path.line(to: NSPoint(x: 9.5, y: 12.5))
        clipboardlist2Path.close()
        clipboardlist2Path.move(to: NSPoint(x: 13.5, y: 12.5))
        clipboardlist2Path.line(to: NSPoint(x: 13.5, y: 11.5))
        clipboardlist2Path.line(to: NSPoint(x: 21.5, y: 11.5))
        clipboardlist2Path.line(to: NSPoint(x: 21.5, y: 12.5))
        clipboardlist2Path.line(to: NSPoint(x: 13.5, y: 12.5))
        clipboardlist2Path.line(to: NSPoint(x: 13.5, y: 12.5))
        clipboardlist2Path.close()
        clipboardlist2Path.move(to: NSPoint(x: 8.5, y: 8.5))
        clipboardlist2Path.line(to: NSPoint(x: 8.5, y: 5.5))
        clipboardlist2Path.line(to: NSPoint(x: 11.5, y: 5.5))
        clipboardlist2Path.line(to: NSPoint(x: 11.5, y: 8.5))
        clipboardlist2Path.line(to: NSPoint(x: 8.5, y: 8.5))
        clipboardlist2Path.line(to: NSPoint(x: 8.5, y: 8.5))
        clipboardlist2Path.close()
        clipboardlist2Path.move(to: NSPoint(x: 9.5, y: 7.5))
        clipboardlist2Path.line(to: NSPoint(x: 9.5, y: 6.5))
        clipboardlist2Path.line(to: NSPoint(x: 10.5, y: 6.5))
        clipboardlist2Path.line(to: NSPoint(x: 10.5, y: 7.5))
        clipboardlist2Path.line(to: NSPoint(x: 9.5, y: 7.5))
        clipboardlist2Path.line(to: NSPoint(x: 9.5, y: 7.5))
        clipboardlist2Path.close()
        clipboardlist2Path.move(to: NSPoint(x: 13.5, y: 7.5))
        clipboardlist2Path.line(to: NSPoint(x: 13.5, y: 6.5))
        clipboardlist2Path.line(to: NSPoint(x: 21.5, y: 6.5))
        clipboardlist2Path.line(to: NSPoint(x: 21.5, y: 7.5))
        clipboardlist2Path.line(to: NSPoint(x: 13.5, y: 7.5))
        clipboardlist2Path.line(to: NSPoint(x: 13.5, y: 7.5))
        clipboardlist2Path.close()
        clipboardlist2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        clipboardlist2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawNote(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-41-note
        //// note 2 Drawing
        let note2Path = NSBezierPath()
        note2Path.move(to: NSPoint(x: 3.5, y: 20.5))
        note2Path.line(to: NSPoint(x: 3.5, y: 5.5))
        note2Path.curve(to: NSPoint(x: 5.49, y: 3.5), controlPoint1: NSPoint(x: 3.5, y: 4.4), controlPoint2: NSPoint(x: 4.39, y: 3.5))
        note2Path.line(to: NSPoint(x: 19.5, y: 3.5))
        note2Path.line(to: NSPoint(x: 19.5, y: 9.5))
        note2Path.curve(to: NSPoint(x: 21.51, y: 11.5), controlPoint1: NSPoint(x: 19.5, y: 10.61), controlPoint2: NSPoint(x: 20.4, y: 11.5))
        note2Path.line(to: NSPoint(x: 26.5, y: 11.5))
        note2Path.line(to: NSPoint(x: 26.5, y: 20.5))
        note2Path.line(to: NSPoint(x: 3.5, y: 20.5))
        note2Path.line(to: NSPoint(x: 3.5, y: 20.5))
        note2Path.close()
        note2Path.move(to: NSPoint(x: 3.5, y: 21.5))
        note2Path.line(to: NSPoint(x: 3.5, y: 24.5))
        note2Path.curve(to: NSPoint(x: 5.5, y: 26.5), controlPoint1: NSPoint(x: 3.5, y: 25.6), controlPoint2: NSPoint(x: 4.4, y: 26.5))
        note2Path.line(to: NSPoint(x: 24.5, y: 26.5))
        note2Path.curve(to: NSPoint(x: 26.5, y: 24.51), controlPoint1: NSPoint(x: 25.6, y: 26.5), controlPoint2: NSPoint(x: 26.5, y: 25.61))
        note2Path.line(to: NSPoint(x: 26.5, y: 21.5))
        note2Path.line(to: NSPoint(x: 3.5, y: 21.5))
        note2Path.line(to: NSPoint(x: 3.5, y: 21.5))
        note2Path.close()
        note2Path.move(to: NSPoint(x: 20.5, y: 3.5))
        note2Path.line(to: NSPoint(x: 20.5, y: 9.5))
        note2Path.curve(to: NSPoint(x: 21.49, y: 10.5), controlPoint1: NSPoint(x: 20.5, y: 10.05), controlPoint2: NSPoint(x: 20.95, y: 10.5))
        note2Path.line(to: NSPoint(x: 26.5, y: 10.5))
        note2Path.line(to: NSPoint(x: 20.5, y: 3.5))
        note2Path.line(to: NSPoint(x: 20.5, y: 3.5))
        note2Path.close()
        note2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        note2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawNoteAdd(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-42-note-add
        //// note-add 2 Drawing
        let noteadd2Path = NSBezierPath()
        noteadd2Path.move(to: NSPoint(x: 22, y: 7.5))
        noteadd2Path.line(to: NSPoint(x: 19, y: 7.5))
        noteadd2Path.line(to: NSPoint(x: 19, y: 8.5))
        noteadd2Path.line(to: NSPoint(x: 22, y: 8.5))
        noteadd2Path.line(to: NSPoint(x: 22, y: 11.5))
        noteadd2Path.line(to: NSPoint(x: 23, y: 11.5))
        noteadd2Path.line(to: NSPoint(x: 23, y: 8.5))
        noteadd2Path.line(to: NSPoint(x: 26, y: 8.5))
        noteadd2Path.line(to: NSPoint(x: 26, y: 7.5))
        noteadd2Path.line(to: NSPoint(x: 23, y: 7.5))
        noteadd2Path.line(to: NSPoint(x: 23, y: 4.5))
        noteadd2Path.line(to: NSPoint(x: 22, y: 4.5))
        noteadd2Path.line(to: NSPoint(x: 22, y: 7.5))
        noteadd2Path.line(to: NSPoint(x: 22, y: 7.5))
        noteadd2Path.close()
        noteadd2Path.move(to: NSPoint(x: 17.02, y: 4.5))
        noteadd2Path.line(to: NSPoint(x: 4, y: 4.5))
        noteadd2Path.curve(to: NSPoint(x: 2, y: 6.5), controlPoint1: NSPoint(x: 2.9, y: 4.5), controlPoint2: NSPoint(x: 2, y: 5.4))
        noteadd2Path.line(to: NSPoint(x: 2, y: 21.5))
        noteadd2Path.line(to: NSPoint(x: 25, y: 21.5))
        noteadd2Path.line(to: NSPoint(x: 25, y: 14))
        noteadd2Path.curve(to: NSPoint(x: 22.5, y: 14.5), controlPoint1: NSPoint(x: 24.23, y: 14.32), controlPoint2: NSPoint(x: 23.39, y: 14.5))
        noteadd2Path.curve(to: NSPoint(x: 16, y: 8), controlPoint1: NSPoint(x: 18.91, y: 14.5), controlPoint2: NSPoint(x: 16, y: 11.59))
        noteadd2Path.curve(to: NSPoint(x: 17.02, y: 4.5), controlPoint1: NSPoint(x: 16, y: 6.71), controlPoint2: NSPoint(x: 16.37, y: 5.51))
        noteadd2Path.line(to: NSPoint(x: 17.02, y: 4.5))
        noteadd2Path.line(to: NSPoint(x: 17.02, y: 4.5))
        noteadd2Path.close()
        noteadd2Path.move(to: NSPoint(x: 2, y: 22.5))
        noteadd2Path.line(to: NSPoint(x: 2, y: 25.5))
        noteadd2Path.curve(to: NSPoint(x: 4, y: 27.5), controlPoint1: NSPoint(x: 2, y: 26.6), controlPoint2: NSPoint(x: 2.9, y: 27.5))
        noteadd2Path.line(to: NSPoint(x: 23, y: 27.5))
        noteadd2Path.curve(to: NSPoint(x: 25, y: 25.5), controlPoint1: NSPoint(x: 24.1, y: 27.5), controlPoint2: NSPoint(x: 25, y: 26.6))
        noteadd2Path.line(to: NSPoint(x: 25, y: 22.5))
        noteadd2Path.line(to: NSPoint(x: 2, y: 22.5))
        noteadd2Path.line(to: NSPoint(x: 2, y: 22.5))
        noteadd2Path.close()
        noteadd2Path.move(to: NSPoint(x: 22.5, y: 2.5))
        noteadd2Path.curve(to: NSPoint(x: 28, y: 8), controlPoint1: NSPoint(x: 25.54, y: 2.5), controlPoint2: NSPoint(x: 28, y: 4.96))
        noteadd2Path.curve(to: NSPoint(x: 22.5, y: 13.5), controlPoint1: NSPoint(x: 28, y: 11.04), controlPoint2: NSPoint(x: 25.54, y: 13.5))
        noteadd2Path.curve(to: NSPoint(x: 17, y: 8), controlPoint1: NSPoint(x: 19.46, y: 13.5), controlPoint2: NSPoint(x: 17, y: 11.04))
        noteadd2Path.curve(to: NSPoint(x: 22.5, y: 2.5), controlPoint1: NSPoint(x: 17, y: 4.96), controlPoint2: NSPoint(x: 19.46, y: 2.5))
        noteadd2Path.line(to: NSPoint(x: 22.5, y: 2.5))
        noteadd2Path.close()
        noteadd2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        noteadd2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawNoteRemove(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-43-note-remove
        //// note-remove 2 Drawing
        let noteremove2Path = NSBezierPath()
        noteremove2Path.move(to: NSPoint(x: 17.02, y: 4.5))
        noteremove2Path.line(to: NSPoint(x: 4, y: 4.5))
        noteremove2Path.curve(to: NSPoint(x: 2, y: 6.5), controlPoint1: NSPoint(x: 2.9, y: 4.5), controlPoint2: NSPoint(x: 2, y: 5.4))
        noteremove2Path.line(to: NSPoint(x: 2, y: 21.5))
        noteremove2Path.line(to: NSPoint(x: 25, y: 21.5))
        noteremove2Path.line(to: NSPoint(x: 25, y: 14))
        noteremove2Path.curve(to: NSPoint(x: 22.5, y: 14.5), controlPoint1: NSPoint(x: 24.23, y: 14.32), controlPoint2: NSPoint(x: 23.39, y: 14.5))
        noteremove2Path.curve(to: NSPoint(x: 16, y: 8), controlPoint1: NSPoint(x: 18.91, y: 14.5), controlPoint2: NSPoint(x: 16, y: 11.59))
        noteremove2Path.curve(to: NSPoint(x: 17.02, y: 4.5), controlPoint1: NSPoint(x: 16, y: 6.71), controlPoint2: NSPoint(x: 16.37, y: 5.51))
        noteremove2Path.line(to: NSPoint(x: 17.02, y: 4.5))
        noteremove2Path.line(to: NSPoint(x: 17.02, y: 4.5))
        noteremove2Path.close()
        noteremove2Path.move(to: NSPoint(x: 2, y: 22.5))
        noteremove2Path.line(to: NSPoint(x: 2, y: 25.5))
        noteremove2Path.curve(to: NSPoint(x: 4, y: 27.5), controlPoint1: NSPoint(x: 2, y: 26.6), controlPoint2: NSPoint(x: 2.9, y: 27.5))
        noteremove2Path.line(to: NSPoint(x: 23, y: 27.5))
        noteremove2Path.curve(to: NSPoint(x: 25, y: 25.5), controlPoint1: NSPoint(x: 24.1, y: 27.5), controlPoint2: NSPoint(x: 25, y: 26.6))
        noteremove2Path.line(to: NSPoint(x: 25, y: 22.5))
        noteremove2Path.line(to: NSPoint(x: 2, y: 22.5))
        noteremove2Path.line(to: NSPoint(x: 2, y: 22.5))
        noteremove2Path.close()
        noteremove2Path.move(to: NSPoint(x: 22.5, y: 2.5))
        noteremove2Path.curve(to: NSPoint(x: 28, y: 8), controlPoint1: NSPoint(x: 25.54, y: 2.5), controlPoint2: NSPoint(x: 28, y: 4.96))
        noteremove2Path.curve(to: NSPoint(x: 22.5, y: 13.5), controlPoint1: NSPoint(x: 28, y: 11.04), controlPoint2: NSPoint(x: 25.54, y: 13.5))
        noteremove2Path.curve(to: NSPoint(x: 17, y: 8), controlPoint1: NSPoint(x: 19.46, y: 13.5), controlPoint2: NSPoint(x: 17, y: 11.04))
        noteremove2Path.curve(to: NSPoint(x: 22.5, y: 2.5), controlPoint1: NSPoint(x: 17, y: 4.96), controlPoint2: NSPoint(x: 19.46, y: 2.5))
        noteremove2Path.line(to: NSPoint(x: 22.5, y: 2.5))
        noteremove2Path.close()
        noteremove2Path.move(to: NSPoint(x: 19, y: 8.5))
        noteremove2Path.line(to: NSPoint(x: 19, y: 7.5))
        noteremove2Path.line(to: NSPoint(x: 26, y: 7.5))
        noteremove2Path.line(to: NSPoint(x: 26, y: 8.5))
        noteremove2Path.line(to: NSPoint(x: 19, y: 8.5))
        noteremove2Path.line(to: NSPoint(x: 19, y: 8.5))
        noteremove2Path.close()
        noteremove2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        noteremove2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawNoteText(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-44-note-text
        //// note-text 2 Drawing
        let notetext2Path = NSBezierPath()
        notetext2Path.move(to: NSPoint(x: 3.5, y: 20.5))
        notetext2Path.line(to: NSPoint(x: 3.5, y: 5.5))
        notetext2Path.curve(to: NSPoint(x: 5.49, y: 3.5), controlPoint1: NSPoint(x: 3.5, y: 4.4), controlPoint2: NSPoint(x: 4.39, y: 3.5))
        notetext2Path.line(to: NSPoint(x: 19.5, y: 3.5))
        notetext2Path.line(to: NSPoint(x: 19.5, y: 9.5))
        notetext2Path.curve(to: NSPoint(x: 21.51, y: 11.5), controlPoint1: NSPoint(x: 19.5, y: 10.61), controlPoint2: NSPoint(x: 20.4, y: 11.5))
        notetext2Path.line(to: NSPoint(x: 26.5, y: 11.5))
        notetext2Path.line(to: NSPoint(x: 26.5, y: 20.5))
        notetext2Path.line(to: NSPoint(x: 3.5, y: 20.5))
        notetext2Path.line(to: NSPoint(x: 3.5, y: 20.5))
        notetext2Path.close()
        notetext2Path.move(to: NSPoint(x: 3.5, y: 21.5))
        notetext2Path.line(to: NSPoint(x: 3.5, y: 24.5))
        notetext2Path.curve(to: NSPoint(x: 5.5, y: 26.5), controlPoint1: NSPoint(x: 3.5, y: 25.6), controlPoint2: NSPoint(x: 4.4, y: 26.5))
        notetext2Path.line(to: NSPoint(x: 24.5, y: 26.5))
        notetext2Path.curve(to: NSPoint(x: 26.5, y: 24.51), controlPoint1: NSPoint(x: 25.6, y: 26.5), controlPoint2: NSPoint(x: 26.5, y: 25.61))
        notetext2Path.line(to: NSPoint(x: 26.5, y: 21.5))
        notetext2Path.line(to: NSPoint(x: 3.5, y: 21.5))
        notetext2Path.line(to: NSPoint(x: 3.5, y: 21.5))
        notetext2Path.close()
        notetext2Path.move(to: NSPoint(x: 20.5, y: 3.5))
        notetext2Path.line(to: NSPoint(x: 20.5, y: 9.5))
        notetext2Path.curve(to: NSPoint(x: 21.49, y: 10.5), controlPoint1: NSPoint(x: 20.5, y: 10.05), controlPoint2: NSPoint(x: 20.95, y: 10.5))
        notetext2Path.line(to: NSPoint(x: 26.5, y: 10.5))
        notetext2Path.line(to: NSPoint(x: 20.5, y: 3.5))
        notetext2Path.line(to: NSPoint(x: 20.5, y: 3.5))
        notetext2Path.close()
        notetext2Path.move(to: NSPoint(x: 6.5, y: 17.5))
        notetext2Path.line(to: NSPoint(x: 6.5, y: 16.5))
        notetext2Path.line(to: NSPoint(x: 23.5, y: 16.5))
        notetext2Path.line(to: NSPoint(x: 23.5, y: 17.5))
        notetext2Path.line(to: NSPoint(x: 6.5, y: 17.5))
        notetext2Path.line(to: NSPoint(x: 6.5, y: 17.5))
        notetext2Path.close()
        notetext2Path.move(to: NSPoint(x: 6.5, y: 14.5))
        notetext2Path.line(to: NSPoint(x: 6.5, y: 13.5))
        notetext2Path.line(to: NSPoint(x: 23.5, y: 13.5))
        notetext2Path.line(to: NSPoint(x: 23.5, y: 14.5))
        notetext2Path.line(to: NSPoint(x: 6.5, y: 14.5))
        notetext2Path.line(to: NSPoint(x: 6.5, y: 14.5))
        notetext2Path.close()
        notetext2Path.move(to: NSPoint(x: 6.5, y: 11.5))
        notetext2Path.line(to: NSPoint(x: 6.5, y: 10.5))
        notetext2Path.line(to: NSPoint(x: 17.5, y: 10.5))
        notetext2Path.line(to: NSPoint(x: 17.5, y: 11.5))
        notetext2Path.line(to: NSPoint(x: 6.5, y: 11.5))
        notetext2Path.line(to: NSPoint(x: 6.5, y: 11.5))
        notetext2Path.close()
        notetext2Path.move(to: NSPoint(x: 6.5, y: 8.5))
        notetext2Path.line(to: NSPoint(x: 6.5, y: 7.5))
        notetext2Path.line(to: NSPoint(x: 17.5, y: 7.5))
        notetext2Path.line(to: NSPoint(x: 17.5, y: 8.5))
        notetext2Path.line(to: NSPoint(x: 6.5, y: 8.5))
        notetext2Path.line(to: NSPoint(x: 6.5, y: 8.5))
        notetext2Path.close()
        notetext2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        notetext2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawNoteList(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-45-note-list
        //// note-list 2 Drawing
        let notelist2Path = NSBezierPath()
        notelist2Path.move(to: NSPoint(x: 3.5, y: 20.5))
        notelist2Path.line(to: NSPoint(x: 3.5, y: 5.5))
        notelist2Path.curve(to: NSPoint(x: 5.49, y: 3.5), controlPoint1: NSPoint(x: 3.5, y: 4.4), controlPoint2: NSPoint(x: 4.39, y: 3.5))
        notelist2Path.line(to: NSPoint(x: 19.5, y: 3.5))
        notelist2Path.line(to: NSPoint(x: 19.5, y: 9.5))
        notelist2Path.curve(to: NSPoint(x: 21.51, y: 11.5), controlPoint1: NSPoint(x: 19.5, y: 10.61), controlPoint2: NSPoint(x: 20.4, y: 11.5))
        notelist2Path.line(to: NSPoint(x: 26.5, y: 11.5))
        notelist2Path.line(to: NSPoint(x: 26.5, y: 20.5))
        notelist2Path.line(to: NSPoint(x: 3.5, y: 20.5))
        notelist2Path.line(to: NSPoint(x: 3.5, y: 20.5))
        notelist2Path.close()
        notelist2Path.move(to: NSPoint(x: 3.5, y: 21.5))
        notelist2Path.line(to: NSPoint(x: 3.5, y: 24.5))
        notelist2Path.curve(to: NSPoint(x: 5.5, y: 26.5), controlPoint1: NSPoint(x: 3.5, y: 25.6), controlPoint2: NSPoint(x: 4.4, y: 26.5))
        notelist2Path.line(to: NSPoint(x: 24.5, y: 26.5))
        notelist2Path.curve(to: NSPoint(x: 26.5, y: 24.51), controlPoint1: NSPoint(x: 25.6, y: 26.5), controlPoint2: NSPoint(x: 26.5, y: 25.61))
        notelist2Path.line(to: NSPoint(x: 26.5, y: 21.5))
        notelist2Path.line(to: NSPoint(x: 3.5, y: 21.5))
        notelist2Path.line(to: NSPoint(x: 3.5, y: 21.5))
        notelist2Path.close()
        notelist2Path.move(to: NSPoint(x: 20.5, y: 3.5))
        notelist2Path.line(to: NSPoint(x: 20.5, y: 9.5))
        notelist2Path.curve(to: NSPoint(x: 21.49, y: 10.5), controlPoint1: NSPoint(x: 20.5, y: 10.05), controlPoint2: NSPoint(x: 20.95, y: 10.5))
        notelist2Path.line(to: NSPoint(x: 26.5, y: 10.5))
        notelist2Path.line(to: NSPoint(x: 20.5, y: 3.5))
        notelist2Path.line(to: NSPoint(x: 20.5, y: 3.5))
        notelist2Path.close()
        notelist2Path.move(to: NSPoint(x: 11.5, y: 13.5))
        notelist2Path.line(to: NSPoint(x: 11.5, y: 12.5))
        notelist2Path.line(to: NSPoint(x: 18.5, y: 12.5))
        notelist2Path.line(to: NSPoint(x: 18.5, y: 13.5))
        notelist2Path.line(to: NSPoint(x: 11.5, y: 13.5))
        notelist2Path.line(to: NSPoint(x: 11.5, y: 13.5))
        notelist2Path.close()
        notelist2Path.move(to: NSPoint(x: 6.5, y: 14.5))
        notelist2Path.line(to: NSPoint(x: 6.5, y: 11.5))
        notelist2Path.line(to: NSPoint(x: 9.5, y: 11.5))
        notelist2Path.line(to: NSPoint(x: 9.5, y: 14.5))
        notelist2Path.line(to: NSPoint(x: 6.5, y: 14.5))
        notelist2Path.line(to: NSPoint(x: 6.5, y: 14.5))
        notelist2Path.close()
        notelist2Path.move(to: NSPoint(x: 7.5, y: 13.5))
        notelist2Path.line(to: NSPoint(x: 7.5, y: 12.5))
        notelist2Path.line(to: NSPoint(x: 8.5, y: 12.5))
        notelist2Path.line(to: NSPoint(x: 8.5, y: 13.5))
        notelist2Path.line(to: NSPoint(x: 7.5, y: 13.5))
        notelist2Path.line(to: NSPoint(x: 7.5, y: 13.5))
        notelist2Path.close()
        notelist2Path.move(to: NSPoint(x: 11.5, y: 17.5))
        notelist2Path.line(to: NSPoint(x: 11.5, y: 16.5))
        notelist2Path.line(to: NSPoint(x: 23.5, y: 16.5))
        notelist2Path.line(to: NSPoint(x: 23.5, y: 17.5))
        notelist2Path.line(to: NSPoint(x: 11.5, y: 17.5))
        notelist2Path.line(to: NSPoint(x: 11.5, y: 17.5))
        notelist2Path.close()
        notelist2Path.move(to: NSPoint(x: 6.5, y: 18.5))
        notelist2Path.line(to: NSPoint(x: 6.5, y: 15.5))
        notelist2Path.line(to: NSPoint(x: 9.5, y: 15.5))
        notelist2Path.line(to: NSPoint(x: 9.5, y: 18.5))
        notelist2Path.line(to: NSPoint(x: 6.5, y: 18.5))
        notelist2Path.line(to: NSPoint(x: 6.5, y: 18.5))
        notelist2Path.close()
        notelist2Path.move(to: NSPoint(x: 7.5, y: 17.5))
        notelist2Path.line(to: NSPoint(x: 7.5, y: 16.5))
        notelist2Path.line(to: NSPoint(x: 8.5, y: 16.5))
        notelist2Path.line(to: NSPoint(x: 8.5, y: 17.5))
        notelist2Path.line(to: NSPoint(x: 7.5, y: 17.5))
        notelist2Path.line(to: NSPoint(x: 7.5, y: 17.5))
        notelist2Path.close()
        notelist2Path.move(to: NSPoint(x: 11.5, y: 9.5))
        notelist2Path.line(to: NSPoint(x: 11.5, y: 8.5))
        notelist2Path.line(to: NSPoint(x: 17.5, y: 8.5))
        notelist2Path.line(to: NSPoint(x: 17.5, y: 9.5))
        notelist2Path.line(to: NSPoint(x: 11.5, y: 9.5))
        notelist2Path.line(to: NSPoint(x: 11.5, y: 9.5))
        notelist2Path.close()
        notelist2Path.move(to: NSPoint(x: 6.5, y: 10.5))
        notelist2Path.line(to: NSPoint(x: 6.5, y: 7.5))
        notelist2Path.line(to: NSPoint(x: 9.5, y: 7.5))
        notelist2Path.line(to: NSPoint(x: 9.5, y: 10.5))
        notelist2Path.line(to: NSPoint(x: 6.5, y: 10.5))
        notelist2Path.line(to: NSPoint(x: 6.5, y: 10.5))
        notelist2Path.close()
        notelist2Path.move(to: NSPoint(x: 7.5, y: 9.5))
        notelist2Path.line(to: NSPoint(x: 7.5, y: 8.5))
        notelist2Path.line(to: NSPoint(x: 8.5, y: 8.5))
        notelist2Path.line(to: NSPoint(x: 8.5, y: 9.5))
        notelist2Path.line(to: NSPoint(x: 7.5, y: 9.5))
        notelist2Path.line(to: NSPoint(x: 7.5, y: 9.5))
        notelist2Path.close()
        notelist2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        notelist2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawNoteChecked(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-46-note-checked
        //// note-checked 2 Drawing
        let notechecked2Path = NSBezierPath()
        notechecked2Path.move(to: NSPoint(x: 3.5, y: 20.5))
        notechecked2Path.line(to: NSPoint(x: 3.5, y: 5.5))
        notechecked2Path.curve(to: NSPoint(x: 5.49, y: 3.5), controlPoint1: NSPoint(x: 3.5, y: 4.4), controlPoint2: NSPoint(x: 4.39, y: 3.5))
        notechecked2Path.line(to: NSPoint(x: 19.5, y: 3.5))
        notechecked2Path.line(to: NSPoint(x: 19.5, y: 9.5))
        notechecked2Path.curve(to: NSPoint(x: 21.51, y: 11.5), controlPoint1: NSPoint(x: 19.5, y: 10.61), controlPoint2: NSPoint(x: 20.4, y: 11.5))
        notechecked2Path.line(to: NSPoint(x: 26.5, y: 11.5))
        notechecked2Path.line(to: NSPoint(x: 26.5, y: 20.5))
        notechecked2Path.line(to: NSPoint(x: 3.5, y: 20.5))
        notechecked2Path.line(to: NSPoint(x: 3.5, y: 20.5))
        notechecked2Path.close()
        notechecked2Path.move(to: NSPoint(x: 3.5, y: 21.5))
        notechecked2Path.line(to: NSPoint(x: 3.5, y: 24.5))
        notechecked2Path.curve(to: NSPoint(x: 5.5, y: 26.5), controlPoint1: NSPoint(x: 3.5, y: 25.6), controlPoint2: NSPoint(x: 4.4, y: 26.5))
        notechecked2Path.line(to: NSPoint(x: 24.5, y: 26.5))
        notechecked2Path.curve(to: NSPoint(x: 26.5, y: 24.51), controlPoint1: NSPoint(x: 25.6, y: 26.5), controlPoint2: NSPoint(x: 26.5, y: 25.61))
        notechecked2Path.line(to: NSPoint(x: 26.5, y: 21.5))
        notechecked2Path.line(to: NSPoint(x: 3.5, y: 21.5))
        notechecked2Path.line(to: NSPoint(x: 3.5, y: 21.5))
        notechecked2Path.close()
        notechecked2Path.move(to: NSPoint(x: 20.5, y: 3.5))
        notechecked2Path.line(to: NSPoint(x: 20.5, y: 9.5))
        notechecked2Path.curve(to: NSPoint(x: 21.49, y: 10.5), controlPoint1: NSPoint(x: 20.5, y: 10.05), controlPoint2: NSPoint(x: 20.95, y: 10.5))
        notechecked2Path.line(to: NSPoint(x: 26.5, y: 10.5))
        notechecked2Path.line(to: NSPoint(x: 20.5, y: 3.5))
        notechecked2Path.line(to: NSPoint(x: 20.5, y: 3.5))
        notechecked2Path.close()
        notechecked2Path.move(to: NSPoint(x: 12.85, y: 8.91))
        notechecked2Path.line(to: NSPoint(x: 20.63, y: 16.69))
        notechecked2Path.line(to: NSPoint(x: 19.92, y: 17.4))
        notechecked2Path.line(to: NSPoint(x: 12.85, y: 10.33))
        notechecked2Path.line(to: NSPoint(x: 9.11, y: 14.07))
        notechecked2Path.line(to: NSPoint(x: 8.4, y: 13.36))
        notechecked2Path.line(to: NSPoint(x: 12.85, y: 8.91))
        notechecked2Path.line(to: NSPoint(x: 12.85, y: 8.91))
        notechecked2Path.close()
        notechecked2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        notechecked2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawNoteImportant(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-47-note-important
        //// note-important 2 Drawing
        let noteimportant2Path = NSBezierPath()
        noteimportant2Path.move(to: NSPoint(x: 3.5, y: 20.5))
        noteimportant2Path.line(to: NSPoint(x: 3.5, y: 5.5))
        noteimportant2Path.curve(to: NSPoint(x: 5.49, y: 3.5), controlPoint1: NSPoint(x: 3.5, y: 4.4), controlPoint2: NSPoint(x: 4.39, y: 3.5))
        noteimportant2Path.line(to: NSPoint(x: 19.5, y: 3.5))
        noteimportant2Path.line(to: NSPoint(x: 19.5, y: 9.5))
        noteimportant2Path.curve(to: NSPoint(x: 21.51, y: 11.5), controlPoint1: NSPoint(x: 19.5, y: 10.61), controlPoint2: NSPoint(x: 20.4, y: 11.5))
        noteimportant2Path.line(to: NSPoint(x: 26.5, y: 11.5))
        noteimportant2Path.line(to: NSPoint(x: 26.5, y: 20.5))
        noteimportant2Path.line(to: NSPoint(x: 3.5, y: 20.5))
        noteimportant2Path.line(to: NSPoint(x: 3.5, y: 20.5))
        noteimportant2Path.close()
        noteimportant2Path.move(to: NSPoint(x: 3.5, y: 21.5))
        noteimportant2Path.line(to: NSPoint(x: 3.5, y: 24.5))
        noteimportant2Path.curve(to: NSPoint(x: 5.5, y: 26.5), controlPoint1: NSPoint(x: 3.5, y: 25.6), controlPoint2: NSPoint(x: 4.4, y: 26.5))
        noteimportant2Path.line(to: NSPoint(x: 24.5, y: 26.5))
        noteimportant2Path.curve(to: NSPoint(x: 26.5, y: 24.51), controlPoint1: NSPoint(x: 25.6, y: 26.5), controlPoint2: NSPoint(x: 26.5, y: 25.61))
        noteimportant2Path.line(to: NSPoint(x: 26.5, y: 21.5))
        noteimportant2Path.line(to: NSPoint(x: 3.5, y: 21.5))
        noteimportant2Path.line(to: NSPoint(x: 3.5, y: 21.5))
        noteimportant2Path.close()
        noteimportant2Path.move(to: NSPoint(x: 20.5, y: 3.5))
        noteimportant2Path.line(to: NSPoint(x: 20.5, y: 9.5))
        noteimportant2Path.curve(to: NSPoint(x: 21.49, y: 10.5), controlPoint1: NSPoint(x: 20.5, y: 10.05), controlPoint2: NSPoint(x: 20.95, y: 10.5))
        noteimportant2Path.line(to: NSPoint(x: 26.5, y: 10.5))
        noteimportant2Path.line(to: NSPoint(x: 20.5, y: 3.5))
        noteimportant2Path.line(to: NSPoint(x: 20.5, y: 3.5))
        noteimportant2Path.close()
        noteimportant2Path.move(to: NSPoint(x: 14.5, y: 17.5))
        noteimportant2Path.line(to: NSPoint(x: 14.5, y: 11.5))
        noteimportant2Path.line(to: NSPoint(x: 15.5, y: 11.5))
        noteimportant2Path.line(to: NSPoint(x: 15.5, y: 17.5))
        noteimportant2Path.line(to: NSPoint(x: 14.5, y: 17.5))
        noteimportant2Path.line(to: NSPoint(x: 14.5, y: 17.5))
        noteimportant2Path.close()
        noteimportant2Path.move(to: NSPoint(x: 14.5, y: 8.5))
        noteimportant2Path.line(to: NSPoint(x: 14.5, y: 7.5))
        noteimportant2Path.line(to: NSPoint(x: 15.5, y: 7.5))
        noteimportant2Path.line(to: NSPoint(x: 15.5, y: 8.5))
        noteimportant2Path.line(to: NSPoint(x: 14.5, y: 8.5))
        noteimportant2Path.line(to: NSPoint(x: 14.5, y: 8.5))
        noteimportant2Path.close()
        noteimportant2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        noteimportant2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawNotebook(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-48-notebook
        //// notebook 5 Drawing
        let notebook5Path = NSBezierPath()
        notebook5Path.move(to: NSPoint(x: 8.5, y: 28.5))
        notebook5Path.curve(to: NSPoint(x: 6.5, y: 26.49), controlPoint1: NSPoint(x: 7.39, y: 28.5), controlPoint2: NSPoint(x: 6.5, y: 27.6))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 3.51))
        notebook5Path.curve(to: NSPoint(x: 8.5, y: 1.5), controlPoint1: NSPoint(x: 6.5, y: 2.4), controlPoint2: NSPoint(x: 7.39, y: 1.5))
        notebook5Path.line(to: NSPoint(x: 23.5, y: 1.5))
        notebook5Path.curve(to: NSPoint(x: 25.5, y: 3.51), controlPoint1: NSPoint(x: 24.61, y: 1.5), controlPoint2: NSPoint(x: 25.5, y: 2.4))
        notebook5Path.line(to: NSPoint(x: 25.5, y: 26.49))
        notebook5Path.curve(to: NSPoint(x: 23.5, y: 28.5), controlPoint1: NSPoint(x: 25.5, y: 27.6), controlPoint2: NSPoint(x: 24.61, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 28.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 4.5, y: 21.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 20.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 20.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 21.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 21.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 21.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 4.5, y: 17.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 16.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 16.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 17.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 17.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 17.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 4.5, y: 25.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 24.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 24.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 25.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 25.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 25.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 4.5, y: 9.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 8.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 8.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 9.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 9.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 9.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 4.5, y: 5.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 4.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 4.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 5.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 5.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 5.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 4.5, y: 13.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 12.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 12.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 13.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 13.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 13.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 6.5, y: 21.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 20.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 20.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 21.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 21.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 21.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 6.5, y: 17.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 16.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 16.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 17.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 17.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 17.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 6.5, y: 25.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 24.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 24.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 25.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 25.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 25.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 6.5, y: 9.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 8.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 8.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 9.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 9.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 9.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 6.5, y: 5.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 4.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 4.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 5.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 5.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 5.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 6.5, y: 13.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 12.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 12.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 13.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 13.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 13.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 10.5, y: 23.5))
        notebook5Path.line(to: NSPoint(x: 10.5, y: 22.5))
        notebook5Path.line(to: NSPoint(x: 21.5, y: 22.5))
        notebook5Path.line(to: NSPoint(x: 21.5, y: 23.5))
        notebook5Path.line(to: NSPoint(x: 10.5, y: 23.5))
        notebook5Path.line(to: NSPoint(x: 10.5, y: 23.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 11.5, y: 19.5))
        notebook5Path.line(to: NSPoint(x: 11.5, y: 18.5))
        notebook5Path.line(to: NSPoint(x: 20.5, y: 18.5))
        notebook5Path.line(to: NSPoint(x: 20.5, y: 19.5))
        notebook5Path.line(to: NSPoint(x: 11.5, y: 19.5))
        notebook5Path.line(to: NSPoint(x: 11.5, y: 19.5))
        notebook5Path.close()
        notebook5Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        notebook5Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawNotebook2(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-49-notebook
        //// notebook 5 Drawing
        let notebook5Path = NSBezierPath()
        notebook5Path.move(to: NSPoint(x: 8.5, y: 28.5))
        notebook5Path.curve(to: NSPoint(x: 6.5, y: 26.49), controlPoint1: NSPoint(x: 7.39, y: 28.5), controlPoint2: NSPoint(x: 6.5, y: 27.6))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 3.51))
        notebook5Path.curve(to: NSPoint(x: 8.5, y: 1.5), controlPoint1: NSPoint(x: 6.5, y: 2.4), controlPoint2: NSPoint(x: 7.39, y: 1.5))
        notebook5Path.line(to: NSPoint(x: 23.5, y: 1.5))
        notebook5Path.curve(to: NSPoint(x: 25.5, y: 3.51), controlPoint1: NSPoint(x: 24.61, y: 1.5), controlPoint2: NSPoint(x: 25.5, y: 2.4))
        notebook5Path.line(to: NSPoint(x: 25.5, y: 26.49))
        notebook5Path.curve(to: NSPoint(x: 23.5, y: 28.5), controlPoint1: NSPoint(x: 25.5, y: 27.6), controlPoint2: NSPoint(x: 24.61, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 28.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 11.5, y: 24.5))
        notebook5Path.line(to: NSPoint(x: 11.5, y: 19.5))
        notebook5Path.line(to: NSPoint(x: 20.5, y: 19.5))
        notebook5Path.line(to: NSPoint(x: 20.5, y: 24.5))
        notebook5Path.line(to: NSPoint(x: 11.5, y: 24.5))
        notebook5Path.line(to: NSPoint(x: 11.5, y: 24.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 12.5, y: 23.5))
        notebook5Path.line(to: NSPoint(x: 12.5, y: 20.5))
        notebook5Path.line(to: NSPoint(x: 19.5, y: 20.5))
        notebook5Path.line(to: NSPoint(x: 19.5, y: 23.5))
        notebook5Path.line(to: NSPoint(x: 12.5, y: 23.5))
        notebook5Path.line(to: NSPoint(x: 12.5, y: 23.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 4.5, y: 21.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 20.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 20.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 21.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 21.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 21.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 4.5, y: 17.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 16.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 16.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 17.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 17.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 17.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 4.5, y: 25.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 24.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 24.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 25.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 25.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 25.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 4.5, y: 9.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 8.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 8.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 9.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 9.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 9.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 4.5, y: 5.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 4.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 4.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 5.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 5.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 5.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 4.5, y: 13.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 12.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 12.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 13.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 13.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 13.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 6.5, y: 21.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 20.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 20.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 21.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 21.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 21.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 6.5, y: 17.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 16.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 16.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 17.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 17.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 17.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 6.5, y: 25.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 24.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 24.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 25.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 25.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 25.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 6.5, y: 9.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 8.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 8.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 9.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 9.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 9.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 6.5, y: 5.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 4.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 4.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 5.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 5.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 5.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 6.5, y: 13.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 12.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 12.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 13.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 13.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 13.5))
        notebook5Path.close()
        notebook5Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        notebook5Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawNotebook3(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-50-notebook
        //// notebook 5 Drawing
        let notebook5Path = NSBezierPath()
        notebook5Path.move(to: NSPoint(x: 21.5, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 23.5, y: 28.5))
        notebook5Path.curve(to: NSPoint(x: 25.5, y: 26.49), controlPoint1: NSPoint(x: 24.61, y: 28.5), controlPoint2: NSPoint(x: 25.5, y: 27.6))
        notebook5Path.line(to: NSPoint(x: 25.5, y: 3.51))
        notebook5Path.curve(to: NSPoint(x: 23.5, y: 1.5), controlPoint1: NSPoint(x: 25.5, y: 2.4), controlPoint2: NSPoint(x: 24.61, y: 1.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 1.5))
        notebook5Path.curve(to: NSPoint(x: 6.5, y: 3.51), controlPoint1: NSPoint(x: 7.39, y: 1.5), controlPoint2: NSPoint(x: 6.5, y: 2.4))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 26.49))
        notebook5Path.curve(to: NSPoint(x: 8.5, y: 28.5), controlPoint1: NSPoint(x: 6.5, y: 27.6), controlPoint2: NSPoint(x: 7.39, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 15.5, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 15.5, y: 15.5))
        notebook5Path.line(to: NSPoint(x: 18.5, y: 18.5))
        notebook5Path.line(to: NSPoint(x: 21.5, y: 15.5))
        notebook5Path.line(to: NSPoint(x: 21.5, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 21.5, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 21.5, y: 28.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 4.5, y: 21.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 20.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 20.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 21.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 21.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 21.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 4.5, y: 17.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 16.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 16.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 17.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 17.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 17.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 4.5, y: 25.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 24.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 24.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 25.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 25.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 25.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 4.5, y: 9.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 8.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 8.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 9.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 9.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 9.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 4.5, y: 5.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 4.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 4.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 5.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 5.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 5.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 4.5, y: 13.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 12.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 12.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 13.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 13.5))
        notebook5Path.line(to: NSPoint(x: 4.5, y: 13.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 6.5, y: 21.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 20.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 20.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 21.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 21.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 21.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 6.5, y: 17.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 16.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 16.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 17.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 17.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 17.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 6.5, y: 25.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 24.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 24.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 25.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 25.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 25.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 6.5, y: 9.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 8.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 8.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 9.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 9.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 9.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 6.5, y: 5.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 4.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 4.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 5.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 5.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 5.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 6.5, y: 13.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 12.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 12.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 13.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 13.5))
        notebook5Path.line(to: NSPoint(x: 6.5, y: 13.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 16.5, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 16.5, y: 17.9))
        notebook5Path.line(to: NSPoint(x: 18.5, y: 19.9))
        notebook5Path.line(to: NSPoint(x: 20.5, y: 17.9))
        notebook5Path.line(to: NSPoint(x: 20.5, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 16.5, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 16.5, y: 28.5))
        notebook5Path.close()
        notebook5Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        notebook5Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawNotebook4(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-51-notebook
        //// notebook 5 Drawing
        let notebook5Path = NSBezierPath()
        notebook5Path.move(to: NSPoint(x: 7.5, y: 26.5))
        notebook5Path.curve(to: NSPoint(x: 5.5, y: 24.5), controlPoint1: NSPoint(x: 6.39, y: 26.5), controlPoint2: NSPoint(x: 5.5, y: 25.61))
        notebook5Path.line(to: NSPoint(x: 5.5, y: 3.5))
        notebook5Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        notebook5Path.line(to: NSPoint(x: 22.5, y: 1.5))
        notebook5Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        notebook5Path.line(to: NSPoint(x: 24.5, y: 24.5))
        notebook5Path.curve(to: NSPoint(x: 22.5, y: 26.5), controlPoint1: NSPoint(x: 24.5, y: 25.6), controlPoint2: NSPoint(x: 23.61, y: 26.5))
        notebook5Path.line(to: NSPoint(x: 7.5, y: 26.5))
        notebook5Path.line(to: NSPoint(x: 7.5, y: 26.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 8.5, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 26.5))
        notebook5Path.line(to: NSPoint(x: 9.5, y: 26.5))
        notebook5Path.line(to: NSPoint(x: 9.5, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 28.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 12.5, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 12.5, y: 26.5))
        notebook5Path.line(to: NSPoint(x: 13.5, y: 26.5))
        notebook5Path.line(to: NSPoint(x: 13.5, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 12.5, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 12.5, y: 28.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 16.5, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 16.5, y: 26.5))
        notebook5Path.line(to: NSPoint(x: 17.5, y: 26.5))
        notebook5Path.line(to: NSPoint(x: 17.5, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 16.5, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 16.5, y: 28.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 20.5, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 20.5, y: 26.5))
        notebook5Path.line(to: NSPoint(x: 21.5, y: 26.5))
        notebook5Path.line(to: NSPoint(x: 21.5, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 20.5, y: 28.5))
        notebook5Path.line(to: NSPoint(x: 20.5, y: 28.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 8.5, y: 26.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 24.5))
        notebook5Path.line(to: NSPoint(x: 9.5, y: 24.5))
        notebook5Path.line(to: NSPoint(x: 9.5, y: 26.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 26.5))
        notebook5Path.line(to: NSPoint(x: 8.5, y: 26.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 12.5, y: 26.5))
        notebook5Path.line(to: NSPoint(x: 12.5, y: 24.5))
        notebook5Path.line(to: NSPoint(x: 13.5, y: 24.5))
        notebook5Path.line(to: NSPoint(x: 13.5, y: 26.5))
        notebook5Path.line(to: NSPoint(x: 12.5, y: 26.5))
        notebook5Path.line(to: NSPoint(x: 12.5, y: 26.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 16.5, y: 26.5))
        notebook5Path.line(to: NSPoint(x: 16.5, y: 24.5))
        notebook5Path.line(to: NSPoint(x: 17.5, y: 24.5))
        notebook5Path.line(to: NSPoint(x: 17.5, y: 26.5))
        notebook5Path.line(to: NSPoint(x: 16.5, y: 26.5))
        notebook5Path.line(to: NSPoint(x: 16.5, y: 26.5))
        notebook5Path.close()
        notebook5Path.move(to: NSPoint(x: 20.5, y: 26.5))
        notebook5Path.line(to: NSPoint(x: 20.5, y: 24.5))
        notebook5Path.line(to: NSPoint(x: 21.5, y: 24.5))
        notebook5Path.line(to: NSPoint(x: 21.5, y: 26.5))
        notebook5Path.line(to: NSPoint(x: 20.5, y: 26.5))
        notebook5Path.line(to: NSPoint(x: 20.5, y: 26.5))
        notebook5Path.close()
        notebook5Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        notebook5Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawNotebookText(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-52-notebook-text
        //// notebook-text 2 Drawing
        let notebooktext2Path = NSBezierPath()
        notebooktext2Path.move(to: NSPoint(x: 7.5, y: 26.5))
        notebooktext2Path.curve(to: NSPoint(x: 5.5, y: 24.5), controlPoint1: NSPoint(x: 6.39, y: 26.5), controlPoint2: NSPoint(x: 5.5, y: 25.61))
        notebooktext2Path.line(to: NSPoint(x: 5.5, y: 3.5))
        notebooktext2Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        notebooktext2Path.line(to: NSPoint(x: 22.5, y: 1.5))
        notebooktext2Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        notebooktext2Path.line(to: NSPoint(x: 24.5, y: 24.5))
        notebooktext2Path.curve(to: NSPoint(x: 22.5, y: 26.5), controlPoint1: NSPoint(x: 24.5, y: 25.6), controlPoint2: NSPoint(x: 23.61, y: 26.5))
        notebooktext2Path.line(to: NSPoint(x: 7.5, y: 26.5))
        notebooktext2Path.line(to: NSPoint(x: 7.5, y: 26.5))
        notebooktext2Path.close()
        notebooktext2Path.move(to: NSPoint(x: 8.5, y: 21.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 20.5))
        notebooktext2Path.line(to: NSPoint(x: 21.5, y: 20.5))
        notebooktext2Path.line(to: NSPoint(x: 21.5, y: 21.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 21.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 21.5))
        notebooktext2Path.close()
        notebooktext2Path.move(to: NSPoint(x: 8.5, y: 18.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 17.5))
        notebooktext2Path.line(to: NSPoint(x: 21.5, y: 17.5))
        notebooktext2Path.line(to: NSPoint(x: 21.5, y: 18.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 18.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 18.5))
        notebooktext2Path.close()
        notebooktext2Path.move(to: NSPoint(x: 8.5, y: 15.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 14.5))
        notebooktext2Path.line(to: NSPoint(x: 21.5, y: 14.5))
        notebooktext2Path.line(to: NSPoint(x: 21.5, y: 15.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 15.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 15.5))
        notebooktext2Path.close()
        notebooktext2Path.move(to: NSPoint(x: 8.5, y: 12.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 11.5))
        notebooktext2Path.line(to: NSPoint(x: 21.5, y: 11.5))
        notebooktext2Path.line(to: NSPoint(x: 21.5, y: 12.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 12.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 12.5))
        notebooktext2Path.close()
        notebooktext2Path.move(to: NSPoint(x: 8.5, y: 9.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 8.5))
        notebooktext2Path.line(to: NSPoint(x: 21.5, y: 8.5))
        notebooktext2Path.line(to: NSPoint(x: 21.5, y: 9.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 9.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 9.5))
        notebooktext2Path.close()
        notebooktext2Path.move(to: NSPoint(x: 8.5, y: 6.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 5.5))
        notebooktext2Path.line(to: NSPoint(x: 21.5, y: 5.5))
        notebooktext2Path.line(to: NSPoint(x: 21.5, y: 6.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 6.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 6.5))
        notebooktext2Path.close()
        notebooktext2Path.move(to: NSPoint(x: 8.5, y: 28.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 26.5))
        notebooktext2Path.line(to: NSPoint(x: 9.5, y: 26.5))
        notebooktext2Path.line(to: NSPoint(x: 9.5, y: 28.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 28.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 28.5))
        notebooktext2Path.close()
        notebooktext2Path.move(to: NSPoint(x: 12.5, y: 28.5))
        notebooktext2Path.line(to: NSPoint(x: 12.5, y: 26.5))
        notebooktext2Path.line(to: NSPoint(x: 13.5, y: 26.5))
        notebooktext2Path.line(to: NSPoint(x: 13.5, y: 28.5))
        notebooktext2Path.line(to: NSPoint(x: 12.5, y: 28.5))
        notebooktext2Path.line(to: NSPoint(x: 12.5, y: 28.5))
        notebooktext2Path.close()
        notebooktext2Path.move(to: NSPoint(x: 16.5, y: 28.5))
        notebooktext2Path.line(to: NSPoint(x: 16.5, y: 26.5))
        notebooktext2Path.line(to: NSPoint(x: 17.5, y: 26.5))
        notebooktext2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        notebooktext2Path.line(to: NSPoint(x: 16.5, y: 28.5))
        notebooktext2Path.line(to: NSPoint(x: 16.5, y: 28.5))
        notebooktext2Path.close()
        notebooktext2Path.move(to: NSPoint(x: 20.5, y: 28.5))
        notebooktext2Path.line(to: NSPoint(x: 20.5, y: 26.5))
        notebooktext2Path.line(to: NSPoint(x: 21.5, y: 26.5))
        notebooktext2Path.line(to: NSPoint(x: 21.5, y: 28.5))
        notebooktext2Path.line(to: NSPoint(x: 20.5, y: 28.5))
        notebooktext2Path.line(to: NSPoint(x: 20.5, y: 28.5))
        notebooktext2Path.close()
        notebooktext2Path.move(to: NSPoint(x: 8.5, y: 26.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 24.5))
        notebooktext2Path.line(to: NSPoint(x: 9.5, y: 24.5))
        notebooktext2Path.line(to: NSPoint(x: 9.5, y: 26.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 26.5))
        notebooktext2Path.line(to: NSPoint(x: 8.5, y: 26.5))
        notebooktext2Path.close()
        notebooktext2Path.move(to: NSPoint(x: 12.5, y: 26.5))
        notebooktext2Path.line(to: NSPoint(x: 12.5, y: 24.5))
        notebooktext2Path.line(to: NSPoint(x: 13.5, y: 24.5))
        notebooktext2Path.line(to: NSPoint(x: 13.5, y: 26.5))
        notebooktext2Path.line(to: NSPoint(x: 12.5, y: 26.5))
        notebooktext2Path.line(to: NSPoint(x: 12.5, y: 26.5))
        notebooktext2Path.close()
        notebooktext2Path.move(to: NSPoint(x: 16.5, y: 26.5))
        notebooktext2Path.line(to: NSPoint(x: 16.5, y: 24.5))
        notebooktext2Path.line(to: NSPoint(x: 17.5, y: 24.5))
        notebooktext2Path.line(to: NSPoint(x: 17.5, y: 26.5))
        notebooktext2Path.line(to: NSPoint(x: 16.5, y: 26.5))
        notebooktext2Path.line(to: NSPoint(x: 16.5, y: 26.5))
        notebooktext2Path.close()
        notebooktext2Path.move(to: NSPoint(x: 20.5, y: 26.5))
        notebooktext2Path.line(to: NSPoint(x: 20.5, y: 24.5))
        notebooktext2Path.line(to: NSPoint(x: 21.5, y: 24.5))
        notebooktext2Path.line(to: NSPoint(x: 21.5, y: 26.5))
        notebooktext2Path.line(to: NSPoint(x: 20.5, y: 26.5))
        notebooktext2Path.line(to: NSPoint(x: 20.5, y: 26.5))
        notebooktext2Path.close()
        notebooktext2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        notebooktext2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawNotebookList(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-53-notebook-list
        //// notebook-list 2 Drawing
        let notebooklist2Path = NSBezierPath()
        notebooklist2Path.move(to: NSPoint(x: 7.5, y: 26.5))
        notebooklist2Path.curve(to: NSPoint(x: 5.5, y: 24.5), controlPoint1: NSPoint(x: 6.39, y: 26.5), controlPoint2: NSPoint(x: 5.5, y: 25.61))
        notebooklist2Path.line(to: NSPoint(x: 5.5, y: 3.5))
        notebooklist2Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        notebooklist2Path.line(to: NSPoint(x: 22.5, y: 1.5))
        notebooklist2Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        notebooklist2Path.line(to: NSPoint(x: 24.5, y: 24.5))
        notebooklist2Path.curve(to: NSPoint(x: 22.5, y: 26.5), controlPoint1: NSPoint(x: 24.5, y: 25.6), controlPoint2: NSPoint(x: 23.61, y: 26.5))
        notebooklist2Path.line(to: NSPoint(x: 7.5, y: 26.5))
        notebooklist2Path.line(to: NSPoint(x: 7.5, y: 26.5))
        notebooklist2Path.close()
        notebooklist2Path.move(to: NSPoint(x: 13.5, y: 18.5))
        notebooklist2Path.line(to: NSPoint(x: 13.5, y: 17.5))
        notebooklist2Path.line(to: NSPoint(x: 21.5, y: 17.5))
        notebooklist2Path.line(to: NSPoint(x: 21.5, y: 18.5))
        notebooklist2Path.line(to: NSPoint(x: 13.5, y: 18.5))
        notebooklist2Path.line(to: NSPoint(x: 13.5, y: 18.5))
        notebooklist2Path.close()
        notebooklist2Path.move(to: NSPoint(x: 8.5, y: 19.5))
        notebooklist2Path.line(to: NSPoint(x: 8.5, y: 16.5))
        notebooklist2Path.line(to: NSPoint(x: 11.5, y: 16.5))
        notebooklist2Path.line(to: NSPoint(x: 11.5, y: 19.5))
        notebooklist2Path.line(to: NSPoint(x: 8.5, y: 19.5))
        notebooklist2Path.line(to: NSPoint(x: 8.5, y: 19.5))
        notebooklist2Path.close()
        notebooklist2Path.move(to: NSPoint(x: 9.5, y: 18.5))
        notebooklist2Path.line(to: NSPoint(x: 9.5, y: 17.5))
        notebooklist2Path.line(to: NSPoint(x: 10.5, y: 17.5))
        notebooklist2Path.line(to: NSPoint(x: 10.5, y: 18.5))
        notebooklist2Path.line(to: NSPoint(x: 9.5, y: 18.5))
        notebooklist2Path.line(to: NSPoint(x: 9.5, y: 18.5))
        notebooklist2Path.close()
        notebooklist2Path.move(to: NSPoint(x: 8.5, y: 14.5))
        notebooklist2Path.line(to: NSPoint(x: 8.5, y: 11.5))
        notebooklist2Path.line(to: NSPoint(x: 11.5, y: 11.5))
        notebooklist2Path.line(to: NSPoint(x: 11.5, y: 14.5))
        notebooklist2Path.line(to: NSPoint(x: 8.5, y: 14.5))
        notebooklist2Path.line(to: NSPoint(x: 8.5, y: 14.5))
        notebooklist2Path.close()
        notebooklist2Path.move(to: NSPoint(x: 9.5, y: 13.5))
        notebooklist2Path.line(to: NSPoint(x: 9.5, y: 12.5))
        notebooklist2Path.line(to: NSPoint(x: 10.5, y: 12.5))
        notebooklist2Path.line(to: NSPoint(x: 10.5, y: 13.5))
        notebooklist2Path.line(to: NSPoint(x: 9.5, y: 13.5))
        notebooklist2Path.line(to: NSPoint(x: 9.5, y: 13.5))
        notebooklist2Path.close()
        notebooklist2Path.move(to: NSPoint(x: 13.5, y: 13.5))
        notebooklist2Path.line(to: NSPoint(x: 13.5, y: 12.5))
        notebooklist2Path.line(to: NSPoint(x: 21.5, y: 12.5))
        notebooklist2Path.line(to: NSPoint(x: 21.5, y: 13.5))
        notebooklist2Path.line(to: NSPoint(x: 13.5, y: 13.5))
        notebooklist2Path.line(to: NSPoint(x: 13.5, y: 13.5))
        notebooklist2Path.close()
        notebooklist2Path.move(to: NSPoint(x: 8.5, y: 9.5))
        notebooklist2Path.line(to: NSPoint(x: 8.5, y: 6.5))
        notebooklist2Path.line(to: NSPoint(x: 11.5, y: 6.5))
        notebooklist2Path.line(to: NSPoint(x: 11.5, y: 9.5))
        notebooklist2Path.line(to: NSPoint(x: 8.5, y: 9.5))
        notebooklist2Path.line(to: NSPoint(x: 8.5, y: 9.5))
        notebooklist2Path.close()
        notebooklist2Path.move(to: NSPoint(x: 9.5, y: 8.5))
        notebooklist2Path.line(to: NSPoint(x: 9.5, y: 7.5))
        notebooklist2Path.line(to: NSPoint(x: 10.5, y: 7.5))
        notebooklist2Path.line(to: NSPoint(x: 10.5, y: 8.5))
        notebooklist2Path.line(to: NSPoint(x: 9.5, y: 8.5))
        notebooklist2Path.line(to: NSPoint(x: 9.5, y: 8.5))
        notebooklist2Path.close()
        notebooklist2Path.move(to: NSPoint(x: 13.5, y: 8.5))
        notebooklist2Path.line(to: NSPoint(x: 13.5, y: 7.5))
        notebooklist2Path.line(to: NSPoint(x: 21.5, y: 7.5))
        notebooklist2Path.line(to: NSPoint(x: 21.5, y: 8.5))
        notebooklist2Path.line(to: NSPoint(x: 13.5, y: 8.5))
        notebooklist2Path.line(to: NSPoint(x: 13.5, y: 8.5))
        notebooklist2Path.close()
        notebooklist2Path.move(to: NSPoint(x: 8.5, y: 28.5))
        notebooklist2Path.line(to: NSPoint(x: 8.5, y: 26.5))
        notebooklist2Path.line(to: NSPoint(x: 9.5, y: 26.5))
        notebooklist2Path.line(to: NSPoint(x: 9.5, y: 28.5))
        notebooklist2Path.line(to: NSPoint(x: 8.5, y: 28.5))
        notebooklist2Path.line(to: NSPoint(x: 8.5, y: 28.5))
        notebooklist2Path.close()
        notebooklist2Path.move(to: NSPoint(x: 12.5, y: 28.5))
        notebooklist2Path.line(to: NSPoint(x: 12.5, y: 26.5))
        notebooklist2Path.line(to: NSPoint(x: 13.5, y: 26.5))
        notebooklist2Path.line(to: NSPoint(x: 13.5, y: 28.5))
        notebooklist2Path.line(to: NSPoint(x: 12.5, y: 28.5))
        notebooklist2Path.line(to: NSPoint(x: 12.5, y: 28.5))
        notebooklist2Path.close()
        notebooklist2Path.move(to: NSPoint(x: 16.5, y: 28.5))
        notebooklist2Path.line(to: NSPoint(x: 16.5, y: 26.5))
        notebooklist2Path.line(to: NSPoint(x: 17.5, y: 26.5))
        notebooklist2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        notebooklist2Path.line(to: NSPoint(x: 16.5, y: 28.5))
        notebooklist2Path.line(to: NSPoint(x: 16.5, y: 28.5))
        notebooklist2Path.close()
        notebooklist2Path.move(to: NSPoint(x: 20.5, y: 28.5))
        notebooklist2Path.line(to: NSPoint(x: 20.5, y: 26.5))
        notebooklist2Path.line(to: NSPoint(x: 21.5, y: 26.5))
        notebooklist2Path.line(to: NSPoint(x: 21.5, y: 28.5))
        notebooklist2Path.line(to: NSPoint(x: 20.5, y: 28.5))
        notebooklist2Path.line(to: NSPoint(x: 20.5, y: 28.5))
        notebooklist2Path.close()
        notebooklist2Path.move(to: NSPoint(x: 8.5, y: 26.5))
        notebooklist2Path.line(to: NSPoint(x: 8.5, y: 24.5))
        notebooklist2Path.line(to: NSPoint(x: 9.5, y: 24.5))
        notebooklist2Path.line(to: NSPoint(x: 9.5, y: 26.5))
        notebooklist2Path.line(to: NSPoint(x: 8.5, y: 26.5))
        notebooklist2Path.line(to: NSPoint(x: 8.5, y: 26.5))
        notebooklist2Path.close()
        notebooklist2Path.move(to: NSPoint(x: 12.5, y: 26.5))
        notebooklist2Path.line(to: NSPoint(x: 12.5, y: 24.5))
        notebooklist2Path.line(to: NSPoint(x: 13.5, y: 24.5))
        notebooklist2Path.line(to: NSPoint(x: 13.5, y: 26.5))
        notebooklist2Path.line(to: NSPoint(x: 12.5, y: 26.5))
        notebooklist2Path.line(to: NSPoint(x: 12.5, y: 26.5))
        notebooklist2Path.close()
        notebooklist2Path.move(to: NSPoint(x: 16.5, y: 26.5))
        notebooklist2Path.line(to: NSPoint(x: 16.5, y: 24.5))
        notebooklist2Path.line(to: NSPoint(x: 17.5, y: 24.5))
        notebooklist2Path.line(to: NSPoint(x: 17.5, y: 26.5))
        notebooklist2Path.line(to: NSPoint(x: 16.5, y: 26.5))
        notebooklist2Path.line(to: NSPoint(x: 16.5, y: 26.5))
        notebooklist2Path.close()
        notebooklist2Path.move(to: NSPoint(x: 20.5, y: 26.5))
        notebooklist2Path.line(to: NSPoint(x: 20.5, y: 24.5))
        notebooklist2Path.line(to: NSPoint(x: 21.5, y: 24.5))
        notebooklist2Path.line(to: NSPoint(x: 21.5, y: 26.5))
        notebooklist2Path.line(to: NSPoint(x: 20.5, y: 26.5))
        notebooklist2Path.line(to: NSPoint(x: 20.5, y: 26.5))
        notebooklist2Path.close()
        notebooklist2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        notebooklist2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocument(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-54-document
        //// document 2 Drawing
        let document2Path = NSBezierPath()
        document2Path.move(to: NSPoint(x: 17.5, y: 28.5))
        document2Path.line(to: NSPoint(x: 7.51, y: 28.5))
        document2Path.curve(to: NSPoint(x: 5.5, y: 26.49), controlPoint1: NSPoint(x: 6.4, y: 28.5), controlPoint2: NSPoint(x: 5.5, y: 27.6))
        document2Path.line(to: NSPoint(x: 5.5, y: 3.51))
        document2Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        document2Path.line(to: NSPoint(x: 22.5, y: 1.5))
        document2Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        document2Path.line(to: NSPoint(x: 24.5, y: 20.5))
        document2Path.line(to: NSPoint(x: 19.51, y: 20.5))
        document2Path.curve(to: NSPoint(x: 17.5, y: 22.5), controlPoint1: NSPoint(x: 18.4, y: 20.5), controlPoint2: NSPoint(x: 17.5, y: 21.39))
        document2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        document2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        document2Path.close()
        document2Path.move(to: NSPoint(x: 18.5, y: 28.5))
        document2Path.line(to: NSPoint(x: 18.5, y: 22.5))
        document2Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        document2Path.line(to: NSPoint(x: 24.5, y: 21.5))
        document2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        document2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        document2Path.close()
        document2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        document2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentText(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-55-document-text
        //// document-text 4 Drawing
        let documenttext4Path = NSBezierPath()
        documenttext4Path.move(to: NSPoint(x: 17.5, y: 28.5))
        documenttext4Path.line(to: NSPoint(x: 7.51, y: 28.5))
        documenttext4Path.curve(to: NSPoint(x: 5.5, y: 26.49), controlPoint1: NSPoint(x: 6.4, y: 28.5), controlPoint2: NSPoint(x: 5.5, y: 27.6))
        documenttext4Path.line(to: NSPoint(x: 5.5, y: 3.51))
        documenttext4Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        documenttext4Path.line(to: NSPoint(x: 22.5, y: 1.5))
        documenttext4Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        documenttext4Path.line(to: NSPoint(x: 24.5, y: 20.5))
        documenttext4Path.line(to: NSPoint(x: 19.51, y: 20.5))
        documenttext4Path.curve(to: NSPoint(x: 17.5, y: 22.5), controlPoint1: NSPoint(x: 18.4, y: 20.5), controlPoint2: NSPoint(x: 17.5, y: 21.39))
        documenttext4Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documenttext4Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documenttext4Path.close()
        documenttext4Path.move(to: NSPoint(x: 18.5, y: 28.5))
        documenttext4Path.line(to: NSPoint(x: 18.5, y: 22.5))
        documenttext4Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        documenttext4Path.line(to: NSPoint(x: 24.5, y: 21.5))
        documenttext4Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documenttext4Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documenttext4Path.close()
        documenttext4Path.move(to: NSPoint(x: 8.5, y: 21.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 20.5))
        documenttext4Path.line(to: NSPoint(x: 15.5, y: 20.5))
        documenttext4Path.line(to: NSPoint(x: 15.5, y: 21.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 21.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 21.5))
        documenttext4Path.close()
        documenttext4Path.move(to: NSPoint(x: 8.5, y: 24.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 23.5))
        documenttext4Path.line(to: NSPoint(x: 15.5, y: 23.5))
        documenttext4Path.line(to: NSPoint(x: 15.5, y: 24.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 24.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 24.5))
        documenttext4Path.close()
        documenttext4Path.move(to: NSPoint(x: 8.5, y: 18.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 17.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 17.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 18.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 18.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 18.5))
        documenttext4Path.close()
        documenttext4Path.move(to: NSPoint(x: 8.5, y: 15.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 14.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 14.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 15.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 15.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 15.5))
        documenttext4Path.close()
        documenttext4Path.move(to: NSPoint(x: 8.5, y: 12.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 11.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 11.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 12.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 12.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 12.5))
        documenttext4Path.close()
        documenttext4Path.move(to: NSPoint(x: 8.5, y: 9.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 8.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 8.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 9.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 9.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 9.5))
        documenttext4Path.close()
        documenttext4Path.move(to: NSPoint(x: 8.5, y: 6.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 5.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 5.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 6.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 6.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 6.5))
        documenttext4Path.close()
        documenttext4Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documenttext4Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentText2(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-56-document-text
        //// document-text 4 Drawing
        let documenttext4Path = NSBezierPath()
        documenttext4Path.move(to: NSPoint(x: 17.5, y: 28.5))
        documenttext4Path.line(to: NSPoint(x: 7.51, y: 28.5))
        documenttext4Path.curve(to: NSPoint(x: 5.5, y: 26.49), controlPoint1: NSPoint(x: 6.4, y: 28.5), controlPoint2: NSPoint(x: 5.5, y: 27.6))
        documenttext4Path.line(to: NSPoint(x: 5.5, y: 3.51))
        documenttext4Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        documenttext4Path.line(to: NSPoint(x: 22.5, y: 1.5))
        documenttext4Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        documenttext4Path.line(to: NSPoint(x: 24.5, y: 20.5))
        documenttext4Path.line(to: NSPoint(x: 19.51, y: 20.5))
        documenttext4Path.curve(to: NSPoint(x: 17.5, y: 22.5), controlPoint1: NSPoint(x: 18.4, y: 20.5), controlPoint2: NSPoint(x: 17.5, y: 21.39))
        documenttext4Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documenttext4Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documenttext4Path.close()
        documenttext4Path.move(to: NSPoint(x: 8.5, y: 21.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 20.5))
        documenttext4Path.line(to: NSPoint(x: 13.5, y: 20.5))
        documenttext4Path.line(to: NSPoint(x: 13.5, y: 21.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 21.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 21.5))
        documenttext4Path.close()
        documenttext4Path.move(to: NSPoint(x: 8.5, y: 24.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 23.5))
        documenttext4Path.line(to: NSPoint(x: 15.5, y: 23.5))
        documenttext4Path.line(to: NSPoint(x: 15.5, y: 24.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 24.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 24.5))
        documenttext4Path.close()
        documenttext4Path.move(to: NSPoint(x: 8.5, y: 18.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 17.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 17.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 18.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 18.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 18.5))
        documenttext4Path.close()
        documenttext4Path.move(to: NSPoint(x: 8.5, y: 15.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 14.5))
        documenttext4Path.line(to: NSPoint(x: 18.5, y: 14.5))
        documenttext4Path.line(to: NSPoint(x: 18.5, y: 15.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 15.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 15.5))
        documenttext4Path.close()
        documenttext4Path.move(to: NSPoint(x: 8.5, y: 12.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 11.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 11.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 12.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 12.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 12.5))
        documenttext4Path.close()
        documenttext4Path.move(to: NSPoint(x: 8.5, y: 9.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 8.5))
        documenttext4Path.line(to: NSPoint(x: 17.5, y: 8.5))
        documenttext4Path.line(to: NSPoint(x: 17.5, y: 9.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 9.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 9.5))
        documenttext4Path.close()
        documenttext4Path.move(to: NSPoint(x: 8.5, y: 6.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 5.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 5.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 6.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 6.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 6.5))
        documenttext4Path.close()
        documenttext4Path.move(to: NSPoint(x: 18.5, y: 28.5))
        documenttext4Path.line(to: NSPoint(x: 18.5, y: 22.5))
        documenttext4Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        documenttext4Path.line(to: NSPoint(x: 24.5, y: 21.5))
        documenttext4Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documenttext4Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documenttext4Path.close()
        documenttext4Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documenttext4Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentDownload(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-57-document-download
        //// document-download 2 Drawing
        let documentdownload2Path = NSBezierPath()
        documentdownload2Path.move(to: NSPoint(x: 14.5, y: 6.45))
        documentdownload2Path.line(to: NSPoint(x: 11.25, y: 9.7))
        documentdownload2Path.line(to: NSPoint(x: 10.5, y: 8.95))
        documentdownload2Path.line(to: NSPoint(x: 15, y: 4.45))
        documentdownload2Path.line(to: NSPoint(x: 19.5, y: 8.95))
        documentdownload2Path.line(to: NSPoint(x: 18.75, y: 9.7))
        documentdownload2Path.line(to: NSPoint(x: 15.5, y: 6.45))
        documentdownload2Path.line(to: NSPoint(x: 15.5, y: 17.5))
        documentdownload2Path.line(to: NSPoint(x: 14.5, y: 17.5))
        documentdownload2Path.line(to: NSPoint(x: 14.5, y: 6.45))
        documentdownload2Path.line(to: NSPoint(x: 14.5, y: 6.45))
        documentdownload2Path.close()
        documentdownload2Path.move(to: NSPoint(x: 17.5, y: 28.5))
        documentdownload2Path.line(to: NSPoint(x: 7.51, y: 28.5))
        documentdownload2Path.curve(to: NSPoint(x: 5.5, y: 26.49), controlPoint1: NSPoint(x: 6.4, y: 28.5), controlPoint2: NSPoint(x: 5.5, y: 27.6))
        documentdownload2Path.line(to: NSPoint(x: 5.5, y: 3.51))
        documentdownload2Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        documentdownload2Path.line(to: NSPoint(x: 22.5, y: 1.5))
        documentdownload2Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        documentdownload2Path.line(to: NSPoint(x: 24.5, y: 20.5))
        documentdownload2Path.line(to: NSPoint(x: 19.51, y: 20.5))
        documentdownload2Path.curve(to: NSPoint(x: 17.5, y: 22.5), controlPoint1: NSPoint(x: 18.4, y: 20.5), controlPoint2: NSPoint(x: 17.5, y: 21.39))
        documentdownload2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentdownload2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentdownload2Path.close()
        documentdownload2Path.move(to: NSPoint(x: 18.5, y: 28.5))
        documentdownload2Path.line(to: NSPoint(x: 18.5, y: 22.5))
        documentdownload2Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        documentdownload2Path.line(to: NSPoint(x: 24.5, y: 21.5))
        documentdownload2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentdownload2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentdownload2Path.close()
        documentdownload2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentdownload2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentUpload(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-58-document-upload
        //// document-upload 2 Drawing
        let documentupload2Path = NSBezierPath()
        documentupload2Path.move(to: NSPoint(x: 14.5, y: 1.5))
        documentupload2Path.line(to: NSPoint(x: 7.5, y: 1.5))
        documentupload2Path.curve(to: NSPoint(x: 5.5, y: 3.51), controlPoint1: NSPoint(x: 6.39, y: 1.5), controlPoint2: NSPoint(x: 5.5, y: 2.4))
        documentupload2Path.line(to: NSPoint(x: 5.5, y: 26.49))
        documentupload2Path.curve(to: NSPoint(x: 7.51, y: 28.5), controlPoint1: NSPoint(x: 5.5, y: 27.6), controlPoint2: NSPoint(x: 6.4, y: 28.5))
        documentupload2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentupload2Path.line(to: NSPoint(x: 17.5, y: 22.5))
        documentupload2Path.curve(to: NSPoint(x: 19.51, y: 20.5), controlPoint1: NSPoint(x: 17.5, y: 21.39), controlPoint2: NSPoint(x: 18.4, y: 20.5))
        documentupload2Path.line(to: NSPoint(x: 24.5, y: 20.5))
        documentupload2Path.line(to: NSPoint(x: 24.5, y: 3.5))
        documentupload2Path.curve(to: NSPoint(x: 22.5, y: 1.5), controlPoint1: NSPoint(x: 24.5, y: 2.39), controlPoint2: NSPoint(x: 23.61, y: 1.5))
        documentupload2Path.line(to: NSPoint(x: 15.5, y: 1.5))
        documentupload2Path.line(to: NSPoint(x: 15.5, y: 12.5))
        documentupload2Path.line(to: NSPoint(x: 18.75, y: 9.25))
        documentupload2Path.line(to: NSPoint(x: 19.5, y: 10))
        documentupload2Path.line(to: NSPoint(x: 15, y: 14.5))
        documentupload2Path.line(to: NSPoint(x: 10.5, y: 10))
        documentupload2Path.line(to: NSPoint(x: 11.25, y: 9.25))
        documentupload2Path.line(to: NSPoint(x: 14.5, y: 12.5))
        documentupload2Path.line(to: NSPoint(x: 14.5, y: 1.5))
        documentupload2Path.line(to: NSPoint(x: 14.5, y: 1.5))
        documentupload2Path.close()
        documentupload2Path.move(to: NSPoint(x: 18.5, y: 28.5))
        documentupload2Path.line(to: NSPoint(x: 18.5, y: 22.5))
        documentupload2Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        documentupload2Path.line(to: NSPoint(x: 24.5, y: 21.5))
        documentupload2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentupload2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentupload2Path.close()
        documentupload2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentupload2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentBookmark(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-59-document-bookmark
        //// document-bookmark 2 Drawing
        let documentbookmark2Path = NSBezierPath()
        documentbookmark2Path.move(to: NSPoint(x: 14.5, y: 28.5))
        documentbookmark2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentbookmark2Path.line(to: NSPoint(x: 17.5, y: 22.5))
        documentbookmark2Path.curve(to: NSPoint(x: 19.51, y: 20.5), controlPoint1: NSPoint(x: 17.5, y: 21.39), controlPoint2: NSPoint(x: 18.4, y: 20.5))
        documentbookmark2Path.line(to: NSPoint(x: 24.5, y: 20.5))
        documentbookmark2Path.line(to: NSPoint(x: 24.5, y: 3.5))
        documentbookmark2Path.curve(to: NSPoint(x: 22.5, y: 1.5), controlPoint1: NSPoint(x: 24.5, y: 2.39), controlPoint2: NSPoint(x: 23.61, y: 1.5))
        documentbookmark2Path.line(to: NSPoint(x: 7.5, y: 1.5))
        documentbookmark2Path.curve(to: NSPoint(x: 5.5, y: 3.51), controlPoint1: NSPoint(x: 6.39, y: 1.5), controlPoint2: NSPoint(x: 5.5, y: 2.4))
        documentbookmark2Path.line(to: NSPoint(x: 5.5, y: 26.49))
        documentbookmark2Path.curve(to: NSPoint(x: 7.51, y: 28.5), controlPoint1: NSPoint(x: 5.5, y: 27.6), controlPoint2: NSPoint(x: 6.4, y: 28.5))
        documentbookmark2Path.line(to: NSPoint(x: 8.5, y: 28.5))
        documentbookmark2Path.line(to: NSPoint(x: 8.5, y: 16.5))
        documentbookmark2Path.line(to: NSPoint(x: 11.5, y: 19.5))
        documentbookmark2Path.line(to: NSPoint(x: 14.5, y: 16.5))
        documentbookmark2Path.line(to: NSPoint(x: 14.5, y: 28.5))
        documentbookmark2Path.line(to: NSPoint(x: 14.5, y: 28.5))
        documentbookmark2Path.line(to: NSPoint(x: 14.5, y: 28.5))
        documentbookmark2Path.close()
        documentbookmark2Path.move(to: NSPoint(x: 9.5, y: 28.5))
        documentbookmark2Path.line(to: NSPoint(x: 9.5, y: 18.9))
        documentbookmark2Path.line(to: NSPoint(x: 11.5, y: 20.9))
        documentbookmark2Path.line(to: NSPoint(x: 13.5, y: 18.9))
        documentbookmark2Path.line(to: NSPoint(x: 13.5, y: 28.5))
        documentbookmark2Path.line(to: NSPoint(x: 9.5, y: 28.5))
        documentbookmark2Path.line(to: NSPoint(x: 9.5, y: 28.5))
        documentbookmark2Path.close()
        documentbookmark2Path.move(to: NSPoint(x: 18.5, y: 28.5))
        documentbookmark2Path.line(to: NSPoint(x: 18.5, y: 22.5))
        documentbookmark2Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        documentbookmark2Path.line(to: NSPoint(x: 24.5, y: 21.5))
        documentbookmark2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentbookmark2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentbookmark2Path.close()
        documentbookmark2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentbookmark2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentDiagrams(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-60-document-diagrams
        //// document-diagrams 2 Drawing
        let documentdiagrams2Path = NSBezierPath()
        documentdiagrams2Path.move(to: NSPoint(x: 17.5, y: 28.5))
        documentdiagrams2Path.line(to: NSPoint(x: 7.51, y: 28.5))
        documentdiagrams2Path.curve(to: NSPoint(x: 5.5, y: 26.49), controlPoint1: NSPoint(x: 6.4, y: 28.5), controlPoint2: NSPoint(x: 5.5, y: 27.6))
        documentdiagrams2Path.line(to: NSPoint(x: 5.5, y: 3.51))
        documentdiagrams2Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        documentdiagrams2Path.line(to: NSPoint(x: 22.5, y: 1.5))
        documentdiagrams2Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        documentdiagrams2Path.line(to: NSPoint(x: 24.5, y: 20.5))
        documentdiagrams2Path.line(to: NSPoint(x: 19.51, y: 20.5))
        documentdiagrams2Path.curve(to: NSPoint(x: 17.5, y: 22.5), controlPoint1: NSPoint(x: 18.4, y: 20.5), controlPoint2: NSPoint(x: 17.5, y: 21.39))
        documentdiagrams2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentdiagrams2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentdiagrams2Path.close()
        documentdiagrams2Path.move(to: NSPoint(x: 18.5, y: 28.5))
        documentdiagrams2Path.line(to: NSPoint(x: 18.5, y: 22.5))
        documentdiagrams2Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        documentdiagrams2Path.line(to: NSPoint(x: 24.5, y: 21.5))
        documentdiagrams2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentdiagrams2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentdiagrams2Path.close()
        documentdiagrams2Path.move(to: NSPoint(x: 9.5, y: 10.5))
        documentdiagrams2Path.line(to: NSPoint(x: 9.5, y: 6.5))
        documentdiagrams2Path.line(to: NSPoint(x: 12.5, y: 6.5))
        documentdiagrams2Path.line(to: NSPoint(x: 12.5, y: 10.5))
        documentdiagrams2Path.line(to: NSPoint(x: 9.5, y: 10.5))
        documentdiagrams2Path.line(to: NSPoint(x: 9.5, y: 10.5))
        documentdiagrams2Path.close()
        documentdiagrams2Path.move(to: NSPoint(x: 13.5, y: 15.5))
        documentdiagrams2Path.line(to: NSPoint(x: 13.5, y: 6.5))
        documentdiagrams2Path.line(to: NSPoint(x: 16.5, y: 6.5))
        documentdiagrams2Path.line(to: NSPoint(x: 16.5, y: 15.5))
        documentdiagrams2Path.line(to: NSPoint(x: 13.5, y: 15.5))
        documentdiagrams2Path.line(to: NSPoint(x: 13.5, y: 15.5))
        documentdiagrams2Path.close()
        documentdiagrams2Path.move(to: NSPoint(x: 17.5, y: 12.5))
        documentdiagrams2Path.line(to: NSPoint(x: 17.5, y: 6.5))
        documentdiagrams2Path.line(to: NSPoint(x: 20.5, y: 6.5))
        documentdiagrams2Path.line(to: NSPoint(x: 20.5, y: 12.5))
        documentdiagrams2Path.line(to: NSPoint(x: 17.5, y: 12.5))
        documentdiagrams2Path.line(to: NSPoint(x: 17.5, y: 12.5))
        documentdiagrams2Path.close()
        documentdiagrams2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentdiagrams2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentRecording(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-
        //// icon-61-document-recording 2
        //// document-recording 2 Drawing
        let documentrecording2Path = NSBezierPath()
        documentrecording2Path.move(to: NSPoint(x: 17.5, y: 28.5))
        documentrecording2Path.line(to: NSPoint(x: 7.51, y: 28.5))
        documentrecording2Path.curve(to: NSPoint(x: 5.5, y: 26.49), controlPoint1: NSPoint(x: 6.4, y: 28.5), controlPoint2: NSPoint(x: 5.5, y: 27.6))
        documentrecording2Path.line(to: NSPoint(x: 5.5, y: 3.51))
        documentrecording2Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        documentrecording2Path.line(to: NSPoint(x: 22.5, y: 1.5))
        documentrecording2Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        documentrecording2Path.line(to: NSPoint(x: 24.5, y: 20.5))
        documentrecording2Path.line(to: NSPoint(x: 19.51, y: 20.5))
        documentrecording2Path.curve(to: NSPoint(x: 17.5, y: 22.5), controlPoint1: NSPoint(x: 18.4, y: 20.5), controlPoint2: NSPoint(x: 17.5, y: 21.39))
        documentrecording2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentrecording2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentrecording2Path.close()
        documentrecording2Path.move(to: NSPoint(x: 11.5, y: 11.01))
        documentrecording2Path.line(to: NSPoint(x: 11.5, y: 12.5))
        documentrecording2Path.line(to: NSPoint(x: 12.5, y: 12.5))
        documentrecording2Path.line(to: NSPoint(x: 12.5, y: 11.01))
        documentrecording2Path.curve(to: NSPoint(x: 15, y: 8.5), controlPoint1: NSPoint(x: 12.5, y: 9.62), controlPoint2: NSPoint(x: 13.61, y: 8.5))
        documentrecording2Path.curve(to: NSPoint(x: 17.5, y: 11.01), controlPoint1: NSPoint(x: 16.38, y: 8.5), controlPoint2: NSPoint(x: 17.5, y: 9.62))
        documentrecording2Path.line(to: NSPoint(x: 17.5, y: 12.5))
        documentrecording2Path.line(to: NSPoint(x: 18.5, y: 12.5))
        documentrecording2Path.line(to: NSPoint(x: 18.5, y: 11.01))
        documentrecording2Path.curve(to: NSPoint(x: 15.5, y: 7.54), controlPoint1: NSPoint(x: 18.5, y: 9.24), controlPoint2: NSPoint(x: 17.2, y: 7.78))
        documentrecording2Path.line(to: NSPoint(x: 15.5, y: 5.5))
        documentrecording2Path.line(to: NSPoint(x: 17.5, y: 5.5))
        documentrecording2Path.line(to: NSPoint(x: 17.5, y: 4.5))
        documentrecording2Path.line(to: NSPoint(x: 12.5, y: 4.5))
        documentrecording2Path.line(to: NSPoint(x: 12.5, y: 5.5))
        documentrecording2Path.line(to: NSPoint(x: 14.5, y: 5.5))
        documentrecording2Path.line(to: NSPoint(x: 14.5, y: 7.54))
        documentrecording2Path.curve(to: NSPoint(x: 11.5, y: 11.01), controlPoint1: NSPoint(x: 12.81, y: 7.78), controlPoint2: NSPoint(x: 11.5, y: 9.24))
        documentrecording2Path.line(to: NSPoint(x: 11.5, y: 11.01))
        documentrecording2Path.close()
        documentrecording2Path.move(to: NSPoint(x: 18.5, y: 28.5))
        documentrecording2Path.line(to: NSPoint(x: 18.5, y: 22.5))
        documentrecording2Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        documentrecording2Path.line(to: NSPoint(x: 24.5, y: 21.5))
        documentrecording2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentrecording2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentrecording2Path.close()
        documentrecording2Path.move(to: NSPoint(x: 13.5, y: 15))
        documentrecording2Path.line(to: NSPoint(x: 13.5, y: 11))
        documentrecording2Path.curve(to: NSPoint(x: 15, y: 9.5), controlPoint1: NSPoint(x: 13.5, y: 10.17), controlPoint2: NSPoint(x: 14.17, y: 9.5))
        documentrecording2Path.curve(to: NSPoint(x: 16.5, y: 11), controlPoint1: NSPoint(x: 15.83, y: 9.5), controlPoint2: NSPoint(x: 16.5, y: 10.17))
        documentrecording2Path.line(to: NSPoint(x: 16.5, y: 15))
        documentrecording2Path.curve(to: NSPoint(x: 15, y: 16.5), controlPoint1: NSPoint(x: 16.5, y: 15.83), controlPoint2: NSPoint(x: 15.83, y: 16.5))
        documentrecording2Path.curve(to: NSPoint(x: 13.5, y: 15), controlPoint1: NSPoint(x: 14.17, y: 16.5), controlPoint2: NSPoint(x: 13.5, y: 15.83))
        documentrecording2Path.line(to: NSPoint(x: 13.5, y: 15))
        documentrecording2Path.close()
        documentrecording2Path.move(to: NSPoint(x: 15, y: 15.5))
        documentrecording2Path.curve(to: NSPoint(x: 14.5, y: 15), controlPoint1: NSPoint(x: 14.72, y: 15.5), controlPoint2: NSPoint(x: 14.5, y: 15.29))
        documentrecording2Path.line(to: NSPoint(x: 14.5, y: 11))
        documentrecording2Path.curve(to: NSPoint(x: 15, y: 10.5), controlPoint1: NSPoint(x: 14.5, y: 10.72), controlPoint2: NSPoint(x: 14.73, y: 10.5))
        documentrecording2Path.curve(to: NSPoint(x: 15.5, y: 11), controlPoint1: NSPoint(x: 15.28, y: 10.5), controlPoint2: NSPoint(x: 15.5, y: 10.71))
        documentrecording2Path.line(to: NSPoint(x: 15.5, y: 15))
        documentrecording2Path.curve(to: NSPoint(x: 15, y: 15.5), controlPoint1: NSPoint(x: 15.5, y: 15.28), controlPoint2: NSPoint(x: 15.27, y: 15.5))
        documentrecording2Path.line(to: NSPoint(x: 15, y: 15.5))
        documentrecording2Path.close()
        documentrecording2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentrecording2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentTable(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-62-document-table
        //// document-table 2 Drawing
        let documenttable2Path = NSBezierPath()
        documenttable2Path.move(to: NSPoint(x: 14.5, y: 10.5))
        documenttable2Path.line(to: NSPoint(x: 10.5, y: 10.5))
        documenttable2Path.line(to: NSPoint(x: 10.5, y: 8.5))
        documenttable2Path.line(to: NSPoint(x: 10.5, y: 8.5))
        documenttable2Path.line(to: NSPoint(x: 14.5, y: 8.5))
        documenttable2Path.line(to: NSPoint(x: 14.5, y: 10.5))
        documenttable2Path.line(to: NSPoint(x: 14.5, y: 10.5))
        documenttable2Path.close()
        documenttable2Path.move(to: NSPoint(x: 15.5, y: 10.5))
        documenttable2Path.line(to: NSPoint(x: 19.5, y: 10.5))
        documenttable2Path.line(to: NSPoint(x: 19.5, y: 8.5))
        documenttable2Path.line(to: NSPoint(x: 15.5, y: 8.5))
        documenttable2Path.line(to: NSPoint(x: 15.5, y: 10.5))
        documenttable2Path.line(to: NSPoint(x: 15.5, y: 10.5))
        documenttable2Path.close()
        documenttable2Path.move(to: NSPoint(x: 14.5, y: 5.5))
        documenttable2Path.line(to: NSPoint(x: 10.5, y: 5.5))
        documenttable2Path.line(to: NSPoint(x: 10.5, y: 7.5))
        documenttable2Path.line(to: NSPoint(x: 14.5, y: 7.5))
        documenttable2Path.line(to: NSPoint(x: 14.5, y: 5.5))
        documenttable2Path.line(to: NSPoint(x: 14.5, y: 5.5))
        documenttable2Path.close()
        documenttable2Path.move(to: NSPoint(x: 15.5, y: 5.5))
        documenttable2Path.line(to: NSPoint(x: 19.5, y: 5.5))
        documenttable2Path.line(to: NSPoint(x: 19.5, y: 7.5))
        documenttable2Path.line(to: NSPoint(x: 15.5, y: 7.5))
        documenttable2Path.line(to: NSPoint(x: 15.5, y: 5.5))
        documenttable2Path.line(to: NSPoint(x: 15.5, y: 5.5))
        documenttable2Path.close()
        documenttable2Path.move(to: NSPoint(x: 14.5, y: 13.5))
        documenttable2Path.line(to: NSPoint(x: 10.5, y: 13.5))
        documenttable2Path.line(to: NSPoint(x: 10.5, y: 11.5))
        documenttable2Path.line(to: NSPoint(x: 10.5, y: 11.5))
        documenttable2Path.line(to: NSPoint(x: 14.5, y: 11.5))
        documenttable2Path.line(to: NSPoint(x: 14.5, y: 13.5))
        documenttable2Path.line(to: NSPoint(x: 14.5, y: 13.5))
        documenttable2Path.close()
        documenttable2Path.move(to: NSPoint(x: 15.5, y: 13.5))
        documenttable2Path.line(to: NSPoint(x: 19.5, y: 13.5))
        documenttable2Path.line(to: NSPoint(x: 19.5, y: 11.5))
        documenttable2Path.line(to: NSPoint(x: 15.5, y: 11.5))
        documenttable2Path.line(to: NSPoint(x: 15.5, y: 13.5))
        documenttable2Path.line(to: NSPoint(x: 15.5, y: 13.5))
        documenttable2Path.close()
        documenttable2Path.move(to: NSPoint(x: 14.5, y: 16.5))
        documenttable2Path.line(to: NSPoint(x: 10.5, y: 16.5))
        documenttable2Path.line(to: NSPoint(x: 10.5, y: 14.5))
        documenttable2Path.line(to: NSPoint(x: 10.5, y: 14.5))
        documenttable2Path.line(to: NSPoint(x: 14.5, y: 14.5))
        documenttable2Path.line(to: NSPoint(x: 14.5, y: 16.5))
        documenttable2Path.line(to: NSPoint(x: 14.5, y: 16.5))
        documenttable2Path.close()
        documenttable2Path.move(to: NSPoint(x: 15.5, y: 16.5))
        documenttable2Path.line(to: NSPoint(x: 19.5, y: 16.5))
        documenttable2Path.line(to: NSPoint(x: 19.5, y: 14.5))
        documenttable2Path.line(to: NSPoint(x: 15.5, y: 14.5))
        documenttable2Path.line(to: NSPoint(x: 15.5, y: 16.5))
        documenttable2Path.line(to: NSPoint(x: 15.5, y: 16.5))
        documenttable2Path.close()
        documenttable2Path.move(to: NSPoint(x: 17.5, y: 28.5))
        documenttable2Path.line(to: NSPoint(x: 7.51, y: 28.5))
        documenttable2Path.curve(to: NSPoint(x: 5.5, y: 26.49), controlPoint1: NSPoint(x: 6.4, y: 28.5), controlPoint2: NSPoint(x: 5.5, y: 27.6))
        documenttable2Path.line(to: NSPoint(x: 5.5, y: 3.51))
        documenttable2Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        documenttable2Path.line(to: NSPoint(x: 22.5, y: 1.5))
        documenttable2Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        documenttable2Path.line(to: NSPoint(x: 24.5, y: 20.5))
        documenttable2Path.line(to: NSPoint(x: 19.51, y: 20.5))
        documenttable2Path.curve(to: NSPoint(x: 17.5, y: 22.5), controlPoint1: NSPoint(x: 18.4, y: 20.5), controlPoint2: NSPoint(x: 17.5, y: 21.39))
        documenttable2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documenttable2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documenttable2Path.close()
        documenttable2Path.move(to: NSPoint(x: 18.5, y: 28.5))
        documenttable2Path.line(to: NSPoint(x: 18.5, y: 22.5))
        documenttable2Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        documenttable2Path.line(to: NSPoint(x: 24.5, y: 21.5))
        documenttable2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documenttable2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documenttable2Path.close()
        documenttable2Path.move(to: NSPoint(x: 9.5, y: 18.5))
        documenttable2Path.line(to: NSPoint(x: 9.5, y: 4.5))
        documenttable2Path.line(to: NSPoint(x: 20.5, y: 4.5))
        documenttable2Path.line(to: NSPoint(x: 20.5, y: 18.5))
        documenttable2Path.line(to: NSPoint(x: 9.5, y: 18.5))
        documenttable2Path.line(to: NSPoint(x: 9.5, y: 18.5))
        documenttable2Path.close()
        documenttable2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documenttable2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentMusic(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-63-document-music
        //// document-music 2 Drawing
        let documentmusic2Path = NSBezierPath()
        documentmusic2Path.move(to: NSPoint(x: 20.5, y: 16.28))
        documentmusic2Path.line(to: NSPoint(x: 20.5, y: 10))
        documentmusic2Path.curve(to: NSPoint(x: 19, y: 10.5), controlPoint1: NSPoint(x: 20.08, y: 10.31), controlPoint2: NSPoint(x: 19.56, y: 10.5))
        documentmusic2Path.curve(to: NSPoint(x: 16.5, y: 8), controlPoint1: NSPoint(x: 17.62, y: 10.5), controlPoint2: NSPoint(x: 16.5, y: 9.38))
        documentmusic2Path.curve(to: NSPoint(x: 19, y: 5.5), controlPoint1: NSPoint(x: 16.5, y: 6.62), controlPoint2: NSPoint(x: 17.62, y: 5.5))
        documentmusic2Path.curve(to: NSPoint(x: 21.5, y: 8), controlPoint1: NSPoint(x: 20.38, y: 5.5), controlPoint2: NSPoint(x: 21.5, y: 6.62))
        documentmusic2Path.line(to: NSPoint(x: 21.5, y: 16.5))
        documentmusic2Path.line(to: NSPoint(x: 21.5, y: 17.5))
        documentmusic2Path.line(to: NSPoint(x: 12.5, y: 15.5))
        documentmusic2Path.line(to: NSPoint(x: 12.5, y: 15))
        documentmusic2Path.line(to: NSPoint(x: 12.5, y: 9))
        documentmusic2Path.curve(to: NSPoint(x: 11, y: 9.5), controlPoint1: NSPoint(x: 12.08, y: 9.31), controlPoint2: NSPoint(x: 11.56, y: 9.5))
        documentmusic2Path.curve(to: NSPoint(x: 8.5, y: 7), controlPoint1: NSPoint(x: 9.62, y: 9.5), controlPoint2: NSPoint(x: 8.5, y: 8.38))
        documentmusic2Path.curve(to: NSPoint(x: 11, y: 4.5), controlPoint1: NSPoint(x: 8.5, y: 5.62), controlPoint2: NSPoint(x: 9.62, y: 4.5))
        documentmusic2Path.curve(to: NSPoint(x: 13.5, y: 7), controlPoint1: NSPoint(x: 12.38, y: 4.5), controlPoint2: NSPoint(x: 13.5, y: 5.62))
        documentmusic2Path.line(to: NSPoint(x: 13.5, y: 14.72))
        documentmusic2Path.line(to: NSPoint(x: 20.5, y: 16.28))
        documentmusic2Path.line(to: NSPoint(x: 20.5, y: 16.28))
        documentmusic2Path.close()
        documentmusic2Path.move(to: NSPoint(x: 17.5, y: 28.5))
        documentmusic2Path.line(to: NSPoint(x: 7.51, y: 28.5))
        documentmusic2Path.curve(to: NSPoint(x: 5.5, y: 26.49), controlPoint1: NSPoint(x: 6.4, y: 28.5), controlPoint2: NSPoint(x: 5.5, y: 27.6))
        documentmusic2Path.line(to: NSPoint(x: 5.5, y: 3.51))
        documentmusic2Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        documentmusic2Path.line(to: NSPoint(x: 22.5, y: 1.5))
        documentmusic2Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        documentmusic2Path.line(to: NSPoint(x: 24.5, y: 20.5))
        documentmusic2Path.line(to: NSPoint(x: 19.51, y: 20.5))
        documentmusic2Path.curve(to: NSPoint(x: 17.5, y: 22.5), controlPoint1: NSPoint(x: 18.4, y: 20.5), controlPoint2: NSPoint(x: 17.5, y: 21.39))
        documentmusic2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentmusic2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentmusic2Path.close()
        documentmusic2Path.move(to: NSPoint(x: 18.5, y: 28.5))
        documentmusic2Path.line(to: NSPoint(x: 18.5, y: 22.5))
        documentmusic2Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        documentmusic2Path.line(to: NSPoint(x: 24.5, y: 21.5))
        documentmusic2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentmusic2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentmusic2Path.close()
        documentmusic2Path.move(to: NSPoint(x: 11, y: 5.5))
        documentmusic2Path.curve(to: NSPoint(x: 12.5, y: 7), controlPoint1: NSPoint(x: 11.83, y: 5.5), controlPoint2: NSPoint(x: 12.5, y: 6.17))
        documentmusic2Path.curve(to: NSPoint(x: 11, y: 8.5), controlPoint1: NSPoint(x: 12.5, y: 7.83), controlPoint2: NSPoint(x: 11.83, y: 8.5))
        documentmusic2Path.curve(to: NSPoint(x: 9.5, y: 7), controlPoint1: NSPoint(x: 10.17, y: 8.5), controlPoint2: NSPoint(x: 9.5, y: 7.83))
        documentmusic2Path.curve(to: NSPoint(x: 11, y: 5.5), controlPoint1: NSPoint(x: 9.5, y: 6.17), controlPoint2: NSPoint(x: 10.17, y: 5.5))
        documentmusic2Path.line(to: NSPoint(x: 11, y: 5.5))
        documentmusic2Path.close()
        documentmusic2Path.move(to: NSPoint(x: 19, y: 6.5))
        documentmusic2Path.curve(to: NSPoint(x: 20.5, y: 8), controlPoint1: NSPoint(x: 19.83, y: 6.5), controlPoint2: NSPoint(x: 20.5, y: 7.17))
        documentmusic2Path.curve(to: NSPoint(x: 19, y: 9.5), controlPoint1: NSPoint(x: 20.5, y: 8.83), controlPoint2: NSPoint(x: 19.83, y: 9.5))
        documentmusic2Path.curve(to: NSPoint(x: 17.5, y: 8), controlPoint1: NSPoint(x: 18.17, y: 9.5), controlPoint2: NSPoint(x: 17.5, y: 8.83))
        documentmusic2Path.curve(to: NSPoint(x: 19, y: 6.5), controlPoint1: NSPoint(x: 17.5, y: 7.17), controlPoint2: NSPoint(x: 18.17, y: 6.5))
        documentmusic2Path.line(to: NSPoint(x: 19, y: 6.5))
        documentmusic2Path.close()
        documentmusic2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentmusic2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentMovie(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-64-document-movie
        //// document-movie 2 Drawing
        let documentmovie2Path = NSBezierPath()
        documentmovie2Path.move(to: NSPoint(x: 17.5, y: 28.5))
        documentmovie2Path.line(to: NSPoint(x: 7.51, y: 28.5))
        documentmovie2Path.curve(to: NSPoint(x: 5.5, y: 26.49), controlPoint1: NSPoint(x: 6.4, y: 28.5), controlPoint2: NSPoint(x: 5.5, y: 27.6))
        documentmovie2Path.line(to: NSPoint(x: 5.5, y: 3.51))
        documentmovie2Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        documentmovie2Path.line(to: NSPoint(x: 22.5, y: 1.5))
        documentmovie2Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        documentmovie2Path.line(to: NSPoint(x: 24.5, y: 20.5))
        documentmovie2Path.line(to: NSPoint(x: 19.51, y: 20.5))
        documentmovie2Path.curve(to: NSPoint(x: 17.5, y: 22.5), controlPoint1: NSPoint(x: 18.4, y: 20.5), controlPoint2: NSPoint(x: 17.5, y: 21.39))
        documentmovie2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentmovie2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentmovie2Path.close()
        documentmovie2Path.move(to: NSPoint(x: 18.5, y: 28.5))
        documentmovie2Path.line(to: NSPoint(x: 18.5, y: 22.5))
        documentmovie2Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        documentmovie2Path.line(to: NSPoint(x: 24.5, y: 21.5))
        documentmovie2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentmovie2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentmovie2Path.close()
        documentmovie2Path.move(to: NSPoint(x: 8.5, y: 15.5))
        documentmovie2Path.line(to: NSPoint(x: 8.5, y: 4.5))
        documentmovie2Path.line(to: NSPoint(x: 21.5, y: 4.5))
        documentmovie2Path.line(to: NSPoint(x: 21.5, y: 15.5))
        documentmovie2Path.line(to: NSPoint(x: 8.5, y: 15.5))
        documentmovie2Path.line(to: NSPoint(x: 8.5, y: 15.5))
        documentmovie2Path.close()
        documentmovie2Path.move(to: NSPoint(x: 11.5, y: 14.5))
        documentmovie2Path.line(to: NSPoint(x: 11.5, y: 10.5))
        documentmovie2Path.line(to: NSPoint(x: 18.5, y: 10.5))
        documentmovie2Path.line(to: NSPoint(x: 18.5, y: 14.5))
        documentmovie2Path.line(to: NSPoint(x: 11.5, y: 14.5))
        documentmovie2Path.line(to: NSPoint(x: 11.5, y: 14.5))
        documentmovie2Path.close()
        documentmovie2Path.move(to: NSPoint(x: 11.5, y: 9.5))
        documentmovie2Path.line(to: NSPoint(x: 11.5, y: 5.5))
        documentmovie2Path.line(to: NSPoint(x: 18.5, y: 5.5))
        documentmovie2Path.line(to: NSPoint(x: 18.5, y: 9.5))
        documentmovie2Path.line(to: NSPoint(x: 11.5, y: 9.5))
        documentmovie2Path.line(to: NSPoint(x: 11.5, y: 9.5))
        documentmovie2Path.close()
        documentmovie2Path.move(to: NSPoint(x: 9.5, y: 14.5))
        documentmovie2Path.line(to: NSPoint(x: 9.5, y: 13.5))
        documentmovie2Path.line(to: NSPoint(x: 10.5, y: 13.5))
        documentmovie2Path.line(to: NSPoint(x: 10.5, y: 14.5))
        documentmovie2Path.line(to: NSPoint(x: 9.5, y: 14.5))
        documentmovie2Path.line(to: NSPoint(x: 9.5, y: 14.5))
        documentmovie2Path.close()
        documentmovie2Path.move(to: NSPoint(x: 9.5, y: 12.5))
        documentmovie2Path.line(to: NSPoint(x: 9.5, y: 11.5))
        documentmovie2Path.line(to: NSPoint(x: 10.5, y: 11.5))
        documentmovie2Path.line(to: NSPoint(x: 10.5, y: 12.5))
        documentmovie2Path.line(to: NSPoint(x: 9.5, y: 12.5))
        documentmovie2Path.line(to: NSPoint(x: 9.5, y: 12.5))
        documentmovie2Path.close()
        documentmovie2Path.move(to: NSPoint(x: 9.5, y: 10.5))
        documentmovie2Path.line(to: NSPoint(x: 9.5, y: 9.5))
        documentmovie2Path.line(to: NSPoint(x: 10.5, y: 9.5))
        documentmovie2Path.line(to: NSPoint(x: 10.5, y: 10.5))
        documentmovie2Path.line(to: NSPoint(x: 9.5, y: 10.5))
        documentmovie2Path.line(to: NSPoint(x: 9.5, y: 10.5))
        documentmovie2Path.close()
        documentmovie2Path.move(to: NSPoint(x: 9.5, y: 8.5))
        documentmovie2Path.line(to: NSPoint(x: 9.5, y: 7.5))
        documentmovie2Path.line(to: NSPoint(x: 10.5, y: 7.5))
        documentmovie2Path.line(to: NSPoint(x: 10.5, y: 8.5))
        documentmovie2Path.line(to: NSPoint(x: 9.5, y: 8.5))
        documentmovie2Path.line(to: NSPoint(x: 9.5, y: 8.5))
        documentmovie2Path.close()
        documentmovie2Path.move(to: NSPoint(x: 9.5, y: 6.5))
        documentmovie2Path.line(to: NSPoint(x: 9.5, y: 5.5))
        documentmovie2Path.line(to: NSPoint(x: 10.5, y: 5.5))
        documentmovie2Path.line(to: NSPoint(x: 10.5, y: 6.5))
        documentmovie2Path.line(to: NSPoint(x: 9.5, y: 6.5))
        documentmovie2Path.line(to: NSPoint(x: 9.5, y: 6.5))
        documentmovie2Path.close()
        documentmovie2Path.move(to: NSPoint(x: 19.5, y: 14.5))
        documentmovie2Path.line(to: NSPoint(x: 19.5, y: 13.5))
        documentmovie2Path.line(to: NSPoint(x: 20.5, y: 13.5))
        documentmovie2Path.line(to: NSPoint(x: 20.5, y: 14.5))
        documentmovie2Path.line(to: NSPoint(x: 19.5, y: 14.5))
        documentmovie2Path.line(to: NSPoint(x: 19.5, y: 14.5))
        documentmovie2Path.close()
        documentmovie2Path.move(to: NSPoint(x: 19.5, y: 12.5))
        documentmovie2Path.line(to: NSPoint(x: 19.5, y: 11.5))
        documentmovie2Path.line(to: NSPoint(x: 20.5, y: 11.5))
        documentmovie2Path.line(to: NSPoint(x: 20.5, y: 12.5))
        documentmovie2Path.line(to: NSPoint(x: 19.5, y: 12.5))
        documentmovie2Path.line(to: NSPoint(x: 19.5, y: 12.5))
        documentmovie2Path.close()
        documentmovie2Path.move(to: NSPoint(x: 19.5, y: 10.5))
        documentmovie2Path.line(to: NSPoint(x: 19.5, y: 9.5))
        documentmovie2Path.line(to: NSPoint(x: 20.5, y: 9.5))
        documentmovie2Path.line(to: NSPoint(x: 20.5, y: 10.5))
        documentmovie2Path.line(to: NSPoint(x: 19.5, y: 10.5))
        documentmovie2Path.line(to: NSPoint(x: 19.5, y: 10.5))
        documentmovie2Path.close()
        documentmovie2Path.move(to: NSPoint(x: 19.5, y: 8.5))
        documentmovie2Path.line(to: NSPoint(x: 19.5, y: 7.5))
        documentmovie2Path.line(to: NSPoint(x: 20.5, y: 7.5))
        documentmovie2Path.line(to: NSPoint(x: 20.5, y: 8.5))
        documentmovie2Path.line(to: NSPoint(x: 19.5, y: 8.5))
        documentmovie2Path.line(to: NSPoint(x: 19.5, y: 8.5))
        documentmovie2Path.close()
        documentmovie2Path.move(to: NSPoint(x: 19.5, y: 6.5))
        documentmovie2Path.line(to: NSPoint(x: 19.5, y: 5.5))
        documentmovie2Path.line(to: NSPoint(x: 20.5, y: 5.5))
        documentmovie2Path.line(to: NSPoint(x: 20.5, y: 6.5))
        documentmovie2Path.line(to: NSPoint(x: 19.5, y: 6.5))
        documentmovie2Path.line(to: NSPoint(x: 19.5, y: 6.5))
        documentmovie2Path.close()
        documentmovie2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentmovie2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentImage(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-65-document-image
        //// document-image 2 Drawing
        let documentimage2Path = NSBezierPath()
        documentimage2Path.move(to: NSPoint(x: 20.5, y: 7.45))
        documentimage2Path.line(to: NSPoint(x: 20.5, y: 13.5))
        documentimage2Path.line(to: NSPoint(x: 9.5, y: 13.5))
        documentimage2Path.line(to: NSPoint(x: 9.5, y: 6.5))
        documentimage2Path.line(to: NSPoint(x: 9.5, y: 6.5))
        documentimage2Path.line(to: NSPoint(x: 12, y: 8.5))
        documentimage2Path.line(to: NSPoint(x: 13.46, y: 7.25))
        documentimage2Path.line(to: NSPoint(x: 17.09, y: 10.5))
        documentimage2Path.line(to: NSPoint(x: 20.5, y: 7.45))
        documentimage2Path.line(to: NSPoint(x: 20.5, y: 7.45))
        documentimage2Path.line(to: NSPoint(x: 20.5, y: 7.45))
        documentimage2Path.close()
        documentimage2Path.move(to: NSPoint(x: 17.5, y: 28.5))
        documentimage2Path.line(to: NSPoint(x: 7.51, y: 28.5))
        documentimage2Path.curve(to: NSPoint(x: 5.5, y: 26.49), controlPoint1: NSPoint(x: 6.4, y: 28.5), controlPoint2: NSPoint(x: 5.5, y: 27.6))
        documentimage2Path.line(to: NSPoint(x: 5.5, y: 3.51))
        documentimage2Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        documentimage2Path.line(to: NSPoint(x: 22.5, y: 1.5))
        documentimage2Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        documentimage2Path.line(to: NSPoint(x: 24.5, y: 20.5))
        documentimage2Path.line(to: NSPoint(x: 19.51, y: 20.5))
        documentimage2Path.curve(to: NSPoint(x: 17.5, y: 22.5), controlPoint1: NSPoint(x: 18.4, y: 20.5), controlPoint2: NSPoint(x: 17.5, y: 21.39))
        documentimage2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentimage2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentimage2Path.close()
        documentimage2Path.move(to: NSPoint(x: 18.5, y: 28.5))
        documentimage2Path.line(to: NSPoint(x: 18.5, y: 22.5))
        documentimage2Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        documentimage2Path.line(to: NSPoint(x: 24.5, y: 21.5))
        documentimage2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentimage2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentimage2Path.close()
        documentimage2Path.move(to: NSPoint(x: 8.5, y: 14.5))
        documentimage2Path.line(to: NSPoint(x: 8.5, y: 4.5))
        documentimage2Path.line(to: NSPoint(x: 21.5, y: 4.5))
        documentimage2Path.line(to: NSPoint(x: 21.5, y: 14.5))
        documentimage2Path.line(to: NSPoint(x: 8.5, y: 14.5))
        documentimage2Path.line(to: NSPoint(x: 8.5, y: 14.5))
        documentimage2Path.close()
        documentimage2Path.move(to: NSPoint(x: 12.5, y: 10.5))
        documentimage2Path.curve(to: NSPoint(x: 13.5, y: 11.5), controlPoint1: NSPoint(x: 13.05, y: 10.5), controlPoint2: NSPoint(x: 13.5, y: 10.95))
        documentimage2Path.curve(to: NSPoint(x: 12.5, y: 12.5), controlPoint1: NSPoint(x: 13.5, y: 12.05), controlPoint2: NSPoint(x: 13.05, y: 12.5))
        documentimage2Path.curve(to: NSPoint(x: 11.5, y: 11.5), controlPoint1: NSPoint(x: 11.95, y: 12.5), controlPoint2: NSPoint(x: 11.5, y: 12.05))
        documentimage2Path.curve(to: NSPoint(x: 12.5, y: 10.5), controlPoint1: NSPoint(x: 11.5, y: 10.95), controlPoint2: NSPoint(x: 11.95, y: 10.5))
        documentimage2Path.line(to: NSPoint(x: 12.5, y: 10.5))
        documentimage2Path.close()
        documentimage2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentimage2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentPlay(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-66-document-play
        //// document-play 2 Drawing
        let documentplay2Path = NSBezierPath()
        documentplay2Path.move(to: NSPoint(x: 17.5, y: 28.5))
        documentplay2Path.line(to: NSPoint(x: 7.51, y: 28.5))
        documentplay2Path.curve(to: NSPoint(x: 5.5, y: 26.49), controlPoint1: NSPoint(x: 6.4, y: 28.5), controlPoint2: NSPoint(x: 5.5, y: 27.6))
        documentplay2Path.line(to: NSPoint(x: 5.5, y: 3.51))
        documentplay2Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        documentplay2Path.line(to: NSPoint(x: 22.5, y: 1.5))
        documentplay2Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        documentplay2Path.line(to: NSPoint(x: 24.5, y: 20.5))
        documentplay2Path.line(to: NSPoint(x: 19.51, y: 20.5))
        documentplay2Path.curve(to: NSPoint(x: 17.5, y: 22.5), controlPoint1: NSPoint(x: 18.4, y: 20.5), controlPoint2: NSPoint(x: 17.5, y: 21.39))
        documentplay2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentplay2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentplay2Path.close()
        documentplay2Path.move(to: NSPoint(x: 18.5, y: 28.5))
        documentplay2Path.line(to: NSPoint(x: 18.5, y: 22.5))
        documentplay2Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        documentplay2Path.line(to: NSPoint(x: 24.5, y: 21.5))
        documentplay2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentplay2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentplay2Path.close()
        documentplay2Path.move(to: NSPoint(x: 10.5, y: 14.5))
        documentplay2Path.line(to: NSPoint(x: 10.5, y: 5.5))
        documentplay2Path.line(to: NSPoint(x: 19.5, y: 10))
        documentplay2Path.line(to: NSPoint(x: 10.5, y: 14.5))
        documentplay2Path.line(to: NSPoint(x: 10.5, y: 14.5))
        documentplay2Path.close()
        documentplay2Path.move(to: NSPoint(x: 11.5, y: 12.9))
        documentplay2Path.line(to: NSPoint(x: 11.5, y: 7.1))
        documentplay2Path.line(to: NSPoint(x: 17.3, y: 10))
        documentplay2Path.line(to: NSPoint(x: 11.5, y: 12.9))
        documentplay2Path.line(to: NSPoint(x: 11.5, y: 12.9))
        documentplay2Path.close()
        documentplay2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentplay2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentGraph(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-67-document-graph
        //// document-graph 2 Drawing
        let documentgraph2Path = NSBezierPath()
        documentgraph2Path.move(to: NSPoint(x: 17.5, y: 28.5))
        documentgraph2Path.line(to: NSPoint(x: 7.51, y: 28.5))
        documentgraph2Path.curve(to: NSPoint(x: 5.5, y: 26.49), controlPoint1: NSPoint(x: 6.4, y: 28.5), controlPoint2: NSPoint(x: 5.5, y: 27.6))
        documentgraph2Path.line(to: NSPoint(x: 5.5, y: 3.51))
        documentgraph2Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        documentgraph2Path.line(to: NSPoint(x: 22.5, y: 1.5))
        documentgraph2Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        documentgraph2Path.line(to: NSPoint(x: 24.5, y: 20.5))
        documentgraph2Path.line(to: NSPoint(x: 19.51, y: 20.5))
        documentgraph2Path.curve(to: NSPoint(x: 17.5, y: 22.5), controlPoint1: NSPoint(x: 18.4, y: 20.5), controlPoint2: NSPoint(x: 17.5, y: 21.39))
        documentgraph2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentgraph2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentgraph2Path.close()
        documentgraph2Path.move(to: NSPoint(x: 18.5, y: 28.5))
        documentgraph2Path.line(to: NSPoint(x: 18.5, y: 22.5))
        documentgraph2Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        documentgraph2Path.line(to: NSPoint(x: 24.5, y: 21.5))
        documentgraph2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentgraph2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentgraph2Path.close()
        documentgraph2Path.move(to: NSPoint(x: 13.46, y: 9.7))
        documentgraph2Path.line(to: NSPoint(x: 10.5, y: 6.53))
        documentgraph2Path.line(to: NSPoint(x: 10.5, y: 6.5))
        documentgraph2Path.line(to: NSPoint(x: 20.5, y: 6.5))
        documentgraph2Path.line(to: NSPoint(x: 20.5, y: 5.5))
        documentgraph2Path.line(to: NSPoint(x: 10.5, y: 5.5))
        documentgraph2Path.line(to: NSPoint(x: 10.5, y: 5.5))
        documentgraph2Path.line(to: NSPoint(x: 9.5, y: 5.5))
        documentgraph2Path.line(to: NSPoint(x: 9.5, y: 13.5))
        documentgraph2Path.line(to: NSPoint(x: 10.5, y: 13.5))
        documentgraph2Path.line(to: NSPoint(x: 10.5, y: 7.99))
        documentgraph2Path.line(to: NSPoint(x: 13.41, y: 11.11))
        documentgraph2Path.line(to: NSPoint(x: 14.14, y: 10.43))
        documentgraph2Path.line(to: NSPoint(x: 15.6, y: 9.07))
        documentgraph2Path.line(to: NSPoint(x: 18.81, y: 12.5))
        documentgraph2Path.line(to: NSPoint(x: 17.5, y: 12.5))
        documentgraph2Path.line(to: NSPoint(x: 17.5, y: 13.5))
        documentgraph2Path.line(to: NSPoint(x: 20.5, y: 13.5))
        documentgraph2Path.line(to: NSPoint(x: 20.5, y: 12.5))
        documentgraph2Path.line(to: NSPoint(x: 20.5, y: 10.5))
        documentgraph2Path.line(to: NSPoint(x: 19.5, y: 10.5))
        documentgraph2Path.line(to: NSPoint(x: 19.5, y: 11.78))
        documentgraph2Path.line(to: NSPoint(x: 15.65, y: 7.65))
        documentgraph2Path.line(to: NSPoint(x: 14.92, y: 8.33))
        documentgraph2Path.line(to: NSPoint(x: 13.46, y: 9.7))
        documentgraph2Path.line(to: NSPoint(x: 13.46, y: 9.7))
        documentgraph2Path.line(to: NSPoint(x: 13.46, y: 9.7))
        documentgraph2Path.close()
        documentgraph2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentgraph2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentTime(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-68-document-time
        //// document-time 2 Drawing
        let documenttime2Path = NSBezierPath()
        documenttime2Path.move(to: NSPoint(x: 20.48, y: 10.5))
        documenttime2Path.curve(to: NSPoint(x: 15.5, y: 15.48), controlPoint1: NSPoint(x: 20.24, y: 13.14), controlPoint2: NSPoint(x: 18.14, y: 15.24))
        documenttime2Path.line(to: NSPoint(x: 15.5, y: 15.48))
        documenttime2Path.line(to: NSPoint(x: 15.5, y: 10.5))
        documenttime2Path.line(to: NSPoint(x: 20.48, y: 10.5))
        documenttime2Path.line(to: NSPoint(x: 20.48, y: 10.5))
        documenttime2Path.close()
        documenttime2Path.move(to: NSPoint(x: 20.48, y: 9.5))
        documenttime2Path.curve(to: NSPoint(x: 15, y: 4.5), controlPoint1: NSPoint(x: 20.22, y: 6.7), controlPoint2: NSPoint(x: 17.87, y: 4.5))
        documenttime2Path.curve(to: NSPoint(x: 9.5, y: 10), controlPoint1: NSPoint(x: 11.96, y: 4.5), controlPoint2: NSPoint(x: 9.5, y: 6.96))
        documenttime2Path.curve(to: NSPoint(x: 14.5, y: 15.48), controlPoint1: NSPoint(x: 9.5, y: 12.87), controlPoint2: NSPoint(x: 11.7, y: 15.22))
        documenttime2Path.line(to: NSPoint(x: 14.5, y: 9.5))
        documenttime2Path.line(to: NSPoint(x: 15.25, y: 9.5))
        documenttime2Path.line(to: NSPoint(x: 20.48, y: 9.5))
        documenttime2Path.line(to: NSPoint(x: 20.48, y: 9.5))
        documenttime2Path.close()
        documenttime2Path.move(to: NSPoint(x: 17.5, y: 28.5))
        documenttime2Path.line(to: NSPoint(x: 7.51, y: 28.5))
        documenttime2Path.curve(to: NSPoint(x: 5.5, y: 26.49), controlPoint1: NSPoint(x: 6.4, y: 28.5), controlPoint2: NSPoint(x: 5.5, y: 27.6))
        documenttime2Path.line(to: NSPoint(x: 5.5, y: 3.51))
        documenttime2Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        documenttime2Path.line(to: NSPoint(x: 22.5, y: 1.5))
        documenttime2Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        documenttime2Path.line(to: NSPoint(x: 24.5, y: 20.5))
        documenttime2Path.line(to: NSPoint(x: 19.51, y: 20.5))
        documenttime2Path.curve(to: NSPoint(x: 17.5, y: 22.5), controlPoint1: NSPoint(x: 18.4, y: 20.5), controlPoint2: NSPoint(x: 17.5, y: 21.39))
        documenttime2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documenttime2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documenttime2Path.close()
        documenttime2Path.move(to: NSPoint(x: 18.5, y: 28.5))
        documenttime2Path.line(to: NSPoint(x: 18.5, y: 22.5))
        documenttime2Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        documenttime2Path.line(to: NSPoint(x: 24.5, y: 21.5))
        documenttime2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documenttime2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documenttime2Path.close()
        documenttime2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documenttime2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentText3(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-
        //// icon-69-document-text 2
        //// document-text 4 Drawing
        let documenttext4Path = NSBezierPath()
        documenttext4Path.move(to: NSPoint(x: 17.5, y: 28.5))
        documenttext4Path.line(to: NSPoint(x: 7.51, y: 28.5))
        documenttext4Path.curve(to: NSPoint(x: 5.5, y: 26.49), controlPoint1: NSPoint(x: 6.4, y: 28.5), controlPoint2: NSPoint(x: 5.5, y: 27.6))
        documenttext4Path.line(to: NSPoint(x: 5.5, y: 3.51))
        documenttext4Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        documenttext4Path.line(to: NSPoint(x: 22.5, y: 1.5))
        documenttext4Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        documenttext4Path.line(to: NSPoint(x: 24.5, y: 20.5))
        documenttext4Path.line(to: NSPoint(x: 19.51, y: 20.5))
        documenttext4Path.curve(to: NSPoint(x: 17.5, y: 22.5), controlPoint1: NSPoint(x: 18.4, y: 20.5), controlPoint2: NSPoint(x: 17.5, y: 21.39))
        documenttext4Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documenttext4Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documenttext4Path.close()
        documenttext4Path.move(to: NSPoint(x: 8.5, y: 25.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 24.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 23.5))
        documenttext4Path.line(to: NSPoint(x: 9.5, y: 23.5))
        documenttext4Path.line(to: NSPoint(x: 9.5, y: 24.5))
        documenttext4Path.line(to: NSPoint(x: 10.5, y: 24.5))
        documenttext4Path.line(to: NSPoint(x: 10.5, y: 20.5))
        documenttext4Path.line(to: NSPoint(x: 11.5, y: 20.5))
        documenttext4Path.line(to: NSPoint(x: 11.5, y: 24.5))
        documenttext4Path.line(to: NSPoint(x: 12.5, y: 24.5))
        documenttext4Path.line(to: NSPoint(x: 12.5, y: 23.5))
        documenttext4Path.line(to: NSPoint(x: 13.5, y: 23.5))
        documenttext4Path.line(to: NSPoint(x: 13.5, y: 24.5))
        documenttext4Path.line(to: NSPoint(x: 13.5, y: 25.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 25.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 25.5))
        documenttext4Path.close()
        documenttext4Path.move(to: NSPoint(x: 18.5, y: 28.5))
        documenttext4Path.line(to: NSPoint(x: 18.5, y: 22.5))
        documenttext4Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        documenttext4Path.line(to: NSPoint(x: 24.5, y: 21.5))
        documenttext4Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documenttext4Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documenttext4Path.close()
        documenttext4Path.move(to: NSPoint(x: 8.5, y: 15.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 14.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 14.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 15.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 15.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 15.5))
        documenttext4Path.close()
        documenttext4Path.move(to: NSPoint(x: 8.5, y: 18.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 17.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 17.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 18.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 18.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 18.5))
        documenttext4Path.close()
        documenttext4Path.move(to: NSPoint(x: 8.5, y: 12.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 11.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 11.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 12.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 12.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 12.5))
        documenttext4Path.close()
        documenttext4Path.move(to: NSPoint(x: 8.5, y: 9.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 8.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 8.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 9.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 9.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 9.5))
        documenttext4Path.close()
        documenttext4Path.move(to: NSPoint(x: 8.5, y: 6.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 5.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 5.5))
        documenttext4Path.line(to: NSPoint(x: 21.5, y: 6.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 6.5))
        documenttext4Path.line(to: NSPoint(x: 8.5, y: 6.5))
        documenttext4Path.close()
        documenttext4Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documenttext4Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentCode(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-70-document-code
        //// document-code 2 Drawing
        let documentcode2Path = NSBezierPath()
        documentcode2Path.move(to: NSPoint(x: 17.5, y: 28.5))
        documentcode2Path.line(to: NSPoint(x: 7.51, y: 28.5))
        documentcode2Path.curve(to: NSPoint(x: 5.5, y: 26.49), controlPoint1: NSPoint(x: 6.4, y: 28.5), controlPoint2: NSPoint(x: 5.5, y: 27.6))
        documentcode2Path.line(to: NSPoint(x: 5.5, y: 3.51))
        documentcode2Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        documentcode2Path.line(to: NSPoint(x: 22.5, y: 1.5))
        documentcode2Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        documentcode2Path.line(to: NSPoint(x: 24.5, y: 20.5))
        documentcode2Path.line(to: NSPoint(x: 19.51, y: 20.5))
        documentcode2Path.curve(to: NSPoint(x: 17.5, y: 22.5), controlPoint1: NSPoint(x: 18.4, y: 20.5), controlPoint2: NSPoint(x: 17.5, y: 21.39))
        documentcode2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentcode2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentcode2Path.close()
        documentcode2Path.move(to: NSPoint(x: 18.5, y: 28.5))
        documentcode2Path.line(to: NSPoint(x: 18.5, y: 22.5))
        documentcode2Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        documentcode2Path.line(to: NSPoint(x: 24.5, y: 21.5))
        documentcode2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentcode2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentcode2Path.close()
        documentcode2Path.move(to: NSPoint(x: 11.5, y: 5.5))
        documentcode2Path.line(to: NSPoint(x: 7.5, y: 9.5))
        documentcode2Path.line(to: NSPoint(x: 11.5, y: 13.5))
        documentcode2Path.line(to: NSPoint(x: 12.2, y: 12.8))
        documentcode2Path.line(to: NSPoint(x: 8.9, y: 9.5))
        documentcode2Path.line(to: NSPoint(x: 12.2, y: 6.2))
        documentcode2Path.line(to: NSPoint(x: 11.5, y: 5.5))
        documentcode2Path.line(to: NSPoint(x: 11.5, y: 5.5))
        documentcode2Path.close()
        documentcode2Path.move(to: NSPoint(x: 18.5, y: 5.5))
        documentcode2Path.line(to: NSPoint(x: 22.5, y: 9.5))
        documentcode2Path.line(to: NSPoint(x: 18.5, y: 13.5))
        documentcode2Path.line(to: NSPoint(x: 17.8, y: 12.8))
        documentcode2Path.line(to: NSPoint(x: 21.1, y: 9.5))
        documentcode2Path.line(to: NSPoint(x: 17.8, y: 6.2))
        documentcode2Path.line(to: NSPoint(x: 18.5, y: 5.5))
        documentcode2Path.line(to: NSPoint(x: 18.5, y: 5.5))
        documentcode2Path.close()
        documentcode2Path.move(to: NSPoint(x: 15.5, y: 13.5))
        documentcode2Path.line(to: NSPoint(x: 13.5, y: 5.5))
        documentcode2Path.line(to: NSPoint(x: 14.5, y: 5.5))
        documentcode2Path.line(to: NSPoint(x: 16.5, y: 13.5))
        documentcode2Path.line(to: NSPoint(x: 15.5, y: 13.5))
        documentcode2Path.line(to: NSPoint(x: 15.5, y: 13.5))
        documentcode2Path.close()
        documentcode2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentcode2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentCloud(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-71-document-cloud
        //// document-cloud 2 Drawing
        let documentcloud2Path = NSBezierPath()
        documentcloud2Path.move(to: NSPoint(x: 21.75, y: 13.49))
        documentcloud2Path.curve(to: NSPoint(x: 22, y: 13.5), controlPoint1: NSPoint(x: 21.83, y: 13.5), controlPoint2: NSPoint(x: 21.92, y: 13.5))
        documentcloud2Path.curve(to: NSPoint(x: 25.2, y: 11.42), controlPoint1: NSPoint(x: 23.43, y: 13.5), controlPoint2: NSPoint(x: 24.66, y: 12.64))
        documentcloud2Path.line(to: NSPoint(x: 25.2, y: 11.42))
        documentcloud2Path.curve(to: NSPoint(x: 27.5, y: 8.5), controlPoint1: NSPoint(x: 26.53, y: 11.1), controlPoint2: NSPoint(x: 27.5, y: 9.91))
        documentcloud2Path.curve(to: NSPoint(x: 24.49, y: 5.5), controlPoint1: NSPoint(x: 27.5, y: 6.85), controlPoint2: NSPoint(x: 26.15, y: 5.5))
        documentcloud2Path.line(to: NSPoint(x: 14.51, y: 5.5))
        documentcloud2Path.curve(to: NSPoint(x: 11.5, y: 8.5), controlPoint1: NSPoint(x: 12.84, y: 5.5), controlPoint2: NSPoint(x: 11.5, y: 6.84))
        documentcloud2Path.curve(to: NSPoint(x: 13.51, y: 11.33), controlPoint1: NSPoint(x: 11.5, y: 9.81), controlPoint2: NSPoint(x: 12.34, y: 10.92))
        documentcloud2Path.curve(to: NSPoint(x: 18, y: 15.5), controlPoint1: NSPoint(x: 13.68, y: 13.66), controlPoint2: NSPoint(x: 15.63, y: 15.5))
        documentcloud2Path.curve(to: NSPoint(x: 21.75, y: 13.49), controlPoint1: NSPoint(x: 19.56, y: 15.5), controlPoint2: NSPoint(x: 20.94, y: 14.7))
        documentcloud2Path.line(to: NSPoint(x: 21.75, y: 13.49))
        documentcloud2Path.close()
        documentcloud2Path.move(to: NSPoint(x: 21.5, y: 4.5))
        documentcloud2Path.line(to: NSPoint(x: 21.5, y: 3.5))
        documentcloud2Path.curve(to: NSPoint(x: 19.5, y: 1.5), controlPoint1: NSPoint(x: 21.5, y: 2.39), controlPoint2: NSPoint(x: 20.61, y: 1.5))
        documentcloud2Path.line(to: NSPoint(x: 4.5, y: 1.5))
        documentcloud2Path.curve(to: NSPoint(x: 2.5, y: 3.51), controlPoint1: NSPoint(x: 3.39, y: 1.5), controlPoint2: NSPoint(x: 2.5, y: 2.4))
        documentcloud2Path.line(to: NSPoint(x: 2.5, y: 26.49))
        documentcloud2Path.curve(to: NSPoint(x: 4.51, y: 28.5), controlPoint1: NSPoint(x: 2.5, y: 27.6), controlPoint2: NSPoint(x: 3.4, y: 28.5))
        documentcloud2Path.line(to: NSPoint(x: 14.5, y: 28.5))
        documentcloud2Path.line(to: NSPoint(x: 14.5, y: 22.5))
        documentcloud2Path.curve(to: NSPoint(x: 16.51, y: 20.5), controlPoint1: NSPoint(x: 14.5, y: 21.39), controlPoint2: NSPoint(x: 15.4, y: 20.5))
        documentcloud2Path.line(to: NSPoint(x: 21.5, y: 20.5))
        documentcloud2Path.line(to: NSPoint(x: 21.5, y: 15.24))
        documentcloud2Path.curve(to: NSPoint(x: 18, y: 16.5), controlPoint1: NSPoint(x: 20.55, y: 16.03), controlPoint2: NSPoint(x: 19.33, y: 16.5))
        documentcloud2Path.curve(to: NSPoint(x: 12.59, y: 12.02), controlPoint1: NSPoint(x: 15.31, y: 16.5), controlPoint2: NSPoint(x: 13.07, y: 14.57))
        documentcloud2Path.curve(to: NSPoint(x: 10.5, y: 8.5), controlPoint1: NSPoint(x: 11.35, y: 11.34), controlPoint2: NSPoint(x: 10.5, y: 10.02))
        documentcloud2Path.curve(to: NSPoint(x: 14.5, y: 4.5), controlPoint1: NSPoint(x: 10.5, y: 6.29), controlPoint2: NSPoint(x: 12.29, y: 4.5))
        documentcloud2Path.line(to: NSPoint(x: 21.5, y: 4.5))
        documentcloud2Path.line(to: NSPoint(x: 21.5, y: 4.5))
        documentcloud2Path.line(to: NSPoint(x: 21.5, y: 4.5))
        documentcloud2Path.close()
        documentcloud2Path.move(to: NSPoint(x: 15.5, y: 28.5))
        documentcloud2Path.line(to: NSPoint(x: 15.5, y: 22.5))
        documentcloud2Path.curve(to: NSPoint(x: 16.49, y: 21.5), controlPoint1: NSPoint(x: 15.5, y: 21.95), controlPoint2: NSPoint(x: 15.95, y: 21.5))
        documentcloud2Path.line(to: NSPoint(x: 21.5, y: 21.5))
        documentcloud2Path.line(to: NSPoint(x: 15.5, y: 28.5))
        documentcloud2Path.line(to: NSPoint(x: 15.5, y: 28.5))
        documentcloud2Path.close()
        documentcloud2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentcloud2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocuments2(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-72-documents
        //// documents 4 Drawing
        let documents4Path = NSBezierPath()
        documents4Path.move(to: NSPoint(x: 7.82, y: 28.06))
        documents4Path.curve(to: NSPoint(x: 9.75, y: 30), controlPoint1: NSPoint(x: 7.83, y: 29.13), controlPoint2: NSPoint(x: 8.69, y: 30))
        documents4Path.line(to: NSPoint(x: 19.3, y: 30))
        documents4Path.line(to: NSPoint(x: 19.3, y: 24.19))
        documents4Path.curve(to: NSPoint(x: 21.22, y: 22.26), controlPoint1: NSPoint(x: 19.3, y: 23.12), controlPoint2: NSPoint(x: 20.16, y: 22.26))
        documents4Path.line(to: NSPoint(x: 26, y: 22.26))
        documents4Path.line(to: NSPoint(x: 26, y: 5.8))
        documents4Path.curve(to: NSPoint(x: 24.09, y: 3.87), controlPoint1: NSPoint(x: 26, y: 4.73), controlPoint2: NSPoint(x: 25.14, y: 3.87))
        documents4Path.curve(to: NSPoint(x: 22.18, y: 1.94), controlPoint1: NSPoint(x: 24.08, y: 2.8), controlPoint2: NSPoint(x: 23.23, y: 1.94))
        documents4Path.curve(to: NSPoint(x: 20.26, y: 0), controlPoint1: NSPoint(x: 22.17, y: 0.87), controlPoint2: NSPoint(x: 21.32, y: 0))
        documents4Path.line(to: NSPoint(x: 5.91, y: 0))
        documents4Path.curve(to: NSPoint(x: 4, y: 1.94), controlPoint1: NSPoint(x: 4.85, y: 0), controlPoint2: NSPoint(x: 4, y: 0.87))
        documents4Path.line(to: NSPoint(x: 4, y: 24.19))
        documents4Path.curve(to: NSPoint(x: 5.91, y: 26.13), controlPoint1: NSPoint(x: 4, y: 25.26), controlPoint2: NSPoint(x: 4.86, y: 26.13))
        documents4Path.curve(to: NSPoint(x: 7.82, y: 28.06), controlPoint1: NSPoint(x: 5.91, y: 27.2), controlPoint2: NSPoint(x: 6.77, y: 28.06))
        documents4Path.line(to: NSPoint(x: 7.82, y: 28.06))
        documents4Path.close()
        documents4Path.move(to: NSPoint(x: 5.91, y: 3.88))
        documents4Path.curve(to: NSPoint(x: 7.82, y: 1.94), controlPoint1: NSPoint(x: 5.91, y: 2.81), controlPoint2: NSPoint(x: 6.77, y: 1.94))
        documents4Path.line(to: NSPoint(x: 21.22, y: 1.93))
        documents4Path.curve(to: NSPoint(x: 20.26, y: 0.97), controlPoint1: NSPoint(x: 21.22, y: 1.41), controlPoint2: NSPoint(x: 20.79, y: 0.97))
        documents4Path.line(to: NSPoint(x: 5.91, y: 0.97))
        documents4Path.curve(to: NSPoint(x: 4.96, y: 1.93), controlPoint1: NSPoint(x: 5.39, y: 0.97), controlPoint2: NSPoint(x: 4.96, y: 1.4))
        documents4Path.line(to: NSPoint(x: 4.96, y: 24.2))
        documents4Path.curve(to: NSPoint(x: 5.91, y: 25.16), controlPoint1: NSPoint(x: 4.96, y: 24.72), controlPoint2: NSPoint(x: 5.38, y: 25.16))
        documents4Path.line(to: NSPoint(x: 5.91, y: 3.88))
        documents4Path.line(to: NSPoint(x: 5.91, y: 3.88))
        documents4Path.close()
        documents4Path.move(to: NSPoint(x: 6.87, y: 26.13))
        documents4Path.line(to: NSPoint(x: 6.87, y: 3.87))
        documents4Path.curve(to: NSPoint(x: 7.83, y: 2.9), controlPoint1: NSPoint(x: 6.87, y: 3.33), controlPoint2: NSPoint(x: 7.3, y: 2.9))
        documents4Path.line(to: NSPoint(x: 22.17, y: 2.9))
        documents4Path.curve(to: NSPoint(x: 23.13, y: 3.87), controlPoint1: NSPoint(x: 22.7, y: 2.9), controlPoint2: NSPoint(x: 23.13, y: 3.34))
        documents4Path.line(to: NSPoint(x: 9.74, y: 3.87))
        documents4Path.curve(to: NSPoint(x: 7.83, y: 5.81), controlPoint1: NSPoint(x: 8.68, y: 3.87), controlPoint2: NSPoint(x: 7.83, y: 4.74))
        documents4Path.line(to: NSPoint(x: 7.83, y: 27.1))
        documents4Path.curve(to: NSPoint(x: 6.87, y: 26.13), controlPoint1: NSPoint(x: 7.3, y: 27.1), controlPoint2: NSPoint(x: 6.87, y: 26.66))
        documents4Path.line(to: NSPoint(x: 6.87, y: 26.13))
        documents4Path.close()
        documents4Path.move(to: NSPoint(x: 20.26, y: 30))
        documents4Path.line(to: NSPoint(x: 20.26, y: 24.2))
        documents4Path.curve(to: NSPoint(x: 21.21, y: 23.23), controlPoint1: NSPoint(x: 20.26, y: 23.66), controlPoint2: NSPoint(x: 20.69, y: 23.23))
        documents4Path.line(to: NSPoint(x: 26, y: 23.23))
        documents4Path.line(to: NSPoint(x: 20.26, y: 30))
        documents4Path.line(to: NSPoint(x: 20.26, y: 30))
        documents4Path.close()
        documents4Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documents4Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocuments3(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-73-documents
        //// documents 4 Drawing
        let documents4Path = NSBezierPath()
        documents4Path.move(to: NSPoint(x: 20.98, y: 4.69))
        documents4Path.line(to: NSPoint(x: 24.66, y: 4.69))
        documents4Path.curve(to: NSPoint(x: 26.5, y: 6.56), controlPoint1: NSPoint(x: 25.68, y: 4.69), controlPoint2: NSPoint(x: 26.5, y: 5.52))
        documents4Path.line(to: NSPoint(x: 26.5, y: 22.5))
        documents4Path.line(to: NSPoint(x: 21.91, y: 22.5))
        documents4Path.curve(to: NSPoint(x: 20.06, y: 24.37), controlPoint1: NSPoint(x: 20.89, y: 22.5), controlPoint2: NSPoint(x: 20.06, y: 23.33))
        documents4Path.line(to: NSPoint(x: 20.06, y: 30))
        documents4Path.line(to: NSPoint(x: 10.87, y: 30))
        documents4Path.curve(to: NSPoint(x: 9.02, y: 28.12), controlPoint1: NSPoint(x: 9.85, y: 30), controlPoint2: NSPoint(x: 9.02, y: 29.16))
        documents4Path.line(to: NSPoint(x: 9.02, y: 26.25))
        documents4Path.line(to: NSPoint(x: 15.92, y: 26.25))
        documents4Path.line(to: NSPoint(x: 21.9, y: 19.12))
        documents4Path.line(to: NSPoint(x: 21.9, y: 4.69))
        documents4Path.line(to: NSPoint(x: 20.98, y: 4.69))
        documents4Path.line(to: NSPoint(x: 20.98, y: 17.81))
        documents4Path.line(to: NSPoint(x: 16.39, y: 17.81))
        documents4Path.curve(to: NSPoint(x: 14.54, y: 19.69), controlPoint1: NSPoint(x: 15.37, y: 17.81), controlPoint2: NSPoint(x: 14.54, y: 18.64))
        documents4Path.line(to: NSPoint(x: 14.54, y: 25.31))
        documents4Path.line(to: NSPoint(x: 5.35, y: 25.31))
        documents4Path.curve(to: NSPoint(x: 3.5, y: 23.43), controlPoint1: NSPoint(x: 4.33, y: 25.31), controlPoint2: NSPoint(x: 3.5, y: 24.47))
        documents4Path.line(to: NSPoint(x: 3.5, y: 1.88))
        documents4Path.curve(to: NSPoint(x: 5.34, y: 0), controlPoint1: NSPoint(x: 3.5, y: 0.84), controlPoint2: NSPoint(x: 4.32, y: 0))
        documents4Path.line(to: NSPoint(x: 19.14, y: 0))
        documents4Path.curve(to: NSPoint(x: 20.98, y: 1.87), controlPoint1: NSPoint(x: 20.16, y: 0), controlPoint2: NSPoint(x: 20.98, y: 0.84))
        documents4Path.line(to: NSPoint(x: 20.98, y: 4.69))
        documents4Path.line(to: NSPoint(x: 20.98, y: 4.69))
        documents4Path.line(to: NSPoint(x: 20.98, y: 4.69))
        documents4Path.close()
        documents4Path.move(to: NSPoint(x: 20.98, y: 30))
        documents4Path.line(to: NSPoint(x: 20.98, y: 24.38))
        documents4Path.curve(to: NSPoint(x: 21.89, y: 23.44), controlPoint1: NSPoint(x: 20.98, y: 23.86), controlPoint2: NSPoint(x: 21.39, y: 23.44))
        documents4Path.line(to: NSPoint(x: 26.5, y: 23.44))
        documents4Path.line(to: NSPoint(x: 20.98, y: 30))
        documents4Path.line(to: NSPoint(x: 20.98, y: 30))
        documents4Path.close()
        documents4Path.move(to: NSPoint(x: 15.46, y: 25.31))
        documents4Path.line(to: NSPoint(x: 15.46, y: 19.69))
        documents4Path.curve(to: NSPoint(x: 16.37, y: 18.75), controlPoint1: NSPoint(x: 15.46, y: 19.17), controlPoint2: NSPoint(x: 15.87, y: 18.75))
        documents4Path.line(to: NSPoint(x: 20.98, y: 18.75))
        documents4Path.line(to: NSPoint(x: 15.46, y: 25.31))
        documents4Path.line(to: NSPoint(x: 15.46, y: 25.31))
        documents4Path.close()
        documents4Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documents4Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentSearch(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-74-document-search
        //// document-search 2 Drawing
        let documentsearch2Path = NSBezierPath()
        documentsearch2Path.move(to: NSPoint(x: 15.81, y: 9.48))
        documentsearch2Path.curve(to: NSPoint(x: 13, y: 8.5), controlPoint1: NSPoint(x: 15.04, y: 8.87), controlPoint2: NSPoint(x: 14.06, y: 8.5))
        documentsearch2Path.curve(to: NSPoint(x: 8.5, y: 13), controlPoint1: NSPoint(x: 10.51, y: 8.5), controlPoint2: NSPoint(x: 8.5, y: 10.51))
        documentsearch2Path.curve(to: NSPoint(x: 13, y: 17.5), controlPoint1: NSPoint(x: 8.5, y: 15.49), controlPoint2: NSPoint(x: 10.51, y: 17.5))
        documentsearch2Path.curve(to: NSPoint(x: 17.5, y: 13), controlPoint1: NSPoint(x: 15.49, y: 17.5), controlPoint2: NSPoint(x: 17.5, y: 15.49))
        documentsearch2Path.curve(to: NSPoint(x: 16.52, y: 10.19), controlPoint1: NSPoint(x: 17.5, y: 11.94), controlPoint2: NSPoint(x: 17.13, y: 10.96))
        documentsearch2Path.line(to: NSPoint(x: 21.86, y: 4.84))
        documentsearch2Path.line(to: NSPoint(x: 21.16, y: 4.14))
        documentsearch2Path.line(to: NSPoint(x: 15.81, y: 9.48))
        documentsearch2Path.line(to: NSPoint(x: 15.81, y: 9.48))
        documentsearch2Path.close()
        documentsearch2Path.move(to: NSPoint(x: 17.5, y: 28.5))
        documentsearch2Path.line(to: NSPoint(x: 7.51, y: 28.5))
        documentsearch2Path.curve(to: NSPoint(x: 5.5, y: 26.49), controlPoint1: NSPoint(x: 6.4, y: 28.5), controlPoint2: NSPoint(x: 5.5, y: 27.6))
        documentsearch2Path.line(to: NSPoint(x: 5.5, y: 3.51))
        documentsearch2Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        documentsearch2Path.line(to: NSPoint(x: 22.5, y: 1.5))
        documentsearch2Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        documentsearch2Path.line(to: NSPoint(x: 24.5, y: 20.5))
        documentsearch2Path.line(to: NSPoint(x: 19.51, y: 20.5))
        documentsearch2Path.curve(to: NSPoint(x: 17.5, y: 22.5), controlPoint1: NSPoint(x: 18.4, y: 20.5), controlPoint2: NSPoint(x: 17.5, y: 21.39))
        documentsearch2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentsearch2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentsearch2Path.close()
        documentsearch2Path.move(to: NSPoint(x: 18.5, y: 28.5))
        documentsearch2Path.line(to: NSPoint(x: 18.5, y: 22.5))
        documentsearch2Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        documentsearch2Path.line(to: NSPoint(x: 24.5, y: 21.5))
        documentsearch2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentsearch2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentsearch2Path.close()
        documentsearch2Path.move(to: NSPoint(x: 13, y: 9.5))
        documentsearch2Path.curve(to: NSPoint(x: 16.5, y: 13), controlPoint1: NSPoint(x: 14.93, y: 9.5), controlPoint2: NSPoint(x: 16.5, y: 11.07))
        documentsearch2Path.curve(to: NSPoint(x: 13, y: 16.5), controlPoint1: NSPoint(x: 16.5, y: 14.93), controlPoint2: NSPoint(x: 14.93, y: 16.5))
        documentsearch2Path.curve(to: NSPoint(x: 9.5, y: 13), controlPoint1: NSPoint(x: 11.07, y: 16.5), controlPoint2: NSPoint(x: 9.5, y: 14.93))
        documentsearch2Path.curve(to: NSPoint(x: 13, y: 9.5), controlPoint1: NSPoint(x: 9.5, y: 11.07), controlPoint2: NSPoint(x: 11.07, y: 9.5))
        documentsearch2Path.line(to: NSPoint(x: 13, y: 9.5))
        documentsearch2Path.close()
        documentsearch2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentsearch2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentStar(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-75-document-star
        //// document-star 2 Drawing
        let documentstar2Path = NSBezierPath()
        documentstar2Path.move(to: NSPoint(x: 17.5, y: 28.5))
        documentstar2Path.line(to: NSPoint(x: 7.51, y: 28.5))
        documentstar2Path.curve(to: NSPoint(x: 5.5, y: 26.49), controlPoint1: NSPoint(x: 6.4, y: 28.5), controlPoint2: NSPoint(x: 5.5, y: 27.6))
        documentstar2Path.line(to: NSPoint(x: 5.5, y: 3.51))
        documentstar2Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        documentstar2Path.line(to: NSPoint(x: 22.5, y: 1.5))
        documentstar2Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        documentstar2Path.line(to: NSPoint(x: 24.5, y: 20.5))
        documentstar2Path.line(to: NSPoint(x: 19.51, y: 20.5))
        documentstar2Path.curve(to: NSPoint(x: 17.5, y: 22.5), controlPoint1: NSPoint(x: 18.4, y: 20.5), controlPoint2: NSPoint(x: 17.5, y: 21.39))
        documentstar2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentstar2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentstar2Path.close()
        documentstar2Path.move(to: NSPoint(x: 18.5, y: 28.5))
        documentstar2Path.line(to: NSPoint(x: 18.5, y: 22.5))
        documentstar2Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        documentstar2Path.line(to: NSPoint(x: 24.5, y: 21.5))
        documentstar2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentstar2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentstar2Path.close()
        documentstar2Path.move(to: NSPoint(x: 15, y: 8.5))
        documentstar2Path.line(to: NSPoint(x: 11, y: 5.5))
        documentstar2Path.line(to: NSPoint(x: 12.5, y: 10.5))
        documentstar2Path.line(to: NSPoint(x: 8.5, y: 13.5))
        documentstar2Path.line(to: NSPoint(x: 13.5, y: 13.5))
        documentstar2Path.line(to: NSPoint(x: 15, y: 18.5))
        documentstar2Path.line(to: NSPoint(x: 16.5, y: 13.5))
        documentstar2Path.line(to: NSPoint(x: 21.5, y: 13.5))
        documentstar2Path.line(to: NSPoint(x: 17.5, y: 10.5))
        documentstar2Path.line(to: NSPoint(x: 19, y: 5.5))
        documentstar2Path.line(to: NSPoint(x: 15, y: 8.5))
        documentstar2Path.line(to: NSPoint(x: 15, y: 8.5))
        documentstar2Path.close()
        documentstar2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentstar2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentUnlocked(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-76-document-unlocked
        //// document-unlocked 2 Drawing
        let documentunlocked2Path = NSBezierPath()
        documentunlocked2Path.move(to: NSPoint(x: 23, y: 21.5))
        documentunlocked2Path.line(to: NSPoint(x: 18.01, y: 21.5))
        documentunlocked2Path.curve(to: NSPoint(x: 16, y: 23.5), controlPoint1: NSPoint(x: 16.9, y: 21.5), controlPoint2: NSPoint(x: 16, y: 22.39))
        documentunlocked2Path.line(to: NSPoint(x: 16, y: 29.5))
        documentunlocked2Path.line(to: NSPoint(x: 6.01, y: 29.5))
        documentunlocked2Path.curve(to: NSPoint(x: 4, y: 27.49), controlPoint1: NSPoint(x: 4.9, y: 29.5), controlPoint2: NSPoint(x: 4, y: 28.6))
        documentunlocked2Path.line(to: NSPoint(x: 4, y: 4.51))
        documentunlocked2Path.curve(to: NSPoint(x: 6, y: 2.5), controlPoint1: NSPoint(x: 4, y: 3.4), controlPoint2: NSPoint(x: 4.89, y: 2.5))
        documentunlocked2Path.line(to: NSPoint(x: 16, y: 2.5))
        documentunlocked2Path.line(to: NSPoint(x: 16, y: 6.5))
        documentunlocked2Path.curve(to: NSPoint(x: 17, y: 8.23), controlPoint1: NSPoint(x: 16, y: 7.25), controlPoint2: NSPoint(x: 16.4, y: 7.89))
        documentunlocked2Path.line(to: NSPoint(x: 17, y: 10.01))
        documentunlocked2Path.curve(to: NSPoint(x: 21.5, y: 14.5), controlPoint1: NSPoint(x: 17, y: 12.48), controlPoint2: NSPoint(x: 19.01, y: 14.5))
        documentunlocked2Path.curve(to: NSPoint(x: 23, y: 14.24), controlPoint1: NSPoint(x: 22.03, y: 14.5), controlPoint2: NSPoint(x: 22.53, y: 14.41))
        documentunlocked2Path.line(to: NSPoint(x: 23, y: 21.5))
        documentunlocked2Path.line(to: NSPoint(x: 23, y: 21.5))
        documentunlocked2Path.close()
        documentunlocked2Path.move(to: NSPoint(x: 17, y: 23.5))
        documentunlocked2Path.curve(to: NSPoint(x: 17.99, y: 22.5), controlPoint1: NSPoint(x: 17, y: 22.95), controlPoint2: NSPoint(x: 17.45, y: 22.5))
        documentunlocked2Path.line(to: NSPoint(x: 23, y: 22.5))
        documentunlocked2Path.line(to: NSPoint(x: 17, y: 29.5))
        documentunlocked2Path.line(to: NSPoint(x: 17, y: 23.5))
        documentunlocked2Path.line(to: NSPoint(x: 17, y: 23.5))
        documentunlocked2Path.close()
        documentunlocked2Path.move(to: NSPoint(x: 24.5, y: 7.5))
        documentunlocked2Path.line(to: NSPoint(x: 25, y: 7.5))
        documentunlocked2Path.curve(to: NSPoint(x: 26, y: 6.5), controlPoint1: NSPoint(x: 25.55, y: 7.5), controlPoint2: NSPoint(x: 26, y: 7.05))
        documentunlocked2Path.line(to: NSPoint(x: 26, y: 1.5))
        documentunlocked2Path.curve(to: NSPoint(x: 25, y: 0.5), controlPoint1: NSPoint(x: 26, y: 0.94), controlPoint2: NSPoint(x: 25.55, y: 0.5))
        documentunlocked2Path.line(to: NSPoint(x: 18, y: 0.5))
        documentunlocked2Path.curve(to: NSPoint(x: 17, y: 1.5), controlPoint1: NSPoint(x: 17.45, y: 0.5), controlPoint2: NSPoint(x: 17, y: 0.95))
        documentunlocked2Path.line(to: NSPoint(x: 17, y: 6.5))
        documentunlocked2Path.curve(to: NSPoint(x: 18, y: 7.5), controlPoint1: NSPoint(x: 17, y: 7.06), controlPoint2: NSPoint(x: 17.45, y: 7.5))
        documentunlocked2Path.line(to: NSPoint(x: 18, y: 10))
        documentunlocked2Path.curve(to: NSPoint(x: 21.5, y: 13.5), controlPoint1: NSPoint(x: 18, y: 11.94), controlPoint2: NSPoint(x: 19.57, y: 13.5))
        documentunlocked2Path.curve(to: NSPoint(x: 25, y: 10), controlPoint1: NSPoint(x: 23.43, y: 13.5), controlPoint2: NSPoint(x: 25, y: 11.93))
        documentunlocked2Path.line(to: NSPoint(x: 25, y: 9.5))
        documentunlocked2Path.line(to: NSPoint(x: 24.5, y: 9.5))
        documentunlocked2Path.line(to: NSPoint(x: 24, y: 9.5))
        documentunlocked2Path.line(to: NSPoint(x: 24, y: 9.99))
        documentunlocked2Path.curve(to: NSPoint(x: 21.5, y: 12.5), controlPoint1: NSPoint(x: 24, y: 11.38), controlPoint2: NSPoint(x: 22.89, y: 12.5))
        documentunlocked2Path.curve(to: NSPoint(x: 19, y: 9.99), controlPoint1: NSPoint(x: 20.12, y: 12.5), controlPoint2: NSPoint(x: 19, y: 11.39))
        documentunlocked2Path.line(to: NSPoint(x: 19, y: 7.5))
        documentunlocked2Path.line(to: NSPoint(x: 24, y: 7.5))
        documentunlocked2Path.line(to: NSPoint(x: 24.5, y: 7.5))
        documentunlocked2Path.line(to: NSPoint(x: 24.5, y: 7.5))
        documentunlocked2Path.close()
        documentunlocked2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentunlocked2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentLocked(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-77-document-locked
        //// document-locked 2 Drawing
        let documentlocked2Path = NSBezierPath()
        documentlocked2Path.move(to: NSPoint(x: 23, y: 21.5))
        documentlocked2Path.line(to: NSPoint(x: 18.01, y: 21.5))
        documentlocked2Path.curve(to: NSPoint(x: 16, y: 23.5), controlPoint1: NSPoint(x: 16.9, y: 21.5), controlPoint2: NSPoint(x: 16, y: 22.39))
        documentlocked2Path.line(to: NSPoint(x: 16, y: 29.5))
        documentlocked2Path.line(to: NSPoint(x: 6.01, y: 29.5))
        documentlocked2Path.curve(to: NSPoint(x: 4, y: 27.49), controlPoint1: NSPoint(x: 4.9, y: 29.5), controlPoint2: NSPoint(x: 4, y: 28.6))
        documentlocked2Path.line(to: NSPoint(x: 4, y: 4.51))
        documentlocked2Path.curve(to: NSPoint(x: 6, y: 2.5), controlPoint1: NSPoint(x: 4, y: 3.4), controlPoint2: NSPoint(x: 4.89, y: 2.5))
        documentlocked2Path.line(to: NSPoint(x: 16, y: 2.5))
        documentlocked2Path.line(to: NSPoint(x: 16, y: 7))
        documentlocked2Path.curve(to: NSPoint(x: 17, y: 8.41), controlPoint1: NSPoint(x: 16, y: 7.65), controlPoint2: NSPoint(x: 16.42, y: 8.21))
        documentlocked2Path.line(to: NSPoint(x: 17, y: 9))
        documentlocked2Path.curve(to: NSPoint(x: 21.5, y: 13.5), controlPoint1: NSPoint(x: 17, y: 11.48), controlPoint2: NSPoint(x: 19.01, y: 13.5))
        documentlocked2Path.curve(to: NSPoint(x: 23, y: 13.24), controlPoint1: NSPoint(x: 22.03, y: 13.5), controlPoint2: NSPoint(x: 22.53, y: 13.41))
        documentlocked2Path.line(to: NSPoint(x: 23, y: 21.5))
        documentlocked2Path.line(to: NSPoint(x: 23, y: 21.5))
        documentlocked2Path.close()
        documentlocked2Path.move(to: NSPoint(x: 17, y: 23.5))
        documentlocked2Path.curve(to: NSPoint(x: 17.99, y: 22.5), controlPoint1: NSPoint(x: 17, y: 22.95), controlPoint2: NSPoint(x: 17.45, y: 22.5))
        documentlocked2Path.line(to: NSPoint(x: 23, y: 22.5))
        documentlocked2Path.line(to: NSPoint(x: 17, y: 29.5))
        documentlocked2Path.line(to: NSPoint(x: 17, y: 23.5))
        documentlocked2Path.line(to: NSPoint(x: 17, y: 23.5))
        documentlocked2Path.close()
        documentlocked2Path.move(to: NSPoint(x: 18, y: 8.99))
        documentlocked2Path.curve(to: NSPoint(x: 21.5, y: 12.5), controlPoint1: NSPoint(x: 18, y: 10.93), controlPoint2: NSPoint(x: 19.57, y: 12.5))
        documentlocked2Path.curve(to: NSPoint(x: 25, y: 8.99), controlPoint1: NSPoint(x: 23.43, y: 12.5), controlPoint2: NSPoint(x: 25, y: 10.93))
        documentlocked2Path.line(to: NSPoint(x: 25, y: 7.5))
        documentlocked2Path.curve(to: NSPoint(x: 26, y: 6.5), controlPoint1: NSPoint(x: 25.55, y: 7.5), controlPoint2: NSPoint(x: 26, y: 7.05))
        documentlocked2Path.line(to: NSPoint(x: 26, y: 1.5))
        documentlocked2Path.curve(to: NSPoint(x: 25, y: 0.5), controlPoint1: NSPoint(x: 26, y: 0.94), controlPoint2: NSPoint(x: 25.55, y: 0.5))
        documentlocked2Path.line(to: NSPoint(x: 18, y: 0.5))
        documentlocked2Path.curve(to: NSPoint(x: 17, y: 1.5), controlPoint1: NSPoint(x: 17.45, y: 0.5), controlPoint2: NSPoint(x: 17, y: 0.95))
        documentlocked2Path.line(to: NSPoint(x: 17, y: 6.5))
        documentlocked2Path.curve(to: NSPoint(x: 18, y: 7.5), controlPoint1: NSPoint(x: 17, y: 7.06), controlPoint2: NSPoint(x: 17.45, y: 7.5))
        documentlocked2Path.line(to: NSPoint(x: 18, y: 8.99))
        documentlocked2Path.line(to: NSPoint(x: 18, y: 8.99))
        documentlocked2Path.close()
        documentlocked2Path.move(to: NSPoint(x: 19, y: 8.99))
        documentlocked2Path.curve(to: NSPoint(x: 21.5, y: 11.5), controlPoint1: NSPoint(x: 19, y: 10.39), controlPoint2: NSPoint(x: 20.12, y: 11.5))
        documentlocked2Path.curve(to: NSPoint(x: 24, y: 8.99), controlPoint1: NSPoint(x: 22.89, y: 11.5), controlPoint2: NSPoint(x: 24, y: 10.38))
        documentlocked2Path.line(to: NSPoint(x: 24, y: 7.5))
        documentlocked2Path.line(to: NSPoint(x: 19, y: 7.5))
        documentlocked2Path.line(to: NSPoint(x: 19, y: 8.99))
        documentlocked2Path.line(to: NSPoint(x: 19, y: 8.99))
        documentlocked2Path.close()
        documentlocked2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentlocked2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentError(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-78-document-error
        //// document-error 2 Drawing
        let documenterror2Path = NSBezierPath()
        documenterror2Path.move(to: NSPoint(x: 13.01, y: 2.5))
        documenterror2Path.line(to: NSPoint(x: 6, y: 2.5))
        documenterror2Path.curve(to: NSPoint(x: 4, y: 4.51), controlPoint1: NSPoint(x: 4.89, y: 2.5), controlPoint2: NSPoint(x: 4, y: 3.4))
        documenterror2Path.line(to: NSPoint(x: 4, y: 27.49))
        documenterror2Path.curve(to: NSPoint(x: 6.01, y: 29.5), controlPoint1: NSPoint(x: 4, y: 28.6), controlPoint2: NSPoint(x: 4.9, y: 29.5))
        documenterror2Path.line(to: NSPoint(x: 16, y: 29.5))
        documenterror2Path.line(to: NSPoint(x: 16, y: 23.5))
        documenterror2Path.curve(to: NSPoint(x: 18.01, y: 21.5), controlPoint1: NSPoint(x: 16, y: 22.39), controlPoint2: NSPoint(x: 16.9, y: 21.5))
        documenterror2Path.line(to: NSPoint(x: 23, y: 21.5))
        documenterror2Path.line(to: NSPoint(x: 23, y: 7.57))
        documenterror2Path.line(to: NSPoint(x: 19.5, y: 13.5))
        documenterror2Path.line(to: NSPoint(x: 13.01, y: 2.5))
        documenterror2Path.line(to: NSPoint(x: 13.01, y: 2.5))
        documenterror2Path.line(to: NSPoint(x: 13.01, y: 2.5))
        documenterror2Path.close()
        documenterror2Path.move(to: NSPoint(x: 17, y: 29.5))
        documenterror2Path.line(to: NSPoint(x: 17, y: 23.5))
        documenterror2Path.curve(to: NSPoint(x: 17.99, y: 22.5), controlPoint1: NSPoint(x: 17, y: 22.95), controlPoint2: NSPoint(x: 17.45, y: 22.5))
        documenterror2Path.line(to: NSPoint(x: 23, y: 22.5))
        documenterror2Path.line(to: NSPoint(x: 17, y: 29.5))
        documenterror2Path.line(to: NSPoint(x: 17, y: 29.5))
        documenterror2Path.close()
        documenterror2Path.move(to: NSPoint(x: 19.5, y: 11.5))
        documenterror2Path.line(to: NSPoint(x: 26, y: 0.5))
        documenterror2Path.line(to: NSPoint(x: 13, y: 0.5))
        documenterror2Path.line(to: NSPoint(x: 19.5, y: 11.5))
        documenterror2Path.line(to: NSPoint(x: 19.5, y: 11.5))
        documenterror2Path.close()
        documenterror2Path.move(to: NSPoint(x: 19, y: 7.5))
        documenterror2Path.line(to: NSPoint(x: 19, y: 4.5))
        documenterror2Path.line(to: NSPoint(x: 20, y: 4.5))
        documenterror2Path.line(to: NSPoint(x: 20, y: 7.5))
        documenterror2Path.line(to: NSPoint(x: 19, y: 7.5))
        documenterror2Path.line(to: NSPoint(x: 19, y: 7.5))
        documenterror2Path.close()
        documenterror2Path.move(to: NSPoint(x: 19, y: 3.5))
        documenterror2Path.line(to: NSPoint(x: 19, y: 2.5))
        documenterror2Path.line(to: NSPoint(x: 20, y: 2.5))
        documenterror2Path.line(to: NSPoint(x: 20, y: 3.5))
        documenterror2Path.line(to: NSPoint(x: 19, y: 3.5))
        documenterror2Path.line(to: NSPoint(x: 19, y: 3.5))
        documenterror2Path.close()
        documenterror2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documenterror2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentCancel(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-79-document-cancel
        //// document-cancel 2 Drawing
        let documentcancel2Path = NSBezierPath()
        documentcancel2Path.move(to: NSPoint(x: 20.5, y: 5.29))
        documentcancel2Path.line(to: NSPoint(x: 18.38, y: 3.17))
        documentcancel2Path.line(to: NSPoint(x: 17.67, y: 3.88))
        documentcancel2Path.line(to: NSPoint(x: 19.79, y: 6))
        documentcancel2Path.line(to: NSPoint(x: 17.67, y: 8.12))
        documentcancel2Path.line(to: NSPoint(x: 18.38, y: 8.83))
        documentcancel2Path.line(to: NSPoint(x: 20.5, y: 6.71))
        documentcancel2Path.line(to: NSPoint(x: 22.62, y: 8.83))
        documentcancel2Path.line(to: NSPoint(x: 23.33, y: 8.12))
        documentcancel2Path.line(to: NSPoint(x: 21.21, y: 6))
        documentcancel2Path.line(to: NSPoint(x: 23.33, y: 3.88))
        documentcancel2Path.line(to: NSPoint(x: 22.62, y: 3.17))
        documentcancel2Path.line(to: NSPoint(x: 20.5, y: 5.29))
        documentcancel2Path.line(to: NSPoint(x: 20.5, y: 5.29))
        documentcancel2Path.close()
        documentcancel2Path.move(to: NSPoint(x: 15.02, y: 2.5))
        documentcancel2Path.line(to: NSPoint(x: 6, y: 2.5))
        documentcancel2Path.curve(to: NSPoint(x: 4, y: 4.51), controlPoint1: NSPoint(x: 4.89, y: 2.5), controlPoint2: NSPoint(x: 4, y: 3.4))
        documentcancel2Path.line(to: NSPoint(x: 4, y: 27.49))
        documentcancel2Path.curve(to: NSPoint(x: 6.01, y: 29.5), controlPoint1: NSPoint(x: 4, y: 28.6), controlPoint2: NSPoint(x: 4.9, y: 29.5))
        documentcancel2Path.line(to: NSPoint(x: 16, y: 29.5))
        documentcancel2Path.line(to: NSPoint(x: 16, y: 23.5))
        documentcancel2Path.curve(to: NSPoint(x: 18.01, y: 21.5), controlPoint1: NSPoint(x: 16, y: 22.39), controlPoint2: NSPoint(x: 16.9, y: 21.5))
        documentcancel2Path.line(to: NSPoint(x: 23, y: 21.5))
        documentcancel2Path.line(to: NSPoint(x: 23, y: 12))
        documentcancel2Path.curve(to: NSPoint(x: 20.5, y: 12.5), controlPoint1: NSPoint(x: 22.23, y: 12.32), controlPoint2: NSPoint(x: 21.39, y: 12.5))
        documentcancel2Path.curve(to: NSPoint(x: 14, y: 6), controlPoint1: NSPoint(x: 16.91, y: 12.5), controlPoint2: NSPoint(x: 14, y: 9.59))
        documentcancel2Path.curve(to: NSPoint(x: 15.02, y: 2.5), controlPoint1: NSPoint(x: 14, y: 4.71), controlPoint2: NSPoint(x: 14.37, y: 3.51))
        documentcancel2Path.line(to: NSPoint(x: 15.02, y: 2.5))
        documentcancel2Path.line(to: NSPoint(x: 15.02, y: 2.5))
        documentcancel2Path.close()
        documentcancel2Path.move(to: NSPoint(x: 17, y: 29.5))
        documentcancel2Path.line(to: NSPoint(x: 17, y: 23.5))
        documentcancel2Path.curve(to: NSPoint(x: 17.99, y: 22.5), controlPoint1: NSPoint(x: 17, y: 22.95), controlPoint2: NSPoint(x: 17.45, y: 22.5))
        documentcancel2Path.line(to: NSPoint(x: 23, y: 22.5))
        documentcancel2Path.line(to: NSPoint(x: 17, y: 29.5))
        documentcancel2Path.line(to: NSPoint(x: 17, y: 29.5))
        documentcancel2Path.close()
        documentcancel2Path.move(to: NSPoint(x: 20.5, y: 0.5))
        documentcancel2Path.curve(to: NSPoint(x: 26, y: 6), controlPoint1: NSPoint(x: 23.54, y: 0.5), controlPoint2: NSPoint(x: 26, y: 2.96))
        documentcancel2Path.curve(to: NSPoint(x: 20.5, y: 11.5), controlPoint1: NSPoint(x: 26, y: 9.04), controlPoint2: NSPoint(x: 23.54, y: 11.5))
        documentcancel2Path.curve(to: NSPoint(x: 15, y: 6), controlPoint1: NSPoint(x: 17.46, y: 11.5), controlPoint2: NSPoint(x: 15, y: 9.04))
        documentcancel2Path.curve(to: NSPoint(x: 20.5, y: 0.5), controlPoint1: NSPoint(x: 15, y: 2.96), controlPoint2: NSPoint(x: 17.46, y: 0.5))
        documentcancel2Path.line(to: NSPoint(x: 20.5, y: 0.5))
        documentcancel2Path.close()
        documentcancel2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentcancel2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentChecked(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-80-document-checked
        //// document-checked 2 Drawing
        let documentchecked2Path = NSBezierPath()
        documentchecked2Path.move(to: NSPoint(x: 15.02, y: 2.5))
        documentchecked2Path.line(to: NSPoint(x: 6, y: 2.5))
        documentchecked2Path.curve(to: NSPoint(x: 4, y: 4.51), controlPoint1: NSPoint(x: 4.89, y: 2.5), controlPoint2: NSPoint(x: 4, y: 3.4))
        documentchecked2Path.line(to: NSPoint(x: 4, y: 27.49))
        documentchecked2Path.curve(to: NSPoint(x: 6.01, y: 29.5), controlPoint1: NSPoint(x: 4, y: 28.6), controlPoint2: NSPoint(x: 4.9, y: 29.5))
        documentchecked2Path.line(to: NSPoint(x: 16, y: 29.5))
        documentchecked2Path.line(to: NSPoint(x: 16, y: 23.5))
        documentchecked2Path.curve(to: NSPoint(x: 18.01, y: 21.5), controlPoint1: NSPoint(x: 16, y: 22.39), controlPoint2: NSPoint(x: 16.9, y: 21.5))
        documentchecked2Path.line(to: NSPoint(x: 23, y: 21.5))
        documentchecked2Path.line(to: NSPoint(x: 23, y: 12))
        documentchecked2Path.curve(to: NSPoint(x: 20.5, y: 12.5), controlPoint1: NSPoint(x: 22.23, y: 12.32), controlPoint2: NSPoint(x: 21.39, y: 12.5))
        documentchecked2Path.curve(to: NSPoint(x: 14, y: 6), controlPoint1: NSPoint(x: 16.91, y: 12.5), controlPoint2: NSPoint(x: 14, y: 9.59))
        documentchecked2Path.curve(to: NSPoint(x: 15.02, y: 2.5), controlPoint1: NSPoint(x: 14, y: 4.71), controlPoint2: NSPoint(x: 14.37, y: 3.51))
        documentchecked2Path.line(to: NSPoint(x: 15.02, y: 2.5))
        documentchecked2Path.line(to: NSPoint(x: 15.02, y: 2.5))
        documentchecked2Path.close()
        documentchecked2Path.move(to: NSPoint(x: 17, y: 29.5))
        documentchecked2Path.line(to: NSPoint(x: 17, y: 23.5))
        documentchecked2Path.curve(to: NSPoint(x: 17.99, y: 22.5), controlPoint1: NSPoint(x: 17, y: 22.95), controlPoint2: NSPoint(x: 17.45, y: 22.5))
        documentchecked2Path.line(to: NSPoint(x: 23, y: 22.5))
        documentchecked2Path.line(to: NSPoint(x: 17, y: 29.5))
        documentchecked2Path.line(to: NSPoint(x: 17, y: 29.5))
        documentchecked2Path.close()
        documentchecked2Path.move(to: NSPoint(x: 20.5, y: 0.5))
        documentchecked2Path.curve(to: NSPoint(x: 26, y: 6), controlPoint1: NSPoint(x: 23.54, y: 0.5), controlPoint2: NSPoint(x: 26, y: 2.96))
        documentchecked2Path.curve(to: NSPoint(x: 20.5, y: 11.5), controlPoint1: NSPoint(x: 26, y: 9.04), controlPoint2: NSPoint(x: 23.54, y: 11.5))
        documentchecked2Path.curve(to: NSPoint(x: 15, y: 6), controlPoint1: NSPoint(x: 17.46, y: 11.5), controlPoint2: NSPoint(x: 15, y: 9.04))
        documentchecked2Path.curve(to: NSPoint(x: 20.5, y: 0.5), controlPoint1: NSPoint(x: 15, y: 2.96), controlPoint2: NSPoint(x: 17.46, y: 0.5))
        documentchecked2Path.line(to: NSPoint(x: 20.5, y: 0.5))
        documentchecked2Path.close()
        documentchecked2Path.move(to: NSPoint(x: 20, y: 3.26))
        documentchecked2Path.line(to: NSPoint(x: 17.65, y: 5.61))
        documentchecked2Path.line(to: NSPoint(x: 18.38, y: 6.34))
        documentchecked2Path.line(to: NSPoint(x: 20, y: 4.72))
        documentchecked2Path.line(to: NSPoint(x: 23.12, y: 7.84))
        documentchecked2Path.line(to: NSPoint(x: 23.85, y: 7.11))
        documentchecked2Path.line(to: NSPoint(x: 20, y: 3.26))
        documentchecked2Path.line(to: NSPoint(x: 20, y: 3.26))
        documentchecked2Path.close()
        documentchecked2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentchecked2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentAdd(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-81-document-add
        //// document-add 2 Drawing
        let documentadd2Path = NSBezierPath()
        documentadd2Path.move(to: NSPoint(x: 20, y: 6.5))
        documentadd2Path.line(to: NSPoint(x: 20, y: 9.5))
        documentadd2Path.line(to: NSPoint(x: 21, y: 9.5))
        documentadd2Path.line(to: NSPoint(x: 21, y: 6.5))
        documentadd2Path.line(to: NSPoint(x: 24, y: 6.5))
        documentadd2Path.line(to: NSPoint(x: 24, y: 5.5))
        documentadd2Path.line(to: NSPoint(x: 21, y: 5.5))
        documentadd2Path.line(to: NSPoint(x: 21, y: 2.5))
        documentadd2Path.line(to: NSPoint(x: 20, y: 2.5))
        documentadd2Path.line(to: NSPoint(x: 20, y: 5.5))
        documentadd2Path.line(to: NSPoint(x: 17, y: 5.5))
        documentadd2Path.line(to: NSPoint(x: 17, y: 6.5))
        documentadd2Path.line(to: NSPoint(x: 20, y: 6.5))
        documentadd2Path.line(to: NSPoint(x: 20, y: 6.5))
        documentadd2Path.close()
        documentadd2Path.move(to: NSPoint(x: 15.02, y: 2.5))
        documentadd2Path.line(to: NSPoint(x: 6, y: 2.5))
        documentadd2Path.curve(to: NSPoint(x: 4, y: 4.51), controlPoint1: NSPoint(x: 4.89, y: 2.5), controlPoint2: NSPoint(x: 4, y: 3.4))
        documentadd2Path.line(to: NSPoint(x: 4, y: 27.49))
        documentadd2Path.curve(to: NSPoint(x: 6.01, y: 29.5), controlPoint1: NSPoint(x: 4, y: 28.6), controlPoint2: NSPoint(x: 4.9, y: 29.5))
        documentadd2Path.line(to: NSPoint(x: 16, y: 29.5))
        documentadd2Path.line(to: NSPoint(x: 16, y: 23.5))
        documentadd2Path.curve(to: NSPoint(x: 18.01, y: 21.5), controlPoint1: NSPoint(x: 16, y: 22.39), controlPoint2: NSPoint(x: 16.9, y: 21.5))
        documentadd2Path.line(to: NSPoint(x: 23, y: 21.5))
        documentadd2Path.line(to: NSPoint(x: 23, y: 12))
        documentadd2Path.curve(to: NSPoint(x: 20.5, y: 12.5), controlPoint1: NSPoint(x: 22.23, y: 12.32), controlPoint2: NSPoint(x: 21.39, y: 12.5))
        documentadd2Path.curve(to: NSPoint(x: 14, y: 6), controlPoint1: NSPoint(x: 16.91, y: 12.5), controlPoint2: NSPoint(x: 14, y: 9.59))
        documentadd2Path.curve(to: NSPoint(x: 15.02, y: 2.5), controlPoint1: NSPoint(x: 14, y: 4.71), controlPoint2: NSPoint(x: 14.37, y: 3.51))
        documentadd2Path.line(to: NSPoint(x: 15.02, y: 2.5))
        documentadd2Path.line(to: NSPoint(x: 15.02, y: 2.5))
        documentadd2Path.close()
        documentadd2Path.move(to: NSPoint(x: 17, y: 29.5))
        documentadd2Path.line(to: NSPoint(x: 17, y: 23.5))
        documentadd2Path.curve(to: NSPoint(x: 17.99, y: 22.5), controlPoint1: NSPoint(x: 17, y: 22.95), controlPoint2: NSPoint(x: 17.45, y: 22.5))
        documentadd2Path.line(to: NSPoint(x: 23, y: 22.5))
        documentadd2Path.line(to: NSPoint(x: 17, y: 29.5))
        documentadd2Path.line(to: NSPoint(x: 17, y: 29.5))
        documentadd2Path.close()
        documentadd2Path.move(to: NSPoint(x: 20.5, y: 0.5))
        documentadd2Path.curve(to: NSPoint(x: 26, y: 6), controlPoint1: NSPoint(x: 23.54, y: 0.5), controlPoint2: NSPoint(x: 26, y: 2.96))
        documentadd2Path.curve(to: NSPoint(x: 20.5, y: 11.5), controlPoint1: NSPoint(x: 26, y: 9.04), controlPoint2: NSPoint(x: 23.54, y: 11.5))
        documentadd2Path.curve(to: NSPoint(x: 15, y: 6), controlPoint1: NSPoint(x: 17.46, y: 11.5), controlPoint2: NSPoint(x: 15, y: 9.04))
        documentadd2Path.curve(to: NSPoint(x: 20.5, y: 0.5), controlPoint1: NSPoint(x: 15, y: 2.96), controlPoint2: NSPoint(x: 17.46, y: 0.5))
        documentadd2Path.line(to: NSPoint(x: 20.5, y: 0.5))
        documentadd2Path.close()
        documentadd2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentadd2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentRemove(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-82-document-remove
        //// document-remove 2 Drawing
        let documentremove2Path = NSBezierPath()
        documentremove2Path.move(to: NSPoint(x: 15.02, y: 2.5))
        documentremove2Path.line(to: NSPoint(x: 6, y: 2.5))
        documentremove2Path.curve(to: NSPoint(x: 4, y: 4.51), controlPoint1: NSPoint(x: 4.89, y: 2.5), controlPoint2: NSPoint(x: 4, y: 3.4))
        documentremove2Path.line(to: NSPoint(x: 4, y: 27.49))
        documentremove2Path.curve(to: NSPoint(x: 6.01, y: 29.5), controlPoint1: NSPoint(x: 4, y: 28.6), controlPoint2: NSPoint(x: 4.9, y: 29.5))
        documentremove2Path.line(to: NSPoint(x: 16, y: 29.5))
        documentremove2Path.line(to: NSPoint(x: 16, y: 23.5))
        documentremove2Path.curve(to: NSPoint(x: 18.01, y: 21.5), controlPoint1: NSPoint(x: 16, y: 22.39), controlPoint2: NSPoint(x: 16.9, y: 21.5))
        documentremove2Path.line(to: NSPoint(x: 23, y: 21.5))
        documentremove2Path.line(to: NSPoint(x: 23, y: 12))
        documentremove2Path.curve(to: NSPoint(x: 20.5, y: 12.5), controlPoint1: NSPoint(x: 22.23, y: 12.32), controlPoint2: NSPoint(x: 21.39, y: 12.5))
        documentremove2Path.curve(to: NSPoint(x: 14, y: 6), controlPoint1: NSPoint(x: 16.91, y: 12.5), controlPoint2: NSPoint(x: 14, y: 9.59))
        documentremove2Path.curve(to: NSPoint(x: 15.02, y: 2.5), controlPoint1: NSPoint(x: 14, y: 4.71), controlPoint2: NSPoint(x: 14.37, y: 3.51))
        documentremove2Path.line(to: NSPoint(x: 15.02, y: 2.5))
        documentremove2Path.line(to: NSPoint(x: 15.02, y: 2.5))
        documentremove2Path.close()
        documentremove2Path.move(to: NSPoint(x: 17, y: 29.5))
        documentremove2Path.line(to: NSPoint(x: 17, y: 23.5))
        documentremove2Path.curve(to: NSPoint(x: 17.99, y: 22.5), controlPoint1: NSPoint(x: 17, y: 22.95), controlPoint2: NSPoint(x: 17.45, y: 22.5))
        documentremove2Path.line(to: NSPoint(x: 23, y: 22.5))
        documentremove2Path.line(to: NSPoint(x: 17, y: 29.5))
        documentremove2Path.line(to: NSPoint(x: 17, y: 29.5))
        documentremove2Path.close()
        documentremove2Path.move(to: NSPoint(x: 20.5, y: 0.5))
        documentremove2Path.curve(to: NSPoint(x: 26, y: 6), controlPoint1: NSPoint(x: 23.54, y: 0.5), controlPoint2: NSPoint(x: 26, y: 2.96))
        documentremove2Path.curve(to: NSPoint(x: 20.5, y: 11.5), controlPoint1: NSPoint(x: 26, y: 9.04), controlPoint2: NSPoint(x: 23.54, y: 11.5))
        documentremove2Path.curve(to: NSPoint(x: 15, y: 6), controlPoint1: NSPoint(x: 17.46, y: 11.5), controlPoint2: NSPoint(x: 15, y: 9.04))
        documentremove2Path.curve(to: NSPoint(x: 20.5, y: 0.5), controlPoint1: NSPoint(x: 15, y: 2.96), controlPoint2: NSPoint(x: 17.46, y: 0.5))
        documentremove2Path.line(to: NSPoint(x: 20.5, y: 0.5))
        documentremove2Path.close()
        documentremove2Path.move(to: NSPoint(x: 17, y: 6.5))
        documentremove2Path.line(to: NSPoint(x: 17, y: 5.5))
        documentremove2Path.line(to: NSPoint(x: 24, y: 5.5))
        documentremove2Path.line(to: NSPoint(x: 24, y: 6.5))
        documentremove2Path.line(to: NSPoint(x: 17, y: 6.5))
        documentremove2Path.line(to: NSPoint(x: 17, y: 6.5))
        documentremove2Path.close()
        documentremove2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentremove2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentForbidden(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-83-document-forbidden
        //// document-forbidden 2 Drawing
        let documentforbidden2Path = NSBezierPath()
        documentforbidden2Path.move(to: NSPoint(x: 24.77, y: 9.47))
        documentforbidden2Path.curve(to: NSPoint(x: 26, y: 6), controlPoint1: NSPoint(x: 25.54, y: 8.52), controlPoint2: NSPoint(x: 26, y: 7.32))
        documentforbidden2Path.curve(to: NSPoint(x: 20.5, y: 0.5), controlPoint1: NSPoint(x: 26, y: 2.96), controlPoint2: NSPoint(x: 23.54, y: 0.5))
        documentforbidden2Path.curve(to: NSPoint(x: 17.03, y: 1.73), controlPoint1: NSPoint(x: 19.18, y: 0.5), controlPoint2: NSPoint(x: 17.98, y: 0.96))
        documentforbidden2Path.line(to: NSPoint(x: 24.77, y: 9.47))
        documentforbidden2Path.line(to: NSPoint(x: 24.77, y: 9.47))
        documentforbidden2Path.close()
        documentforbidden2Path.move(to: NSPoint(x: 24.07, y: 10.18))
        documentforbidden2Path.curve(to: NSPoint(x: 20.5, y: 11.5), controlPoint1: NSPoint(x: 23.11, y: 11), controlPoint2: NSPoint(x: 21.86, y: 11.5))
        documentforbidden2Path.curve(to: NSPoint(x: 15, y: 6), controlPoint1: NSPoint(x: 17.46, y: 11.5), controlPoint2: NSPoint(x: 15, y: 9.04))
        documentforbidden2Path.curve(to: NSPoint(x: 16.32, y: 2.43), controlPoint1: NSPoint(x: 15, y: 4.64), controlPoint2: NSPoint(x: 15.5, y: 3.39))
        documentforbidden2Path.line(to: NSPoint(x: 24.07, y: 10.18))
        documentforbidden2Path.line(to: NSPoint(x: 24.07, y: 10.18))
        documentforbidden2Path.close()
        documentforbidden2Path.move(to: NSPoint(x: 15.02, y: 2.5))
        documentforbidden2Path.line(to: NSPoint(x: 6, y: 2.5))
        documentforbidden2Path.curve(to: NSPoint(x: 4, y: 4.51), controlPoint1: NSPoint(x: 4.89, y: 2.5), controlPoint2: NSPoint(x: 4, y: 3.4))
        documentforbidden2Path.line(to: NSPoint(x: 4, y: 27.49))
        documentforbidden2Path.curve(to: NSPoint(x: 6.01, y: 29.5), controlPoint1: NSPoint(x: 4, y: 28.6), controlPoint2: NSPoint(x: 4.9, y: 29.5))
        documentforbidden2Path.line(to: NSPoint(x: 16, y: 29.5))
        documentforbidden2Path.line(to: NSPoint(x: 16, y: 23.5))
        documentforbidden2Path.curve(to: NSPoint(x: 18.01, y: 21.5), controlPoint1: NSPoint(x: 16, y: 22.39), controlPoint2: NSPoint(x: 16.9, y: 21.5))
        documentforbidden2Path.line(to: NSPoint(x: 23, y: 21.5))
        documentforbidden2Path.line(to: NSPoint(x: 23, y: 12))
        documentforbidden2Path.curve(to: NSPoint(x: 20.5, y: 12.5), controlPoint1: NSPoint(x: 22.23, y: 12.32), controlPoint2: NSPoint(x: 21.39, y: 12.5))
        documentforbidden2Path.curve(to: NSPoint(x: 14, y: 6), controlPoint1: NSPoint(x: 16.91, y: 12.5), controlPoint2: NSPoint(x: 14, y: 9.59))
        documentforbidden2Path.curve(to: NSPoint(x: 15.02, y: 2.5), controlPoint1: NSPoint(x: 14, y: 4.71), controlPoint2: NSPoint(x: 14.37, y: 3.51))
        documentforbidden2Path.line(to: NSPoint(x: 15.02, y: 2.5))
        documentforbidden2Path.line(to: NSPoint(x: 15.02, y: 2.5))
        documentforbidden2Path.close()
        documentforbidden2Path.move(to: NSPoint(x: 17, y: 29.5))
        documentforbidden2Path.line(to: NSPoint(x: 17, y: 23.5))
        documentforbidden2Path.curve(to: NSPoint(x: 17.99, y: 22.5), controlPoint1: NSPoint(x: 17, y: 22.95), controlPoint2: NSPoint(x: 17.45, y: 22.5))
        documentforbidden2Path.line(to: NSPoint(x: 23, y: 22.5))
        documentforbidden2Path.line(to: NSPoint(x: 17, y: 29.5))
        documentforbidden2Path.line(to: NSPoint(x: 17, y: 29.5))
        documentforbidden2Path.close()
        documentforbidden2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentforbidden2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentInformation(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-84-document-information
        //// document-information 2 Drawing
        let documentinformation2Path = NSBezierPath()
        documentinformation2Path.move(to: NSPoint(x: 15.02, y: 2.5))
        documentinformation2Path.line(to: NSPoint(x: 6, y: 2.5))
        documentinformation2Path.curve(to: NSPoint(x: 4, y: 4.51), controlPoint1: NSPoint(x: 4.89, y: 2.5), controlPoint2: NSPoint(x: 4, y: 3.4))
        documentinformation2Path.line(to: NSPoint(x: 4, y: 27.49))
        documentinformation2Path.curve(to: NSPoint(x: 6.01, y: 29.5), controlPoint1: NSPoint(x: 4, y: 28.6), controlPoint2: NSPoint(x: 4.9, y: 29.5))
        documentinformation2Path.line(to: NSPoint(x: 16, y: 29.5))
        documentinformation2Path.line(to: NSPoint(x: 16, y: 23.5))
        documentinformation2Path.curve(to: NSPoint(x: 18.01, y: 21.5), controlPoint1: NSPoint(x: 16, y: 22.39), controlPoint2: NSPoint(x: 16.9, y: 21.5))
        documentinformation2Path.line(to: NSPoint(x: 23, y: 21.5))
        documentinformation2Path.line(to: NSPoint(x: 23, y: 12))
        documentinformation2Path.curve(to: NSPoint(x: 20.5, y: 12.5), controlPoint1: NSPoint(x: 22.23, y: 12.32), controlPoint2: NSPoint(x: 21.39, y: 12.5))
        documentinformation2Path.curve(to: NSPoint(x: 14, y: 6), controlPoint1: NSPoint(x: 16.91, y: 12.5), controlPoint2: NSPoint(x: 14, y: 9.59))
        documentinformation2Path.curve(to: NSPoint(x: 15.02, y: 2.5), controlPoint1: NSPoint(x: 14, y: 4.71), controlPoint2: NSPoint(x: 14.37, y: 3.51))
        documentinformation2Path.line(to: NSPoint(x: 15.02, y: 2.5))
        documentinformation2Path.line(to: NSPoint(x: 15.02, y: 2.5))
        documentinformation2Path.close()
        documentinformation2Path.move(to: NSPoint(x: 17, y: 29.5))
        documentinformation2Path.line(to: NSPoint(x: 17, y: 23.5))
        documentinformation2Path.curve(to: NSPoint(x: 17.99, y: 22.5), controlPoint1: NSPoint(x: 17, y: 22.95), controlPoint2: NSPoint(x: 17.45, y: 22.5))
        documentinformation2Path.line(to: NSPoint(x: 23, y: 22.5))
        documentinformation2Path.line(to: NSPoint(x: 17, y: 29.5))
        documentinformation2Path.line(to: NSPoint(x: 17, y: 29.5))
        documentinformation2Path.close()
        documentinformation2Path.move(to: NSPoint(x: 20.5, y: 0.5))
        documentinformation2Path.curve(to: NSPoint(x: 26, y: 6), controlPoint1: NSPoint(x: 23.54, y: 0.5), controlPoint2: NSPoint(x: 26, y: 2.96))
        documentinformation2Path.curve(to: NSPoint(x: 20.5, y: 11.5), controlPoint1: NSPoint(x: 26, y: 9.04), controlPoint2: NSPoint(x: 23.54, y: 11.5))
        documentinformation2Path.curve(to: NSPoint(x: 15, y: 6), controlPoint1: NSPoint(x: 17.46, y: 11.5), controlPoint2: NSPoint(x: 15, y: 9.04))
        documentinformation2Path.curve(to: NSPoint(x: 20.5, y: 0.5), controlPoint1: NSPoint(x: 15, y: 2.96), controlPoint2: NSPoint(x: 17.46, y: 0.5))
        documentinformation2Path.line(to: NSPoint(x: 20.5, y: 0.5))
        documentinformation2Path.close()
        documentinformation2Path.move(to: NSPoint(x: 19, y: 6.5))
        documentinformation2Path.line(to: NSPoint(x: 19, y: 5.5))
        documentinformation2Path.line(to: NSPoint(x: 20, y: 5.5))
        documentinformation2Path.line(to: NSPoint(x: 20, y: 4.5))
        documentinformation2Path.line(to: NSPoint(x: 19, y: 4.5))
        documentinformation2Path.line(to: NSPoint(x: 19, y: 3.5))
        documentinformation2Path.line(to: NSPoint(x: 21, y: 3.5))
        documentinformation2Path.line(to: NSPoint(x: 22, y: 3.5))
        documentinformation2Path.line(to: NSPoint(x: 22, y: 4.5))
        documentinformation2Path.line(to: NSPoint(x: 21, y: 4.5))
        documentinformation2Path.line(to: NSPoint(x: 21, y: 6.5))
        documentinformation2Path.line(to: NSPoint(x: 19, y: 6.5))
        documentinformation2Path.line(to: NSPoint(x: 19, y: 6.5))
        documentinformation2Path.close()
        documentinformation2Path.move(to: NSPoint(x: 20, y: 8.5))
        documentinformation2Path.line(to: NSPoint(x: 20, y: 7.5))
        documentinformation2Path.line(to: NSPoint(x: 21, y: 7.5))
        documentinformation2Path.line(to: NSPoint(x: 21, y: 8.5))
        documentinformation2Path.line(to: NSPoint(x: 20, y: 8.5))
        documentinformation2Path.line(to: NSPoint(x: 20, y: 8.5))
        documentinformation2Path.close()
        documentinformation2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentinformation2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawFolderInformation(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-85-folder-information
        //// folder-information 2 Drawing
        let folderinformation2Path = NSBezierPath()
        folderinformation2Path.move(to: NSPoint(x: 19.71, y: 5.22))
        folderinformation2Path.line(to: NSPoint(x: 1.87, y: 5.22))
        folderinformation2Path.curve(to: NSPoint(x: 0, y: 7.12), controlPoint1: NSPoint(x: 0.84, y: 5.22), controlPoint2: NSPoint(x: 0, y: 6.07))
        folderinformation2Path.line(to: NSPoint(x: 0, y: 24.39))
        folderinformation2Path.curve(to: NSPoint(x: 1.88, y: 26.3), controlPoint1: NSPoint(x: 0, y: 25.45), controlPoint2: NSPoint(x: 0.84, y: 26.3))
        folderinformation2Path.line(to: NSPoint(x: 12.19, y: 26.3))
        folderinformation2Path.line(to: NSPoint(x: 14.06, y: 22.47))
        folderinformation2Path.line(to: NSPoint(x: 25.31, y: 22.47))
        folderinformation2Path.curve(to: NSPoint(x: 27.19, y: 20.55), controlPoint1: NSPoint(x: 26.35, y: 22.47), controlPoint2: NSPoint(x: 27.19, y: 21.61))
        folderinformation2Path.line(to: NSPoint(x: 27.19, y: 14.32))
        folderinformation2Path.curve(to: NSPoint(x: 24.84, y: 14.8), controlPoint1: NSPoint(x: 26.47, y: 14.63), controlPoint2: NSPoint(x: 25.67, y: 14.8))
        folderinformation2Path.curve(to: NSPoint(x: 18.75, y: 8.57), controlPoint1: NSPoint(x: 21.48, y: 14.8), controlPoint2: NSPoint(x: 18.75, y: 12.01))
        folderinformation2Path.curve(to: NSPoint(x: 19.71, y: 5.22), controlPoint1: NSPoint(x: 18.75, y: 7.34), controlPoint2: NSPoint(x: 19.1, y: 6.18))
        folderinformation2Path.line(to: NSPoint(x: 19.71, y: 5.22))
        folderinformation2Path.line(to: NSPoint(x: 19.71, y: 5.22))
        folderinformation2Path.close()
        folderinformation2Path.move(to: NSPoint(x: 0, y: 18.63))
        folderinformation2Path.line(to: NSPoint(x: 0, y: 17.68))
        folderinformation2Path.line(to: NSPoint(x: 27.19, y: 17.68))
        folderinformation2Path.line(to: NSPoint(x: 27.19, y: 18.63))
        folderinformation2Path.line(to: NSPoint(x: 0, y: 18.63))
        folderinformation2Path.line(to: NSPoint(x: 0, y: 18.63))
        folderinformation2Path.close()
        folderinformation2Path.move(to: NSPoint(x: 24.84, y: 3.3))
        folderinformation2Path.curve(to: NSPoint(x: 30, y: 8.57), controlPoint1: NSPoint(x: 27.69, y: 3.3), controlPoint2: NSPoint(x: 30, y: 5.66))
        folderinformation2Path.curve(to: NSPoint(x: 24.84, y: 13.84), controlPoint1: NSPoint(x: 30, y: 11.48), controlPoint2: NSPoint(x: 27.69, y: 13.84))
        folderinformation2Path.curve(to: NSPoint(x: 19.69, y: 8.57), controlPoint1: NSPoint(x: 22, y: 13.84), controlPoint2: NSPoint(x: 19.69, y: 11.48))
        folderinformation2Path.curve(to: NSPoint(x: 24.84, y: 3.3), controlPoint1: NSPoint(x: 19.69, y: 5.66), controlPoint2: NSPoint(x: 22, y: 3.3))
        folderinformation2Path.line(to: NSPoint(x: 24.84, y: 3.3))
        folderinformation2Path.close()
        folderinformation2Path.move(to: NSPoint(x: 23.44, y: 9.05))
        folderinformation2Path.line(to: NSPoint(x: 23.44, y: 8.09))
        folderinformation2Path.line(to: NSPoint(x: 24.38, y: 8.09))
        folderinformation2Path.line(to: NSPoint(x: 24.38, y: 7.13))
        folderinformation2Path.line(to: NSPoint(x: 23.44, y: 7.13))
        folderinformation2Path.line(to: NSPoint(x: 23.44, y: 6.17))
        folderinformation2Path.line(to: NSPoint(x: 25.31, y: 6.17))
        folderinformation2Path.line(to: NSPoint(x: 26.25, y: 6.17))
        folderinformation2Path.line(to: NSPoint(x: 26.25, y: 7.13))
        folderinformation2Path.line(to: NSPoint(x: 25.31, y: 7.13))
        folderinformation2Path.line(to: NSPoint(x: 25.31, y: 9.05))
        folderinformation2Path.line(to: NSPoint(x: 23.44, y: 9.05))
        folderinformation2Path.line(to: NSPoint(x: 23.44, y: 9.05))
        folderinformation2Path.close()
        folderinformation2Path.move(to: NSPoint(x: 24.38, y: 10.97))
        folderinformation2Path.line(to: NSPoint(x: 24.38, y: 10.01))
        folderinformation2Path.line(to: NSPoint(x: 25.31, y: 10.01))
        folderinformation2Path.line(to: NSPoint(x: 25.31, y: 10.97))
        folderinformation2Path.line(to: NSPoint(x: 24.38, y: 10.97))
        folderinformation2Path.line(to: NSPoint(x: 24.38, y: 10.97))
        folderinformation2Path.close()
        folderinformation2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        folderinformation2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentList(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-86-document-list
        //// document-list 2 Drawing
        let documentlist2Path = NSBezierPath()
        documentlist2Path.move(to: NSPoint(x: 17.5, y: 28.5))
        documentlist2Path.line(to: NSPoint(x: 7.51, y: 28.5))
        documentlist2Path.curve(to: NSPoint(x: 5.5, y: 26.49), controlPoint1: NSPoint(x: 6.4, y: 28.5), controlPoint2: NSPoint(x: 5.5, y: 27.6))
        documentlist2Path.line(to: NSPoint(x: 5.5, y: 3.51))
        documentlist2Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        documentlist2Path.line(to: NSPoint(x: 22.5, y: 1.5))
        documentlist2Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        documentlist2Path.line(to: NSPoint(x: 24.5, y: 20.5))
        documentlist2Path.line(to: NSPoint(x: 19.51, y: 20.5))
        documentlist2Path.curve(to: NSPoint(x: 17.5, y: 22.5), controlPoint1: NSPoint(x: 18.4, y: 20.5), controlPoint2: NSPoint(x: 17.5, y: 21.39))
        documentlist2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentlist2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentlist2Path.close()
        documentlist2Path.move(to: NSPoint(x: 18.5, y: 28.5))
        documentlist2Path.line(to: NSPoint(x: 18.5, y: 22.5))
        documentlist2Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        documentlist2Path.line(to: NSPoint(x: 24.5, y: 21.5))
        documentlist2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentlist2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentlist2Path.close()
        documentlist2Path.move(to: NSPoint(x: 13.5, y: 17.5))
        documentlist2Path.line(to: NSPoint(x: 13.5, y: 16.5))
        documentlist2Path.line(to: NSPoint(x: 21.5, y: 16.5))
        documentlist2Path.line(to: NSPoint(x: 21.5, y: 17.5))
        documentlist2Path.line(to: NSPoint(x: 13.5, y: 17.5))
        documentlist2Path.line(to: NSPoint(x: 13.5, y: 17.5))
        documentlist2Path.close()
        documentlist2Path.move(to: NSPoint(x: 8.5, y: 18.5))
        documentlist2Path.line(to: NSPoint(x: 8.5, y: 15.5))
        documentlist2Path.line(to: NSPoint(x: 11.5, y: 15.5))
        documentlist2Path.line(to: NSPoint(x: 11.5, y: 18.5))
        documentlist2Path.line(to: NSPoint(x: 8.5, y: 18.5))
        documentlist2Path.line(to: NSPoint(x: 8.5, y: 18.5))
        documentlist2Path.close()
        documentlist2Path.move(to: NSPoint(x: 9.5, y: 17.5))
        documentlist2Path.line(to: NSPoint(x: 9.5, y: 16.5))
        documentlist2Path.line(to: NSPoint(x: 10.5, y: 16.5))
        documentlist2Path.line(to: NSPoint(x: 10.5, y: 17.5))
        documentlist2Path.line(to: NSPoint(x: 9.5, y: 17.5))
        documentlist2Path.line(to: NSPoint(x: 9.5, y: 17.5))
        documentlist2Path.close()
        documentlist2Path.move(to: NSPoint(x: 8.5, y: 13.5))
        documentlist2Path.line(to: NSPoint(x: 8.5, y: 10.5))
        documentlist2Path.line(to: NSPoint(x: 11.5, y: 10.5))
        documentlist2Path.line(to: NSPoint(x: 11.5, y: 13.5))
        documentlist2Path.line(to: NSPoint(x: 8.5, y: 13.5))
        documentlist2Path.line(to: NSPoint(x: 8.5, y: 13.5))
        documentlist2Path.close()
        documentlist2Path.move(to: NSPoint(x: 9.5, y: 12.5))
        documentlist2Path.line(to: NSPoint(x: 9.5, y: 11.5))
        documentlist2Path.line(to: NSPoint(x: 10.5, y: 11.5))
        documentlist2Path.line(to: NSPoint(x: 10.5, y: 12.5))
        documentlist2Path.line(to: NSPoint(x: 9.5, y: 12.5))
        documentlist2Path.line(to: NSPoint(x: 9.5, y: 12.5))
        documentlist2Path.close()
        documentlist2Path.move(to: NSPoint(x: 13.5, y: 12.5))
        documentlist2Path.line(to: NSPoint(x: 13.5, y: 11.5))
        documentlist2Path.line(to: NSPoint(x: 21.5, y: 11.5))
        documentlist2Path.line(to: NSPoint(x: 21.5, y: 12.5))
        documentlist2Path.line(to: NSPoint(x: 13.5, y: 12.5))
        documentlist2Path.line(to: NSPoint(x: 13.5, y: 12.5))
        documentlist2Path.close()
        documentlist2Path.move(to: NSPoint(x: 8.5, y: 8.5))
        documentlist2Path.line(to: NSPoint(x: 8.5, y: 5.5))
        documentlist2Path.line(to: NSPoint(x: 11.5, y: 5.5))
        documentlist2Path.line(to: NSPoint(x: 11.5, y: 8.5))
        documentlist2Path.line(to: NSPoint(x: 8.5, y: 8.5))
        documentlist2Path.line(to: NSPoint(x: 8.5, y: 8.5))
        documentlist2Path.close()
        documentlist2Path.move(to: NSPoint(x: 9.5, y: 7.5))
        documentlist2Path.line(to: NSPoint(x: 9.5, y: 6.5))
        documentlist2Path.line(to: NSPoint(x: 10.5, y: 6.5))
        documentlist2Path.line(to: NSPoint(x: 10.5, y: 7.5))
        documentlist2Path.line(to: NSPoint(x: 9.5, y: 7.5))
        documentlist2Path.line(to: NSPoint(x: 9.5, y: 7.5))
        documentlist2Path.close()
        documentlist2Path.move(to: NSPoint(x: 13.5, y: 7.5))
        documentlist2Path.line(to: NSPoint(x: 13.5, y: 6.5))
        documentlist2Path.line(to: NSPoint(x: 21.5, y: 6.5))
        documentlist2Path.line(to: NSPoint(x: 21.5, y: 7.5))
        documentlist2Path.line(to: NSPoint(x: 13.5, y: 7.5))
        documentlist2Path.line(to: NSPoint(x: 13.5, y: 7.5))
        documentlist2Path.close()
        documentlist2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentlist2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentFont(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-
        //// icon-87-document-font 2
        //// document-font 2 Drawing
        let documentfont2Path = NSBezierPath()
        documentfont2Path.move(to: NSPoint(x: 20.5, y: 6))
        documentfont2Path.curve(to: NSPoint(x: 19, y: 5.5), controlPoint1: NSPoint(x: 20.08, y: 5.69), controlPoint2: NSPoint(x: 19.56, y: 5.5))
        documentfont2Path.curve(to: NSPoint(x: 16.5, y: 8), controlPoint1: NSPoint(x: 17.62, y: 5.5), controlPoint2: NSPoint(x: 16.5, y: 6.62))
        documentfont2Path.curve(to: NSPoint(x: 19, y: 10.5), controlPoint1: NSPoint(x: 16.5, y: 9.38), controlPoint2: NSPoint(x: 17.62, y: 10.5))
        documentfont2Path.curve(to: NSPoint(x: 20.5, y: 10), controlPoint1: NSPoint(x: 19.56, y: 10.5), controlPoint2: NSPoint(x: 20.08, y: 10.31))
        documentfont2Path.line(to: NSPoint(x: 20.5, y: 10.5))
        documentfont2Path.line(to: NSPoint(x: 21.5, y: 10.5))
        documentfont2Path.line(to: NSPoint(x: 21.5, y: 5.5))
        documentfont2Path.line(to: NSPoint(x: 20.5, y: 5.5))
        documentfont2Path.line(to: NSPoint(x: 20.5, y: 6))
        documentfont2Path.line(to: NSPoint(x: 20.5, y: 6))
        documentfont2Path.close()
        documentfont2Path.move(to: NSPoint(x: 13.43, y: 8.5))
        documentfont2Path.line(to: NSPoint(x: 14.5, y: 5.5))
        documentfont2Path.line(to: NSPoint(x: 15.5, y: 5.5))
        documentfont2Path.line(to: NSPoint(x: 12.5, y: 13.5))
        documentfont2Path.line(to: NSPoint(x: 11.5, y: 13.5))
        documentfont2Path.line(to: NSPoint(x: 8.5, y: 5.5))
        documentfont2Path.line(to: NSPoint(x: 9.5, y: 5.5))
        documentfont2Path.line(to: NSPoint(x: 9.5, y: 5.5))
        documentfont2Path.line(to: NSPoint(x: 10.57, y: 8.5))
        documentfont2Path.line(to: NSPoint(x: 13.43, y: 8.5))
        documentfont2Path.line(to: NSPoint(x: 13.43, y: 8.5))
        documentfont2Path.line(to: NSPoint(x: 13.43, y: 8.5))
        documentfont2Path.close()
        documentfont2Path.move(to: NSPoint(x: 13.07, y: 9.5))
        documentfont2Path.line(to: NSPoint(x: 12, y: 12.5))
        documentfont2Path.line(to: NSPoint(x: 10.93, y: 9.5))
        documentfont2Path.line(to: NSPoint(x: 13.07, y: 9.5))
        documentfont2Path.line(to: NSPoint(x: 13.07, y: 9.5))
        documentfont2Path.line(to: NSPoint(x: 13.07, y: 9.5))
        documentfont2Path.close()
        documentfont2Path.move(to: NSPoint(x: 17.5, y: 28.5))
        documentfont2Path.line(to: NSPoint(x: 7.51, y: 28.5))
        documentfont2Path.curve(to: NSPoint(x: 5.5, y: 26.49), controlPoint1: NSPoint(x: 6.4, y: 28.5), controlPoint2: NSPoint(x: 5.5, y: 27.6))
        documentfont2Path.line(to: NSPoint(x: 5.5, y: 3.51))
        documentfont2Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        documentfont2Path.line(to: NSPoint(x: 22.5, y: 1.5))
        documentfont2Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        documentfont2Path.line(to: NSPoint(x: 24.5, y: 20.5))
        documentfont2Path.line(to: NSPoint(x: 19.51, y: 20.5))
        documentfont2Path.curve(to: NSPoint(x: 17.5, y: 22.5), controlPoint1: NSPoint(x: 18.4, y: 20.5), controlPoint2: NSPoint(x: 17.5, y: 21.39))
        documentfont2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentfont2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentfont2Path.close()
        documentfont2Path.move(to: NSPoint(x: 18.5, y: 28.5))
        documentfont2Path.line(to: NSPoint(x: 18.5, y: 22.5))
        documentfont2Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        documentfont2Path.line(to: NSPoint(x: 24.5, y: 21.5))
        documentfont2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentfont2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentfont2Path.close()
        documentfont2Path.move(to: NSPoint(x: 19, y: 6.5))
        documentfont2Path.curve(to: NSPoint(x: 20.5, y: 8), controlPoint1: NSPoint(x: 19.83, y: 6.5), controlPoint2: NSPoint(x: 20.5, y: 7.17))
        documentfont2Path.curve(to: NSPoint(x: 19, y: 9.5), controlPoint1: NSPoint(x: 20.5, y: 8.83), controlPoint2: NSPoint(x: 19.83, y: 9.5))
        documentfont2Path.curve(to: NSPoint(x: 17.5, y: 8), controlPoint1: NSPoint(x: 18.17, y: 9.5), controlPoint2: NSPoint(x: 17.5, y: 8.83))
        documentfont2Path.curve(to: NSPoint(x: 19, y: 6.5), controlPoint1: NSPoint(x: 17.5, y: 7.17), controlPoint2: NSPoint(x: 18.17, y: 6.5))
        documentfont2Path.line(to: NSPoint(x: 19, y: 6.5))
        documentfont2Path.close()
        documentfont2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentfont2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawInbox(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-88-inbox
        //// inbox 2 Drawing
        let inbox2Path = NSBezierPath()
        inbox2Path.move(to: NSPoint(x: 10.5, y: 15.5))
        inbox2Path.line(to: NSPoint(x: 3.72, y: 15.5))
        inbox2Path.line(to: NSPoint(x: 8.1, y: 22.5))
        inbox2Path.line(to: NSPoint(x: 21.9, y: 22.5))
        inbox2Path.line(to: NSPoint(x: 26.28, y: 15.5))
        inbox2Path.line(to: NSPoint(x: 19.5, y: 15.5))
        inbox2Path.line(to: NSPoint(x: 19.5, y: 13.51))
        inbox2Path.curve(to: NSPoint(x: 17.5, y: 11.5), controlPoint1: NSPoint(x: 19.5, y: 12.39), controlPoint2: NSPoint(x: 18.61, y: 11.5))
        inbox2Path.line(to: NSPoint(x: 12.5, y: 11.5))
        inbox2Path.curve(to: NSPoint(x: 10.5, y: 13.51), controlPoint1: NSPoint(x: 11.4, y: 11.5), controlPoint2: NSPoint(x: 10.5, y: 12.4))
        inbox2Path.line(to: NSPoint(x: 10.5, y: 15.5))
        inbox2Path.line(to: NSPoint(x: 10.5, y: 15.5))
        inbox2Path.close()
        inbox2Path.move(to: NSPoint(x: 2.5, y: 15.5))
        inbox2Path.line(to: NSPoint(x: 7.5, y: 23.5))
        inbox2Path.line(to: NSPoint(x: 22.5, y: 23.5))
        inbox2Path.line(to: NSPoint(x: 27.5, y: 15.5))
        inbox2Path.line(to: NSPoint(x: 27.5, y: 14))
        inbox2Path.line(to: NSPoint(x: 27.5, y: 6.5))
        inbox2Path.line(to: NSPoint(x: 2.5, y: 6.5))
        inbox2Path.line(to: NSPoint(x: 2.5, y: 15.5))
        inbox2Path.line(to: NSPoint(x: 2.5, y: 15.5))
        inbox2Path.close()
        inbox2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        inbox2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawInboxes(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-89-inboxes
        //// inboxes 2 Drawing
        let inboxes2Path = NSBezierPath()
        inboxes2Path.move(to: NSPoint(x: 27.5, y: 11.5))
        inboxes2Path.line(to: NSPoint(x: 27.5, y: 18))
        inboxes2Path.line(to: NSPoint(x: 27.5, y: 19.5))
        inboxes2Path.line(to: NSPoint(x: 22.5, y: 27.5))
        inboxes2Path.line(to: NSPoint(x: 7.5, y: 27.5))
        inboxes2Path.line(to: NSPoint(x: 2.5, y: 19.5))
        inboxes2Path.line(to: NSPoint(x: 2.5, y: 11.5))
        inboxes2Path.line(to: NSPoint(x: 27.5, y: 11.5))
        inboxes2Path.line(to: NSPoint(x: 27.5, y: 11.5))
        inboxes2Path.close()
        inboxes2Path.move(to: NSPoint(x: 10.5, y: 10.5))
        inboxes2Path.line(to: NSPoint(x: 2.5, y: 10.5))
        inboxes2Path.line(to: NSPoint(x: 2.5, y: 2.5))
        inboxes2Path.line(to: NSPoint(x: 27.5, y: 2.5))
        inboxes2Path.line(to: NSPoint(x: 27.5, y: 10.5))
        inboxes2Path.line(to: NSPoint(x: 27.5, y: 10.5))
        inboxes2Path.line(to: NSPoint(x: 19.5, y: 10.5))
        inboxes2Path.line(to: NSPoint(x: 19.5, y: 9))
        inboxes2Path.curve(to: NSPoint(x: 17.5, y: 6.5), controlPoint1: NSPoint(x: 19.5, y: 7.61), controlPoint2: NSPoint(x: 18.61, y: 6.5))
        inboxes2Path.line(to: NSPoint(x: 12.5, y: 6.5))
        inboxes2Path.curve(to: NSPoint(x: 10.5, y: 9), controlPoint1: NSPoint(x: 11.4, y: 6.5), controlPoint2: NSPoint(x: 10.5, y: 7.62))
        inboxes2Path.line(to: NSPoint(x: 10.5, y: 10.5))
        inboxes2Path.line(to: NSPoint(x: 10.5, y: 10.5))
        inboxes2Path.close()
        inboxes2Path.move(to: NSPoint(x: 10.5, y: 19.5))
        inboxes2Path.line(to: NSPoint(x: 3.72, y: 19.5))
        inboxes2Path.line(to: NSPoint(x: 8.1, y: 26.5))
        inboxes2Path.line(to: NSPoint(x: 21.9, y: 26.5))
        inboxes2Path.line(to: NSPoint(x: 26.28, y: 19.5))
        inboxes2Path.line(to: NSPoint(x: 19.5, y: 19.5))
        inboxes2Path.line(to: NSPoint(x: 19.5, y: 17.51))
        inboxes2Path.curve(to: NSPoint(x: 17.5, y: 15.5), controlPoint1: NSPoint(x: 19.5, y: 16.39), controlPoint2: NSPoint(x: 18.61, y: 15.5))
        inboxes2Path.line(to: NSPoint(x: 12.5, y: 15.5))
        inboxes2Path.curve(to: NSPoint(x: 10.5, y: 17.51), controlPoint1: NSPoint(x: 11.4, y: 15.5), controlPoint2: NSPoint(x: 10.5, y: 16.4))
        inboxes2Path.line(to: NSPoint(x: 10.5, y: 19.5))
        inboxes2Path.line(to: NSPoint(x: 10.5, y: 19.5))
        inboxes2Path.close()
        inboxes2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        inboxes2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawInboxDocument(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-90-inbox-document
        //// inbox-document 2 Drawing
        let inboxdocument2Path = NSBezierPath()
        inboxdocument2Path.move(to: NSPoint(x: 19.5, y: 12))
        inboxdocument2Path.line(to: NSPoint(x: 23.5, y: 12))
        inboxdocument2Path.line(to: NSPoint(x: 23.5, y: 19))
        inboxdocument2Path.line(to: NSPoint(x: 19.5, y: 19))
        inboxdocument2Path.curve(to: NSPoint(x: 17.5, y: 21.01), controlPoint1: NSPoint(x: 18.39, y: 19), controlPoint2: NSPoint(x: 17.5, y: 19.89))
        inboxdocument2Path.line(to: NSPoint(x: 17.5, y: 26))
        inboxdocument2Path.line(to: NSPoint(x: 7.5, y: 26))
        inboxdocument2Path.curve(to: NSPoint(x: 6.5, y: 25), controlPoint1: NSPoint(x: 6.95, y: 26), controlPoint2: NSPoint(x: 6.5, y: 25.56))
        inboxdocument2Path.line(to: NSPoint(x: 6.5, y: 12))
        inboxdocument2Path.line(to: NSPoint(x: 6.5, y: 12))
        inboxdocument2Path.line(to: NSPoint(x: 10.5, y: 12))
        inboxdocument2Path.line(to: NSPoint(x: 10.5, y: 10))
        inboxdocument2Path.curve(to: NSPoint(x: 12.5, y: 8), controlPoint1: NSPoint(x: 10.5, y: 8.89), controlPoint2: NSPoint(x: 11.4, y: 8))
        inboxdocument2Path.line(to: NSPoint(x: 17.5, y: 8))
        inboxdocument2Path.curve(to: NSPoint(x: 19.5, y: 10), controlPoint1: NSPoint(x: 18.61, y: 8), controlPoint2: NSPoint(x: 19.5, y: 8.9))
        inboxdocument2Path.line(to: NSPoint(x: 19.5, y: 12))
        inboxdocument2Path.line(to: NSPoint(x: 19.5, y: 12))
        inboxdocument2Path.close()
        inboxdocument2Path.move(to: NSPoint(x: 27.5, y: 10.5))
        inboxdocument2Path.line(to: NSPoint(x: 27.5, y: 12))
        inboxdocument2Path.line(to: NSPoint(x: 24.5, y: 16.8))
        inboxdocument2Path.line(to: NSPoint(x: 24.5, y: 20))
        inboxdocument2Path.line(to: NSPoint(x: 24.5, y: 20))
        inboxdocument2Path.line(to: NSPoint(x: 18.5, y: 27))
        inboxdocument2Path.line(to: NSPoint(x: 7.5, y: 27))
        inboxdocument2Path.curve(to: NSPoint(x: 5.5, y: 25), controlPoint1: NSPoint(x: 6.4, y: 27), controlPoint2: NSPoint(x: 5.5, y: 26.1))
        inboxdocument2Path.line(to: NSPoint(x: 5.5, y: 16.8))
        inboxdocument2Path.line(to: NSPoint(x: 5.5, y: 16.8))
        inboxdocument2Path.line(to: NSPoint(x: 2.5, y: 12))
        inboxdocument2Path.line(to: NSPoint(x: 2.5, y: 3))
        inboxdocument2Path.line(to: NSPoint(x: 27.5, y: 3))
        inboxdocument2Path.line(to: NSPoint(x: 27.5, y: 10.5))
        inboxdocument2Path.line(to: NSPoint(x: 27.5, y: 10.5))
        inboxdocument2Path.close()
        inboxdocument2Path.move(to: NSPoint(x: 5.5, y: 12))
        inboxdocument2Path.line(to: NSPoint(x: 5.5, y: 14.84))
        inboxdocument2Path.line(to: NSPoint(x: 3.72, y: 12))
        inboxdocument2Path.line(to: NSPoint(x: 5.5, y: 12))
        inboxdocument2Path.line(to: NSPoint(x: 5.5, y: 12))
        inboxdocument2Path.line(to: NSPoint(x: 5.5, y: 12))
        inboxdocument2Path.close()
        inboxdocument2Path.move(to: NSPoint(x: 26.28, y: 12))
        inboxdocument2Path.line(to: NSPoint(x: 24.5, y: 14.84))
        inboxdocument2Path.line(to: NSPoint(x: 24.5, y: 12))
        inboxdocument2Path.line(to: NSPoint(x: 26.28, y: 12))
        inboxdocument2Path.line(to: NSPoint(x: 26.28, y: 12))
        inboxdocument2Path.line(to: NSPoint(x: 26.28, y: 12))
        inboxdocument2Path.close()
        inboxdocument2Path.move(to: NSPoint(x: 18.5, y: 25.5))
        inboxdocument2Path.line(to: NSPoint(x: 18.5, y: 21.01))
        inboxdocument2Path.curve(to: NSPoint(x: 19.5, y: 20), controlPoint1: NSPoint(x: 18.5, y: 20.45), controlPoint2: NSPoint(x: 18.95, y: 20))
        inboxdocument2Path.line(to: NSPoint(x: 23.2, y: 20))
        inboxdocument2Path.line(to: NSPoint(x: 18.5, y: 25.5))
        inboxdocument2Path.line(to: NSPoint(x: 18.5, y: 25.5))
        inboxdocument2Path.close()
        inboxdocument2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        inboxdocument2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawInboxDocumentText(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-91-inbox-document-text
        //// inbox-document-text 2 Drawing
        let inboxdocumenttext2Path = NSBezierPath()
        inboxdocumenttext2Path.move(to: NSPoint(x: 27.5, y: 10.5))
        inboxdocumenttext2Path.line(to: NSPoint(x: 27.5, y: 12))
        inboxdocumenttext2Path.line(to: NSPoint(x: 24.5, y: 16.8))
        inboxdocumenttext2Path.line(to: NSPoint(x: 24.5, y: 20))
        inboxdocumenttext2Path.line(to: NSPoint(x: 24.5, y: 20))
        inboxdocumenttext2Path.line(to: NSPoint(x: 18.5, y: 27))
        inboxdocumenttext2Path.line(to: NSPoint(x: 7.5, y: 27))
        inboxdocumenttext2Path.curve(to: NSPoint(x: 5.5, y: 25), controlPoint1: NSPoint(x: 6.4, y: 27), controlPoint2: NSPoint(x: 5.5, y: 26.1))
        inboxdocumenttext2Path.line(to: NSPoint(x: 5.5, y: 16.8))
        inboxdocumenttext2Path.line(to: NSPoint(x: 5.5, y: 16.8))
        inboxdocumenttext2Path.line(to: NSPoint(x: 2.5, y: 12))
        inboxdocumenttext2Path.line(to: NSPoint(x: 2.5, y: 3))
        inboxdocumenttext2Path.line(to: NSPoint(x: 27.5, y: 3))
        inboxdocumenttext2Path.line(to: NSPoint(x: 27.5, y: 10.5))
        inboxdocumenttext2Path.line(to: NSPoint(x: 27.5, y: 10.5))
        inboxdocumenttext2Path.close()
        inboxdocumenttext2Path.move(to: NSPoint(x: 5.5, y: 12))
        inboxdocumenttext2Path.line(to: NSPoint(x: 5.5, y: 14.84))
        inboxdocumenttext2Path.line(to: NSPoint(x: 3.72, y: 12))
        inboxdocumenttext2Path.line(to: NSPoint(x: 5.5, y: 12))
        inboxdocumenttext2Path.line(to: NSPoint(x: 5.5, y: 12))
        inboxdocumenttext2Path.line(to: NSPoint(x: 5.5, y: 12))
        inboxdocumenttext2Path.close()
        inboxdocumenttext2Path.move(to: NSPoint(x: 26.28, y: 12))
        inboxdocumenttext2Path.line(to: NSPoint(x: 24.5, y: 14.84))
        inboxdocumenttext2Path.line(to: NSPoint(x: 24.5, y: 12))
        inboxdocumenttext2Path.line(to: NSPoint(x: 26.28, y: 12))
        inboxdocumenttext2Path.line(to: NSPoint(x: 26.28, y: 12))
        inboxdocumenttext2Path.line(to: NSPoint(x: 26.28, y: 12))
        inboxdocumenttext2Path.close()
        inboxdocumenttext2Path.move(to: NSPoint(x: 6.5, y: 12))
        inboxdocumenttext2Path.line(to: NSPoint(x: 6.5, y: 25))
        inboxdocumenttext2Path.curve(to: NSPoint(x: 7.5, y: 26), controlPoint1: NSPoint(x: 6.5, y: 25.56), controlPoint2: NSPoint(x: 6.95, y: 26))
        inboxdocumenttext2Path.line(to: NSPoint(x: 17.5, y: 26))
        inboxdocumenttext2Path.line(to: NSPoint(x: 17.5, y: 21.01))
        inboxdocumenttext2Path.curve(to: NSPoint(x: 19.5, y: 19), controlPoint1: NSPoint(x: 17.5, y: 19.89), controlPoint2: NSPoint(x: 18.39, y: 19))
        inboxdocumenttext2Path.line(to: NSPoint(x: 23.5, y: 19))
        inboxdocumenttext2Path.line(to: NSPoint(x: 23.5, y: 12))
        inboxdocumenttext2Path.line(to: NSPoint(x: 6.5, y: 12))
        inboxdocumenttext2Path.line(to: NSPoint(x: 6.5, y: 12))
        inboxdocumenttext2Path.close()
        inboxdocumenttext2Path.move(to: NSPoint(x: 18.5, y: 25.5))
        inboxdocumenttext2Path.line(to: NSPoint(x: 18.5, y: 21.01))
        inboxdocumenttext2Path.curve(to: NSPoint(x: 19.5, y: 20), controlPoint1: NSPoint(x: 18.5, y: 20.45), controlPoint2: NSPoint(x: 18.95, y: 20))
        inboxdocumenttext2Path.line(to: NSPoint(x: 23.2, y: 20))
        inboxdocumenttext2Path.line(to: NSPoint(x: 18.5, y: 25.5))
        inboxdocumenttext2Path.line(to: NSPoint(x: 18.5, y: 25.5))
        inboxdocumenttext2Path.close()
        inboxdocumenttext2Path.move(to: NSPoint(x: 8.5, y: 16))
        inboxdocumenttext2Path.line(to: NSPoint(x: 8.5, y: 15))
        inboxdocumenttext2Path.line(to: NSPoint(x: 21.5, y: 15))
        inboxdocumenttext2Path.line(to: NSPoint(x: 21.5, y: 16))
        inboxdocumenttext2Path.line(to: NSPoint(x: 8.5, y: 16))
        inboxdocumenttext2Path.line(to: NSPoint(x: 8.5, y: 16))
        inboxdocumenttext2Path.close()
        inboxdocumenttext2Path.move(to: NSPoint(x: 8.5, y: 24))
        inboxdocumenttext2Path.line(to: NSPoint(x: 8.5, y: 23))
        inboxdocumenttext2Path.line(to: NSPoint(x: 15.5, y: 23))
        inboxdocumenttext2Path.line(to: NSPoint(x: 15.5, y: 24))
        inboxdocumenttext2Path.line(to: NSPoint(x: 8.5, y: 24))
        inboxdocumenttext2Path.line(to: NSPoint(x: 8.5, y: 24))
        inboxdocumenttext2Path.close()
        inboxdocumenttext2Path.move(to: NSPoint(x: 8.5, y: 20))
        inboxdocumenttext2Path.line(to: NSPoint(x: 8.5, y: 19))
        inboxdocumenttext2Path.line(to: NSPoint(x: 15.5, y: 19))
        inboxdocumenttext2Path.line(to: NSPoint(x: 15.5, y: 20))
        inboxdocumenttext2Path.line(to: NSPoint(x: 8.5, y: 20))
        inboxdocumenttext2Path.line(to: NSPoint(x: 8.5, y: 20))
        inboxdocumenttext2Path.close()
        inboxdocumenttext2Path.move(to: NSPoint(x: 10.5, y: 10))
        inboxdocumenttext2Path.curve(to: NSPoint(x: 12.5, y: 8), controlPoint1: NSPoint(x: 10.5, y: 8.9), controlPoint2: NSPoint(x: 11.4, y: 8))
        inboxdocumenttext2Path.line(to: NSPoint(x: 17.5, y: 8))
        inboxdocumenttext2Path.curve(to: NSPoint(x: 19.5, y: 10), controlPoint1: NSPoint(x: 18.61, y: 8), controlPoint2: NSPoint(x: 19.5, y: 8.89))
        inboxdocumenttext2Path.line(to: NSPoint(x: 19.5, y: 11))
        inboxdocumenttext2Path.line(to: NSPoint(x: 10.5, y: 11))
        inboxdocumenttext2Path.line(to: NSPoint(x: 10.5, y: 10))
        inboxdocumenttext2Path.line(to: NSPoint(x: 10.5, y: 10))
        inboxdocumenttext2Path.close()
        inboxdocumenttext2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        inboxdocumenttext2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawInboxDownload(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-92-inbox-download
        //// inbox-download 2 Drawing
        let inboxdownload2Path = NSBezierPath()
        inboxdownload2Path.move(to: NSPoint(x: 14.5, y: 15))
        inboxdownload2Path.line(to: NSPoint(x: 11.25, y: 18.25))
        inboxdownload2Path.line(to: NSPoint(x: 10.5, y: 17.5))
        inboxdownload2Path.line(to: NSPoint(x: 15, y: 13))
        inboxdownload2Path.line(to: NSPoint(x: 19.5, y: 17.5))
        inboxdownload2Path.line(to: NSPoint(x: 18.75, y: 18.25))
        inboxdownload2Path.line(to: NSPoint(x: 15.5, y: 15))
        inboxdownload2Path.line(to: NSPoint(x: 15.5, y: 26))
        inboxdownload2Path.line(to: NSPoint(x: 14.5, y: 26))
        inboxdownload2Path.line(to: NSPoint(x: 14.5, y: 15))
        inboxdownload2Path.line(to: NSPoint(x: 14.5, y: 15))
        inboxdownload2Path.line(to: NSPoint(x: 14.5, y: 15))
        inboxdownload2Path.close()
        inboxdownload2Path.move(to: NSPoint(x: 19.5, y: 13))
        inboxdownload2Path.line(to: NSPoint(x: 26.28, y: 13))
        inboxdownload2Path.line(to: NSPoint(x: 26.28, y: 13))
        inboxdownload2Path.line(to: NSPoint(x: 21.9, y: 20))
        inboxdownload2Path.line(to: NSPoint(x: 16.5, y: 20))
        inboxdownload2Path.line(to: NSPoint(x: 16.5, y: 21))
        inboxdownload2Path.line(to: NSPoint(x: 22.5, y: 21))
        inboxdownload2Path.line(to: NSPoint(x: 27.5, y: 13))
        inboxdownload2Path.line(to: NSPoint(x: 27.5, y: 12))
        inboxdownload2Path.line(to: NSPoint(x: 27.5, y: 4))
        inboxdownload2Path.line(to: NSPoint(x: 2.5, y: 4))
        inboxdownload2Path.line(to: NSPoint(x: 2.5, y: 13))
        inboxdownload2Path.line(to: NSPoint(x: 7.5, y: 21))
        inboxdownload2Path.line(to: NSPoint(x: 13.5, y: 21))
        inboxdownload2Path.line(to: NSPoint(x: 13.5, y: 20))
        inboxdownload2Path.line(to: NSPoint(x: 8.1, y: 20))
        inboxdownload2Path.line(to: NSPoint(x: 3.72, y: 13))
        inboxdownload2Path.line(to: NSPoint(x: 10.5, y: 13))
        inboxdownload2Path.line(to: NSPoint(x: 10.5, y: 11))
        inboxdownload2Path.curve(to: NSPoint(x: 12.5, y: 9), controlPoint1: NSPoint(x: 10.5, y: 9.9), controlPoint2: NSPoint(x: 11.4, y: 9))
        inboxdownload2Path.line(to: NSPoint(x: 17.5, y: 9))
        inboxdownload2Path.curve(to: NSPoint(x: 19.5, y: 11), controlPoint1: NSPoint(x: 18.61, y: 9), controlPoint2: NSPoint(x: 19.5, y: 9.89))
        inboxdownload2Path.line(to: NSPoint(x: 19.5, y: 13))
        inboxdownload2Path.line(to: NSPoint(x: 19.5, y: 13))
        inboxdownload2Path.close()
        inboxdownload2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        inboxdownload2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawInboxUpload(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-93-inbox-upload
        //// inbox-upload 2 Drawing
        let inboxupload2Path = NSBezierPath()
        inboxupload2Path.move(to: NSPoint(x: 14.5, y: 25))
        inboxupload2Path.line(to: NSPoint(x: 11.25, y: 21.75))
        inboxupload2Path.line(to: NSPoint(x: 10.5, y: 22.5))
        inboxupload2Path.line(to: NSPoint(x: 15, y: 27))
        inboxupload2Path.line(to: NSPoint(x: 19.5, y: 22.5))
        inboxupload2Path.line(to: NSPoint(x: 18.75, y: 21.75))
        inboxupload2Path.line(to: NSPoint(x: 15.5, y: 25))
        inboxupload2Path.line(to: NSPoint(x: 15.5, y: 14))
        inboxupload2Path.line(to: NSPoint(x: 14.5, y: 14))
        inboxupload2Path.line(to: NSPoint(x: 14.5, y: 25))
        inboxupload2Path.line(to: NSPoint(x: 14.5, y: 25))
        inboxupload2Path.close()
        inboxupload2Path.move(to: NSPoint(x: 19.5, y: 12))
        inboxupload2Path.line(to: NSPoint(x: 26.28, y: 12))
        inboxupload2Path.line(to: NSPoint(x: 21.9, y: 19))
        inboxupload2Path.line(to: NSPoint(x: 16.5, y: 19))
        inboxupload2Path.line(to: NSPoint(x: 16.5, y: 20))
        inboxupload2Path.line(to: NSPoint(x: 22.5, y: 20))
        inboxupload2Path.line(to: NSPoint(x: 27.5, y: 12))
        inboxupload2Path.line(to: NSPoint(x: 27.5, y: 11))
        inboxupload2Path.line(to: NSPoint(x: 27.5, y: 3))
        inboxupload2Path.line(to: NSPoint(x: 2.5, y: 3))
        inboxupload2Path.line(to: NSPoint(x: 2.5, y: 12))
        inboxupload2Path.line(to: NSPoint(x: 7.5, y: 20))
        inboxupload2Path.line(to: NSPoint(x: 13.5, y: 20))
        inboxupload2Path.line(to: NSPoint(x: 13.5, y: 20))
        inboxupload2Path.line(to: NSPoint(x: 13.5, y: 19))
        inboxupload2Path.line(to: NSPoint(x: 8.1, y: 19))
        inboxupload2Path.line(to: NSPoint(x: 3.72, y: 12))
        inboxupload2Path.line(to: NSPoint(x: 10.5, y: 12))
        inboxupload2Path.line(to: NSPoint(x: 10.5, y: 10))
        inboxupload2Path.curve(to: NSPoint(x: 12.5, y: 8), controlPoint1: NSPoint(x: 10.5, y: 8.9), controlPoint2: NSPoint(x: 11.4, y: 8))
        inboxupload2Path.line(to: NSPoint(x: 17.5, y: 8))
        inboxupload2Path.curve(to: NSPoint(x: 19.5, y: 10), controlPoint1: NSPoint(x: 18.61, y: 8), controlPoint2: NSPoint(x: 19.5, y: 8.89))
        inboxupload2Path.line(to: NSPoint(x: 19.5, y: 12))
        inboxupload2Path.line(to: NSPoint(x: 19.5, y: 12))
        inboxupload2Path.line(to: NSPoint(x: 19.5, y: 12))
        inboxupload2Path.close()
        inboxupload2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        inboxupload2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawFolder(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-94-folder
        //// folder 3 Drawing
        let folder3Path = NSBezierPath()
        folder3Path.move(to: NSPoint(x: 15.5, y: 22))
        folder3Path.line(to: NSPoint(x: 13.5, y: 26))
        folder3Path.line(to: NSPoint(x: 2.5, y: 26))
        folder3Path.curve(to: NSPoint(x: 0.5, y: 24.01), controlPoint1: NSPoint(x: 1.4, y: 26), controlPoint2: NSPoint(x: 0.5, y: 25.11))
        folder3Path.line(to: NSPoint(x: 0.5, y: 5.99))
        folder3Path.curve(to: NSPoint(x: 2.49, y: 4), controlPoint1: NSPoint(x: 0.5, y: 4.89), controlPoint2: NSPoint(x: 1.4, y: 4))
        folder3Path.line(to: NSPoint(x: 27.51, y: 4))
        folder3Path.curve(to: NSPoint(x: 29.5, y: 6), controlPoint1: NSPoint(x: 28.61, y: 4), controlPoint2: NSPoint(x: 29.5, y: 4.89))
        folder3Path.line(to: NSPoint(x: 29.5, y: 20))
        folder3Path.curve(to: NSPoint(x: 27.49, y: 22), controlPoint1: NSPoint(x: 29.5, y: 21.11), controlPoint2: NSPoint(x: 28.6, y: 22))
        folder3Path.line(to: NSPoint(x: 15.5, y: 22))
        folder3Path.close()
        folder3Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        folder3Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawFolder2(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-95-folder
        //// folder 3 Drawing
        let folder3Path = NSBezierPath()
        folder3Path.move(to: NSPoint(x: 0.5, y: 18))
        folder3Path.line(to: NSPoint(x: 0.5, y: 24.01))
        folder3Path.curve(to: NSPoint(x: 2.5, y: 26), controlPoint1: NSPoint(x: 0.5, y: 25.11), controlPoint2: NSPoint(x: 1.4, y: 26))
        folder3Path.line(to: NSPoint(x: 13.5, y: 26))
        folder3Path.line(to: NSPoint(x: 15.5, y: 22))
        folder3Path.line(to: NSPoint(x: 27.49, y: 22))
        folder3Path.curve(to: NSPoint(x: 29.5, y: 20), controlPoint1: NSPoint(x: 28.6, y: 22), controlPoint2: NSPoint(x: 29.5, y: 21.11))
        folder3Path.line(to: NSPoint(x: 29.5, y: 18))
        folder3Path.line(to: NSPoint(x: 0.5, y: 18))
        folder3Path.line(to: NSPoint(x: 0.5, y: 18))
        folder3Path.close()
        folder3Path.move(to: NSPoint(x: 0.5, y: 17))
        folder3Path.line(to: NSPoint(x: 0.5, y: 5.99))
        folder3Path.curve(to: NSPoint(x: 2.49, y: 4), controlPoint1: NSPoint(x: 0.5, y: 4.89), controlPoint2: NSPoint(x: 1.4, y: 4))
        folder3Path.line(to: NSPoint(x: 27.51, y: 4))
        folder3Path.curve(to: NSPoint(x: 29.5, y: 6), controlPoint1: NSPoint(x: 28.61, y: 4), controlPoint2: NSPoint(x: 29.5, y: 4.89))
        folder3Path.line(to: NSPoint(x: 29.5, y: 17))
        folder3Path.line(to: NSPoint(x: 0.5, y: 17))
        folder3Path.line(to: NSPoint(x: 0.5, y: 17))
        folder3Path.close()
        folder3Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        folder3Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawFolders(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-96-folders
        //// folders 2 Drawing
        let folders2Path = NSBezierPath()
        folders2Path.move(to: NSPoint(x: 0, y: 15.96))
        folders2Path.line(to: NSPoint(x: 0, y: 21.74))
        folders2Path.curve(to: NSPoint(x: 1.88, y: 23.65), controlPoint1: NSPoint(x: 0, y: 22.8), controlPoint2: NSPoint(x: 0.84, y: 23.65))
        folders2Path.line(to: NSPoint(x: 12.19, y: 23.65))
        folders2Path.line(to: NSPoint(x: 14.06, y: 19.81))
        folders2Path.line(to: NSPoint(x: 25.31, y: 19.81))
        folders2Path.curve(to: NSPoint(x: 27.19, y: 17.89), controlPoint1: NSPoint(x: 26.35, y: 19.81), controlPoint2: NSPoint(x: 27.19, y: 18.95))
        folders2Path.line(to: NSPoint(x: 27.19, y: 15.96))
        folders2Path.line(to: NSPoint(x: 0, y: 15.96))
        folders2Path.line(to: NSPoint(x: 0, y: 15.96))
        folders2Path.close()
        folders2Path.move(to: NSPoint(x: 0, y: 15))
        folders2Path.line(to: NSPoint(x: 0, y: 4.41))
        folders2Path.curve(to: NSPoint(x: 1.87, y: 2.5), controlPoint1: NSPoint(x: 0, y: 3.36), controlPoint2: NSPoint(x: 0.84, y: 2.5))
        folders2Path.line(to: NSPoint(x: 25.32, y: 2.5))
        folders2Path.curve(to: NSPoint(x: 27.19, y: 4.42), controlPoint1: NSPoint(x: 26.35, y: 2.5), controlPoint2: NSPoint(x: 27.19, y: 3.36))
        folders2Path.line(to: NSPoint(x: 27.19, y: 15))
        folders2Path.line(to: NSPoint(x: 0, y: 15))
        folders2Path.line(to: NSPoint(x: 0, y: 15))
        folders2Path.close()
        folders2Path.move(to: NSPoint(x: 2.81, y: 24.62))
        folders2Path.line(to: NSPoint(x: 2.81, y: 25.59))
        folders2Path.curve(to: NSPoint(x: 4.69, y: 27.5), controlPoint1: NSPoint(x: 2.81, y: 26.64), controlPoint2: NSPoint(x: 3.65, y: 27.5))
        folders2Path.line(to: NSPoint(x: 15, y: 27.5))
        folders2Path.line(to: NSPoint(x: 16.88, y: 23.65))
        folders2Path.line(to: NSPoint(x: 28.12, y: 23.65))
        folders2Path.curve(to: NSPoint(x: 30, y: 21.74), controlPoint1: NSPoint(x: 29.16, y: 23.65), controlPoint2: NSPoint(x: 30, y: 22.79))
        folders2Path.line(to: NSPoint(x: 30, y: 8.26))
        folders2Path.curve(to: NSPoint(x: 28.13, y: 6.35), controlPoint1: NSPoint(x: 30, y: 7.2), controlPoint2: NSPoint(x: 29.16, y: 6.35))
        folders2Path.line(to: NSPoint(x: 28.12, y: 6.35))
        folders2Path.line(to: NSPoint(x: 28.12, y: 17.88))
        folders2Path.curve(to: NSPoint(x: 25.31, y: 20.77), controlPoint1: NSPoint(x: 28.12, y: 19.48), controlPoint2: NSPoint(x: 26.87, y: 20.77))
        folders2Path.line(to: NSPoint(x: 15, y: 20.77))
        folders2Path.line(to: NSPoint(x: 13.12, y: 24.62))
        folders2Path.line(to: NSPoint(x: 2.81, y: 24.62))
        folders2Path.line(to: NSPoint(x: 2.81, y: 24.62))
        folders2Path.line(to: NSPoint(x: 2.81, y: 24.62))
        folders2Path.close()
        folders2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        folders2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawForlderDownload(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-97-folder-download
        //// folder-download Drawing
        let folderdownloadPath = NSBezierPath()
        folderdownloadPath.move(to: NSPoint(x: 15.5, y: 17))
        folderdownloadPath.line(to: NSPoint(x: 29.5, y: 17))
        folderdownloadPath.line(to: NSPoint(x: 29.5, y: 6))
        folderdownloadPath.curve(to: NSPoint(x: 27.51, y: 4), controlPoint1: NSPoint(x: 29.5, y: 4.89), controlPoint2: NSPoint(x: 28.61, y: 4))
        folderdownloadPath.line(to: NSPoint(x: 2.49, y: 4))
        folderdownloadPath.curve(to: NSPoint(x: 0.5, y: 5.99), controlPoint1: NSPoint(x: 1.4, y: 4), controlPoint2: NSPoint(x: 0.5, y: 4.89))
        folderdownloadPath.line(to: NSPoint(x: 0.5, y: 17))
        folderdownloadPath.line(to: NSPoint(x: 14.5, y: 17))
        folderdownloadPath.line(to: NSPoint(x: 14.5, y: 7.95))
        folderdownloadPath.line(to: NSPoint(x: 11.25, y: 11.2))
        folderdownloadPath.line(to: NSPoint(x: 10.5, y: 10.45))
        folderdownloadPath.line(to: NSPoint(x: 15, y: 5.95))
        folderdownloadPath.line(to: NSPoint(x: 19.5, y: 10.45))
        folderdownloadPath.line(to: NSPoint(x: 18.75, y: 11.2))
        folderdownloadPath.line(to: NSPoint(x: 15.5, y: 7.95))
        folderdownloadPath.line(to: NSPoint(x: 15.5, y: 17))
        folderdownloadPath.line(to: NSPoint(x: 15.5, y: 17))
        folderdownloadPath.close()
        folderdownloadPath.move(to: NSPoint(x: 0.5, y: 18))
        folderdownloadPath.line(to: NSPoint(x: 0.5, y: 24.01))
        folderdownloadPath.curve(to: NSPoint(x: 2.5, y: 26), controlPoint1: NSPoint(x: 0.5, y: 25.11), controlPoint2: NSPoint(x: 1.4, y: 26))
        folderdownloadPath.line(to: NSPoint(x: 13.5, y: 26))
        folderdownloadPath.line(to: NSPoint(x: 15.5, y: 22))
        folderdownloadPath.line(to: NSPoint(x: 27.49, y: 22))
        folderdownloadPath.curve(to: NSPoint(x: 29.5, y: 20), controlPoint1: NSPoint(x: 28.6, y: 22), controlPoint2: NSPoint(x: 29.5, y: 21.11))
        folderdownloadPath.line(to: NSPoint(x: 29.5, y: 18))
        folderdownloadPath.line(to: NSPoint(x: 0.5, y: 18))
        folderdownloadPath.line(to: NSPoint(x: 0.5, y: 18))
        folderdownloadPath.line(to: NSPoint(x: 0.5, y: 18))
        folderdownloadPath.close()
        folderdownloadPath.windingRule = .evenOddWindingRule
        fillColor.setFill()
        folderdownloadPath.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawFolderUpload(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-98-folder-upload
        //// folder-upload 2 Drawing
        let folderupload2Path = NSBezierPath()
        folderupload2Path.move(to: NSPoint(x: 14.5, y: 4))
        folderupload2Path.line(to: NSPoint(x: 2.49, y: 4))
        folderupload2Path.curve(to: NSPoint(x: 0.5, y: 5.99), controlPoint1: NSPoint(x: 1.4, y: 4), controlPoint2: NSPoint(x: 0.5, y: 4.89))
        folderupload2Path.line(to: NSPoint(x: 0.5, y: 17))
        folderupload2Path.line(to: NSPoint(x: 29.5, y: 17))
        folderupload2Path.line(to: NSPoint(x: 29.5, y: 6))
        folderupload2Path.curve(to: NSPoint(x: 27.51, y: 4), controlPoint1: NSPoint(x: 29.5, y: 4.89), controlPoint2: NSPoint(x: 28.61, y: 4))
        folderupload2Path.line(to: NSPoint(x: 15.5, y: 4))
        folderupload2Path.line(to: NSPoint(x: 15.5, y: 13))
        folderupload2Path.line(to: NSPoint(x: 18.75, y: 9.75))
        folderupload2Path.line(to: NSPoint(x: 19.5, y: 10.5))
        folderupload2Path.line(to: NSPoint(x: 15, y: 15))
        folderupload2Path.line(to: NSPoint(x: 10.5, y: 10.5))
        folderupload2Path.line(to: NSPoint(x: 11.25, y: 9.75))
        folderupload2Path.line(to: NSPoint(x: 14.5, y: 13))
        folderupload2Path.line(to: NSPoint(x: 14.5, y: 4))
        folderupload2Path.line(to: NSPoint(x: 14.5, y: 4))
        folderupload2Path.close()
        folderupload2Path.move(to: NSPoint(x: 0.5, y: 18))
        folderupload2Path.line(to: NSPoint(x: 0.5, y: 24.01))
        folderupload2Path.curve(to: NSPoint(x: 2.5, y: 26), controlPoint1: NSPoint(x: 0.5, y: 25.11), controlPoint2: NSPoint(x: 1.4, y: 26))
        folderupload2Path.line(to: NSPoint(x: 13.5, y: 26))
        folderupload2Path.line(to: NSPoint(x: 15.5, y: 22))
        folderupload2Path.line(to: NSPoint(x: 27.49, y: 22))
        folderupload2Path.curve(to: NSPoint(x: 29.5, y: 20), controlPoint1: NSPoint(x: 28.6, y: 22), controlPoint2: NSPoint(x: 29.5, y: 21.11))
        folderupload2Path.line(to: NSPoint(x: 29.5, y: 18))
        folderupload2Path.line(to: NSPoint(x: 0.5, y: 18))
        folderupload2Path.line(to: NSPoint(x: 0.5, y: 18))
        folderupload2Path.line(to: NSPoint(x: 0.5, y: 18))
        folderupload2Path.close()
        folderupload2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        folderupload2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawFolderUnlocked(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-99-folder-unlocked
        //// folder-unlocked 2 Drawing
        let folderunlocked2Path = NSBezierPath()
        folderunlocked2Path.move(to: NSPoint(x: -0, y: 18.83))
        folderunlocked2Path.line(to: NSPoint(x: -0, y: 24.59))
        folderunlocked2Path.curve(to: NSPoint(x: 1.88, y: 26.5), controlPoint1: NSPoint(x: -0, y: 25.65), controlPoint2: NSPoint(x: 0.84, y: 26.5))
        folderunlocked2Path.line(to: NSPoint(x: 12.19, y: 26.5))
        folderunlocked2Path.line(to: NSPoint(x: 14.06, y: 22.67))
        folderunlocked2Path.line(to: NSPoint(x: 25.31, y: 22.67))
        folderunlocked2Path.curve(to: NSPoint(x: 27.19, y: 20.75), controlPoint1: NSPoint(x: 26.35, y: 22.67), controlPoint2: NSPoint(x: 27.19, y: 21.81))
        folderunlocked2Path.line(to: NSPoint(x: 27.19, y: 18.83))
        folderunlocked2Path.line(to: NSPoint(x: -0, y: 18.83))
        folderunlocked2Path.line(to: NSPoint(x: -0, y: 18.83))
        folderunlocked2Path.line(to: NSPoint(x: -0, y: 18.83))
        folderunlocked2Path.close()
        folderunlocked2Path.move(to: NSPoint(x: -0, y: 17.88))
        folderunlocked2Path.line(to: NSPoint(x: -0, y: 7.32))
        folderunlocked2Path.curve(to: NSPoint(x: 1.87, y: 5.42), controlPoint1: NSPoint(x: -0, y: 6.27), controlPoint2: NSPoint(x: 0.83, y: 5.42))
        folderunlocked2Path.line(to: NSPoint(x: 20.62, y: 5.42))
        folderunlocked2Path.line(to: NSPoint(x: 20.62, y: 9.25))
        folderunlocked2Path.curve(to: NSPoint(x: 21.56, y: 10.91), controlPoint1: NSPoint(x: 20.62, y: 9.96), controlPoint2: NSPoint(x: 21, y: 10.58))
        folderunlocked2Path.line(to: NSPoint(x: 21.56, y: 12.6))
        folderunlocked2Path.curve(to: NSPoint(x: 25.78, y: 16.92), controlPoint1: NSPoint(x: 21.56, y: 14.98), controlPoint2: NSPoint(x: 23.45, y: 16.92))
        folderunlocked2Path.curve(to: NSPoint(x: 27.19, y: 16.67), controlPoint1: NSPoint(x: 26.27, y: 16.92), controlPoint2: NSPoint(x: 26.75, y: 16.83))
        folderunlocked2Path.line(to: NSPoint(x: 27.19, y: 17.88))
        folderunlocked2Path.line(to: NSPoint(x: -0, y: 17.88))
        folderunlocked2Path.line(to: NSPoint(x: -0, y: 17.88))
        folderunlocked2Path.close()
        folderunlocked2Path.move(to: NSPoint(x: 28.12, y: 10.21))
        folderunlocked2Path.line(to: NSPoint(x: 29.06, y: 10.21))
        folderunlocked2Path.curve(to: NSPoint(x: 30, y: 9.25), controlPoint1: NSPoint(x: 29.58, y: 10.21), controlPoint2: NSPoint(x: 30, y: 9.78))
        folderunlocked2Path.line(to: NSPoint(x: 30, y: 4.46))
        folderunlocked2Path.curve(to: NSPoint(x: 29.06, y: 3.5), controlPoint1: NSPoint(x: 30, y: 3.92), controlPoint2: NSPoint(x: 29.58, y: 3.5))
        folderunlocked2Path.line(to: NSPoint(x: 22.5, y: 3.5))
        folderunlocked2Path.curve(to: NSPoint(x: 21.56, y: 4.46), controlPoint1: NSPoint(x: 21.98, y: 3.5), controlPoint2: NSPoint(x: 21.56, y: 3.93))
        folderunlocked2Path.line(to: NSPoint(x: 21.56, y: 9.25))
        folderunlocked2Path.curve(to: NSPoint(x: 22.5, y: 10.21), controlPoint1: NSPoint(x: 21.56, y: 9.79), controlPoint2: NSPoint(x: 21.98, y: 10.21))
        folderunlocked2Path.line(to: NSPoint(x: 22.5, y: 12.61))
        folderunlocked2Path.curve(to: NSPoint(x: 25.78, y: 15.96), controlPoint1: NSPoint(x: 22.5, y: 14.46), controlPoint2: NSPoint(x: 23.97, y: 15.96))
        folderunlocked2Path.curve(to: NSPoint(x: 29.06, y: 12.61), controlPoint1: NSPoint(x: 27.59, y: 15.96), controlPoint2: NSPoint(x: 29.06, y: 14.46))
        folderunlocked2Path.line(to: NSPoint(x: 29.06, y: 12.12))
        folderunlocked2Path.line(to: NSPoint(x: 28.12, y: 12.12))
        folderunlocked2Path.line(to: NSPoint(x: 28.12, y: 12.6))
        folderunlocked2Path.curve(to: NSPoint(x: 25.78, y: 15), controlPoint1: NSPoint(x: 28.12, y: 13.92), controlPoint2: NSPoint(x: 27.08, y: 15))
        folderunlocked2Path.curve(to: NSPoint(x: 23.44, y: 12.6), controlPoint1: NSPoint(x: 24.49, y: 15), controlPoint2: NSPoint(x: 23.44, y: 13.93))
        folderunlocked2Path.line(to: NSPoint(x: 23.44, y: 10.21))
        folderunlocked2Path.line(to: NSPoint(x: 28.12, y: 10.21))
        folderunlocked2Path.line(to: NSPoint(x: 28.12, y: 10.21))
        folderunlocked2Path.line(to: NSPoint(x: 28.12, y: 10.21))
        folderunlocked2Path.close()
        folderunlocked2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        folderunlocked2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawFolderLocked(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-100-folder-locked
        //// folder-locked 2 Drawing
        let folderlocked2Path = NSBezierPath()
        folderlocked2Path.move(to: NSPoint(x: -0, y: 18.83))
        folderlocked2Path.line(to: NSPoint(x: -0, y: 24.59))
        folderlocked2Path.curve(to: NSPoint(x: 1.88, y: 26.5), controlPoint1: NSPoint(x: -0, y: 25.65), controlPoint2: NSPoint(x: 0.84, y: 26.5))
        folderlocked2Path.line(to: NSPoint(x: 12.19, y: 26.5))
        folderlocked2Path.line(to: NSPoint(x: 14.06, y: 22.67))
        folderlocked2Path.line(to: NSPoint(x: 25.31, y: 22.67))
        folderlocked2Path.curve(to: NSPoint(x: 27.19, y: 20.75), controlPoint1: NSPoint(x: 26.35, y: 22.67), controlPoint2: NSPoint(x: 27.19, y: 21.81))
        folderlocked2Path.line(to: NSPoint(x: 27.19, y: 18.83))
        folderlocked2Path.line(to: NSPoint(x: -0, y: 18.83))
        folderlocked2Path.line(to: NSPoint(x: -0, y: 18.83))
        folderlocked2Path.line(to: NSPoint(x: -0, y: 18.83))
        folderlocked2Path.close()
        folderlocked2Path.move(to: NSPoint(x: -0, y: 17.88))
        folderlocked2Path.line(to: NSPoint(x: -0, y: 7.32))
        folderlocked2Path.curve(to: NSPoint(x: 1.87, y: 5.42), controlPoint1: NSPoint(x: -0, y: 6.27), controlPoint2: NSPoint(x: 0.83, y: 5.42))
        folderlocked2Path.line(to: NSPoint(x: 20.62, y: 5.42))
        folderlocked2Path.line(to: NSPoint(x: 20.62, y: 9.25))
        folderlocked2Path.curve(to: NSPoint(x: 21.56, y: 10.91), controlPoint1: NSPoint(x: 20.62, y: 9.96), controlPoint2: NSPoint(x: 21, y: 10.58))
        folderlocked2Path.line(to: NSPoint(x: 21.56, y: 12.6))
        folderlocked2Path.curve(to: NSPoint(x: 25.78, y: 16.92), controlPoint1: NSPoint(x: 21.56, y: 14.98), controlPoint2: NSPoint(x: 23.45, y: 16.92))
        folderlocked2Path.curve(to: NSPoint(x: 27.19, y: 16.67), controlPoint1: NSPoint(x: 26.27, y: 16.92), controlPoint2: NSPoint(x: 26.75, y: 16.83))
        folderlocked2Path.line(to: NSPoint(x: 27.19, y: 17.88))
        folderlocked2Path.line(to: NSPoint(x: -0, y: 17.88))
        folderlocked2Path.line(to: NSPoint(x: -0, y: 17.88))
        folderlocked2Path.close()
        folderlocked2Path.move(to: NSPoint(x: 22.5, y: 12.6))
        folderlocked2Path.curve(to: NSPoint(x: 25.78, y: 15.96), controlPoint1: NSPoint(x: 22.5, y: 14.46), controlPoint2: NSPoint(x: 23.97, y: 15.96))
        folderlocked2Path.curve(to: NSPoint(x: 29.06, y: 12.6), controlPoint1: NSPoint(x: 27.59, y: 15.96), controlPoint2: NSPoint(x: 29.06, y: 14.45))
        folderlocked2Path.line(to: NSPoint(x: 29.06, y: 10.21))
        folderlocked2Path.curve(to: NSPoint(x: 30, y: 9.25), controlPoint1: NSPoint(x: 29.58, y: 10.21), controlPoint2: NSPoint(x: 30, y: 9.78))
        folderlocked2Path.line(to: NSPoint(x: 30, y: 4.46))
        folderlocked2Path.curve(to: NSPoint(x: 29.06, y: 3.5), controlPoint1: NSPoint(x: 30, y: 3.92), controlPoint2: NSPoint(x: 29.58, y: 3.5))
        folderlocked2Path.line(to: NSPoint(x: 22.5, y: 3.5))
        folderlocked2Path.curve(to: NSPoint(x: 21.56, y: 4.46), controlPoint1: NSPoint(x: 21.98, y: 3.5), controlPoint2: NSPoint(x: 21.56, y: 3.93))
        folderlocked2Path.line(to: NSPoint(x: 21.56, y: 9.25))
        folderlocked2Path.curve(to: NSPoint(x: 22.5, y: 10.21), controlPoint1: NSPoint(x: 21.56, y: 9.79), controlPoint2: NSPoint(x: 21.98, y: 10.21))
        folderlocked2Path.line(to: NSPoint(x: 22.5, y: 12.6))
        folderlocked2Path.line(to: NSPoint(x: 22.5, y: 12.6))
        folderlocked2Path.close()
        folderlocked2Path.move(to: NSPoint(x: 23.44, y: 12.6))
        folderlocked2Path.curve(to: NSPoint(x: 25.78, y: 15), controlPoint1: NSPoint(x: 23.44, y: 13.93), controlPoint2: NSPoint(x: 24.49, y: 15))
        folderlocked2Path.curve(to: NSPoint(x: 28.12, y: 12.6), controlPoint1: NSPoint(x: 27.08, y: 15), controlPoint2: NSPoint(x: 28.12, y: 13.92))
        folderlocked2Path.line(to: NSPoint(x: 28.12, y: 10.21))
        folderlocked2Path.line(to: NSPoint(x: 23.44, y: 10.21))
        folderlocked2Path.line(to: NSPoint(x: 23.44, y: 12.6))
        folderlocked2Path.line(to: NSPoint(x: 23.44, y: 12.6))
        folderlocked2Path.close()
        folderlocked2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        folderlocked2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawFolderSearch(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-101-folder-search
        //// folder-search 2 Drawing
        let foldersearch2Path = NSBezierPath()
        foldersearch2Path.move(to: NSPoint(x: 15.81, y: 10.98))
        foldersearch2Path.curve(to: NSPoint(x: 13, y: 10), controlPoint1: NSPoint(x: 15.04, y: 10.37), controlPoint2: NSPoint(x: 14.06, y: 10))
        foldersearch2Path.curve(to: NSPoint(x: 8.5, y: 14.5), controlPoint1: NSPoint(x: 10.51, y: 10), controlPoint2: NSPoint(x: 8.5, y: 12.01))
        foldersearch2Path.curve(to: NSPoint(x: 13, y: 19), controlPoint1: NSPoint(x: 8.5, y: 16.99), controlPoint2: NSPoint(x: 10.51, y: 19))
        foldersearch2Path.curve(to: NSPoint(x: 17.5, y: 14.5), controlPoint1: NSPoint(x: 15.49, y: 19), controlPoint2: NSPoint(x: 17.5, y: 16.99))
        foldersearch2Path.curve(to: NSPoint(x: 16.52, y: 11.69), controlPoint1: NSPoint(x: 17.5, y: 13.44), controlPoint2: NSPoint(x: 17.13, y: 12.46))
        foldersearch2Path.line(to: NSPoint(x: 21.86, y: 6.34))
        foldersearch2Path.line(to: NSPoint(x: 21.16, y: 5.64))
        foldersearch2Path.line(to: NSPoint(x: 15.81, y: 10.98))
        foldersearch2Path.line(to: NSPoint(x: 15.81, y: 10.98))
        foldersearch2Path.close()
        foldersearch2Path.move(to: NSPoint(x: 15.5, y: 22))
        foldersearch2Path.line(to: NSPoint(x: 13.5, y: 26))
        foldersearch2Path.line(to: NSPoint(x: 2.5, y: 26))
        foldersearch2Path.curve(to: NSPoint(x: 0.5, y: 24.01), controlPoint1: NSPoint(x: 1.4, y: 26), controlPoint2: NSPoint(x: 0.5, y: 25.11))
        foldersearch2Path.line(to: NSPoint(x: 0.5, y: 5.99))
        foldersearch2Path.curve(to: NSPoint(x: 2.49, y: 4), controlPoint1: NSPoint(x: 0.5, y: 4.89), controlPoint2: NSPoint(x: 1.4, y: 4))
        foldersearch2Path.line(to: NSPoint(x: 27.51, y: 4))
        foldersearch2Path.curve(to: NSPoint(x: 29.5, y: 6), controlPoint1: NSPoint(x: 28.61, y: 4), controlPoint2: NSPoint(x: 29.5, y: 4.89))
        foldersearch2Path.line(to: NSPoint(x: 29.5, y: 20))
        foldersearch2Path.curve(to: NSPoint(x: 27.49, y: 22), controlPoint1: NSPoint(x: 29.5, y: 21.11), controlPoint2: NSPoint(x: 28.6, y: 22))
        foldersearch2Path.line(to: NSPoint(x: 15.5, y: 22))
        foldersearch2Path.line(to: NSPoint(x: 15.5, y: 22))
        foldersearch2Path.close()
        foldersearch2Path.move(to: NSPoint(x: 13, y: 11))
        foldersearch2Path.curve(to: NSPoint(x: 16.5, y: 14.5), controlPoint1: NSPoint(x: 14.93, y: 11), controlPoint2: NSPoint(x: 16.5, y: 12.57))
        foldersearch2Path.curve(to: NSPoint(x: 13, y: 18), controlPoint1: NSPoint(x: 16.5, y: 16.43), controlPoint2: NSPoint(x: 14.93, y: 18))
        foldersearch2Path.curve(to: NSPoint(x: 9.5, y: 14.5), controlPoint1: NSPoint(x: 11.07, y: 18), controlPoint2: NSPoint(x: 9.5, y: 16.43))
        foldersearch2Path.curve(to: NSPoint(x: 13, y: 11), controlPoint1: NSPoint(x: 9.5, y: 12.57), controlPoint2: NSPoint(x: 11.07, y: 11))
        foldersearch2Path.line(to: NSPoint(x: 13, y: 11))
        foldersearch2Path.close()
        foldersearch2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        foldersearch2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawFolderError(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-102-folder-error
        //// folder-error 2 Drawing
        let foldererror2Path = NSBezierPath()
        foldererror2Path.move(to: NSPoint(x: 17.82, y: 5.42))
        foldererror2Path.line(to: NSPoint(x: 1.87, y: 5.42))
        foldererror2Path.curve(to: NSPoint(x: 0, y: 7.32), controlPoint1: NSPoint(x: 0.84, y: 5.42), controlPoint2: NSPoint(x: 0, y: 6.27))
        foldererror2Path.line(to: NSPoint(x: 0, y: 17.88))
        foldererror2Path.line(to: NSPoint(x: 27.19, y: 17.88))
        foldererror2Path.line(to: NSPoint(x: 27.19, y: 10.28))
        foldererror2Path.line(to: NSPoint(x: 23.91, y: 15.96))
        foldererror2Path.line(to: NSPoint(x: 17.82, y: 5.42))
        foldererror2Path.line(to: NSPoint(x: 17.82, y: 5.42))
        foldererror2Path.line(to: NSPoint(x: 17.82, y: 5.42))
        foldererror2Path.close()
        foldererror2Path.move(to: NSPoint(x: 0, y: 18.83))
        foldererror2Path.line(to: NSPoint(x: 0, y: 24.59))
        foldererror2Path.curve(to: NSPoint(x: 1.88, y: 26.5), controlPoint1: NSPoint(x: 0, y: 25.65), controlPoint2: NSPoint(x: 0.84, y: 26.5))
        foldererror2Path.line(to: NSPoint(x: 12.19, y: 26.5))
        foldererror2Path.line(to: NSPoint(x: 14.06, y: 22.67))
        foldererror2Path.line(to: NSPoint(x: 25.31, y: 22.67))
        foldererror2Path.curve(to: NSPoint(x: 27.19, y: 20.75), controlPoint1: NSPoint(x: 26.35, y: 22.67), controlPoint2: NSPoint(x: 27.19, y: 21.81))
        foldererror2Path.line(to: NSPoint(x: 27.19, y: 18.83))
        foldererror2Path.line(to: NSPoint(x: 0, y: 18.83))
        foldererror2Path.line(to: NSPoint(x: 0, y: 18.83))
        foldererror2Path.line(to: NSPoint(x: 0, y: 18.83))
        foldererror2Path.close()
        foldererror2Path.move(to: NSPoint(x: 23.91, y: 14.04))
        foldererror2Path.line(to: NSPoint(x: 30, y: 3.5))
        foldererror2Path.line(to: NSPoint(x: 17.81, y: 3.5))
        foldererror2Path.line(to: NSPoint(x: 23.91, y: 14.04))
        foldererror2Path.line(to: NSPoint(x: 23.91, y: 14.04))
        foldererror2Path.close()
        foldererror2Path.move(to: NSPoint(x: 23.44, y: 10.21))
        foldererror2Path.line(to: NSPoint(x: 23.44, y: 7.33))
        foldererror2Path.line(to: NSPoint(x: 24.38, y: 7.33))
        foldererror2Path.line(to: NSPoint(x: 24.38, y: 10.21))
        foldererror2Path.line(to: NSPoint(x: 23.44, y: 10.21))
        foldererror2Path.line(to: NSPoint(x: 23.44, y: 10.21))
        foldererror2Path.close()
        foldererror2Path.move(to: NSPoint(x: 23.44, y: 6.38))
        foldererror2Path.line(to: NSPoint(x: 23.44, y: 5.42))
        foldererror2Path.line(to: NSPoint(x: 24.38, y: 5.42))
        foldererror2Path.line(to: NSPoint(x: 24.38, y: 6.38))
        foldererror2Path.line(to: NSPoint(x: 23.44, y: 6.38))
        foldererror2Path.line(to: NSPoint(x: 23.44, y: 6.38))
        foldererror2Path.close()
        foldererror2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        foldererror2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawFolderCancel(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-103-folder-cancel
        //// folder-cancel 2 Drawing
        let foldercancel2Path = NSBezierPath()
        foldercancel2Path.move(to: NSPoint(x: 19.71, y: 5.42))
        foldercancel2Path.line(to: NSPoint(x: 1.87, y: 5.42))
        foldercancel2Path.curve(to: NSPoint(x: 0, y: 7.32), controlPoint1: NSPoint(x: 0.84, y: 5.42), controlPoint2: NSPoint(x: 0, y: 6.27))
        foldercancel2Path.line(to: NSPoint(x: 0, y: 17.88))
        foldercancel2Path.line(to: NSPoint(x: 0, y: 17.88))
        foldercancel2Path.line(to: NSPoint(x: 27.19, y: 17.88))
        foldercancel2Path.line(to: NSPoint(x: 27.19, y: 14.52))
        foldercancel2Path.curve(to: NSPoint(x: 24.84, y: 15), controlPoint1: NSPoint(x: 26.47, y: 14.83), controlPoint2: NSPoint(x: 25.67, y: 15))
        foldercancel2Path.curve(to: NSPoint(x: 18.75, y: 8.77), controlPoint1: NSPoint(x: 21.48, y: 15), controlPoint2: NSPoint(x: 18.75, y: 12.21))
        foldercancel2Path.curve(to: NSPoint(x: 19.71, y: 5.42), controlPoint1: NSPoint(x: 18.75, y: 7.54), controlPoint2: NSPoint(x: 19.1, y: 6.38))
        foldercancel2Path.line(to: NSPoint(x: 19.71, y: 5.42))
        foldercancel2Path.line(to: NSPoint(x: 19.71, y: 5.42))
        foldercancel2Path.close()
        foldercancel2Path.move(to: NSPoint(x: 0, y: 18.83))
        foldercancel2Path.line(to: NSPoint(x: 0, y: 24.59))
        foldercancel2Path.curve(to: NSPoint(x: 1.88, y: 26.5), controlPoint1: NSPoint(x: 0, y: 25.65), controlPoint2: NSPoint(x: 0.84, y: 26.5))
        foldercancel2Path.line(to: NSPoint(x: 12.19, y: 26.5))
        foldercancel2Path.line(to: NSPoint(x: 14.06, y: 22.67))
        foldercancel2Path.line(to: NSPoint(x: 25.31, y: 22.67))
        foldercancel2Path.curve(to: NSPoint(x: 27.19, y: 20.75), controlPoint1: NSPoint(x: 26.35, y: 22.67), controlPoint2: NSPoint(x: 27.19, y: 21.81))
        foldercancel2Path.line(to: NSPoint(x: 27.19, y: 18.83))
        foldercancel2Path.line(to: NSPoint(x: 0, y: 18.83))
        foldercancel2Path.line(to: NSPoint(x: 0, y: 18.83))
        foldercancel2Path.line(to: NSPoint(x: 0, y: 18.83))
        foldercancel2Path.close()
        foldercancel2Path.move(to: NSPoint(x: 24.84, y: 3.5))
        foldercancel2Path.curve(to: NSPoint(x: 30, y: 8.77), controlPoint1: NSPoint(x: 27.69, y: 3.5), controlPoint2: NSPoint(x: 30, y: 5.86))
        foldercancel2Path.curve(to: NSPoint(x: 24.84, y: 14.04), controlPoint1: NSPoint(x: 30, y: 11.68), controlPoint2: NSPoint(x: 27.69, y: 14.04))
        foldercancel2Path.curve(to: NSPoint(x: 19.69, y: 8.77), controlPoint1: NSPoint(x: 22, y: 14.04), controlPoint2: NSPoint(x: 19.69, y: 11.68))
        foldercancel2Path.curve(to: NSPoint(x: 24.84, y: 3.5), controlPoint1: NSPoint(x: 19.69, y: 5.86), controlPoint2: NSPoint(x: 22, y: 3.5))
        foldercancel2Path.close()
        foldercancel2Path.move(to: NSPoint(x: 24.84, y: 8.09))
        foldercancel2Path.line(to: NSPoint(x: 22.86, y: 6.06))
        foldercancel2Path.line(to: NSPoint(x: 22.19, y: 6.74))
        foldercancel2Path.line(to: NSPoint(x: 24.18, y: 8.77))
        foldercancel2Path.line(to: NSPoint(x: 22.19, y: 10.8))
        foldercancel2Path.line(to: NSPoint(x: 22.86, y: 11.48))
        foldercancel2Path.line(to: NSPoint(x: 24.84, y: 9.45))
        foldercancel2Path.line(to: NSPoint(x: 26.83, y: 11.48))
        foldercancel2Path.line(to: NSPoint(x: 27.5, y: 10.8))
        foldercancel2Path.line(to: NSPoint(x: 25.51, y: 8.77))
        foldercancel2Path.line(to: NSPoint(x: 27.5, y: 6.74))
        foldercancel2Path.line(to: NSPoint(x: 26.83, y: 6.06))
        foldercancel2Path.line(to: NSPoint(x: 24.84, y: 8.09))
        foldercancel2Path.line(to: NSPoint(x: 24.84, y: 8.09))
        foldercancel2Path.close()
        foldercancel2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        foldercancel2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawFolderChecked(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-104-folder-checked
        //// folder-checked 2 Drawing
        let folderchecked2Path = NSBezierPath()
        folderchecked2Path.move(to: NSPoint(x: 19.71, y: 5.42))
        folderchecked2Path.line(to: NSPoint(x: 1.87, y: 5.42))
        folderchecked2Path.curve(to: NSPoint(x: 0, y: 7.32), controlPoint1: NSPoint(x: 0.84, y: 5.42), controlPoint2: NSPoint(x: 0, y: 6.27))
        folderchecked2Path.line(to: NSPoint(x: 0, y: 17.88))
        folderchecked2Path.line(to: NSPoint(x: 0, y: 17.88))
        folderchecked2Path.line(to: NSPoint(x: 27.19, y: 17.88))
        folderchecked2Path.line(to: NSPoint(x: 27.19, y: 14.52))
        folderchecked2Path.curve(to: NSPoint(x: 24.84, y: 15), controlPoint1: NSPoint(x: 26.47, y: 14.83), controlPoint2: NSPoint(x: 25.67, y: 15))
        folderchecked2Path.curve(to: NSPoint(x: 18.75, y: 8.77), controlPoint1: NSPoint(x: 21.48, y: 15), controlPoint2: NSPoint(x: 18.75, y: 12.21))
        folderchecked2Path.curve(to: NSPoint(x: 19.71, y: 5.42), controlPoint1: NSPoint(x: 18.75, y: 7.54), controlPoint2: NSPoint(x: 19.1, y: 6.38))
        folderchecked2Path.line(to: NSPoint(x: 19.71, y: 5.42))
        folderchecked2Path.line(to: NSPoint(x: 19.71, y: 5.42))
        folderchecked2Path.close()
        folderchecked2Path.move(to: NSPoint(x: 0, y: 18.83))
        folderchecked2Path.line(to: NSPoint(x: 0, y: 24.59))
        folderchecked2Path.curve(to: NSPoint(x: 1.88, y: 26.5), controlPoint1: NSPoint(x: 0, y: 25.65), controlPoint2: NSPoint(x: 0.84, y: 26.5))
        folderchecked2Path.line(to: NSPoint(x: 12.19, y: 26.5))
        folderchecked2Path.line(to: NSPoint(x: 14.06, y: 22.67))
        folderchecked2Path.line(to: NSPoint(x: 25.31, y: 22.67))
        folderchecked2Path.curve(to: NSPoint(x: 27.19, y: 20.75), controlPoint1: NSPoint(x: 26.35, y: 22.67), controlPoint2: NSPoint(x: 27.19, y: 21.81))
        folderchecked2Path.line(to: NSPoint(x: 27.19, y: 18.83))
        folderchecked2Path.line(to: NSPoint(x: 0, y: 18.83))
        folderchecked2Path.line(to: NSPoint(x: 0, y: 18.83))
        folderchecked2Path.line(to: NSPoint(x: 0, y: 18.83))
        folderchecked2Path.close()
        folderchecked2Path.move(to: NSPoint(x: 24.84, y: 3.5))
        folderchecked2Path.curve(to: NSPoint(x: 30, y: 8.77), controlPoint1: NSPoint(x: 27.69, y: 3.5), controlPoint2: NSPoint(x: 30, y: 5.86))
        folderchecked2Path.curve(to: NSPoint(x: 24.84, y: 14.04), controlPoint1: NSPoint(x: 30, y: 11.68), controlPoint2: NSPoint(x: 27.69, y: 14.04))
        folderchecked2Path.curve(to: NSPoint(x: 19.69, y: 8.77), controlPoint1: NSPoint(x: 22, y: 14.04), controlPoint2: NSPoint(x: 19.69, y: 11.68))
        folderchecked2Path.curve(to: NSPoint(x: 24.84, y: 3.5), controlPoint1: NSPoint(x: 19.69, y: 5.86), controlPoint2: NSPoint(x: 22, y: 3.5))
        folderchecked2Path.line(to: NSPoint(x: 24.84, y: 3.5))
        folderchecked2Path.close()
        folderchecked2Path.move(to: NSPoint(x: 24.38, y: 6.14))
        folderchecked2Path.line(to: NSPoint(x: 22.17, y: 8.4))
        folderchecked2Path.line(to: NSPoint(x: 22.86, y: 9.1))
        folderchecked2Path.line(to: NSPoint(x: 24.38, y: 7.55))
        folderchecked2Path.line(to: NSPoint(x: 27.3, y: 10.54))
        folderchecked2Path.line(to: NSPoint(x: 27.99, y: 9.84))
        folderchecked2Path.line(to: NSPoint(x: 24.38, y: 6.14))
        folderchecked2Path.line(to: NSPoint(x: 24.38, y: 6.14))
        folderchecked2Path.close()
        folderchecked2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        folderchecked2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawFolderAdd(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-105-folder-add
        //// folder-add 2 Drawing
        let folderadd2Path = NSBezierPath()
        folderadd2Path.move(to: NSPoint(x: 24.38, y: 8.29))
        folderadd2Path.line(to: NSPoint(x: 21.56, y: 8.29))
        folderadd2Path.line(to: NSPoint(x: 21.56, y: 9.25))
        folderadd2Path.line(to: NSPoint(x: 24.38, y: 9.25))
        folderadd2Path.line(to: NSPoint(x: 24.38, y: 12.12))
        folderadd2Path.line(to: NSPoint(x: 25.31, y: 12.12))
        folderadd2Path.line(to: NSPoint(x: 25.31, y: 9.25))
        folderadd2Path.line(to: NSPoint(x: 28.12, y: 9.25))
        folderadd2Path.line(to: NSPoint(x: 28.12, y: 8.29))
        folderadd2Path.line(to: NSPoint(x: 25.31, y: 8.29))
        folderadd2Path.line(to: NSPoint(x: 25.31, y: 5.42))
        folderadd2Path.line(to: NSPoint(x: 24.38, y: 5.42))
        folderadd2Path.line(to: NSPoint(x: 24.38, y: 8.29))
        folderadd2Path.line(to: NSPoint(x: 24.38, y: 8.29))
        folderadd2Path.close()
        folderadd2Path.move(to: NSPoint(x: 19.71, y: 5.42))
        folderadd2Path.line(to: NSPoint(x: 1.87, y: 5.42))
        folderadd2Path.curve(to: NSPoint(x: 0, y: 7.32), controlPoint1: NSPoint(x: 0.84, y: 5.42), controlPoint2: NSPoint(x: 0, y: 6.27))
        folderadd2Path.line(to: NSPoint(x: 0, y: 17.88))
        folderadd2Path.line(to: NSPoint(x: 0, y: 17.88))
        folderadd2Path.line(to: NSPoint(x: 27.19, y: 17.88))
        folderadd2Path.line(to: NSPoint(x: 27.19, y: 14.52))
        folderadd2Path.curve(to: NSPoint(x: 24.84, y: 15), controlPoint1: NSPoint(x: 26.47, y: 14.83), controlPoint2: NSPoint(x: 25.67, y: 15))
        folderadd2Path.curve(to: NSPoint(x: 18.75, y: 8.77), controlPoint1: NSPoint(x: 21.48, y: 15), controlPoint2: NSPoint(x: 18.75, y: 12.21))
        folderadd2Path.curve(to: NSPoint(x: 19.71, y: 5.42), controlPoint1: NSPoint(x: 18.75, y: 7.54), controlPoint2: NSPoint(x: 19.1, y: 6.38))
        folderadd2Path.line(to: NSPoint(x: 19.71, y: 5.42))
        folderadd2Path.line(to: NSPoint(x: 19.71, y: 5.42))
        folderadd2Path.close()
        folderadd2Path.move(to: NSPoint(x: 0, y: 18.83))
        folderadd2Path.line(to: NSPoint(x: 0, y: 24.59))
        folderadd2Path.curve(to: NSPoint(x: 1.88, y: 26.5), controlPoint1: NSPoint(x: 0, y: 25.65), controlPoint2: NSPoint(x: 0.84, y: 26.5))
        folderadd2Path.line(to: NSPoint(x: 12.19, y: 26.5))
        folderadd2Path.line(to: NSPoint(x: 14.06, y: 22.67))
        folderadd2Path.line(to: NSPoint(x: 25.31, y: 22.67))
        folderadd2Path.curve(to: NSPoint(x: 27.19, y: 20.75), controlPoint1: NSPoint(x: 26.35, y: 22.67), controlPoint2: NSPoint(x: 27.19, y: 21.81))
        folderadd2Path.line(to: NSPoint(x: 27.19, y: 18.83))
        folderadd2Path.line(to: NSPoint(x: 0, y: 18.83))
        folderadd2Path.line(to: NSPoint(x: 0, y: 18.83))
        folderadd2Path.line(to: NSPoint(x: 0, y: 18.83))
        folderadd2Path.close()
        folderadd2Path.move(to: NSPoint(x: 24.84, y: 3.5))
        folderadd2Path.curve(to: NSPoint(x: 30, y: 8.77), controlPoint1: NSPoint(x: 27.69, y: 3.5), controlPoint2: NSPoint(x: 30, y: 5.86))
        folderadd2Path.curve(to: NSPoint(x: 24.84, y: 14.04), controlPoint1: NSPoint(x: 30, y: 11.68), controlPoint2: NSPoint(x: 27.69, y: 14.04))
        folderadd2Path.curve(to: NSPoint(x: 19.69, y: 8.77), controlPoint1: NSPoint(x: 22, y: 14.04), controlPoint2: NSPoint(x: 19.69, y: 11.68))
        folderadd2Path.curve(to: NSPoint(x: 24.84, y: 3.5), controlPoint1: NSPoint(x: 19.69, y: 5.86), controlPoint2: NSPoint(x: 22, y: 3.5))
        folderadd2Path.line(to: NSPoint(x: 24.84, y: 3.5))
        folderadd2Path.close()
        folderadd2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        folderadd2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawFolderRemove(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-106-folder-remove
        //// folder-remove 2 Drawing
        let folderremove2Path = NSBezierPath()
        folderremove2Path.move(to: NSPoint(x: 19.71, y: 5.42))
        folderremove2Path.line(to: NSPoint(x: 1.87, y: 5.42))
        folderremove2Path.curve(to: NSPoint(x: 0, y: 7.32), controlPoint1: NSPoint(x: 0.84, y: 5.42), controlPoint2: NSPoint(x: 0, y: 6.27))
        folderremove2Path.line(to: NSPoint(x: 0, y: 17.88))
        folderremove2Path.line(to: NSPoint(x: 0, y: 17.88))
        folderremove2Path.line(to: NSPoint(x: 27.19, y: 17.88))
        folderremove2Path.line(to: NSPoint(x: 27.19, y: 14.52))
        folderremove2Path.curve(to: NSPoint(x: 24.84, y: 15), controlPoint1: NSPoint(x: 26.47, y: 14.83), controlPoint2: NSPoint(x: 25.67, y: 15))
        folderremove2Path.curve(to: NSPoint(x: 18.75, y: 8.77), controlPoint1: NSPoint(x: 21.48, y: 15), controlPoint2: NSPoint(x: 18.75, y: 12.21))
        folderremove2Path.curve(to: NSPoint(x: 19.71, y: 5.42), controlPoint1: NSPoint(x: 18.75, y: 7.54), controlPoint2: NSPoint(x: 19.1, y: 6.38))
        folderremove2Path.line(to: NSPoint(x: 19.71, y: 5.42))
        folderremove2Path.line(to: NSPoint(x: 19.71, y: 5.42))
        folderremove2Path.close()
        folderremove2Path.move(to: NSPoint(x: 0, y: 18.83))
        folderremove2Path.line(to: NSPoint(x: 0, y: 24.59))
        folderremove2Path.curve(to: NSPoint(x: 1.88, y: 26.5), controlPoint1: NSPoint(x: 0, y: 25.65), controlPoint2: NSPoint(x: 0.84, y: 26.5))
        folderremove2Path.line(to: NSPoint(x: 12.19, y: 26.5))
        folderremove2Path.line(to: NSPoint(x: 14.06, y: 22.67))
        folderremove2Path.line(to: NSPoint(x: 25.31, y: 22.67))
        folderremove2Path.curve(to: NSPoint(x: 27.19, y: 20.75), controlPoint1: NSPoint(x: 26.35, y: 22.67), controlPoint2: NSPoint(x: 27.19, y: 21.81))
        folderremove2Path.line(to: NSPoint(x: 27.19, y: 18.83))
        folderremove2Path.line(to: NSPoint(x: 0, y: 18.83))
        folderremove2Path.line(to: NSPoint(x: 0, y: 18.83))
        folderremove2Path.line(to: NSPoint(x: 0, y: 18.83))
        folderremove2Path.close()
        folderremove2Path.move(to: NSPoint(x: 24.84, y: 3.5))
        folderremove2Path.curve(to: NSPoint(x: 30, y: 8.77), controlPoint1: NSPoint(x: 27.69, y: 3.5), controlPoint2: NSPoint(x: 30, y: 5.86))
        folderremove2Path.curve(to: NSPoint(x: 24.84, y: 14.04), controlPoint1: NSPoint(x: 30, y: 11.68), controlPoint2: NSPoint(x: 27.69, y: 14.04))
        folderremove2Path.curve(to: NSPoint(x: 19.69, y: 8.77), controlPoint1: NSPoint(x: 22, y: 14.04), controlPoint2: NSPoint(x: 19.69, y: 11.68))
        folderremove2Path.curve(to: NSPoint(x: 24.84, y: 3.5), controlPoint1: NSPoint(x: 19.69, y: 5.86), controlPoint2: NSPoint(x: 22, y: 3.5))
        folderremove2Path.line(to: NSPoint(x: 24.84, y: 3.5))
        folderremove2Path.close()
        folderremove2Path.move(to: NSPoint(x: 21.56, y: 9.25))
        folderremove2Path.line(to: NSPoint(x: 21.56, y: 8.29))
        folderremove2Path.line(to: NSPoint(x: 28.12, y: 8.29))
        folderremove2Path.line(to: NSPoint(x: 28.12, y: 9.25))
        folderremove2Path.line(to: NSPoint(x: 21.56, y: 9.25))
        folderremove2Path.line(to: NSPoint(x: 21.56, y: 9.25))
        folderremove2Path.close()
        folderremove2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        folderremove2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawFolderForbidden(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-107-folder-forbidden
        //// folder-forbidden 2 Drawing
        let folderforbidden2Path = NSBezierPath()
        folderforbidden2Path.move(to: NSPoint(x: 28.85, y: 12.1))
        folderforbidden2Path.curve(to: NSPoint(x: 30, y: 8.77), controlPoint1: NSPoint(x: 29.57, y: 11.19), controlPoint2: NSPoint(x: 30, y: 10.03))
        folderforbidden2Path.curve(to: NSPoint(x: 24.84, y: 3.5), controlPoint1: NSPoint(x: 30, y: 5.86), controlPoint2: NSPoint(x: 27.69, y: 3.5))
        folderforbidden2Path.curve(to: NSPoint(x: 21.59, y: 4.68), controlPoint1: NSPoint(x: 23.61, y: 3.5), controlPoint2: NSPoint(x: 22.48, y: 3.94))
        folderforbidden2Path.line(to: NSPoint(x: 28.85, y: 12.1))
        folderforbidden2Path.line(to: NSPoint(x: 28.85, y: 12.1))
        folderforbidden2Path.close()
        folderforbidden2Path.move(to: NSPoint(x: 28.19, y: 12.78))
        folderforbidden2Path.curve(to: NSPoint(x: 24.84, y: 14.04), controlPoint1: NSPoint(x: 27.29, y: 13.57), controlPoint2: NSPoint(x: 26.12, y: 14.04))
        folderforbidden2Path.curve(to: NSPoint(x: 19.69, y: 8.77), controlPoint1: NSPoint(x: 22, y: 14.04), controlPoint2: NSPoint(x: 19.69, y: 11.68))
        folderforbidden2Path.curve(to: NSPoint(x: 20.92, y: 5.35), controlPoint1: NSPoint(x: 19.69, y: 7.47), controlPoint2: NSPoint(x: 20.15, y: 6.27))
        folderforbidden2Path.line(to: NSPoint(x: 28.19, y: 12.78))
        folderforbidden2Path.line(to: NSPoint(x: 28.19, y: 12.78))
        folderforbidden2Path.close()
        folderforbidden2Path.move(to: NSPoint(x: 19.71, y: 5.42))
        folderforbidden2Path.line(to: NSPoint(x: 1.87, y: 5.42))
        folderforbidden2Path.curve(to: NSPoint(x: 0, y: 7.32), controlPoint1: NSPoint(x: 0.84, y: 5.42), controlPoint2: NSPoint(x: 0, y: 6.27))
        folderforbidden2Path.line(to: NSPoint(x: 0, y: 17.88))
        folderforbidden2Path.line(to: NSPoint(x: 0, y: 17.88))
        folderforbidden2Path.line(to: NSPoint(x: 27.19, y: 17.88))
        folderforbidden2Path.line(to: NSPoint(x: 27.19, y: 14.52))
        folderforbidden2Path.curve(to: NSPoint(x: 24.84, y: 15), controlPoint1: NSPoint(x: 26.47, y: 14.83), controlPoint2: NSPoint(x: 25.67, y: 15))
        folderforbidden2Path.curve(to: NSPoint(x: 18.75, y: 8.77), controlPoint1: NSPoint(x: 21.48, y: 15), controlPoint2: NSPoint(x: 18.75, y: 12.21))
        folderforbidden2Path.curve(to: NSPoint(x: 19.71, y: 5.42), controlPoint1: NSPoint(x: 18.75, y: 7.54), controlPoint2: NSPoint(x: 19.1, y: 6.38))
        folderforbidden2Path.line(to: NSPoint(x: 19.71, y: 5.42))
        folderforbidden2Path.line(to: NSPoint(x: 19.71, y: 5.42))
        folderforbidden2Path.close()
        folderforbidden2Path.move(to: NSPoint(x: 0, y: 18.83))
        folderforbidden2Path.line(to: NSPoint(x: 0, y: 24.59))
        folderforbidden2Path.curve(to: NSPoint(x: 1.88, y: 26.5), controlPoint1: NSPoint(x: 0, y: 25.65), controlPoint2: NSPoint(x: 0.84, y: 26.5))
        folderforbidden2Path.line(to: NSPoint(x: 12.19, y: 26.5))
        folderforbidden2Path.line(to: NSPoint(x: 14.06, y: 22.67))
        folderforbidden2Path.line(to: NSPoint(x: 25.31, y: 22.67))
        folderforbidden2Path.curve(to: NSPoint(x: 27.19, y: 20.75), controlPoint1: NSPoint(x: 26.35, y: 22.67), controlPoint2: NSPoint(x: 27.19, y: 21.81))
        folderforbidden2Path.line(to: NSPoint(x: 27.19, y: 18.83))
        folderforbidden2Path.line(to: NSPoint(x: 0, y: 18.83))
        folderforbidden2Path.line(to: NSPoint(x: 0, y: 18.83))
        folderforbidden2Path.line(to: NSPoint(x: 0, y: 18.83))
        folderforbidden2Path.close()
        folderforbidden2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        folderforbidden2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawFolderBookmark(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-108-folder-bookmark
        //// folder-bookmark 2 Drawing
        let folderbookmark2Path = NSBezierPath()
        folderbookmark2Path.move(to: NSPoint(x: 22.5, y: 17))
        folderbookmark2Path.line(to: NSPoint(x: 29.5, y: 17))
        folderbookmark2Path.line(to: NSPoint(x: 29.5, y: 6))
        folderbookmark2Path.curve(to: NSPoint(x: 27.51, y: 4), controlPoint1: NSPoint(x: 29.5, y: 4.89), controlPoint2: NSPoint(x: 28.61, y: 4))
        folderbookmark2Path.line(to: NSPoint(x: 2.49, y: 4))
        folderbookmark2Path.curve(to: NSPoint(x: 0.5, y: 5.99), controlPoint1: NSPoint(x: 1.4, y: 4), controlPoint2: NSPoint(x: 0.5, y: 4.89))
        folderbookmark2Path.line(to: NSPoint(x: 0.5, y: 17))
        folderbookmark2Path.line(to: NSPoint(x: 0.5, y: 17))
        folderbookmark2Path.line(to: NSPoint(x: 16.5, y: 17))
        folderbookmark2Path.line(to: NSPoint(x: 16.5, y: 8))
        folderbookmark2Path.line(to: NSPoint(x: 19.5, y: 11))
        folderbookmark2Path.line(to: NSPoint(x: 22.5, y: 8))
        folderbookmark2Path.line(to: NSPoint(x: 22.5, y: 17))
        folderbookmark2Path.line(to: NSPoint(x: 22.5, y: 17))
        folderbookmark2Path.close()
        folderbookmark2Path.move(to: NSPoint(x: 0.5, y: 18))
        folderbookmark2Path.line(to: NSPoint(x: 0.5, y: 24.01))
        folderbookmark2Path.curve(to: NSPoint(x: 2.5, y: 26), controlPoint1: NSPoint(x: 0.5, y: 25.11), controlPoint2: NSPoint(x: 1.4, y: 26))
        folderbookmark2Path.line(to: NSPoint(x: 13.5, y: 26))
        folderbookmark2Path.line(to: NSPoint(x: 15.5, y: 22))
        folderbookmark2Path.line(to: NSPoint(x: 27.49, y: 22))
        folderbookmark2Path.curve(to: NSPoint(x: 29.5, y: 20), controlPoint1: NSPoint(x: 28.6, y: 22), controlPoint2: NSPoint(x: 29.5, y: 21.11))
        folderbookmark2Path.line(to: NSPoint(x: 29.5, y: 18))
        folderbookmark2Path.line(to: NSPoint(x: 0.5, y: 18))
        folderbookmark2Path.line(to: NSPoint(x: 0.5, y: 18))
        folderbookmark2Path.line(to: NSPoint(x: 0.5, y: 18))
        folderbookmark2Path.close()
        folderbookmark2Path.move(to: NSPoint(x: 17.5, y: 17))
        folderbookmark2Path.line(to: NSPoint(x: 17.5, y: 10.4))
        folderbookmark2Path.line(to: NSPoint(x: 19.5, y: 12.4))
        folderbookmark2Path.line(to: NSPoint(x: 21.5, y: 10.4))
        folderbookmark2Path.line(to: NSPoint(x: 21.5, y: 17))
        folderbookmark2Path.line(to: NSPoint(x: 17.5, y: 17))
        folderbookmark2Path.line(to: NSPoint(x: 17.5, y: 17))
        folderbookmark2Path.close()
        folderbookmark2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        folderbookmark2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentZip(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-109-document-zip
        //// document-zip 2 Drawing
        let documentzip2Path = NSBezierPath()
        documentzip2Path.move(to: NSPoint(x: 11.5, y: 13.45))
        documentzip2Path.line(to: NSPoint(x: 11.5, y: 14.5))
        documentzip2Path.line(to: NSPoint(x: 10.5, y: 14.5))
        documentzip2Path.line(to: NSPoint(x: 10.5, y: 15.5))
        documentzip2Path.line(to: NSPoint(x: 11.5, y: 15.5))
        documentzip2Path.line(to: NSPoint(x: 11.5, y: 16.5))
        documentzip2Path.line(to: NSPoint(x: 10.5, y: 16.5))
        documentzip2Path.line(to: NSPoint(x: 10.5, y: 17.5))
        documentzip2Path.line(to: NSPoint(x: 11.5, y: 17.5))
        documentzip2Path.line(to: NSPoint(x: 11.5, y: 18.5))
        documentzip2Path.line(to: NSPoint(x: 10.5, y: 18.5))
        documentzip2Path.line(to: NSPoint(x: 10.5, y: 19.5))
        documentzip2Path.line(to: NSPoint(x: 11.5, y: 19.5))
        documentzip2Path.line(to: NSPoint(x: 11.5, y: 20.5))
        documentzip2Path.line(to: NSPoint(x: 10.5, y: 20.5))
        documentzip2Path.line(to: NSPoint(x: 10.5, y: 21.5))
        documentzip2Path.line(to: NSPoint(x: 11.5, y: 21.5))
        documentzip2Path.line(to: NSPoint(x: 11.5, y: 22.5))
        documentzip2Path.line(to: NSPoint(x: 10.5, y: 22.5))
        documentzip2Path.line(to: NSPoint(x: 10.5, y: 23.5))
        documentzip2Path.line(to: NSPoint(x: 11.5, y: 23.5))
        documentzip2Path.line(to: NSPoint(x: 11.5, y: 24.5))
        documentzip2Path.line(to: NSPoint(x: 10.5, y: 24.5))
        documentzip2Path.line(to: NSPoint(x: 10.5, y: 25.5))
        documentzip2Path.line(to: NSPoint(x: 11.5, y: 25.5))
        documentzip2Path.line(to: NSPoint(x: 11.5, y: 26.5))
        documentzip2Path.line(to: NSPoint(x: 10.5, y: 26.5))
        documentzip2Path.line(to: NSPoint(x: 10.5, y: 27.5))
        documentzip2Path.line(to: NSPoint(x: 11.5, y: 27.5))
        documentzip2Path.line(to: NSPoint(x: 11.5, y: 28.5))
        documentzip2Path.line(to: NSPoint(x: 7.51, y: 28.5))
        documentzip2Path.curve(to: NSPoint(x: 5.5, y: 26.49), controlPoint1: NSPoint(x: 6.4, y: 28.5), controlPoint2: NSPoint(x: 5.5, y: 27.6))
        documentzip2Path.line(to: NSPoint(x: 5.5, y: 3.51))
        documentzip2Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        documentzip2Path.line(to: NSPoint(x: 22.5, y: 1.5))
        documentzip2Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        documentzip2Path.line(to: NSPoint(x: 24.5, y: 20.5))
        documentzip2Path.line(to: NSPoint(x: 19.51, y: 20.5))
        documentzip2Path.curve(to: NSPoint(x: 17.5, y: 22.5), controlPoint1: NSPoint(x: 18.4, y: 20.5), controlPoint2: NSPoint(x: 17.5, y: 21.39))
        documentzip2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentzip2Path.line(to: NSPoint(x: 13.5, y: 28.5))
        documentzip2Path.line(to: NSPoint(x: 13.5, y: 27.5))
        documentzip2Path.line(to: NSPoint(x: 12.5, y: 27.5))
        documentzip2Path.line(to: NSPoint(x: 12.5, y: 26.5))
        documentzip2Path.line(to: NSPoint(x: 13.5, y: 26.5))
        documentzip2Path.line(to: NSPoint(x: 13.5, y: 25.5))
        documentzip2Path.line(to: NSPoint(x: 12.5, y: 25.5))
        documentzip2Path.line(to: NSPoint(x: 12.5, y: 24.5))
        documentzip2Path.line(to: NSPoint(x: 13.5, y: 24.5))
        documentzip2Path.line(to: NSPoint(x: 13.5, y: 23.5))
        documentzip2Path.line(to: NSPoint(x: 12.5, y: 23.5))
        documentzip2Path.line(to: NSPoint(x: 12.5, y: 22.5))
        documentzip2Path.line(to: NSPoint(x: 13.5, y: 22.5))
        documentzip2Path.line(to: NSPoint(x: 13.5, y: 21.5))
        documentzip2Path.line(to: NSPoint(x: 12.5, y: 21.5))
        documentzip2Path.line(to: NSPoint(x: 12.5, y: 20.5))
        documentzip2Path.line(to: NSPoint(x: 13.5, y: 20.5))
        documentzip2Path.line(to: NSPoint(x: 13.5, y: 19.5))
        documentzip2Path.line(to: NSPoint(x: 12.5, y: 19.5))
        documentzip2Path.line(to: NSPoint(x: 12.5, y: 18.5))
        documentzip2Path.line(to: NSPoint(x: 13.5, y: 18.5))
        documentzip2Path.line(to: NSPoint(x: 13.5, y: 17.5))
        documentzip2Path.line(to: NSPoint(x: 12.5, y: 17.5))
        documentzip2Path.line(to: NSPoint(x: 12.5, y: 16.5))
        documentzip2Path.line(to: NSPoint(x: 13.5, y: 16.5))
        documentzip2Path.line(to: NSPoint(x: 13.5, y: 15.5))
        documentzip2Path.line(to: NSPoint(x: 12.5, y: 15.5))
        documentzip2Path.line(to: NSPoint(x: 12.5, y: 14.5))
        documentzip2Path.line(to: NSPoint(x: 12.5, y: 13.45))
        documentzip2Path.curve(to: NSPoint(x: 14.5, y: 11), controlPoint1: NSPoint(x: 13.65, y: 13.22), controlPoint2: NSPoint(x: 14.5, y: 12.21))
        documentzip2Path.curve(to: NSPoint(x: 12, y: 8.5), controlPoint1: NSPoint(x: 14.5, y: 9.61), controlPoint2: NSPoint(x: 13.38, y: 8.5))
        documentzip2Path.curve(to: NSPoint(x: 9.5, y: 11), controlPoint1: NSPoint(x: 10.61, y: 8.5), controlPoint2: NSPoint(x: 9.5, y: 9.62))
        documentzip2Path.curve(to: NSPoint(x: 11.5, y: 13.45), controlPoint1: NSPoint(x: 9.5, y: 12.22), controlPoint2: NSPoint(x: 10.36, y: 13.22))
        documentzip2Path.line(to: NSPoint(x: 11.5, y: 13.45))
        documentzip2Path.line(to: NSPoint(x: 11.5, y: 13.45))
        documentzip2Path.close()
        documentzip2Path.move(to: NSPoint(x: 18.5, y: 28.5))
        documentzip2Path.line(to: NSPoint(x: 18.5, y: 22.5))
        documentzip2Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        documentzip2Path.line(to: NSPoint(x: 24.5, y: 21.5))
        documentzip2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentzip2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentzip2Path.close()
        documentzip2Path.move(to: NSPoint(x: 12, y: 12.5))
        documentzip2Path.curve(to: NSPoint(x: 10.5, y: 11), controlPoint1: NSPoint(x: 11.17, y: 12.5), controlPoint2: NSPoint(x: 10.5, y: 11.83))
        documentzip2Path.curve(to: NSPoint(x: 12, y: 9.5), controlPoint1: NSPoint(x: 10.5, y: 10.17), controlPoint2: NSPoint(x: 11.17, y: 9.5))
        documentzip2Path.curve(to: NSPoint(x: 13.5, y: 11), controlPoint1: NSPoint(x: 12.83, y: 9.5), controlPoint2: NSPoint(x: 13.5, y: 10.17))
        documentzip2Path.curve(to: NSPoint(x: 12, y: 12.5), controlPoint1: NSPoint(x: 13.5, y: 11.83), controlPoint2: NSPoint(x: 12.83, y: 12.5))
        documentzip2Path.line(to: NSPoint(x: 12, y: 12.5))
        documentzip2Path.close()
        documentzip2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentzip2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawZip(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-110-zip
        //// zip 2 Drawing
        let zip2Path = NSBezierPath()
        zip2Path.move(to: NSPoint(x: 14.5, y: 13.45))
        zip2Path.line(to: NSPoint(x: 14.5, y: 14.5))
        zip2Path.line(to: NSPoint(x: 13.5, y: 14.5))
        zip2Path.line(to: NSPoint(x: 13.5, y: 15.5))
        zip2Path.line(to: NSPoint(x: 14.5, y: 15.5))
        zip2Path.line(to: NSPoint(x: 14.5, y: 16.5))
        zip2Path.line(to: NSPoint(x: 13.5, y: 16.5))
        zip2Path.line(to: NSPoint(x: 13.5, y: 17.5))
        zip2Path.line(to: NSPoint(x: 14.5, y: 17.5))
        zip2Path.line(to: NSPoint(x: 14.5, y: 18.5))
        zip2Path.line(to: NSPoint(x: 13.5, y: 18.5))
        zip2Path.line(to: NSPoint(x: 13.5, y: 19.5))
        zip2Path.line(to: NSPoint(x: 14.5, y: 19.5))
        zip2Path.line(to: NSPoint(x: 14.5, y: 20.5))
        zip2Path.line(to: NSPoint(x: 13.5, y: 20.5))
        zip2Path.line(to: NSPoint(x: 13.5, y: 21.5))
        zip2Path.line(to: NSPoint(x: 14.5, y: 21.5))
        zip2Path.line(to: NSPoint(x: 14.5, y: 22.5))
        zip2Path.line(to: NSPoint(x: 13.5, y: 22.5))
        zip2Path.line(to: NSPoint(x: 13.5, y: 23.5))
        zip2Path.line(to: NSPoint(x: 14.5, y: 23.5))
        zip2Path.line(to: NSPoint(x: 14.5, y: 24.5))
        zip2Path.line(to: NSPoint(x: 13.5, y: 24.5))
        zip2Path.line(to: NSPoint(x: 13.5, y: 25.5))
        zip2Path.line(to: NSPoint(x: 14.5, y: 25.5))
        zip2Path.line(to: NSPoint(x: 14.5, y: 26.5))
        zip2Path.line(to: NSPoint(x: 13.5, y: 26.5))
        zip2Path.line(to: NSPoint(x: 13.5, y: 27.5))
        zip2Path.line(to: NSPoint(x: 14.5, y: 27.5))
        zip2Path.line(to: NSPoint(x: 14.5, y: 28.5))
        zip2Path.line(to: NSPoint(x: 9.51, y: 28.5))
        zip2Path.curve(to: NSPoint(x: 5.5, y: 24.5), controlPoint1: NSPoint(x: 7.29, y: 28.5), controlPoint2: NSPoint(x: 5.5, y: 26.71))
        zip2Path.line(to: NSPoint(x: 5.5, y: 5.5))
        zip2Path.curve(to: NSPoint(x: 9.51, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 3.29), controlPoint2: NSPoint(x: 7.29, y: 1.5))
        zip2Path.line(to: NSPoint(x: 20.49, y: 1.5))
        zip2Path.curve(to: NSPoint(x: 24.5, y: 5.5), controlPoint1: NSPoint(x: 22.71, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 3.29))
        zip2Path.line(to: NSPoint(x: 24.5, y: 24.5))
        zip2Path.curve(to: NSPoint(x: 20.49, y: 28.5), controlPoint1: NSPoint(x: 24.5, y: 26.71), controlPoint2: NSPoint(x: 22.71, y: 28.5))
        zip2Path.line(to: NSPoint(x: 16.5, y: 28.5))
        zip2Path.line(to: NSPoint(x: 16.5, y: 27.5))
        zip2Path.line(to: NSPoint(x: 15.5, y: 27.5))
        zip2Path.line(to: NSPoint(x: 15.5, y: 26.5))
        zip2Path.line(to: NSPoint(x: 16.5, y: 26.5))
        zip2Path.line(to: NSPoint(x: 16.5, y: 25.5))
        zip2Path.line(to: NSPoint(x: 15.5, y: 25.5))
        zip2Path.line(to: NSPoint(x: 15.5, y: 24.5))
        zip2Path.line(to: NSPoint(x: 16.5, y: 24.5))
        zip2Path.line(to: NSPoint(x: 16.5, y: 23.5))
        zip2Path.line(to: NSPoint(x: 15.5, y: 23.5))
        zip2Path.line(to: NSPoint(x: 15.5, y: 22.5))
        zip2Path.line(to: NSPoint(x: 16.5, y: 22.5))
        zip2Path.line(to: NSPoint(x: 16.5, y: 21.5))
        zip2Path.line(to: NSPoint(x: 15.5, y: 21.5))
        zip2Path.line(to: NSPoint(x: 15.5, y: 20.5))
        zip2Path.line(to: NSPoint(x: 16.5, y: 20.5))
        zip2Path.line(to: NSPoint(x: 16.5, y: 19.5))
        zip2Path.line(to: NSPoint(x: 15.5, y: 19.5))
        zip2Path.line(to: NSPoint(x: 15.5, y: 18.5))
        zip2Path.line(to: NSPoint(x: 16.5, y: 18.5))
        zip2Path.line(to: NSPoint(x: 16.5, y: 17.5))
        zip2Path.line(to: NSPoint(x: 15.5, y: 17.5))
        zip2Path.line(to: NSPoint(x: 15.5, y: 16.5))
        zip2Path.line(to: NSPoint(x: 16.5, y: 16.5))
        zip2Path.line(to: NSPoint(x: 16.5, y: 15.5))
        zip2Path.line(to: NSPoint(x: 15.5, y: 15.5))
        zip2Path.line(to: NSPoint(x: 15.5, y: 14.5))
        zip2Path.line(to: NSPoint(x: 15.5, y: 13.45))
        zip2Path.curve(to: NSPoint(x: 17.5, y: 11), controlPoint1: NSPoint(x: 16.65, y: 13.22), controlPoint2: NSPoint(x: 17.5, y: 12.21))
        zip2Path.curve(to: NSPoint(x: 15, y: 8.5), controlPoint1: NSPoint(x: 17.5, y: 9.61), controlPoint2: NSPoint(x: 16.38, y: 8.5))
        zip2Path.curve(to: NSPoint(x: 12.5, y: 11), controlPoint1: NSPoint(x: 13.61, y: 8.5), controlPoint2: NSPoint(x: 12.5, y: 9.62))
        zip2Path.curve(to: NSPoint(x: 14.5, y: 13.45), controlPoint1: NSPoint(x: 12.5, y: 12.22), controlPoint2: NSPoint(x: 13.36, y: 13.22))
        zip2Path.line(to: NSPoint(x: 14.5, y: 13.45))
        zip2Path.line(to: NSPoint(x: 14.5, y: 13.45))
        zip2Path.close()
        zip2Path.move(to: NSPoint(x: 15, y: 12.5))
        zip2Path.curve(to: NSPoint(x: 13.5, y: 11), controlPoint1: NSPoint(x: 14.17, y: 12.5), controlPoint2: NSPoint(x: 13.5, y: 11.83))
        zip2Path.curve(to: NSPoint(x: 15, y: 9.5), controlPoint1: NSPoint(x: 13.5, y: 10.17), controlPoint2: NSPoint(x: 14.17, y: 9.5))
        zip2Path.curve(to: NSPoint(x: 16.5, y: 11), controlPoint1: NSPoint(x: 15.83, y: 9.5), controlPoint2: NSPoint(x: 16.5, y: 10.17))
        zip2Path.curve(to: NSPoint(x: 15, y: 12.5), controlPoint1: NSPoint(x: 16.5, y: 11.83), controlPoint2: NSPoint(x: 15.83, y: 12.5))
        zip2Path.line(to: NSPoint(x: 15, y: 12.5))
        zip2Path.close()
        zip2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        zip2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawSearch(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-111-search
        //// search 2 Drawing
        let search2Path = NSBezierPath()
        search2Path.move(to: NSPoint(x: 17.75, y: 9.97))
        search2Path.curve(to: NSPoint(x: 12.6, y: 8.33), controlPoint1: NSPoint(x: 16.3, y: 8.94), controlPoint2: NSPoint(x: 14.52, y: 8.33))
        search2Path.curve(to: NSPoint(x: 3.7, y: 17.22), controlPoint1: NSPoint(x: 7.68, y: 8.33), controlPoint2: NSPoint(x: 3.7, y: 12.31))
        search2Path.curve(to: NSPoint(x: 12.6, y: 26.12), controlPoint1: NSPoint(x: 3.7, y: 22.14), controlPoint2: NSPoint(x: 7.68, y: 26.12))
        search2Path.curve(to: NSPoint(x: 21.49, y: 17.22), controlPoint1: NSPoint(x: 17.51, y: 26.12), controlPoint2: NSPoint(x: 21.49, y: 22.14))
        search2Path.curve(to: NSPoint(x: 19.85, y: 12.07), controlPoint1: NSPoint(x: 21.49, y: 15.3), controlPoint2: NSPoint(x: 20.88, y: 13.52))
        search2Path.line(to: NSPoint(x: 25.69, y: 6.22))
        search2Path.curve(to: NSPoint(x: 25.69, y: 4.15), controlPoint1: NSPoint(x: 26.27, y: 5.65), controlPoint2: NSPoint(x: 26.26, y: 4.72))
        search2Path.line(to: NSPoint(x: 25.67, y: 4.13))
        search2Path.curve(to: NSPoint(x: 23.6, y: 4.13), controlPoint1: NSPoint(x: 25.1, y: 3.56), controlPoint2: NSPoint(x: 24.17, y: 3.56))
        search2Path.line(to: NSPoint(x: 17.75, y: 9.97))
        search2Path.line(to: NSPoint(x: 17.75, y: 9.97))
        search2Path.close()
        search2Path.move(to: NSPoint(x: 12.6, y: 10.42))
        search2Path.curve(to: NSPoint(x: 19.4, y: 17.22), controlPoint1: NSPoint(x: 16.35, y: 10.42), controlPoint2: NSPoint(x: 19.4, y: 13.47))
        search2Path.curve(to: NSPoint(x: 12.6, y: 24.03), controlPoint1: NSPoint(x: 19.4, y: 20.98), controlPoint2: NSPoint(x: 16.35, y: 24.03))
        search2Path.curve(to: NSPoint(x: 5.79, y: 17.22), controlPoint1: NSPoint(x: 8.84, y: 24.03), controlPoint2: NSPoint(x: 5.79, y: 20.98))
        search2Path.curve(to: NSPoint(x: 12.6, y: 10.42), controlPoint1: NSPoint(x: 5.79, y: 13.47), controlPoint2: NSPoint(x: 8.84, y: 10.42))
        search2Path.line(to: NSPoint(x: 12.6, y: 10.42))
        search2Path.close()
        search2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        search2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawSearchPlus(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-112-search-plus
        //// search-plus 2 Drawing
        let searchplus2Path = NSBezierPath()
        searchplus2Path.move(to: NSPoint(x: 12.07, y: 17.75))
        searchplus2Path.line(to: NSPoint(x: 12.07, y: 21.93))
        searchplus2Path.line(to: NSPoint(x: 13.12, y: 21.93))
        searchplus2Path.line(to: NSPoint(x: 13.12, y: 17.75))
        searchplus2Path.line(to: NSPoint(x: 17.31, y: 17.75))
        searchplus2Path.line(to: NSPoint(x: 17.31, y: 16.7))
        searchplus2Path.line(to: NSPoint(x: 13.12, y: 16.7))
        searchplus2Path.line(to: NSPoint(x: 13.12, y: 12.51))
        searchplus2Path.line(to: NSPoint(x: 12.07, y: 12.51))
        searchplus2Path.line(to: NSPoint(x: 12.07, y: 16.7))
        searchplus2Path.line(to: NSPoint(x: 7.89, y: 16.7))
        searchplus2Path.line(to: NSPoint(x: 7.89, y: 17.75))
        searchplus2Path.line(to: NSPoint(x: 12.07, y: 17.75))
        searchplus2Path.line(to: NSPoint(x: 12.07, y: 17.75))
        searchplus2Path.close()
        searchplus2Path.move(to: NSPoint(x: 17.75, y: 9.97))
        searchplus2Path.curve(to: NSPoint(x: 12.6, y: 8.33), controlPoint1: NSPoint(x: 16.3, y: 8.94), controlPoint2: NSPoint(x: 14.52, y: 8.33))
        searchplus2Path.curve(to: NSPoint(x: 3.7, y: 17.22), controlPoint1: NSPoint(x: 7.68, y: 8.33), controlPoint2: NSPoint(x: 3.7, y: 12.31))
        searchplus2Path.curve(to: NSPoint(x: 12.6, y: 26.12), controlPoint1: NSPoint(x: 3.7, y: 22.14), controlPoint2: NSPoint(x: 7.68, y: 26.12))
        searchplus2Path.curve(to: NSPoint(x: 21.49, y: 17.22), controlPoint1: NSPoint(x: 17.51, y: 26.12), controlPoint2: NSPoint(x: 21.49, y: 22.14))
        searchplus2Path.curve(to: NSPoint(x: 19.85, y: 12.07), controlPoint1: NSPoint(x: 21.49, y: 15.3), controlPoint2: NSPoint(x: 20.88, y: 13.52))
        searchplus2Path.line(to: NSPoint(x: 25.69, y: 6.22))
        searchplus2Path.curve(to: NSPoint(x: 25.69, y: 4.15), controlPoint1: NSPoint(x: 26.27, y: 5.65), controlPoint2: NSPoint(x: 26.26, y: 4.72))
        searchplus2Path.line(to: NSPoint(x: 25.67, y: 4.13))
        searchplus2Path.curve(to: NSPoint(x: 23.6, y: 4.13), controlPoint1: NSPoint(x: 25.1, y: 3.56), controlPoint2: NSPoint(x: 24.17, y: 3.56))
        searchplus2Path.line(to: NSPoint(x: 17.75, y: 9.97))
        searchplus2Path.line(to: NSPoint(x: 17.75, y: 9.97))
        searchplus2Path.line(to: NSPoint(x: 17.75, y: 9.97))
        searchplus2Path.close()
        searchplus2Path.move(to: NSPoint(x: 12.6, y: 10.42))
        searchplus2Path.curve(to: NSPoint(x: 19.4, y: 17.22), controlPoint1: NSPoint(x: 16.35, y: 10.42), controlPoint2: NSPoint(x: 19.4, y: 13.47))
        searchplus2Path.curve(to: NSPoint(x: 12.6, y: 24.03), controlPoint1: NSPoint(x: 19.4, y: 20.98), controlPoint2: NSPoint(x: 16.35, y: 24.03))
        searchplus2Path.curve(to: NSPoint(x: 5.79, y: 17.22), controlPoint1: NSPoint(x: 8.84, y: 24.03), controlPoint2: NSPoint(x: 5.79, y: 20.98))
        searchplus2Path.curve(to: NSPoint(x: 12.6, y: 10.42), controlPoint1: NSPoint(x: 5.79, y: 13.47), controlPoint2: NSPoint(x: 8.84, y: 10.42))
        searchplus2Path.line(to: NSPoint(x: 12.6, y: 10.42))
        searchplus2Path.close()
        searchplus2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        searchplus2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawSearchMinus(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-113-search-minus
        //// search-minus 2 Drawing
        let searchminus2Path = NSBezierPath()
        searchminus2Path.move(to: NSPoint(x: 17.75, y: 9.97))
        searchminus2Path.curve(to: NSPoint(x: 12.6, y: 8.33), controlPoint1: NSPoint(x: 16.3, y: 8.94), controlPoint2: NSPoint(x: 14.52, y: 8.33))
        searchminus2Path.curve(to: NSPoint(x: 3.7, y: 17.22), controlPoint1: NSPoint(x: 7.68, y: 8.33), controlPoint2: NSPoint(x: 3.7, y: 12.31))
        searchminus2Path.curve(to: NSPoint(x: 12.6, y: 26.12), controlPoint1: NSPoint(x: 3.7, y: 22.14), controlPoint2: NSPoint(x: 7.68, y: 26.12))
        searchminus2Path.curve(to: NSPoint(x: 21.49, y: 17.22), controlPoint1: NSPoint(x: 17.51, y: 26.12), controlPoint2: NSPoint(x: 21.49, y: 22.14))
        searchminus2Path.curve(to: NSPoint(x: 19.85, y: 12.07), controlPoint1: NSPoint(x: 21.49, y: 15.3), controlPoint2: NSPoint(x: 20.88, y: 13.52))
        searchminus2Path.line(to: NSPoint(x: 25.69, y: 6.22))
        searchminus2Path.curve(to: NSPoint(x: 25.69, y: 4.15), controlPoint1: NSPoint(x: 26.27, y: 5.65), controlPoint2: NSPoint(x: 26.26, y: 4.72))
        searchminus2Path.line(to: NSPoint(x: 25.67, y: 4.13))
        searchminus2Path.curve(to: NSPoint(x: 23.6, y: 4.13), controlPoint1: NSPoint(x: 25.1, y: 3.56), controlPoint2: NSPoint(x: 24.17, y: 3.56))
        searchminus2Path.line(to: NSPoint(x: 17.75, y: 9.97))
        searchminus2Path.line(to: NSPoint(x: 17.75, y: 9.97))
        searchminus2Path.line(to: NSPoint(x: 17.75, y: 9.97))
        searchminus2Path.close()
        searchminus2Path.move(to: NSPoint(x: 12.6, y: 10.42))
        searchminus2Path.curve(to: NSPoint(x: 19.4, y: 17.22), controlPoint1: NSPoint(x: 16.35, y: 10.42), controlPoint2: NSPoint(x: 19.4, y: 13.47))
        searchminus2Path.curve(to: NSPoint(x: 12.6, y: 24.03), controlPoint1: NSPoint(x: 19.4, y: 20.98), controlPoint2: NSPoint(x: 16.35, y: 24.03))
        searchminus2Path.curve(to: NSPoint(x: 5.79, y: 17.22), controlPoint1: NSPoint(x: 8.84, y: 24.03), controlPoint2: NSPoint(x: 5.79, y: 20.98))
        searchminus2Path.curve(to: NSPoint(x: 12.6, y: 10.42), controlPoint1: NSPoint(x: 5.79, y: 13.47), controlPoint2: NSPoint(x: 8.84, y: 10.42))
        searchminus2Path.line(to: NSPoint(x: 12.6, y: 10.42))
        searchminus2Path.close()
        searchminus2Path.move(to: NSPoint(x: 7.89, y: 17.75))
        searchminus2Path.line(to: NSPoint(x: 7.89, y: 16.7))
        searchminus2Path.line(to: NSPoint(x: 17.31, y: 16.7))
        searchminus2Path.line(to: NSPoint(x: 17.31, y: 17.75))
        searchminus2Path.line(to: NSPoint(x: 7.89, y: 17.75))
        searchminus2Path.line(to: NSPoint(x: 7.89, y: 17.75))
        searchminus2Path.close()
        searchminus2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        searchminus2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawLock2(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-114-lock
        //// lock 3 Drawing
        let lock3Path = NSBezierPath()
        lock3Path.move(to: NSPoint(x: 14.5, y: 9.59))
        lock3Path.line(to: NSPoint(x: 14.5, y: 6.99))
        lock3Path.curve(to: NSPoint(x: 15, y: 6.5), controlPoint1: NSPoint(x: 14.5, y: 6.72), controlPoint2: NSPoint(x: 14.73, y: 6.5))
        lock3Path.curve(to: NSPoint(x: 15.5, y: 6.99), controlPoint1: NSPoint(x: 15.28, y: 6.5), controlPoint2: NSPoint(x: 15.5, y: 6.73))
        lock3Path.line(to: NSPoint(x: 15.5, y: 9.59))
        lock3Path.curve(to: NSPoint(x: 16.5, y: 11), controlPoint1: NSPoint(x: 16.08, y: 9.79), controlPoint2: NSPoint(x: 16.5, y: 10.35))
        lock3Path.curve(to: NSPoint(x: 15, y: 12.5), controlPoint1: NSPoint(x: 16.5, y: 11.83), controlPoint2: NSPoint(x: 15.83, y: 12.5))
        lock3Path.curve(to: NSPoint(x: 13.5, y: 11), controlPoint1: NSPoint(x: 14.17, y: 12.5), controlPoint2: NSPoint(x: 13.5, y: 11.83))
        lock3Path.curve(to: NSPoint(x: 14.5, y: 9.59), controlPoint1: NSPoint(x: 13.5, y: 10.35), controlPoint2: NSPoint(x: 13.92, y: 9.79))
        lock3Path.line(to: NSPoint(x: 14.5, y: 9.59))
        lock3Path.close()
        lock3Path.move(to: NSPoint(x: 7.5, y: 17.5))
        lock3Path.line(to: NSPoint(x: 7.5, y: 21))
        lock3Path.curve(to: NSPoint(x: 15, y: 28.5), controlPoint1: NSPoint(x: 7.5, y: 25.14), controlPoint2: NSPoint(x: 10.86, y: 28.5))
        lock3Path.curve(to: NSPoint(x: 22.5, y: 21), controlPoint1: NSPoint(x: 19.13, y: 28.5), controlPoint2: NSPoint(x: 22.5, y: 25.14))
        lock3Path.line(to: NSPoint(x: 22.5, y: 17.5))
        lock3Path.curve(to: NSPoint(x: 25.5, y: 14.49), controlPoint1: NSPoint(x: 24.16, y: 17.5), controlPoint2: NSPoint(x: 25.5, y: 16.15))
        lock3Path.line(to: NSPoint(x: 25.5, y: 4.51))
        lock3Path.curve(to: NSPoint(x: 22.49, y: 1.5), controlPoint1: NSPoint(x: 25.5, y: 2.84), controlPoint2: NSPoint(x: 24.15, y: 1.5))
        lock3Path.line(to: NSPoint(x: 7.51, y: 1.5))
        lock3Path.curve(to: NSPoint(x: 4.5, y: 4.51), controlPoint1: NSPoint(x: 5.85, y: 1.5), controlPoint2: NSPoint(x: 4.5, y: 2.85))
        lock3Path.line(to: NSPoint(x: 4.5, y: 14.49))
        lock3Path.curve(to: NSPoint(x: 7.5, y: 17.5), controlPoint1: NSPoint(x: 4.5, y: 16.16), controlPoint2: NSPoint(x: 5.84, y: 17.5))
        lock3Path.line(to: NSPoint(x: 7.5, y: 17.5))
        lock3Path.line(to: NSPoint(x: 7.5, y: 17.5))
        lock3Path.close()
        lock3Path.move(to: NSPoint(x: 10.5, y: 17.5))
        lock3Path.line(to: NSPoint(x: 10.5, y: 21))
        lock3Path.curve(to: NSPoint(x: 15, y: 25.5), controlPoint1: NSPoint(x: 10.5, y: 23.49), controlPoint2: NSPoint(x: 12.51, y: 25.5))
        lock3Path.curve(to: NSPoint(x: 19.5, y: 21), controlPoint1: NSPoint(x: 17.48, y: 25.5), controlPoint2: NSPoint(x: 19.5, y: 23.48))
        lock3Path.line(to: NSPoint(x: 19.5, y: 17.5))
        lock3Path.line(to: NSPoint(x: 10.5, y: 17.5))
        lock3Path.line(to: NSPoint(x: 10.5, y: 17.5))
        lock3Path.line(to: NSPoint(x: 10.5, y: 17.5))
        lock3Path.close()
        lock3Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        lock3Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawLockOpen(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-115-lock-open
        //// lock-open 3 Drawing
        let lockopen3Path = NSBezierPath()
        lockopen3Path.move(to: NSPoint(x: 18.73, y: 8.06))
        lockopen3Path.line(to: NSPoint(x: 18.73, y: 5.64))
        lockopen3Path.curve(to: NSPoint(x: 19.2, y: 5.18), controlPoint1: NSPoint(x: 18.73, y: 5.38), controlPoint2: NSPoint(x: 18.95, y: 5.18))
        lockopen3Path.curve(to: NSPoint(x: 19.67, y: 5.64), controlPoint1: NSPoint(x: 19.46, y: 5.18), controlPoint2: NSPoint(x: 19.67, y: 5.39))
        lockopen3Path.line(to: NSPoint(x: 19.67, y: 8.06))
        lockopen3Path.curve(to: NSPoint(x: 20.6, y: 9.39), controlPoint1: NSPoint(x: 20.21, y: 8.26), controlPoint2: NSPoint(x: 20.6, y: 8.78))
        lockopen3Path.curve(to: NSPoint(x: 19.2, y: 10.79), controlPoint1: NSPoint(x: 20.6, y: 10.16), controlPoint2: NSPoint(x: 19.97, y: 10.79))
        lockopen3Path.curve(to: NSPoint(x: 17.8, y: 9.39), controlPoint1: NSPoint(x: 18.43, y: 10.79), controlPoint2: NSPoint(x: 17.8, y: 10.16))
        lockopen3Path.curve(to: NSPoint(x: 18.73, y: 8.06), controlPoint1: NSPoint(x: 17.8, y: 8.78), controlPoint2: NSPoint(x: 18.19, y: 8.26))
        lockopen3Path.line(to: NSPoint(x: 18.73, y: 8.06))
        lockopen3Path.line(to: NSPoint(x: 18.73, y: 8.06))
        lockopen3Path.close()
        lockopen3Path.move(to: NSPoint(x: 12.2, y: 22.48))
        lockopen3Path.curve(to: NSPoint(x: 8, y: 26.69), controlPoint1: NSPoint(x: 12.2, y: 24.81), controlPoint2: NSPoint(x: 10.31, y: 26.69))
        lockopen3Path.curve(to: NSPoint(x: 3.8, y: 22.48), controlPoint1: NSPoint(x: 5.68, y: 26.69), controlPoint2: NSPoint(x: 3.8, y: 24.81))
        lockopen3Path.line(to: NSPoint(x: 3.8, y: 21.08))
        lockopen3Path.line(to: NSPoint(x: 3.8, y: 18.74))
        lockopen3Path.curve(to: NSPoint(x: 2.4, y: 17.34), controlPoint1: NSPoint(x: 3.8, y: 17.97), controlPoint2: NSPoint(x: 3.17, y: 17.34))
        lockopen3Path.curve(to: NSPoint(x: 1, y: 18.74), controlPoint1: NSPoint(x: 1.62, y: 17.34), controlPoint2: NSPoint(x: 1, y: 17.97))
        lockopen3Path.line(to: NSPoint(x: 1, y: 21.08))
        lockopen3Path.line(to: NSPoint(x: 1, y: 22.48))
        lockopen3Path.curve(to: NSPoint(x: 8, y: 29.5), controlPoint1: NSPoint(x: 1, y: 26.36), controlPoint2: NSPoint(x: 4.13, y: 29.5))
        lockopen3Path.curve(to: NSPoint(x: 15, y: 22.48), controlPoint1: NSPoint(x: 11.86, y: 29.5), controlPoint2: NSPoint(x: 15, y: 26.36))
        lockopen3Path.line(to: NSPoint(x: 15, y: 15.47))
        lockopen3Path.line(to: NSPoint(x: 26.19, y: 15.47))
        lockopen3Path.curve(to: NSPoint(x: 29, y: 12.65), controlPoint1: NSPoint(x: 27.74, y: 15.47), controlPoint2: NSPoint(x: 29, y: 14.21))
        lockopen3Path.line(to: NSPoint(x: 29, y: 3.32))
        lockopen3Path.curve(to: NSPoint(x: 26.19, y: 0.5), controlPoint1: NSPoint(x: 29, y: 1.75), controlPoint2: NSPoint(x: 27.74, y: 0.5))
        lockopen3Path.line(to: NSPoint(x: 12.21, y: 0.5))
        lockopen3Path.curve(to: NSPoint(x: 9.4, y: 3.32), controlPoint1: NSPoint(x: 10.66, y: 0.5), controlPoint2: NSPoint(x: 9.4, y: 1.76))
        lockopen3Path.line(to: NSPoint(x: 9.4, y: 12.65))
        lockopen3Path.curve(to: NSPoint(x: 12.2, y: 15.47), controlPoint1: NSPoint(x: 9.4, y: 14.21), controlPoint2: NSPoint(x: 10.65, y: 15.46))
        lockopen3Path.line(to: NSPoint(x: 12.2, y: 22.48))
        lockopen3Path.line(to: NSPoint(x: 12.2, y: 22.48))
        lockopen3Path.close()
        lockopen3Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        lockopen3Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawLockOpen2(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-116-lock-open
        //// lock-open 3 Drawing
        let lockopen3Path = NSBezierPath()
        lockopen3Path.move(to: NSPoint(x: 14.52, y: 7.82))
        lockopen3Path.line(to: NSPoint(x: 14.52, y: 5.31))
        lockopen3Path.curve(to: NSPoint(x: 15, y: 4.84), controlPoint1: NSPoint(x: 14.52, y: 5.05), controlPoint2: NSPoint(x: 14.74, y: 4.84))
        lockopen3Path.curve(to: NSPoint(x: 15.48, y: 5.31), controlPoint1: NSPoint(x: 15.26, y: 4.84), controlPoint2: NSPoint(x: 15.48, y: 5.06))
        lockopen3Path.line(to: NSPoint(x: 15.48, y: 7.82))
        lockopen3Path.curve(to: NSPoint(x: 16.43, y: 9.19), controlPoint1: NSPoint(x: 16.03, y: 8.02), controlPoint2: NSPoint(x: 16.43, y: 8.56))
        lockopen3Path.curve(to: NSPoint(x: 15, y: 10.65), controlPoint1: NSPoint(x: 16.43, y: 10), controlPoint2: NSPoint(x: 15.79, y: 10.65))
        lockopen3Path.curve(to: NSPoint(x: 13.57, y: 9.19), controlPoint1: NSPoint(x: 14.21, y: 10.65), controlPoint2: NSPoint(x: 13.57, y: 10))
        lockopen3Path.curve(to: NSPoint(x: 14.52, y: 7.82), controlPoint1: NSPoint(x: 13.57, y: 8.56), controlPoint2: NSPoint(x: 13.97, y: 8.02))
        lockopen3Path.line(to: NSPoint(x: 14.52, y: 7.82))
        lockopen3Path.line(to: NSPoint(x: 14.52, y: 7.82))
        lockopen3Path.close()
        lockopen3Path.move(to: NSPoint(x: 22.14, y: 21.77))
        lockopen3Path.line(to: NSPoint(x: 22.14, y: 22.74))
        lockopen3Path.curve(to: NSPoint(x: 15, y: 30), controlPoint1: NSPoint(x: 22.14, y: 26.75), controlPoint2: NSPoint(x: 18.94, y: 30))
        lockopen3Path.curve(to: NSPoint(x: 7.86, y: 22.74), controlPoint1: NSPoint(x: 11.06, y: 30), controlPoint2: NSPoint(x: 7.86, y: 26.75))
        lockopen3Path.line(to: NSPoint(x: 7.86, y: 15.48))
        lockopen3Path.line(to: NSPoint(x: 7.86, y: 15.48))
        lockopen3Path.curve(to: NSPoint(x: 5, y: 12.57), controlPoint1: NSPoint(x: 6.28, y: 15.48), controlPoint2: NSPoint(x: 5, y: 14.19))
        lockopen3Path.line(to: NSPoint(x: 5, y: 2.91))
        lockopen3Path.curve(to: NSPoint(x: 7.87, y: 0), controlPoint1: NSPoint(x: 5, y: 1.3), controlPoint2: NSPoint(x: 6.28, y: 0))
        lockopen3Path.line(to: NSPoint(x: 22.13, y: 0))
        lockopen3Path.curve(to: NSPoint(x: 25, y: 2.91), controlPoint1: NSPoint(x: 23.72, y: 0), controlPoint2: NSPoint(x: 25, y: 1.29))
        lockopen3Path.line(to: NSPoint(x: 25, y: 12.57))
        lockopen3Path.curve(to: NSPoint(x: 22.14, y: 15.48), controlPoint1: NSPoint(x: 25, y: 14.18), controlPoint2: NSPoint(x: 23.72, y: 15.48))
        lockopen3Path.line(to: NSPoint(x: 20.7, y: 15.48))
        lockopen3Path.line(to: NSPoint(x: 10.74, y: 15.48))
        lockopen3Path.curve(to: NSPoint(x: 10.71, y: 15.97), controlPoint1: NSPoint(x: 10.72, y: 15.64), controlPoint2: NSPoint(x: 10.71, y: 15.8))
        lockopen3Path.line(to: NSPoint(x: 10.71, y: 22.74))
        lockopen3Path.curve(to: NSPoint(x: 15, y: 27.1), controlPoint1: NSPoint(x: 10.71, y: 25.15), controlPoint2: NSPoint(x: 12.63, y: 27.1))
        lockopen3Path.curve(to: NSPoint(x: 19.29, y: 22.74), controlPoint1: NSPoint(x: 17.36, y: 27.1), controlPoint2: NSPoint(x: 19.29, y: 25.15))
        lockopen3Path.line(to: NSPoint(x: 19.29, y: 21.77))
        lockopen3Path.line(to: NSPoint(x: 19.29, y: 19.23))
        lockopen3Path.curve(to: NSPoint(x: 20.71, y: 17.42), controlPoint1: NSPoint(x: 19.29, y: 18.23), controlPoint2: NSPoint(x: 19.92, y: 17.42))
        lockopen3Path.curve(to: NSPoint(x: 22.14, y: 19.23), controlPoint1: NSPoint(x: 21.5, y: 17.42), controlPoint2: NSPoint(x: 22.14, y: 18.24))
        lockopen3Path.line(to: NSPoint(x: 22.14, y: 21.77))
        lockopen3Path.line(to: NSPoint(x: 22.14, y: 21.77))
        lockopen3Path.line(to: NSPoint(x: 22.14, y: 21.77))
        lockopen3Path.close()
        lockopen3Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        lockopen3Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawLockStripes(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-117-lock-stripes
        //// lock-stripes 2 Drawing
        let lockstripes2Path = NSBezierPath()
        lockstripes2Path.move(to: NSPoint(x: 25.5, y: 5.5))
        lockstripes2Path.line(to: NSPoint(x: 25.5, y: 7.5))
        lockstripes2Path.line(to: NSPoint(x: 25.5, y: 7.5))
        lockstripes2Path.line(to: NSPoint(x: 23.75, y: 7.5))
        lockstripes2Path.line(to: NSPoint(x: 22.25, y: 5.5))
        lockstripes2Path.line(to: NSPoint(x: 25.5, y: 5.5))
        lockstripes2Path.line(to: NSPoint(x: 25.5, y: 5.5))
        lockstripes2Path.close()
        lockstripes2Path.move(to: NSPoint(x: 25.5, y: 4.5))
        lockstripes2Path.curve(to: NSPoint(x: 22.49, y: 1.5), controlPoint1: NSPoint(x: 25.49, y: 2.83), controlPoint2: NSPoint(x: 24.15, y: 1.5))
        lockstripes2Path.line(to: NSPoint(x: 7.51, y: 1.5))
        lockstripes2Path.curve(to: NSPoint(x: 4.5, y: 4.5), controlPoint1: NSPoint(x: 5.85, y: 1.5), controlPoint2: NSPoint(x: 4.51, y: 2.84))
        lockstripes2Path.line(to: NSPoint(x: 25.5, y: 4.5))
        lockstripes2Path.line(to: NSPoint(x: 25.5, y: 4.5))
        lockstripes2Path.close()
        lockstripes2Path.move(to: NSPoint(x: 4.5, y: 5.5))
        lockstripes2Path.line(to: NSPoint(x: 4.5, y: 7.5))
        lockstripes2Path.line(to: NSPoint(x: 7.75, y: 7.5))
        lockstripes2Path.line(to: NSPoint(x: 6.25, y: 5.5))
        lockstripes2Path.line(to: NSPoint(x: 4.5, y: 5.5))
        lockstripes2Path.line(to: NSPoint(x: 4.5, y: 5.5))
        lockstripes2Path.close()
        lockstripes2Path.move(to: NSPoint(x: 7.25, y: 5.5))
        lockstripes2Path.line(to: NSPoint(x: 8.75, y: 7.5))
        lockstripes2Path.line(to: NSPoint(x: 10.75, y: 7.5))
        lockstripes2Path.line(to: NSPoint(x: 9.25, y: 5.5))
        lockstripes2Path.line(to: NSPoint(x: 7.25, y: 5.5))
        lockstripes2Path.line(to: NSPoint(x: 7.25, y: 5.5))
        lockstripes2Path.close()
        lockstripes2Path.move(to: NSPoint(x: 10.25, y: 5.5))
        lockstripes2Path.line(to: NSPoint(x: 11.75, y: 7.5))
        lockstripes2Path.line(to: NSPoint(x: 13.75, y: 7.5))
        lockstripes2Path.line(to: NSPoint(x: 12.25, y: 5.5))
        lockstripes2Path.line(to: NSPoint(x: 10.25, y: 5.5))
        lockstripes2Path.line(to: NSPoint(x: 10.25, y: 5.5))
        lockstripes2Path.close()
        lockstripes2Path.move(to: NSPoint(x: 13.25, y: 5.5))
        lockstripes2Path.line(to: NSPoint(x: 14.75, y: 7.5))
        lockstripes2Path.line(to: NSPoint(x: 16.75, y: 7.5))
        lockstripes2Path.line(to: NSPoint(x: 15.25, y: 5.5))
        lockstripes2Path.line(to: NSPoint(x: 13.25, y: 5.5))
        lockstripes2Path.line(to: NSPoint(x: 13.25, y: 5.5))
        lockstripes2Path.close()
        lockstripes2Path.move(to: NSPoint(x: 16.25, y: 5.5))
        lockstripes2Path.line(to: NSPoint(x: 17.75, y: 7.5))
        lockstripes2Path.line(to: NSPoint(x: 19.75, y: 7.5))
        lockstripes2Path.line(to: NSPoint(x: 18.25, y: 5.5))
        lockstripes2Path.line(to: NSPoint(x: 16.25, y: 5.5))
        lockstripes2Path.line(to: NSPoint(x: 16.25, y: 5.5))
        lockstripes2Path.close()
        lockstripes2Path.move(to: NSPoint(x: 19.25, y: 5.5))
        lockstripes2Path.line(to: NSPoint(x: 20.75, y: 7.5))
        lockstripes2Path.line(to: NSPoint(x: 22.75, y: 7.5))
        lockstripes2Path.line(to: NSPoint(x: 21.25, y: 5.5))
        lockstripes2Path.line(to: NSPoint(x: 19.25, y: 5.5))
        lockstripes2Path.line(to: NSPoint(x: 19.25, y: 5.5))
        lockstripes2Path.close()
        lockstripes2Path.move(to: NSPoint(x: 25.5, y: 8.5))
        lockstripes2Path.line(to: NSPoint(x: 25.5, y: 14.49))
        lockstripes2Path.curve(to: NSPoint(x: 22.5, y: 17.5), controlPoint1: NSPoint(x: 25.5, y: 16.15), controlPoint2: NSPoint(x: 24.16, y: 17.5))
        lockstripes2Path.line(to: NSPoint(x: 22.5, y: 21))
        lockstripes2Path.curve(to: NSPoint(x: 15, y: 28.5), controlPoint1: NSPoint(x: 22.5, y: 25.14), controlPoint2: NSPoint(x: 19.13, y: 28.5))
        lockstripes2Path.curve(to: NSPoint(x: 7.5, y: 21), controlPoint1: NSPoint(x: 10.86, y: 28.5), controlPoint2: NSPoint(x: 7.5, y: 25.14))
        lockstripes2Path.line(to: NSPoint(x: 7.5, y: 17.5))
        lockstripes2Path.line(to: NSPoint(x: 7.5, y: 17.5))
        lockstripes2Path.curve(to: NSPoint(x: 4.5, y: 14.49), controlPoint1: NSPoint(x: 5.84, y: 17.5), controlPoint2: NSPoint(x: 4.5, y: 16.16))
        lockstripes2Path.line(to: NSPoint(x: 4.5, y: 8.5))
        lockstripes2Path.line(to: NSPoint(x: 25.5, y: 8.5))
        lockstripes2Path.line(to: NSPoint(x: 25.5, y: 8.5))
        lockstripes2Path.close()
        lockstripes2Path.move(to: NSPoint(x: 10.5, y: 17.5))
        lockstripes2Path.line(to: NSPoint(x: 10.5, y: 21))
        lockstripes2Path.curve(to: NSPoint(x: 15, y: 25.5), controlPoint1: NSPoint(x: 10.5, y: 23.49), controlPoint2: NSPoint(x: 12.51, y: 25.5))
        lockstripes2Path.curve(to: NSPoint(x: 19.5, y: 21), controlPoint1: NSPoint(x: 17.48, y: 25.5), controlPoint2: NSPoint(x: 19.5, y: 23.48))
        lockstripes2Path.line(to: NSPoint(x: 19.5, y: 17.5))
        lockstripes2Path.line(to: NSPoint(x: 10.5, y: 17.5))
        lockstripes2Path.line(to: NSPoint(x: 10.5, y: 17.5))
        lockstripes2Path.line(to: NSPoint(x: 10.5, y: 17.5))
        lockstripes2Path.close()
        lockstripes2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        lockstripes2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawLockRounded(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-118-lock-rounded
        //// lock-rounded 2 Drawing
        let lockrounded2Path = NSBezierPath()
        lockrounded2Path.move(to: NSPoint(x: 14.5, y: 9.59))
        lockrounded2Path.line(to: NSPoint(x: 14.5, y: 6.99))
        lockrounded2Path.curve(to: NSPoint(x: 15, y: 6.5), controlPoint1: NSPoint(x: 14.5, y: 6.72), controlPoint2: NSPoint(x: 14.73, y: 6.5))
        lockrounded2Path.curve(to: NSPoint(x: 15.5, y: 6.99), controlPoint1: NSPoint(x: 15.28, y: 6.5), controlPoint2: NSPoint(x: 15.5, y: 6.73))
        lockrounded2Path.line(to: NSPoint(x: 15.5, y: 9.59))
        lockrounded2Path.curve(to: NSPoint(x: 16.5, y: 11), controlPoint1: NSPoint(x: 16.08, y: 9.79), controlPoint2: NSPoint(x: 16.5, y: 10.35))
        lockrounded2Path.curve(to: NSPoint(x: 15, y: 12.5), controlPoint1: NSPoint(x: 16.5, y: 11.83), controlPoint2: NSPoint(x: 15.83, y: 12.5))
        lockrounded2Path.curve(to: NSPoint(x: 13.5, y: 11), controlPoint1: NSPoint(x: 14.17, y: 12.5), controlPoint2: NSPoint(x: 13.5, y: 11.83))
        lockrounded2Path.curve(to: NSPoint(x: 14.5, y: 9.59), controlPoint1: NSPoint(x: 13.5, y: 10.35), controlPoint2: NSPoint(x: 13.92, y: 9.79))
        lockrounded2Path.line(to: NSPoint(x: 14.5, y: 9.59))
        lockrounded2Path.close()
        lockrounded2Path.move(to: NSPoint(x: 7.5, y: 17.5))
        lockrounded2Path.line(to: NSPoint(x: 7.5, y: 21))
        lockrounded2Path.curve(to: NSPoint(x: 15, y: 28.5), controlPoint1: NSPoint(x: 7.5, y: 25.14), controlPoint2: NSPoint(x: 10.86, y: 28.5))
        lockrounded2Path.curve(to: NSPoint(x: 22.5, y: 21), controlPoint1: NSPoint(x: 19.13, y: 28.5), controlPoint2: NSPoint(x: 22.5, y: 25.14))
        lockrounded2Path.line(to: NSPoint(x: 22.5, y: 17.5))
        lockrounded2Path.curve(to: NSPoint(x: 25.5, y: 14.49), controlPoint1: NSPoint(x: 24.16, y: 17.5), controlPoint2: NSPoint(x: 25.5, y: 16.15))
        lockrounded2Path.line(to: NSPoint(x: 25.5, y: 9.5))
        lockrounded2Path.curve(to: NSPoint(x: 17.5, y: 1.5), controlPoint1: NSPoint(x: 25.5, y: 5.09), controlPoint2: NSPoint(x: 21.92, y: 1.5))
        lockrounded2Path.line(to: NSPoint(x: 12.5, y: 1.5))
        lockrounded2Path.curve(to: NSPoint(x: 4.5, y: 9.5), controlPoint1: NSPoint(x: 8.09, y: 1.5), controlPoint2: NSPoint(x: 4.5, y: 5.08))
        lockrounded2Path.line(to: NSPoint(x: 4.5, y: 14.49))
        lockrounded2Path.curve(to: NSPoint(x: 7.5, y: 17.5), controlPoint1: NSPoint(x: 4.5, y: 16.16), controlPoint2: NSPoint(x: 5.84, y: 17.5))
        lockrounded2Path.line(to: NSPoint(x: 7.5, y: 17.5))
        lockrounded2Path.line(to: NSPoint(x: 7.5, y: 17.5))
        lockrounded2Path.close()
        lockrounded2Path.move(to: NSPoint(x: 10.5, y: 17.5))
        lockrounded2Path.line(to: NSPoint(x: 10.5, y: 21))
        lockrounded2Path.curve(to: NSPoint(x: 15, y: 25.5), controlPoint1: NSPoint(x: 10.5, y: 23.49), controlPoint2: NSPoint(x: 12.51, y: 25.5))
        lockrounded2Path.curve(to: NSPoint(x: 19.5, y: 21), controlPoint1: NSPoint(x: 17.48, y: 25.5), controlPoint2: NSPoint(x: 19.5, y: 23.48))
        lockrounded2Path.line(to: NSPoint(x: 19.5, y: 17.5))
        lockrounded2Path.line(to: NSPoint(x: 10.5, y: 17.5))
        lockrounded2Path.line(to: NSPoint(x: 10.5, y: 17.5))
        lockrounded2Path.line(to: NSPoint(x: 10.5, y: 17.5))
        lockrounded2Path.close()
        lockrounded2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        lockrounded2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawLockRoundedOpen(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-119-lock-rounded-open
        //// lock-rounded-open 3 Drawing
        let lockroundedopen3Path = NSBezierPath()
        lockroundedopen3Path.move(to: NSPoint(x: 18.87, y: 7.82))
        lockroundedopen3Path.line(to: NSPoint(x: 18.87, y: 5.31))
        lockroundedopen3Path.curve(to: NSPoint(x: 19.35, y: 4.84), controlPoint1: NSPoint(x: 18.87, y: 5.05), controlPoint2: NSPoint(x: 19.09, y: 4.84))
        lockroundedopen3Path.curve(to: NSPoint(x: 19.83, y: 5.31), controlPoint1: NSPoint(x: 19.62, y: 4.84), controlPoint2: NSPoint(x: 19.83, y: 5.06))
        lockroundedopen3Path.line(to: NSPoint(x: 19.83, y: 7.82))
        lockroundedopen3Path.curve(to: NSPoint(x: 20.8, y: 9.19), controlPoint1: NSPoint(x: 20.4, y: 8.02), controlPoint2: NSPoint(x: 20.8, y: 8.56))
        lockroundedopen3Path.curve(to: NSPoint(x: 19.35, y: 10.65), controlPoint1: NSPoint(x: 20.8, y: 10), controlPoint2: NSPoint(x: 20.15, y: 10.65))
        lockroundedopen3Path.curve(to: NSPoint(x: 17.9, y: 9.19), controlPoint1: NSPoint(x: 18.55, y: 10.65), controlPoint2: NSPoint(x: 17.9, y: 10))
        lockroundedopen3Path.curve(to: NSPoint(x: 18.87, y: 7.82), controlPoint1: NSPoint(x: 17.9, y: 8.56), controlPoint2: NSPoint(x: 18.3, y: 8.02))
        lockroundedopen3Path.line(to: NSPoint(x: 18.87, y: 7.82))
        lockroundedopen3Path.line(to: NSPoint(x: 18.87, y: 7.82))
        lockroundedopen3Path.close()
        lockroundedopen3Path.move(to: NSPoint(x: 12.1, y: 22.74))
        lockroundedopen3Path.curve(to: NSPoint(x: 7.75, y: 27.1), controlPoint1: NSPoint(x: 12.1, y: 25.15), controlPoint2: NSPoint(x: 10.15, y: 27.1))
        lockroundedopen3Path.curve(to: NSPoint(x: 3.4, y: 22.74), controlPoint1: NSPoint(x: 5.35, y: 27.1), controlPoint2: NSPoint(x: 3.4, y: 25.14))
        lockroundedopen3Path.line(to: NSPoint(x: 3.4, y: 21.29))
        lockroundedopen3Path.line(to: NSPoint(x: 3.4, y: 18.87))
        lockroundedopen3Path.curve(to: NSPoint(x: 1.95, y: 17.42), controlPoint1: NSPoint(x: 3.4, y: 18.08), controlPoint2: NSPoint(x: 2.75, y: 17.42))
        lockroundedopen3Path.curve(to: NSPoint(x: 0.5, y: 18.87), controlPoint1: NSPoint(x: 1.14, y: 17.42), controlPoint2: NSPoint(x: 0.5, y: 18.07))
        lockroundedopen3Path.line(to: NSPoint(x: 0.5, y: 21.29))
        lockroundedopen3Path.line(to: NSPoint(x: 0.5, y: 22.74))
        lockroundedopen3Path.curve(to: NSPoint(x: 7.75, y: 30), controlPoint1: NSPoint(x: 0.5, y: 26.75), controlPoint2: NSPoint(x: 3.75, y: 30))
        lockroundedopen3Path.curve(to: NSPoint(x: 15, y: 22.74), controlPoint1: NSPoint(x: 11.75, y: 30), controlPoint2: NSPoint(x: 15, y: 26.75))
        lockroundedopen3Path.line(to: NSPoint(x: 15, y: 15.48))
        lockroundedopen3Path.line(to: NSPoint(x: 26.59, y: 15.48))
        lockroundedopen3Path.curve(to: NSPoint(x: 29.5, y: 12.57), controlPoint1: NSPoint(x: 28.2, y: 15.48), controlPoint2: NSPoint(x: 29.5, y: 14.18))
        lockroundedopen3Path.line(to: NSPoint(x: 29.5, y: 7.74))
        lockroundedopen3Path.curve(to: NSPoint(x: 21.77, y: 0), controlPoint1: NSPoint(x: 29.5, y: 3.47), controlPoint2: NSPoint(x: 26.04, y: 0))
        lockroundedopen3Path.line(to: NSPoint(x: 16.93, y: 0))
        lockroundedopen3Path.curve(to: NSPoint(x: 9.2, y: 7.74), controlPoint1: NSPoint(x: 12.67, y: 0), controlPoint2: NSPoint(x: 9.2, y: 3.47))
        lockroundedopen3Path.line(to: NSPoint(x: 9.2, y: 12.57))
        lockroundedopen3Path.curve(to: NSPoint(x: 12.1, y: 15.48), controlPoint1: NSPoint(x: 9.2, y: 14.19), controlPoint2: NSPoint(x: 10.5, y: 15.48))
        lockroundedopen3Path.line(to: NSPoint(x: 12.1, y: 22.74))
        lockroundedopen3Path.line(to: NSPoint(x: 12.1, y: 22.74))
        lockroundedopen3Path.close()
        lockroundedopen3Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        lockroundedopen3Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawLockRoundedOpen2(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-120-lock-rounded-open
        //// lock-rounded-open 3 Drawing
        let lockroundedopen3Path = NSBezierPath()
        lockroundedopen3Path.move(to: NSPoint(x: 14.52, y: 7.82))
        lockroundedopen3Path.line(to: NSPoint(x: 14.52, y: 5.31))
        lockroundedopen3Path.curve(to: NSPoint(x: 15, y: 4.84), controlPoint1: NSPoint(x: 14.52, y: 5.05), controlPoint2: NSPoint(x: 14.74, y: 4.84))
        lockroundedopen3Path.curve(to: NSPoint(x: 15.48, y: 5.31), controlPoint1: NSPoint(x: 15.26, y: 4.84), controlPoint2: NSPoint(x: 15.48, y: 5.06))
        lockroundedopen3Path.line(to: NSPoint(x: 15.48, y: 7.82))
        lockroundedopen3Path.curve(to: NSPoint(x: 16.43, y: 9.19), controlPoint1: NSPoint(x: 16.03, y: 8.02), controlPoint2: NSPoint(x: 16.43, y: 8.56))
        lockroundedopen3Path.curve(to: NSPoint(x: 15, y: 10.65), controlPoint1: NSPoint(x: 16.43, y: 10), controlPoint2: NSPoint(x: 15.79, y: 10.65))
        lockroundedopen3Path.curve(to: NSPoint(x: 13.57, y: 9.19), controlPoint1: NSPoint(x: 14.21, y: 10.65), controlPoint2: NSPoint(x: 13.57, y: 10))
        lockroundedopen3Path.curve(to: NSPoint(x: 14.52, y: 7.82), controlPoint1: NSPoint(x: 13.57, y: 8.56), controlPoint2: NSPoint(x: 13.97, y: 8.02))
        lockroundedopen3Path.line(to: NSPoint(x: 14.52, y: 7.82))
        lockroundedopen3Path.line(to: NSPoint(x: 14.52, y: 7.82))
        lockroundedopen3Path.close()
        lockroundedopen3Path.move(to: NSPoint(x: 22.14, y: 21.77))
        lockroundedopen3Path.line(to: NSPoint(x: 22.14, y: 22.74))
        lockroundedopen3Path.curve(to: NSPoint(x: 15, y: 30), controlPoint1: NSPoint(x: 22.14, y: 26.75), controlPoint2: NSPoint(x: 18.94, y: 30))
        lockroundedopen3Path.curve(to: NSPoint(x: 7.86, y: 22.74), controlPoint1: NSPoint(x: 11.06, y: 30), controlPoint2: NSPoint(x: 7.86, y: 26.75))
        lockroundedopen3Path.line(to: NSPoint(x: 7.86, y: 15.48))
        lockroundedopen3Path.line(to: NSPoint(x: 7.86, y: 15.48))
        lockroundedopen3Path.curve(to: NSPoint(x: 5, y: 12.57), controlPoint1: NSPoint(x: 6.28, y: 15.48), controlPoint2: NSPoint(x: 5, y: 14.19))
        lockroundedopen3Path.line(to: NSPoint(x: 5, y: 7.74))
        lockroundedopen3Path.curve(to: NSPoint(x: 12.62, y: 0), controlPoint1: NSPoint(x: 5, y: 3.47), controlPoint2: NSPoint(x: 8.42, y: 0))
        lockroundedopen3Path.line(to: NSPoint(x: 17.38, y: 0))
        lockroundedopen3Path.curve(to: NSPoint(x: 25, y: 7.74), controlPoint1: NSPoint(x: 21.59, y: 0), controlPoint2: NSPoint(x: 25, y: 3.47))
        lockroundedopen3Path.line(to: NSPoint(x: 25, y: 12.57))
        lockroundedopen3Path.curve(to: NSPoint(x: 22.14, y: 15.48), controlPoint1: NSPoint(x: 25, y: 14.18), controlPoint2: NSPoint(x: 23.72, y: 15.48))
        lockroundedopen3Path.line(to: NSPoint(x: 20.7, y: 15.48))
        lockroundedopen3Path.line(to: NSPoint(x: 10.74, y: 15.48))
        lockroundedopen3Path.curve(to: NSPoint(x: 10.71, y: 15.97), controlPoint1: NSPoint(x: 10.72, y: 15.64), controlPoint2: NSPoint(x: 10.71, y: 15.8))
        lockroundedopen3Path.line(to: NSPoint(x: 10.71, y: 22.74))
        lockroundedopen3Path.curve(to: NSPoint(x: 15, y: 27.1), controlPoint1: NSPoint(x: 10.71, y: 25.15), controlPoint2: NSPoint(x: 12.63, y: 27.1))
        lockroundedopen3Path.curve(to: NSPoint(x: 19.29, y: 22.74), controlPoint1: NSPoint(x: 17.36, y: 27.1), controlPoint2: NSPoint(x: 19.29, y: 25.15))
        lockroundedopen3Path.line(to: NSPoint(x: 19.29, y: 21.77))
        lockroundedopen3Path.line(to: NSPoint(x: 19.29, y: 19.23))
        lockroundedopen3Path.curve(to: NSPoint(x: 20.71, y: 17.42), controlPoint1: NSPoint(x: 19.29, y: 18.23), controlPoint2: NSPoint(x: 19.92, y: 17.42))
        lockroundedopen3Path.curve(to: NSPoint(x: 22.14, y: 19.23), controlPoint1: NSPoint(x: 21.5, y: 17.42), controlPoint2: NSPoint(x: 22.14, y: 18.24))
        lockroundedopen3Path.line(to: NSPoint(x: 22.14, y: 21.77))
        lockroundedopen3Path.line(to: NSPoint(x: 22.14, y: 21.77))
        lockroundedopen3Path.line(to: NSPoint(x: 22.14, y: 21.77))
        lockroundedopen3Path.close()
        lockroundedopen3Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        lockroundedopen3Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawCombinationLock(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-121-combination-lock
        //// combination-lock 2 Drawing
        let combinationlock2Path = NSBezierPath()
        combinationlock2Path.move(to: NSPoint(x: 25.5, y: 4.5))
        combinationlock2Path.curve(to: NSPoint(x: 22.49, y: 1.5), controlPoint1: NSPoint(x: 25.49, y: 2.83), controlPoint2: NSPoint(x: 24.15, y: 1.5))
        combinationlock2Path.line(to: NSPoint(x: 7.51, y: 1.5))
        combinationlock2Path.curve(to: NSPoint(x: 4.5, y: 4.51), controlPoint1: NSPoint(x: 5.85, y: 1.5), controlPoint2: NSPoint(x: 4.5, y: 2.85))
        combinationlock2Path.line(to: NSPoint(x: 4.5, y: 14.49))
        combinationlock2Path.curve(to: NSPoint(x: 7.5, y: 17.5), controlPoint1: NSPoint(x: 4.5, y: 16.16), controlPoint2: NSPoint(x: 5.84, y: 17.5))
        combinationlock2Path.line(to: NSPoint(x: 7.5, y: 17.5))
        combinationlock2Path.line(to: NSPoint(x: 7.5, y: 21))
        combinationlock2Path.curve(to: NSPoint(x: 15, y: 28.5), controlPoint1: NSPoint(x: 7.5, y: 25.14), controlPoint2: NSPoint(x: 10.86, y: 28.5))
        combinationlock2Path.curve(to: NSPoint(x: 22.5, y: 21), controlPoint1: NSPoint(x: 19.13, y: 28.5), controlPoint2: NSPoint(x: 22.5, y: 25.14))
        combinationlock2Path.line(to: NSPoint(x: 22.5, y: 17.5))
        combinationlock2Path.curve(to: NSPoint(x: 25.5, y: 14.5), controlPoint1: NSPoint(x: 24.16, y: 17.5), controlPoint2: NSPoint(x: 25.49, y: 16.15))
        combinationlock2Path.line(to: NSPoint(x: 25.5, y: 14.5))
        combinationlock2Path.line(to: NSPoint(x: 15.5, y: 14.5))
        combinationlock2Path.line(to: NSPoint(x: 15.5, y: 13.5))
        combinationlock2Path.line(to: NSPoint(x: 25.5, y: 13.5))
        combinationlock2Path.line(to: NSPoint(x: 25.5, y: 11.5))
        combinationlock2Path.line(to: NSPoint(x: 15.5, y: 11.5))
        combinationlock2Path.line(to: NSPoint(x: 15.5, y: 10.5))
        combinationlock2Path.line(to: NSPoint(x: 25.5, y: 10.5))
        combinationlock2Path.line(to: NSPoint(x: 25.5, y: 10.5))
        combinationlock2Path.line(to: NSPoint(x: 25.5, y: 8.5))
        combinationlock2Path.line(to: NSPoint(x: 25.5, y: 8.5))
        combinationlock2Path.line(to: NSPoint(x: 15.5, y: 8.5))
        combinationlock2Path.line(to: NSPoint(x: 15.5, y: 7.5))
        combinationlock2Path.line(to: NSPoint(x: 25.5, y: 7.5))
        combinationlock2Path.line(to: NSPoint(x: 25.5, y: 5.5))
        combinationlock2Path.line(to: NSPoint(x: 15.5, y: 5.5))
        combinationlock2Path.line(to: NSPoint(x: 15.5, y: 4.5))
        combinationlock2Path.line(to: NSPoint(x: 25.5, y: 4.5))
        combinationlock2Path.line(to: NSPoint(x: 25.5, y: 4.5))
        combinationlock2Path.close()
        combinationlock2Path.move(to: NSPoint(x: 10.5, y: 17.5))
        combinationlock2Path.line(to: NSPoint(x: 10.5, y: 21))
        combinationlock2Path.curve(to: NSPoint(x: 15, y: 25.5), controlPoint1: NSPoint(x: 10.5, y: 23.49), controlPoint2: NSPoint(x: 12.51, y: 25.5))
        combinationlock2Path.curve(to: NSPoint(x: 19.5, y: 21), controlPoint1: NSPoint(x: 17.48, y: 25.5), controlPoint2: NSPoint(x: 19.5, y: 23.48))
        combinationlock2Path.line(to: NSPoint(x: 19.5, y: 17.5))
        combinationlock2Path.line(to: NSPoint(x: 10.5, y: 17.5))
        combinationlock2Path.line(to: NSPoint(x: 10.5, y: 17.5))
        combinationlock2Path.line(to: NSPoint(x: 10.5, y: 17.5))
        combinationlock2Path.close()
        combinationlock2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        combinationlock2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawPrinter(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-122-printer
        //// printer 2 Drawing
        let printer2Path = NSBezierPath()
        printer2Path.move(to: NSPoint(x: 5.5, y: 20.5))
        printer2Path.line(to: NSPoint(x: 5.5, y: 26.5))
        printer2Path.curve(to: NSPoint(x: 7.5, y: 28.5), controlPoint1: NSPoint(x: 5.5, y: 27.6), controlPoint2: NSPoint(x: 6.39, y: 28.5))
        printer2Path.line(to: NSPoint(x: 22.5, y: 28.5))
        printer2Path.curve(to: NSPoint(x: 24.5, y: 26.5), controlPoint1: NSPoint(x: 23.61, y: 28.5), controlPoint2: NSPoint(x: 24.5, y: 27.61))
        printer2Path.line(to: NSPoint(x: 24.5, y: 20.5))
        printer2Path.line(to: NSPoint(x: 5.5, y: 20.5))
        printer2Path.line(to: NSPoint(x: 5.5, y: 20.5))
        printer2Path.close()
        printer2Path.move(to: NSPoint(x: 4.5, y: 4.5))
        printer2Path.line(to: NSPoint(x: 3.49, y: 4.5))
        printer2Path.curve(to: NSPoint(x: 0.5, y: 7.5), controlPoint1: NSPoint(x: 1.84, y: 4.5), controlPoint2: NSPoint(x: 0.5, y: 5.84))
        printer2Path.line(to: NSPoint(x: 0.5, y: 16.5))
        printer2Path.curve(to: NSPoint(x: 3.49, y: 19.5), controlPoint1: NSPoint(x: 0.5, y: 18.16), controlPoint2: NSPoint(x: 1.84, y: 19.5))
        printer2Path.line(to: NSPoint(x: 26.51, y: 19.5))
        printer2Path.curve(to: NSPoint(x: 29.5, y: 16.5), controlPoint1: NSPoint(x: 28.16, y: 19.5), controlPoint2: NSPoint(x: 29.5, y: 18.16))
        printer2Path.line(to: NSPoint(x: 29.5, y: 7.5))
        printer2Path.curve(to: NSPoint(x: 26.51, y: 4.5), controlPoint1: NSPoint(x: 29.5, y: 5.84), controlPoint2: NSPoint(x: 28.16, y: 4.5))
        printer2Path.line(to: NSPoint(x: 25.5, y: 4.5))
        printer2Path.line(to: NSPoint(x: 25.5, y: 12.5))
        printer2Path.line(to: NSPoint(x: 4.5, y: 12.5))
        printer2Path.line(to: NSPoint(x: 4.5, y: 4.5))
        printer2Path.line(to: NSPoint(x: 4.5, y: 4.5))
        printer2Path.line(to: NSPoint(x: 4.5, y: 4.5))
        printer2Path.close()
        printer2Path.move(to: NSPoint(x: 5.5, y: 11.5))
        printer2Path.line(to: NSPoint(x: 5.5, y: 3.5))
        printer2Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        printer2Path.line(to: NSPoint(x: 22.5, y: 1.5))
        printer2Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        printer2Path.line(to: NSPoint(x: 24.5, y: 11.5))
        printer2Path.line(to: NSPoint(x: 5.5, y: 11.5))
        printer2Path.line(to: NSPoint(x: 5.5, y: 11.5))
        printer2Path.close()
        printer2Path.move(to: NSPoint(x: 23.5, y: 14.5))
        printer2Path.curve(to: NSPoint(x: 24.5, y: 15.5), controlPoint1: NSPoint(x: 24.05, y: 14.5), controlPoint2: NSPoint(x: 24.5, y: 14.95))
        printer2Path.curve(to: NSPoint(x: 23.5, y: 16.5), controlPoint1: NSPoint(x: 24.5, y: 16.05), controlPoint2: NSPoint(x: 24.05, y: 16.5))
        printer2Path.curve(to: NSPoint(x: 22.5, y: 15.5), controlPoint1: NSPoint(x: 22.95, y: 16.5), controlPoint2: NSPoint(x: 22.5, y: 16.05))
        printer2Path.curve(to: NSPoint(x: 23.5, y: 14.5), controlPoint1: NSPoint(x: 22.5, y: 14.95), controlPoint2: NSPoint(x: 22.95, y: 14.5))
        printer2Path.line(to: NSPoint(x: 23.5, y: 14.5))
        printer2Path.close()
        printer2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        printer2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawPrinterText(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-124-printer-text
        //// printer-text 3 Drawing
        let printertext3Path = NSBezierPath()
        printertext3Path.move(to: NSPoint(x: 5.5, y: 20.5))
        printertext3Path.line(to: NSPoint(x: 5.5, y: 26.5))
        printertext3Path.curve(to: NSPoint(x: 7.5, y: 28.5), controlPoint1: NSPoint(x: 5.5, y: 27.6), controlPoint2: NSPoint(x: 6.39, y: 28.5))
        printertext3Path.line(to: NSPoint(x: 22.5, y: 28.5))
        printertext3Path.curve(to: NSPoint(x: 24.5, y: 26.5), controlPoint1: NSPoint(x: 23.61, y: 28.5), controlPoint2: NSPoint(x: 24.5, y: 27.61))
        printertext3Path.line(to: NSPoint(x: 24.5, y: 20.5))
        printertext3Path.line(to: NSPoint(x: 5.5, y: 20.5))
        printertext3Path.line(to: NSPoint(x: 5.5, y: 20.5))
        printertext3Path.close()
        printertext3Path.move(to: NSPoint(x: 4.5, y: 4.5))
        printertext3Path.line(to: NSPoint(x: 3.49, y: 4.5))
        printertext3Path.curve(to: NSPoint(x: 0.5, y: 7.5), controlPoint1: NSPoint(x: 1.84, y: 4.5), controlPoint2: NSPoint(x: 0.5, y: 5.84))
        printertext3Path.line(to: NSPoint(x: 0.5, y: 16.5))
        printertext3Path.curve(to: NSPoint(x: 3.49, y: 19.5), controlPoint1: NSPoint(x: 0.5, y: 18.16), controlPoint2: NSPoint(x: 1.84, y: 19.5))
        printertext3Path.line(to: NSPoint(x: 26.51, y: 19.5))
        printertext3Path.curve(to: NSPoint(x: 29.5, y: 16.5), controlPoint1: NSPoint(x: 28.16, y: 19.5), controlPoint2: NSPoint(x: 29.5, y: 18.16))
        printertext3Path.line(to: NSPoint(x: 29.5, y: 7.5))
        printertext3Path.curve(to: NSPoint(x: 26.51, y: 4.5), controlPoint1: NSPoint(x: 29.5, y: 5.84), controlPoint2: NSPoint(x: 28.16, y: 4.5))
        printertext3Path.line(to: NSPoint(x: 25.5, y: 4.5))
        printertext3Path.line(to: NSPoint(x: 25.5, y: 12.5))
        printertext3Path.line(to: NSPoint(x: 4.5, y: 12.5))
        printertext3Path.line(to: NSPoint(x: 4.5, y: 4.5))
        printertext3Path.line(to: NSPoint(x: 4.5, y: 4.5))
        printertext3Path.line(to: NSPoint(x: 4.5, y: 4.5))
        printertext3Path.close()
        printertext3Path.move(to: NSPoint(x: 5.5, y: 11.5))
        printertext3Path.line(to: NSPoint(x: 5.5, y: 3.5))
        printertext3Path.curve(to: NSPoint(x: 7.5, y: 1.5), controlPoint1: NSPoint(x: 5.5, y: 2.4), controlPoint2: NSPoint(x: 6.39, y: 1.5))
        printertext3Path.line(to: NSPoint(x: 22.5, y: 1.5))
        printertext3Path.curve(to: NSPoint(x: 24.5, y: 3.5), controlPoint1: NSPoint(x: 23.61, y: 1.5), controlPoint2: NSPoint(x: 24.5, y: 2.39))
        printertext3Path.line(to: NSPoint(x: 24.5, y: 11.5))
        printertext3Path.line(to: NSPoint(x: 5.5, y: 11.5))
        printertext3Path.line(to: NSPoint(x: 5.5, y: 11.5))
        printertext3Path.close()
        printertext3Path.move(to: NSPoint(x: 23.5, y: 14.5))
        printertext3Path.curve(to: NSPoint(x: 24.5, y: 15.5), controlPoint1: NSPoint(x: 24.05, y: 14.5), controlPoint2: NSPoint(x: 24.5, y: 14.95))
        printertext3Path.curve(to: NSPoint(x: 23.5, y: 16.5), controlPoint1: NSPoint(x: 24.5, y: 16.05), controlPoint2: NSPoint(x: 24.05, y: 16.5))
        printertext3Path.curve(to: NSPoint(x: 22.5, y: 15.5), controlPoint1: NSPoint(x: 22.95, y: 16.5), controlPoint2: NSPoint(x: 22.5, y: 16.05))
        printertext3Path.curve(to: NSPoint(x: 23.5, y: 14.5), controlPoint1: NSPoint(x: 22.5, y: 14.95), controlPoint2: NSPoint(x: 22.95, y: 14.5))
        printertext3Path.line(to: NSPoint(x: 23.5, y: 14.5))
        printertext3Path.close()
        printertext3Path.move(to: NSPoint(x: 7.5, y: 8.5))
        printertext3Path.line(to: NSPoint(x: 7.5, y: 7.5))
        printertext3Path.line(to: NSPoint(x: 22.5, y: 7.5))
        printertext3Path.line(to: NSPoint(x: 22.5, y: 8.5))
        printertext3Path.line(to: NSPoint(x: 7.5, y: 8.5))
        printertext3Path.line(to: NSPoint(x: 7.5, y: 8.5))
        printertext3Path.close()
        printertext3Path.move(to: NSPoint(x: 7.5, y: 5.5))
        printertext3Path.line(to: NSPoint(x: 7.5, y: 4.5))
        printertext3Path.line(to: NSPoint(x: 22.5, y: 4.5))
        printertext3Path.line(to: NSPoint(x: 22.5, y: 5.5))
        printertext3Path.line(to: NSPoint(x: 7.5, y: 5.5))
        printertext3Path.line(to: NSPoint(x: 7.5, y: 5.5))
        printertext3Path.close()
        printertext3Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        printertext3Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawPrinterText2(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-125-printer-text
        //// printer-text 3 Drawing
        let printertext3Path = NSBezierPath()
        printertext3Path.move(to: NSPoint(x: 5.5, y: 22))
        printertext3Path.line(to: NSPoint(x: 5.5, y: 28))
        printertext3Path.curve(to: NSPoint(x: 7.5, y: 30), controlPoint1: NSPoint(x: 5.5, y: 29.1), controlPoint2: NSPoint(x: 6.39, y: 30))
        printertext3Path.line(to: NSPoint(x: 22.5, y: 30))
        printertext3Path.curve(to: NSPoint(x: 24.5, y: 28), controlPoint1: NSPoint(x: 23.61, y: 30), controlPoint2: NSPoint(x: 24.5, y: 29.11))
        printertext3Path.line(to: NSPoint(x: 24.5, y: 22))
        printertext3Path.line(to: NSPoint(x: 5.5, y: 22))
        printertext3Path.line(to: NSPoint(x: 5.5, y: 22))
        printertext3Path.close()
        printertext3Path.move(to: NSPoint(x: 4.5, y: 6))
        printertext3Path.line(to: NSPoint(x: 3.49, y: 6))
        printertext3Path.curve(to: NSPoint(x: 0.5, y: 9), controlPoint1: NSPoint(x: 1.84, y: 6), controlPoint2: NSPoint(x: 0.5, y: 7.34))
        printertext3Path.line(to: NSPoint(x: 0.5, y: 18))
        printertext3Path.curve(to: NSPoint(x: 3.49, y: 21), controlPoint1: NSPoint(x: 0.5, y: 19.66), controlPoint2: NSPoint(x: 1.84, y: 21))
        printertext3Path.line(to: NSPoint(x: 26.51, y: 21))
        printertext3Path.curve(to: NSPoint(x: 29.5, y: 18), controlPoint1: NSPoint(x: 28.16, y: 21), controlPoint2: NSPoint(x: 29.5, y: 19.66))
        printertext3Path.line(to: NSPoint(x: 29.5, y: 9))
        printertext3Path.curve(to: NSPoint(x: 26.51, y: 6), controlPoint1: NSPoint(x: 29.5, y: 7.34), controlPoint2: NSPoint(x: 28.16, y: 6))
        printertext3Path.line(to: NSPoint(x: 25.5, y: 6))
        printertext3Path.line(to: NSPoint(x: 25.5, y: 11))
        printertext3Path.line(to: NSPoint(x: 4.5, y: 11))
        printertext3Path.line(to: NSPoint(x: 4.5, y: 6))
        printertext3Path.line(to: NSPoint(x: 4.5, y: 6))
        printertext3Path.line(to: NSPoint(x: 4.5, y: 6))
        printertext3Path.close()
        printertext3Path.move(to: NSPoint(x: 5.5, y: 10))
        printertext3Path.line(to: NSPoint(x: 5.5, y: 2))
        printertext3Path.curve(to: NSPoint(x: 7.5, y: 0), controlPoint1: NSPoint(x: 5.5, y: 0.9), controlPoint2: NSPoint(x: 6.39, y: 0))
        printertext3Path.line(to: NSPoint(x: 22.5, y: 0))
        printertext3Path.curve(to: NSPoint(x: 24.5, y: 2), controlPoint1: NSPoint(x: 23.61, y: 0), controlPoint2: NSPoint(x: 24.5, y: 0.89))
        printertext3Path.line(to: NSPoint(x: 24.5, y: 10))
        printertext3Path.line(to: NSPoint(x: 5.5, y: 10))
        printertext3Path.line(to: NSPoint(x: 5.5, y: 10))
        printertext3Path.close()
        printertext3Path.move(to: NSPoint(x: 23.5, y: 15))
        printertext3Path.curve(to: NSPoint(x: 24.5, y: 16), controlPoint1: NSPoint(x: 24.05, y: 15), controlPoint2: NSPoint(x: 24.5, y: 15.45))
        printertext3Path.curve(to: NSPoint(x: 23.5, y: 17), controlPoint1: NSPoint(x: 24.5, y: 16.55), controlPoint2: NSPoint(x: 24.05, y: 17))
        printertext3Path.curve(to: NSPoint(x: 22.5, y: 16), controlPoint1: NSPoint(x: 22.95, y: 17), controlPoint2: NSPoint(x: 22.5, y: 16.55))
        printertext3Path.curve(to: NSPoint(x: 23.5, y: 15), controlPoint1: NSPoint(x: 22.5, y: 15.45), controlPoint2: NSPoint(x: 22.95, y: 15))
        printertext3Path.line(to: NSPoint(x: 23.5, y: 15))
        printertext3Path.close()
        printertext3Path.move(to: NSPoint(x: 7.5, y: 7))
        printertext3Path.line(to: NSPoint(x: 7.5, y: 6))
        printertext3Path.line(to: NSPoint(x: 22.5, y: 6))
        printertext3Path.line(to: NSPoint(x: 22.5, y: 7))
        printertext3Path.line(to: NSPoint(x: 7.5, y: 7))
        printertext3Path.line(to: NSPoint(x: 7.5, y: 7))
        printertext3Path.close()
        printertext3Path.move(to: NSPoint(x: 7.5, y: 4))
        printertext3Path.line(to: NSPoint(x: 7.5, y: 3))
        printertext3Path.line(to: NSPoint(x: 22.5, y: 3))
        printertext3Path.line(to: NSPoint(x: 22.5, y: 4))
        printertext3Path.line(to: NSPoint(x: 7.5, y: 4))
        printertext3Path.line(to: NSPoint(x: 7.5, y: 4))
        printertext3Path.close()
        printertext3Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        printertext3Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentShred(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-126-document-shred
        //// document-shred 2 Drawing
        let documentshred2Path = NSBezierPath()
        documentshred2Path.move(to: NSPoint(x: 25.5, y: 11.5))
        documentshred2Path.line(to: NSPoint(x: 4.5, y: 11.5))
        documentshred2Path.line(to: NSPoint(x: 4.5, y: 9.5))
        documentshred2Path.line(to: NSPoint(x: 3.5, y: 9.5))
        documentshred2Path.line(to: NSPoint(x: 3.5, y: 14.5))
        documentshred2Path.line(to: NSPoint(x: 4.5, y: 14.5))
        documentshred2Path.line(to: NSPoint(x: 4.5, y: 12.5))
        documentshred2Path.line(to: NSPoint(x: 25.5, y: 12.5))
        documentshred2Path.line(to: NSPoint(x: 25.5, y: 14.5))
        documentshred2Path.line(to: NSPoint(x: 26.5, y: 14.5))
        documentshred2Path.line(to: NSPoint(x: 26.5, y: 9.5))
        documentshred2Path.line(to: NSPoint(x: 25.5, y: 9.5))
        documentshred2Path.line(to: NSPoint(x: 25.5, y: 11.5))
        documentshred2Path.line(to: NSPoint(x: 25.5, y: 11.5))
        documentshred2Path.close()
        documentshred2Path.move(to: NSPoint(x: 5.5, y: 13.5))
        documentshred2Path.line(to: NSPoint(x: 5.5, y: 26.49))
        documentshred2Path.curve(to: NSPoint(x: 7.51, y: 28.5), controlPoint1: NSPoint(x: 5.5, y: 27.6), controlPoint2: NSPoint(x: 6.4, y: 28.5))
        documentshred2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentshred2Path.line(to: NSPoint(x: 17.5, y: 22.5))
        documentshred2Path.curve(to: NSPoint(x: 19.51, y: 20.5), controlPoint1: NSPoint(x: 17.5, y: 21.39), controlPoint2: NSPoint(x: 18.4, y: 20.5))
        documentshred2Path.line(to: NSPoint(x: 24.5, y: 20.5))
        documentshred2Path.line(to: NSPoint(x: 24.5, y: 13.5))
        documentshred2Path.line(to: NSPoint(x: 5.5, y: 13.5))
        documentshred2Path.line(to: NSPoint(x: 5.5, y: 13.5))
        documentshred2Path.line(to: NSPoint(x: 5.5, y: 13.5))
        documentshred2Path.close()
        documentshred2Path.move(to: NSPoint(x: 18.5, y: 28.5))
        documentshred2Path.line(to: NSPoint(x: 18.5, y: 22.5))
        documentshred2Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        documentshred2Path.line(to: NSPoint(x: 24.5, y: 21.5))
        documentshred2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentshred2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentshred2Path.close()
        documentshred2Path.move(to: NSPoint(x: 23.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 23.5, y: 1.5))
        documentshred2Path.line(to: NSPoint(x: 24.5, y: 1.5))
        documentshred2Path.line(to: NSPoint(x: 24.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 23.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 23.5, y: 10.5))
        documentshred2Path.close()
        documentshred2Path.move(to: NSPoint(x: 21.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 21.5, y: 2.5))
        documentshred2Path.line(to: NSPoint(x: 22.5, y: 2.5))
        documentshred2Path.line(to: NSPoint(x: 22.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 21.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 21.5, y: 10.5))
        documentshred2Path.close()
        documentshred2Path.move(to: NSPoint(x: 19.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 19.5, y: 3.5))
        documentshred2Path.line(to: NSPoint(x: 20.5, y: 3.5))
        documentshred2Path.line(to: NSPoint(x: 20.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 19.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 19.5, y: 10.5))
        documentshred2Path.close()
        documentshred2Path.move(to: NSPoint(x: 17.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 17.5, y: 1.5))
        documentshred2Path.line(to: NSPoint(x: 18.5, y: 1.5))
        documentshred2Path.line(to: NSPoint(x: 18.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 17.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 17.5, y: 10.5))
        documentshred2Path.close()
        documentshred2Path.move(to: NSPoint(x: 15.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 15.5, y: 2.5))
        documentshred2Path.line(to: NSPoint(x: 16.5, y: 2.5))
        documentshred2Path.line(to: NSPoint(x: 16.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 15.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 15.5, y: 10.5))
        documentshred2Path.close()
        documentshred2Path.move(to: NSPoint(x: 13.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 13.5, y: 1.5))
        documentshred2Path.line(to: NSPoint(x: 14.5, y: 1.5))
        documentshred2Path.line(to: NSPoint(x: 14.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 13.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 13.5, y: 10.5))
        documentshred2Path.close()
        documentshred2Path.move(to: NSPoint(x: 11.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 11.5, y: 3.5))
        documentshred2Path.line(to: NSPoint(x: 12.5, y: 3.5))
        documentshred2Path.line(to: NSPoint(x: 12.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 11.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 11.5, y: 10.5))
        documentshred2Path.close()
        documentshred2Path.move(to: NSPoint(x: 9.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 9.5, y: 1.5))
        documentshred2Path.line(to: NSPoint(x: 10.5, y: 1.5))
        documentshred2Path.line(to: NSPoint(x: 10.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 9.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 9.5, y: 10.5))
        documentshred2Path.close()
        documentshred2Path.move(to: NSPoint(x: 7.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 7.5, y: 2.5))
        documentshred2Path.line(to: NSPoint(x: 8.5, y: 2.5))
        documentshred2Path.line(to: NSPoint(x: 8.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 7.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 7.5, y: 10.5))
        documentshred2Path.close()
        documentshred2Path.move(to: NSPoint(x: 5.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 5.5, y: 1.5))
        documentshred2Path.line(to: NSPoint(x: 6.5, y: 1.5))
        documentshred2Path.line(to: NSPoint(x: 6.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 5.5, y: 10.5))
        documentshred2Path.line(to: NSPoint(x: 5.5, y: 10.5))
        documentshred2Path.close()
        documentshred2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentshred2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawShredder(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-127-shredder
        //// shredder 2 Drawing
        let shredder2Path = NSBezierPath()
        shredder2Path.move(to: NSPoint(x: 5.5, y: 20))
        shredder2Path.line(to: NSPoint(x: 5.5, y: 26))
        shredder2Path.curve(to: NSPoint(x: 7.5, y: 28), controlPoint1: NSPoint(x: 5.5, y: 27.1), controlPoint2: NSPoint(x: 6.39, y: 28))
        shredder2Path.line(to: NSPoint(x: 22.5, y: 28))
        shredder2Path.curve(to: NSPoint(x: 24.5, y: 26), controlPoint1: NSPoint(x: 23.61, y: 28), controlPoint2: NSPoint(x: 24.5, y: 27.11))
        shredder2Path.line(to: NSPoint(x: 24.5, y: 20))
        shredder2Path.line(to: NSPoint(x: 5.5, y: 20))
        shredder2Path.line(to: NSPoint(x: 5.5, y: 20))
        shredder2Path.close()
        shredder2Path.move(to: NSPoint(x: 4.5, y: 8))
        shredder2Path.line(to: NSPoint(x: 3.49, y: 8))
        shredder2Path.curve(to: NSPoint(x: 0.5, y: 11.01), controlPoint1: NSPoint(x: 1.84, y: 8), controlPoint2: NSPoint(x: 0.5, y: 9.35))
        shredder2Path.line(to: NSPoint(x: 0.5, y: 15.99))
        shredder2Path.curve(to: NSPoint(x: 3.49, y: 19), controlPoint1: NSPoint(x: 0.5, y: 17.65), controlPoint2: NSPoint(x: 1.84, y: 19))
        shredder2Path.line(to: NSPoint(x: 26.51, y: 19))
        shredder2Path.curve(to: NSPoint(x: 29.5, y: 15.99), controlPoint1: NSPoint(x: 28.16, y: 19), controlPoint2: NSPoint(x: 29.5, y: 17.65))
        shredder2Path.line(to: NSPoint(x: 29.5, y: 11.01))
        shredder2Path.curve(to: NSPoint(x: 26.51, y: 8), controlPoint1: NSPoint(x: 29.5, y: 9.35), controlPoint2: NSPoint(x: 28.16, y: 8))
        shredder2Path.line(to: NSPoint(x: 25.5, y: 8))
        shredder2Path.line(to: NSPoint(x: 25.5, y: 11))
        shredder2Path.line(to: NSPoint(x: 4.5, y: 11))
        shredder2Path.line(to: NSPoint(x: 4.5, y: 8))
        shredder2Path.line(to: NSPoint(x: 4.5, y: 8))
        shredder2Path.line(to: NSPoint(x: 4.5, y: 8))
        shredder2Path.close()
        shredder2Path.move(to: NSPoint(x: 23.5, y: 14))
        shredder2Path.curve(to: NSPoint(x: 24.5, y: 15), controlPoint1: NSPoint(x: 24.05, y: 14), controlPoint2: NSPoint(x: 24.5, y: 14.45))
        shredder2Path.curve(to: NSPoint(x: 23.5, y: 16), controlPoint1: NSPoint(x: 24.5, y: 15.55), controlPoint2: NSPoint(x: 24.05, y: 16))
        shredder2Path.curve(to: NSPoint(x: 22.5, y: 15), controlPoint1: NSPoint(x: 22.95, y: 16), controlPoint2: NSPoint(x: 22.5, y: 15.55))
        shredder2Path.curve(to: NSPoint(x: 23.5, y: 14), controlPoint1: NSPoint(x: 22.5, y: 14.45), controlPoint2: NSPoint(x: 22.95, y: 14))
        shredder2Path.line(to: NSPoint(x: 23.5, y: 14))
        shredder2Path.close()
        shredder2Path.move(to: NSPoint(x: 5.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 5.5, y: 2))
        shredder2Path.line(to: NSPoint(x: 6.5, y: 2))
        shredder2Path.line(to: NSPoint(x: 6.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 5.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 5.5, y: 10))
        shredder2Path.close()
        shredder2Path.move(to: NSPoint(x: 7.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 7.5, y: 3))
        shredder2Path.line(to: NSPoint(x: 8.5, y: 3))
        shredder2Path.line(to: NSPoint(x: 8.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 7.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 7.5, y: 10))
        shredder2Path.close()
        shredder2Path.move(to: NSPoint(x: 9.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 9.5, y: 2))
        shredder2Path.line(to: NSPoint(x: 10.5, y: 2))
        shredder2Path.line(to: NSPoint(x: 10.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 9.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 9.5, y: 10))
        shredder2Path.close()
        shredder2Path.move(to: NSPoint(x: 11.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 11.5, y: 4))
        shredder2Path.line(to: NSPoint(x: 12.5, y: 4))
        shredder2Path.line(to: NSPoint(x: 12.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 11.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 11.5, y: 10))
        shredder2Path.close()
        shredder2Path.move(to: NSPoint(x: 13.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 13.5, y: 3))
        shredder2Path.line(to: NSPoint(x: 14.5, y: 3))
        shredder2Path.line(to: NSPoint(x: 14.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 13.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 13.5, y: 10))
        shredder2Path.close()
        shredder2Path.move(to: NSPoint(x: 15.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 15.5, y: 4))
        shredder2Path.line(to: NSPoint(x: 16.5, y: 4))
        shredder2Path.line(to: NSPoint(x: 16.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 15.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 15.5, y: 10))
        shredder2Path.close()
        shredder2Path.move(to: NSPoint(x: 17.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 17.5, y: 2))
        shredder2Path.line(to: NSPoint(x: 18.5, y: 2))
        shredder2Path.line(to: NSPoint(x: 18.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 17.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 17.5, y: 10))
        shredder2Path.close()
        shredder2Path.move(to: NSPoint(x: 21.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 21.5, y: 3))
        shredder2Path.line(to: NSPoint(x: 22.5, y: 3))
        shredder2Path.line(to: NSPoint(x: 22.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 21.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 21.5, y: 10))
        shredder2Path.close()
        shredder2Path.move(to: NSPoint(x: 23.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 23.5, y: 2))
        shredder2Path.line(to: NSPoint(x: 24.5, y: 2))
        shredder2Path.line(to: NSPoint(x: 24.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 23.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 23.5, y: 10))
        shredder2Path.close()
        shredder2Path.move(to: NSPoint(x: 19.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 19.5, y: 4))
        shredder2Path.line(to: NSPoint(x: 20.5, y: 4))
        shredder2Path.line(to: NSPoint(x: 20.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 19.5, y: 10))
        shredder2Path.line(to: NSPoint(x: 19.5, y: 10))
        shredder2Path.close()
        shredder2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        shredder2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentScan(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-128-document-scan
        //// document-scan 2 Drawing
        let documentscan2Path = NSBezierPath()
        documentscan2Path.move(to: NSPoint(x: 17.5, y: 1.5))
        documentscan2Path.line(to: NSPoint(x: 15.5, y: 1.5))
        documentscan2Path.line(to: NSPoint(x: 15.5, y: 2.5))
        documentscan2Path.line(to: NSPoint(x: 17.5, y: 2.5))
        documentscan2Path.line(to: NSPoint(x: 17.5, y: 1.5))
        documentscan2Path.line(to: NSPoint(x: 17.5, y: 1.5))
        documentscan2Path.close()
        documentscan2Path.move(to: NSPoint(x: 18.5, y: 1.5))
        documentscan2Path.line(to: NSPoint(x: 20.5, y: 1.5))
        documentscan2Path.line(to: NSPoint(x: 20.5, y: 1.5))
        documentscan2Path.line(to: NSPoint(x: 20.5, y: 2.5))
        documentscan2Path.line(to: NSPoint(x: 18.5, y: 2.5))
        documentscan2Path.line(to: NSPoint(x: 18.5, y: 1.5))
        documentscan2Path.line(to: NSPoint(x: 18.5, y: 1.5))
        documentscan2Path.close()
        documentscan2Path.move(to: NSPoint(x: 11.5, y: 1.5))
        documentscan2Path.line(to: NSPoint(x: 9.5, y: 1.5))
        documentscan2Path.line(to: NSPoint(x: 9.5, y: 1.5))
        documentscan2Path.line(to: NSPoint(x: 9.5, y: 2.5))
        documentscan2Path.line(to: NSPoint(x: 11.5, y: 2.5))
        documentscan2Path.line(to: NSPoint(x: 11.5, y: 1.5))
        documentscan2Path.line(to: NSPoint(x: 11.5, y: 1.5))
        documentscan2Path.line(to: NSPoint(x: 11.5, y: 1.5))
        documentscan2Path.close()
        documentscan2Path.move(to: NSPoint(x: 12.5, y: 1.5))
        documentscan2Path.line(to: NSPoint(x: 14.5, y: 1.5))
        documentscan2Path.line(to: NSPoint(x: 14.5, y: 1.5))
        documentscan2Path.line(to: NSPoint(x: 14.5, y: 2.5))
        documentscan2Path.line(to: NSPoint(x: 12.5, y: 2.5))
        documentscan2Path.line(to: NSPoint(x: 12.5, y: 1.5))
        documentscan2Path.line(to: NSPoint(x: 12.5, y: 1.5))
        documentscan2Path.line(to: NSPoint(x: 12.5, y: 1.5))
        documentscan2Path.close()
        documentscan2Path.move(to: NSPoint(x: 8.5, y: 1.5))
        documentscan2Path.line(to: NSPoint(x: 7.5, y: 1.5))
        documentscan2Path.curve(to: NSPoint(x: 5.5, y: 3.51), controlPoint1: NSPoint(x: 6.39, y: 1.5), controlPoint2: NSPoint(x: 5.5, y: 2.4))
        documentscan2Path.line(to: NSPoint(x: 5.5, y: 4.5))
        documentscan2Path.line(to: NSPoint(x: 5.5, y: 4.5))
        documentscan2Path.line(to: NSPoint(x: 6.5, y: 4.5))
        documentscan2Path.line(to: NSPoint(x: 6.5, y: 3.5))
        documentscan2Path.curve(to: NSPoint(x: 7.5, y: 2.5), controlPoint1: NSPoint(x: 6.5, y: 2.95), controlPoint2: NSPoint(x: 6.95, y: 2.5))
        documentscan2Path.line(to: NSPoint(x: 8.5, y: 2.5))
        documentscan2Path.line(to: NSPoint(x: 8.5, y: 1.5))
        documentscan2Path.line(to: NSPoint(x: 8.5, y: 1.5))
        documentscan2Path.line(to: NSPoint(x: 8.5, y: 1.5))
        documentscan2Path.close()
        documentscan2Path.move(to: NSPoint(x: 24.5, y: 8.5))
        documentscan2Path.line(to: NSPoint(x: 24.5, y: 10.5))
        documentscan2Path.line(to: NSPoint(x: 24.5, y: 10.5))
        documentscan2Path.line(to: NSPoint(x: 23.5, y: 10.5))
        documentscan2Path.line(to: NSPoint(x: 23.5, y: 8.5))
        documentscan2Path.line(to: NSPoint(x: 24.5, y: 8.5))
        documentscan2Path.line(to: NSPoint(x: 24.5, y: 8.5))
        documentscan2Path.line(to: NSPoint(x: 24.5, y: 8.5))
        documentscan2Path.close()
        documentscan2Path.move(to: NSPoint(x: 24.5, y: 7.5))
        documentscan2Path.line(to: NSPoint(x: 24.5, y: 5.5))
        documentscan2Path.line(to: NSPoint(x: 24.5, y: 5.5))
        documentscan2Path.line(to: NSPoint(x: 23.5, y: 5.5))
        documentscan2Path.line(to: NSPoint(x: 23.5, y: 7.5))
        documentscan2Path.line(to: NSPoint(x: 24.5, y: 7.5))
        documentscan2Path.line(to: NSPoint(x: 24.5, y: 7.5))
        documentscan2Path.line(to: NSPoint(x: 24.5, y: 7.5))
        documentscan2Path.close()
        documentscan2Path.move(to: NSPoint(x: 5.5, y: 8.5))
        documentscan2Path.line(to: NSPoint(x: 5.5, y: 10.5))
        documentscan2Path.line(to: NSPoint(x: 5.5, y: 10.5))
        documentscan2Path.line(to: NSPoint(x: 6.5, y: 10.5))
        documentscan2Path.line(to: NSPoint(x: 6.5, y: 8.5))
        documentscan2Path.line(to: NSPoint(x: 5.5, y: 8.5))
        documentscan2Path.line(to: NSPoint(x: 5.5, y: 8.5))
        documentscan2Path.line(to: NSPoint(x: 5.5, y: 8.5))
        documentscan2Path.close()
        documentscan2Path.move(to: NSPoint(x: 5.5, y: 7.5))
        documentscan2Path.line(to: NSPoint(x: 5.5, y: 5.5))
        documentscan2Path.line(to: NSPoint(x: 6.5, y: 5.5))
        documentscan2Path.line(to: NSPoint(x: 6.5, y: 7.5))
        documentscan2Path.line(to: NSPoint(x: 5.5, y: 7.5))
        documentscan2Path.line(to: NSPoint(x: 5.5, y: 7.5))
        documentscan2Path.close()
        documentscan2Path.move(to: NSPoint(x: 25.5, y: 12.5))
        documentscan2Path.line(to: NSPoint(x: 25.5, y: 14.5))
        documentscan2Path.line(to: NSPoint(x: 26.5, y: 14.5))
        documentscan2Path.line(to: NSPoint(x: 26.5, y: 9.5))
        documentscan2Path.line(to: NSPoint(x: 25.5, y: 9.5))
        documentscan2Path.line(to: NSPoint(x: 25.5, y: 11.5))
        documentscan2Path.line(to: NSPoint(x: 4.5, y: 11.5))
        documentscan2Path.line(to: NSPoint(x: 4.5, y: 9.5))
        documentscan2Path.line(to: NSPoint(x: 3.5, y: 9.5))
        documentscan2Path.line(to: NSPoint(x: 3.5, y: 14.5))
        documentscan2Path.line(to: NSPoint(x: 4.5, y: 14.5))
        documentscan2Path.line(to: NSPoint(x: 4.5, y: 12.5))
        documentscan2Path.line(to: NSPoint(x: 25.5, y: 12.5))
        documentscan2Path.line(to: NSPoint(x: 25.5, y: 12.5))
        documentscan2Path.close()
        documentscan2Path.move(to: NSPoint(x: 24.5, y: 13.5))
        documentscan2Path.line(to: NSPoint(x: 24.5, y: 20.5))
        documentscan2Path.line(to: NSPoint(x: 19.51, y: 20.5))
        documentscan2Path.curve(to: NSPoint(x: 17.5, y: 22.5), controlPoint1: NSPoint(x: 18.4, y: 20.5), controlPoint2: NSPoint(x: 17.5, y: 21.39))
        documentscan2Path.line(to: NSPoint(x: 17.5, y: 28.5))
        documentscan2Path.line(to: NSPoint(x: 7.51, y: 28.5))
        documentscan2Path.curve(to: NSPoint(x: 5.5, y: 26.49), controlPoint1: NSPoint(x: 6.4, y: 28.5), controlPoint2: NSPoint(x: 5.5, y: 27.6))
        documentscan2Path.line(to: NSPoint(x: 5.5, y: 13.5))
        documentscan2Path.line(to: NSPoint(x: 24.5, y: 13.5))
        documentscan2Path.line(to: NSPoint(x: 24.5, y: 13.5))
        documentscan2Path.line(to: NSPoint(x: 24.5, y: 13.5))
        documentscan2Path.close()
        documentscan2Path.move(to: NSPoint(x: 24.5, y: 4.5))
        documentscan2Path.line(to: NSPoint(x: 24.5, y: 3.5))
        documentscan2Path.curve(to: NSPoint(x: 22.5, y: 1.5), controlPoint1: NSPoint(x: 24.5, y: 2.39), controlPoint2: NSPoint(x: 23.61, y: 1.5))
        documentscan2Path.line(to: NSPoint(x: 21.5, y: 1.5))
        documentscan2Path.line(to: NSPoint(x: 21.5, y: 2.5))
        documentscan2Path.line(to: NSPoint(x: 21.5, y: 2.5))
        documentscan2Path.line(to: NSPoint(x: 22.5, y: 2.5))
        documentscan2Path.curve(to: NSPoint(x: 23.5, y: 3.5), controlPoint1: NSPoint(x: 23.05, y: 2.5), controlPoint2: NSPoint(x: 23.5, y: 2.95))
        documentscan2Path.line(to: NSPoint(x: 23.5, y: 4.5))
        documentscan2Path.line(to: NSPoint(x: 24.5, y: 4.5))
        documentscan2Path.line(to: NSPoint(x: 24.5, y: 4.5))
        documentscan2Path.line(to: NSPoint(x: 24.5, y: 4.5))
        documentscan2Path.close()
        documentscan2Path.move(to: NSPoint(x: 18.5, y: 28.5))
        documentscan2Path.line(to: NSPoint(x: 18.5, y: 22.5))
        documentscan2Path.curve(to: NSPoint(x: 19.49, y: 21.5), controlPoint1: NSPoint(x: 18.5, y: 21.95), controlPoint2: NSPoint(x: 18.95, y: 21.5))
        documentscan2Path.line(to: NSPoint(x: 24.5, y: 21.5))
        documentscan2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentscan2Path.line(to: NSPoint(x: 18.5, y: 28.5))
        documentscan2Path.close()
        documentscan2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentscan2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawCloudDownload(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-129-cloud-download
        //// cloud-download 2 Drawing
        let clouddownload2Path = NSBezierPath()
        clouddownload2Path.move(to: NSPoint(x: 15.5, y: 9.6))
        clouddownload2Path.line(to: NSPoint(x: 23.5, y: 9.6))
        clouddownload2Path.curve(to: NSPoint(x: 28.5, y: 14.6), controlPoint1: NSPoint(x: 26.26, y: 9.6), controlPoint2: NSPoint(x: 28.5, y: 11.84))
        clouddownload2Path.curve(to: NSPoint(x: 25.38, y: 19.23), controlPoint1: NSPoint(x: 28.5, y: 16.7), controlPoint2: NSPoint(x: 27.21, y: 18.49))
        clouddownload2Path.line(to: NSPoint(x: 25.38, y: 19.23))
        clouddownload2Path.curve(to: NSPoint(x: 20, y: 23.6), controlPoint1: NSPoint(x: 24.86, y: 21.73), controlPoint2: NSPoint(x: 22.65, y: 23.6))
        clouddownload2Path.curve(to: NSPoint(x: 17.59, y: 23.05), controlPoint1: NSPoint(x: 19.14, y: 23.6), controlPoint2: NSPoint(x: 18.32, y: 23.4))
        clouddownload2Path.curve(to: NSPoint(x: 11.5, y: 26.6), controlPoint1: NSPoint(x: 16.39, y: 25.17), controlPoint2: NSPoint(x: 14.11, y: 26.6))
        clouddownload2Path.curve(to: NSPoint(x: 4.5, y: 19.6), controlPoint1: NSPoint(x: 7.63, y: 26.6), controlPoint2: NSPoint(x: 4.5, y: 23.47))
        clouddownload2Path.curve(to: NSPoint(x: 4.51, y: 19.19), controlPoint1: NSPoint(x: 4.5, y: 19.46), controlPoint2: NSPoint(x: 4.5, y: 19.32))
        clouddownload2Path.line(to: NSPoint(x: 4.51, y: 19.19))
        clouddownload2Path.curve(to: NSPoint(x: 1.5, y: 14.6), controlPoint1: NSPoint(x: 2.74, y: 18.42), controlPoint2: NSPoint(x: 1.5, y: 16.65))
        clouddownload2Path.curve(to: NSPoint(x: 6.5, y: 9.6), controlPoint1: NSPoint(x: 1.5, y: 11.84), controlPoint2: NSPoint(x: 3.73, y: 9.6))
        clouddownload2Path.line(to: NSPoint(x: 14.5, y: 9.6))
        clouddownload2Path.line(to: NSPoint(x: 14.5, y: 5.35))
        clouddownload2Path.line(to: NSPoint(x: 11.25, y: 8.6))
        clouddownload2Path.line(to: NSPoint(x: 10.5, y: 7.85))
        clouddownload2Path.line(to: NSPoint(x: 15, y: 3.35))
        clouddownload2Path.line(to: NSPoint(x: 19.5, y: 7.85))
        clouddownload2Path.line(to: NSPoint(x: 18.75, y: 8.6))
        clouddownload2Path.line(to: NSPoint(x: 15.5, y: 5.35))
        clouddownload2Path.line(to: NSPoint(x: 15.5, y: 9.6))
        clouddownload2Path.line(to: NSPoint(x: 15.5, y: 9.6))
        clouddownload2Path.line(to: NSPoint(x: 15.5, y: 9.6))
        clouddownload2Path.close()
        clouddownload2Path.move(to: NSPoint(x: 14.5, y: 16.6))
        clouddownload2Path.line(to: NSPoint(x: 14.5, y: 9.6))
        clouddownload2Path.line(to: NSPoint(x: 15.5, y: 9.6))
        clouddownload2Path.line(to: NSPoint(x: 15.5, y: 16.6))
        clouddownload2Path.line(to: NSPoint(x: 14.5, y: 16.6))
        clouddownload2Path.line(to: NSPoint(x: 14.5, y: 16.6))
        clouddownload2Path.close()
        clouddownload2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        clouddownload2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawCloudUpload(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-130-cloud-upload
        //// cloud-upload 2 Drawing
        let cloudupload2Path = NSBezierPath()
        cloudupload2Path.move(to: NSPoint(x: 15.5, y: 9))
        cloudupload2Path.line(to: NSPoint(x: 23.5, y: 9))
        cloudupload2Path.curve(to: NSPoint(x: 28.5, y: 14), controlPoint1: NSPoint(x: 26.26, y: 9), controlPoint2: NSPoint(x: 28.5, y: 11.24))
        cloudupload2Path.curve(to: NSPoint(x: 25.38, y: 18.63), controlPoint1: NSPoint(x: 28.5, y: 16.1), controlPoint2: NSPoint(x: 27.21, y: 17.89))
        cloudupload2Path.line(to: NSPoint(x: 25.38, y: 18.63))
        cloudupload2Path.curve(to: NSPoint(x: 20, y: 23), controlPoint1: NSPoint(x: 24.86, y: 21.13), controlPoint2: NSPoint(x: 22.65, y: 23))
        cloudupload2Path.curve(to: NSPoint(x: 17.59, y: 22.45), controlPoint1: NSPoint(x: 19.14, y: 23), controlPoint2: NSPoint(x: 18.32, y: 22.8))
        cloudupload2Path.curve(to: NSPoint(x: 11.5, y: 26), controlPoint1: NSPoint(x: 16.39, y: 24.57), controlPoint2: NSPoint(x: 14.11, y: 26))
        cloudupload2Path.curve(to: NSPoint(x: 4.5, y: 19), controlPoint1: NSPoint(x: 7.63, y: 26), controlPoint2: NSPoint(x: 4.5, y: 22.87))
        cloudupload2Path.curve(to: NSPoint(x: 4.51, y: 18.59), controlPoint1: NSPoint(x: 4.5, y: 18.86), controlPoint2: NSPoint(x: 4.5, y: 18.72))
        cloudupload2Path.line(to: NSPoint(x: 4.51, y: 18.59))
        cloudupload2Path.curve(to: NSPoint(x: 1.5, y: 14), controlPoint1: NSPoint(x: 2.74, y: 17.82), controlPoint2: NSPoint(x: 1.5, y: 16.05))
        cloudupload2Path.curve(to: NSPoint(x: 6.5, y: 9), controlPoint1: NSPoint(x: 1.5, y: 11.24), controlPoint2: NSPoint(x: 3.73, y: 9))
        cloudupload2Path.line(to: NSPoint(x: 14.5, y: 9))
        cloudupload2Path.line(to: NSPoint(x: 14.5, y: 15))
        cloudupload2Path.line(to: NSPoint(x: 11.25, y: 11.75))
        cloudupload2Path.line(to: NSPoint(x: 10.5, y: 12.5))
        cloudupload2Path.line(to: NSPoint(x: 15, y: 17))
        cloudupload2Path.line(to: NSPoint(x: 19.5, y: 12.5))
        cloudupload2Path.line(to: NSPoint(x: 18.75, y: 11.75))
        cloudupload2Path.line(to: NSPoint(x: 15.5, y: 15))
        cloudupload2Path.line(to: NSPoint(x: 15.5, y: 9))
        cloudupload2Path.line(to: NSPoint(x: 15.5, y: 9))
        cloudupload2Path.close()
        cloudupload2Path.move(to: NSPoint(x: 14.5, y: 9))
        cloudupload2Path.line(to: NSPoint(x: 14.5, y: 4))
        cloudupload2Path.line(to: NSPoint(x: 15.5, y: 4))
        cloudupload2Path.line(to: NSPoint(x: 15.5, y: 9))
        cloudupload2Path.line(to: NSPoint(x: 14.5, y: 9))
        cloudupload2Path.line(to: NSPoint(x: 14.5, y: 9))
        cloudupload2Path.close()
        cloudupload2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        cloudupload2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawCloudError(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-131-cloud-error
        //// cloud-error 2 Drawing
        let clouderror2Path = NSBezierPath()
        clouderror2Path.move(to: NSPoint(x: 20.96, y: 8))
        clouderror2Path.line(to: NSPoint(x: 23.5, y: 8))
        clouderror2Path.curve(to: NSPoint(x: 28.5, y: 13), controlPoint1: NSPoint(x: 26.26, y: 8), controlPoint2: NSPoint(x: 28.5, y: 10.24))
        clouderror2Path.curve(to: NSPoint(x: 25.38, y: 17.63), controlPoint1: NSPoint(x: 28.5, y: 15.1), controlPoint2: NSPoint(x: 27.21, y: 16.89))
        clouderror2Path.line(to: NSPoint(x: 25.38, y: 17.63))
        clouderror2Path.curve(to: NSPoint(x: 20, y: 22), controlPoint1: NSPoint(x: 24.86, y: 20.13), controlPoint2: NSPoint(x: 22.65, y: 22))
        clouderror2Path.curve(to: NSPoint(x: 17.59, y: 21.45), controlPoint1: NSPoint(x: 19.14, y: 22), controlPoint2: NSPoint(x: 18.32, y: 21.8))
        clouderror2Path.curve(to: NSPoint(x: 11.5, y: 25), controlPoint1: NSPoint(x: 16.39, y: 23.57), controlPoint2: NSPoint(x: 14.11, y: 25))
        clouderror2Path.curve(to: NSPoint(x: 4.5, y: 18), controlPoint1: NSPoint(x: 7.63, y: 25), controlPoint2: NSPoint(x: 4.5, y: 21.87))
        clouderror2Path.curve(to: NSPoint(x: 4.51, y: 17.59), controlPoint1: NSPoint(x: 4.5, y: 17.86), controlPoint2: NSPoint(x: 4.5, y: 17.72))
        clouderror2Path.line(to: NSPoint(x: 4.51, y: 17.59))
        clouderror2Path.curve(to: NSPoint(x: 1.5, y: 13), controlPoint1: NSPoint(x: 2.74, y: 16.82), controlPoint2: NSPoint(x: 1.5, y: 15.05))
        clouderror2Path.curve(to: NSPoint(x: 6.5, y: 8), controlPoint1: NSPoint(x: 1.5, y: 10.24), controlPoint2: NSPoint(x: 3.73, y: 8))
        clouderror2Path.line(to: NSPoint(x: 9.04, y: 8))
        clouderror2Path.line(to: NSPoint(x: 15, y: 18))
        clouderror2Path.line(to: NSPoint(x: 20.96, y: 8))
        clouderror2Path.line(to: NSPoint(x: 20.96, y: 8))
        clouderror2Path.line(to: NSPoint(x: 20.96, y: 8))
        clouderror2Path.close()
        clouderror2Path.move(to: NSPoint(x: 15, y: 16))
        clouderror2Path.line(to: NSPoint(x: 21.5, y: 5))
        clouderror2Path.line(to: NSPoint(x: 8.5, y: 5))
        clouderror2Path.line(to: NSPoint(x: 15, y: 16))
        clouderror2Path.line(to: NSPoint(x: 15, y: 16))
        clouderror2Path.close()
        clouderror2Path.move(to: NSPoint(x: 14.5, y: 12))
        clouderror2Path.line(to: NSPoint(x: 14.5, y: 9))
        clouderror2Path.line(to: NSPoint(x: 15.5, y: 9))
        clouderror2Path.line(to: NSPoint(x: 15.5, y: 12))
        clouderror2Path.line(to: NSPoint(x: 14.5, y: 12))
        clouderror2Path.line(to: NSPoint(x: 14.5, y: 12))
        clouderror2Path.close()
        clouderror2Path.move(to: NSPoint(x: 14.5, y: 8))
        clouderror2Path.line(to: NSPoint(x: 14.5, y: 7))
        clouderror2Path.line(to: NSPoint(x: 15.5, y: 7))
        clouderror2Path.line(to: NSPoint(x: 15.5, y: 8))
        clouderror2Path.line(to: NSPoint(x: 14.5, y: 8))
        clouderror2Path.line(to: NSPoint(x: 14.5, y: 8))
        clouderror2Path.close()
        clouderror2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        clouderror2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawCloud(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-132-cloud
        //// cloud 2 Drawing
        let cloud2Path = NSBezierPath()
        cloud2Path.move(to: NSPoint(x: 25.38, y: 16.13))
        cloud2Path.curve(to: NSPoint(x: 28.5, y: 11.5), controlPoint1: NSPoint(x: 27.21, y: 15.39), controlPoint2: NSPoint(x: 28.5, y: 13.6))
        cloud2Path.curve(to: NSPoint(x: 23.5, y: 6.5), controlPoint1: NSPoint(x: 28.5, y: 8.74), controlPoint2: NSPoint(x: 26.26, y: 6.5))
        cloud2Path.line(to: NSPoint(x: 6.5, y: 6.5))
        cloud2Path.curve(to: NSPoint(x: 1.5, y: 11.5), controlPoint1: NSPoint(x: 3.73, y: 6.5), controlPoint2: NSPoint(x: 1.5, y: 8.74))
        cloud2Path.curve(to: NSPoint(x: 4.51, y: 16.09), controlPoint1: NSPoint(x: 1.5, y: 13.55), controlPoint2: NSPoint(x: 2.74, y: 15.32))
        cloud2Path.line(to: NSPoint(x: 4.51, y: 16.09))
        cloud2Path.curve(to: NSPoint(x: 4.5, y: 16.5), controlPoint1: NSPoint(x: 4.5, y: 16.22), controlPoint2: NSPoint(x: 4.5, y: 16.36))
        cloud2Path.curve(to: NSPoint(x: 11.5, y: 23.5), controlPoint1: NSPoint(x: 4.5, y: 20.37), controlPoint2: NSPoint(x: 7.63, y: 23.5))
        cloud2Path.curve(to: NSPoint(x: 17.59, y: 19.95), controlPoint1: NSPoint(x: 14.11, y: 23.5), controlPoint2: NSPoint(x: 16.39, y: 22.07))
        cloud2Path.curve(to: NSPoint(x: 20, y: 20.5), controlPoint1: NSPoint(x: 18.32, y: 20.3), controlPoint2: NSPoint(x: 19.14, y: 20.5))
        cloud2Path.curve(to: NSPoint(x: 25.38, y: 16.13), controlPoint1: NSPoint(x: 22.65, y: 20.5), controlPoint2: NSPoint(x: 24.86, y: 18.63))
        cloud2Path.close()
        cloud2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        cloud2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawInboxFilled(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-133-inbox-filled
        //// inbox-filled 2 Drawing
        let inboxfilled2Path = NSBezierPath()
        inboxfilled2Path.move(to: NSPoint(x: 10.5, y: 15.5))
        inboxfilled2Path.line(to: NSPoint(x: 3.72, y: 15.5))
        inboxfilled2Path.line(to: NSPoint(x: 8.1, y: 22.5))
        inboxfilled2Path.line(to: NSPoint(x: 21.9, y: 22.5))
        inboxfilled2Path.line(to: NSPoint(x: 26.28, y: 15.5))
        inboxfilled2Path.line(to: NSPoint(x: 19.5, y: 15.5))
        inboxfilled2Path.line(to: NSPoint(x: 19.5, y: 13.5))
        inboxfilled2Path.curve(to: NSPoint(x: 17.5, y: 11.5), controlPoint1: NSPoint(x: 19.5, y: 12.39), controlPoint2: NSPoint(x: 18.61, y: 11.5))
        inboxfilled2Path.line(to: NSPoint(x: 12.5, y: 11.5))
        inboxfilled2Path.curve(to: NSPoint(x: 10.5, y: 13.5), controlPoint1: NSPoint(x: 11.4, y: 11.5), controlPoint2: NSPoint(x: 10.5, y: 12.4))
        inboxfilled2Path.line(to: NSPoint(x: 10.5, y: 15.5))
        inboxfilled2Path.line(to: NSPoint(x: 10.5, y: 15.5))
        inboxfilled2Path.close()
        inboxfilled2Path.move(to: NSPoint(x: 2.5, y: 15.5))
        inboxfilled2Path.line(to: NSPoint(x: 7.5, y: 23.5))
        inboxfilled2Path.line(to: NSPoint(x: 22.5, y: 23.5))
        inboxfilled2Path.line(to: NSPoint(x: 27.5, y: 15.5))
        inboxfilled2Path.line(to: NSPoint(x: 27.5, y: 14.5))
        inboxfilled2Path.line(to: NSPoint(x: 27.5, y: 6.5))
        inboxfilled2Path.line(to: NSPoint(x: 2.5, y: 6.5))
        inboxfilled2Path.line(to: NSPoint(x: 2.5, y: 15.5))
        inboxfilled2Path.line(to: NSPoint(x: 2.5, y: 15.5))
        inboxfilled2Path.close()
        inboxfilled2Path.move(to: NSPoint(x: 9.5, y: 21.5))
        inboxfilled2Path.line(to: NSPoint(x: 8.9, y: 20.5))
        inboxfilled2Path.line(to: NSPoint(x: 21.1, y: 20.5))
        inboxfilled2Path.line(to: NSPoint(x: 20.5, y: 21.5))
        inboxfilled2Path.line(to: NSPoint(x: 9.5, y: 21.5))
        inboxfilled2Path.line(to: NSPoint(x: 9.5, y: 21.5))
        inboxfilled2Path.close()
        inboxfilled2Path.move(to: NSPoint(x: 8.2, y: 19.5))
        inboxfilled2Path.line(to: NSPoint(x: 7.6, y: 18.5))
        inboxfilled2Path.line(to: NSPoint(x: 22.4, y: 18.5))
        inboxfilled2Path.line(to: NSPoint(x: 21.8, y: 19.5))
        inboxfilled2Path.line(to: NSPoint(x: 8.2, y: 19.5))
        inboxfilled2Path.line(to: NSPoint(x: 8.2, y: 19.5))
        inboxfilled2Path.close()
        inboxfilled2Path.move(to: NSPoint(x: 7, y: 17.5))
        inboxfilled2Path.line(to: NSPoint(x: 6.4, y: 16.5))
        inboxfilled2Path.line(to: NSPoint(x: 23.6, y: 16.5))
        inboxfilled2Path.line(to: NSPoint(x: 23, y: 17.5))
        inboxfilled2Path.line(to: NSPoint(x: 7, y: 17.5))
        inboxfilled2Path.line(to: NSPoint(x: 7, y: 17.5))
        inboxfilled2Path.close()
        inboxfilled2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        inboxfilled2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawPen(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-134-pen
        //// pen 2 Drawing
        let pen2Path = NSBezierPath()
        pen2Path.move(to: NSPoint(x: 18, y: 6.5))
        pen2Path.line(to: NSPoint(x: 18, y: 22.5))
        pen2Path.line(to: NSPoint(x: 12, y: 22.5))
        pen2Path.line(to: NSPoint(x: 12, y: 6.5))
        pen2Path.line(to: NSPoint(x: 18, y: 6.5))
        pen2Path.line(to: NSPoint(x: 18, y: 6.5))
        pen2Path.close()
        pen2Path.move(to: NSPoint(x: 18, y: 5.5))
        pen2Path.line(to: NSPoint(x: 15, y: 1.5))
        pen2Path.line(to: NSPoint(x: 12, y: 5.5))
        pen2Path.line(to: NSPoint(x: 18, y: 5.5))
        pen2Path.line(to: NSPoint(x: 18, y: 5.5))
        pen2Path.close()
        pen2Path.move(to: NSPoint(x: 18, y: 23.5))
        pen2Path.line(to: NSPoint(x: 18, y: 26.5))
        pen2Path.curve(to: NSPoint(x: 16, y: 28.5), controlPoint1: NSPoint(x: 18, y: 27.6), controlPoint2: NSPoint(x: 17.1, y: 28.5))
        pen2Path.line(to: NSPoint(x: 14, y: 28.5))
        pen2Path.curve(to: NSPoint(x: 12, y: 26.5), controlPoint1: NSPoint(x: 12.89, y: 28.5), controlPoint2: NSPoint(x: 12, y: 27.6))
        pen2Path.line(to: NSPoint(x: 12, y: 23.5))
        pen2Path.line(to: NSPoint(x: 18, y: 23.5))
        pen2Path.line(to: NSPoint(x: 18, y: 23.5))
        pen2Path.close()
        pen2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        pen2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawPenAngled(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-135-pen-angled
        //// pen-angled 2 Drawing
        let penangled2Path = NSBezierPath()
        penangled2Path.move(to: NSPoint(x: 21.95, y: 17.95))
        penangled2Path.line(to: NSPoint(x: 10.65, y: 6.65))
        penangled2Path.line(to: NSPoint(x: 10.65, y: 6.65))
        penangled2Path.line(to: NSPoint(x: 6.65, y: 10.65))
        penangled2Path.line(to: NSPoint(x: 17.95, y: 21.95))
        penangled2Path.line(to: NSPoint(x: 21.95, y: 17.95))
        penangled2Path.line(to: NSPoint(x: 21.95, y: 17.95))
        penangled2Path.close()
        penangled2Path.move(to: NSPoint(x: 22.65, y: 18.65))
        penangled2Path.line(to: NSPoint(x: 24.38, y: 20.38))
        penangled2Path.curve(to: NSPoint(x: 24.39, y: 23.21), controlPoint1: NSPoint(x: 25.16, y: 21.16), controlPoint2: NSPoint(x: 25.17, y: 22.43))
        penangled2Path.line(to: NSPoint(x: 23.21, y: 24.39))
        penangled2Path.curve(to: NSPoint(x: 20.38, y: 24.38), controlPoint1: NSPoint(x: 22.43, y: 25.17), controlPoint2: NSPoint(x: 21.17, y: 25.17))
        penangled2Path.line(to: NSPoint(x: 18.65, y: 22.65))
        penangled2Path.line(to: NSPoint(x: 22.65, y: 18.65))
        penangled2Path.line(to: NSPoint(x: 22.65, y: 18.65))
        penangled2Path.close()
        penangled2Path.move(to: NSPoint(x: 9.95, y: 5.95))
        penangled2Path.line(to: NSPoint(x: 9.8, y: 5.8))
        penangled2Path.line(to: NSPoint(x: 4.8, y: 4.8))
        penangled2Path.line(to: NSPoint(x: 5.8, y: 9.8))
        penangled2Path.line(to: NSPoint(x: 5.95, y: 9.95))
        penangled2Path.line(to: NSPoint(x: 9.95, y: 5.95))
        penangled2Path.line(to: NSPoint(x: 9.95, y: 5.95))
        penangled2Path.close()
        penangled2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        penangled2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentEdit(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-136-document-edit
        //// document-edit 2 Drawing
        let documentedit2Path = NSBezierPath()
        documentedit2Path.move(to: NSPoint(x: 24.94, y: 19.35))
        documentedit2Path.line(to: NSPoint(x: 13.66, y: 8.05))
        documentedit2Path.line(to: NSPoint(x: 13.66, y: 8.05))
        documentedit2Path.line(to: NSPoint(x: 11.05, y: 10.66))
        documentedit2Path.line(to: NSPoint(x: 22.34, y: 21.95))
        documentedit2Path.line(to: NSPoint(x: 24.94, y: 19.35))
        documentedit2Path.line(to: NSPoint(x: 24.94, y: 19.35))
        documentedit2Path.close()
        documentedit2Path.move(to: NSPoint(x: 25.65, y: 20.06))
        documentedit2Path.line(to: NSPoint(x: 27.38, y: 21.79))
        documentedit2Path.curve(to: NSPoint(x: 27.37, y: 23.2), controlPoint1: NSPoint(x: 27.77, y: 22.18), controlPoint2: NSPoint(x: 27.77, y: 22.81))
        documentedit2Path.line(to: NSPoint(x: 26.19, y: 24.38))
        documentedit2Path.curve(to: NSPoint(x: 24.78, y: 24.38), controlPoint1: NSPoint(x: 25.8, y: 24.77), controlPoint2: NSPoint(x: 25.17, y: 24.78))
        documentedit2Path.line(to: NSPoint(x: 23.05, y: 22.66))
        documentedit2Path.line(to: NSPoint(x: 25.65, y: 20.06))
        documentedit2Path.line(to: NSPoint(x: 25.65, y: 20.06))
        documentedit2Path.close()
        documentedit2Path.move(to: NSPoint(x: 10.4, y: 9.89))
        documentedit2Path.line(to: NSPoint(x: 9.76, y: 6.78))
        documentedit2Path.line(to: NSPoint(x: 12.9, y: 7.39))
        documentedit2Path.line(to: NSPoint(x: 10.4, y: 9.89))
        documentedit2Path.line(to: NSPoint(x: 10.4, y: 9.89))
        documentedit2Path.line(to: NSPoint(x: 10.4, y: 9.89))
        documentedit2Path.close()
        documentedit2Path.move(to: NSPoint(x: 20.5, y: 13.5))
        documentedit2Path.line(to: NSPoint(x: 20.5, y: 3.5))
        documentedit2Path.curve(to: NSPoint(x: 18.5, y: 1.5), controlPoint1: NSPoint(x: 20.5, y: 2.39), controlPoint2: NSPoint(x: 19.61, y: 1.5))
        documentedit2Path.line(to: NSPoint(x: 3.5, y: 1.5))
        documentedit2Path.curve(to: NSPoint(x: 1.5, y: 3.51), controlPoint1: NSPoint(x: 2.39, y: 1.5), controlPoint2: NSPoint(x: 1.5, y: 2.4))
        documentedit2Path.line(to: NSPoint(x: 1.5, y: 26.49))
        documentedit2Path.curve(to: NSPoint(x: 3.51, y: 28.5), controlPoint1: NSPoint(x: 1.5, y: 27.6), controlPoint2: NSPoint(x: 2.4, y: 28.5))
        documentedit2Path.line(to: NSPoint(x: 13.5, y: 28.5))
        documentedit2Path.line(to: NSPoint(x: 13.5, y: 22.5))
        documentedit2Path.curve(to: NSPoint(x: 15.51, y: 20.5), controlPoint1: NSPoint(x: 13.5, y: 21.39), controlPoint2: NSPoint(x: 14.4, y: 20.5))
        documentedit2Path.line(to: NSPoint(x: 19.5, y: 20.5))
        documentedit2Path.line(to: NSPoint(x: 24.08, y: 25.08))
        documentedit2Path.curve(to: NSPoint(x: 26.91, y: 25.09), controlPoint1: NSPoint(x: 24.87, y: 25.87), controlPoint2: NSPoint(x: 26.13, y: 25.87))
        documentedit2Path.line(to: NSPoint(x: 28.09, y: 23.91))
        documentedit2Path.curve(to: NSPoint(x: 28.08, y: 21.08), controlPoint1: NSPoint(x: 28.87, y: 23.13), controlPoint2: NSPoint(x: 28.86, y: 21.86))
        documentedit2Path.line(to: NSPoint(x: 20.5, y: 13.5))
        documentedit2Path.line(to: NSPoint(x: 20.5, y: 13.5))
        documentedit2Path.close()
        documentedit2Path.move(to: NSPoint(x: 14.5, y: 28.5))
        documentedit2Path.line(to: NSPoint(x: 14.5, y: 22.5))
        documentedit2Path.curve(to: NSPoint(x: 15.49, y: 21.5), controlPoint1: NSPoint(x: 14.5, y: 21.95), controlPoint2: NSPoint(x: 14.95, y: 21.5))
        documentedit2Path.line(to: NSPoint(x: 20.5, y: 21.5))
        documentedit2Path.line(to: NSPoint(x: 14.5, y: 28.5))
        documentedit2Path.line(to: NSPoint(x: 14.5, y: 28.5))
        documentedit2Path.close()
        documentedit2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentedit2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawDocumentCertificate(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-137-document-certificate
        //// document-certificate 2 Drawing
        let documentcertificate2Path = NSBezierPath()
        documentcertificate2Path.move(to: NSPoint(x: 20.5, y: 5.47))
        documentcertificate2Path.line(to: NSPoint(x: 20.5, y: 3.48))
        documentcertificate2Path.line(to: NSPoint(x: 22.5, y: 3.48))
        documentcertificate2Path.curve(to: NSPoint(x: 24.5, y: 5.41), controlPoint1: NSPoint(x: 23.61, y: 3.48), controlPoint2: NSPoint(x: 24.5, y: 4.34))
        documentcertificate2Path.line(to: NSPoint(x: 24.5, y: 21.86))
        documentcertificate2Path.line(to: NSPoint(x: 19.51, y: 21.86))
        documentcertificate2Path.curve(to: NSPoint(x: 17.5, y: 23.79), controlPoint1: NSPoint(x: 18.4, y: 21.86), controlPoint2: NSPoint(x: 17.5, y: 22.72))
        documentcertificate2Path.line(to: NSPoint(x: 17.5, y: 29.6))
        documentcertificate2Path.line(to: NSPoint(x: 7.51, y: 29.6))
        documentcertificate2Path.curve(to: NSPoint(x: 5.5, y: 27.66), controlPoint1: NSPoint(x: 6.4, y: 29.6), controlPoint2: NSPoint(x: 5.5, y: 28.73))
        documentcertificate2Path.line(to: NSPoint(x: 5.5, y: 5.42))
        documentcertificate2Path.curve(to: NSPoint(x: 7.5, y: 3.48), controlPoint1: NSPoint(x: 5.5, y: 4.35), controlPoint2: NSPoint(x: 6.39, y: 3.48))
        documentcertificate2Path.line(to: NSPoint(x: 15.5, y: 3.48))
        documentcertificate2Path.line(to: NSPoint(x: 15.5, y: 5.47))
        documentcertificate2Path.curve(to: NSPoint(x: 14.5, y: 7.84), controlPoint1: NSPoint(x: 14.88, y: 6.08), controlPoint2: NSPoint(x: 14.5, y: 6.91))
        documentcertificate2Path.curve(to: NSPoint(x: 18, y: 11.22), controlPoint1: NSPoint(x: 14.5, y: 9.71), controlPoint2: NSPoint(x: 16.07, y: 11.22))
        documentcertificate2Path.curve(to: NSPoint(x: 21.5, y: 7.84), controlPoint1: NSPoint(x: 19.93, y: 11.22), controlPoint2: NSPoint(x: 21.5, y: 9.71))
        documentcertificate2Path.curve(to: NSPoint(x: 20.5, y: 5.47), controlPoint1: NSPoint(x: 21.5, y: 6.91), controlPoint2: NSPoint(x: 21.12, y: 6.08))
        documentcertificate2Path.line(to: NSPoint(x: 20.5, y: 5.47))
        documentcertificate2Path.line(to: NSPoint(x: 20.5, y: 5.47))
        documentcertificate2Path.close()
        documentcertificate2Path.move(to: NSPoint(x: 16.5, y: 4.78))
        documentcertificate2Path.line(to: NSPoint(x: 16.5, y: 0))
        documentcertificate2Path.line(to: NSPoint(x: 18, y: 1.45))
        documentcertificate2Path.line(to: NSPoint(x: 19.5, y: 0))
        documentcertificate2Path.line(to: NSPoint(x: 19.5, y: 4.78))
        documentcertificate2Path.curve(to: NSPoint(x: 18, y: 4.45), controlPoint1: NSPoint(x: 19.05, y: 4.57), controlPoint2: NSPoint(x: 18.54, y: 4.45))
        documentcertificate2Path.curve(to: NSPoint(x: 16.5, y: 4.78), controlPoint1: NSPoint(x: 17.46, y: 4.45), controlPoint2: NSPoint(x: 16.95, y: 4.57))
        documentcertificate2Path.line(to: NSPoint(x: 16.5, y: 4.78))
        documentcertificate2Path.line(to: NSPoint(x: 16.5, y: 4.78))
        documentcertificate2Path.close()
        documentcertificate2Path.move(to: NSPoint(x: 18.5, y: 29.6))
        documentcertificate2Path.line(to: NSPoint(x: 18.5, y: 23.8))
        documentcertificate2Path.curve(to: NSPoint(x: 19.49, y: 22.83), controlPoint1: NSPoint(x: 18.5, y: 23.26), controlPoint2: NSPoint(x: 18.95, y: 22.83))
        documentcertificate2Path.line(to: NSPoint(x: 24.5, y: 22.83))
        documentcertificate2Path.line(to: NSPoint(x: 18.5, y: 29.6))
        documentcertificate2Path.line(to: NSPoint(x: 18.5, y: 29.6))
        documentcertificate2Path.close()
        documentcertificate2Path.move(to: NSPoint(x: 8.5, y: 22.83))
        documentcertificate2Path.line(to: NSPoint(x: 8.5, y: 21.86))
        documentcertificate2Path.line(to: NSPoint(x: 15.5, y: 21.86))
        documentcertificate2Path.line(to: NSPoint(x: 15.5, y: 22.83))
        documentcertificate2Path.line(to: NSPoint(x: 8.5, y: 22.83))
        documentcertificate2Path.line(to: NSPoint(x: 8.5, y: 22.83))
        documentcertificate2Path.close()
        documentcertificate2Path.move(to: NSPoint(x: 8.5, y: 25.73))
        documentcertificate2Path.line(to: NSPoint(x: 8.5, y: 24.76))
        documentcertificate2Path.line(to: NSPoint(x: 15.5, y: 24.76))
        documentcertificate2Path.line(to: NSPoint(x: 15.5, y: 25.73))
        documentcertificate2Path.line(to: NSPoint(x: 8.5, y: 25.73))
        documentcertificate2Path.line(to: NSPoint(x: 8.5, y: 25.73))
        documentcertificate2Path.close()
        documentcertificate2Path.move(to: NSPoint(x: 8.5, y: 19.93))
        documentcertificate2Path.line(to: NSPoint(x: 8.5, y: 18.96))
        documentcertificate2Path.line(to: NSPoint(x: 21.5, y: 18.96))
        documentcertificate2Path.line(to: NSPoint(x: 21.5, y: 19.93))
        documentcertificate2Path.line(to: NSPoint(x: 8.5, y: 19.93))
        documentcertificate2Path.line(to: NSPoint(x: 8.5, y: 19.93))
        documentcertificate2Path.close()
        documentcertificate2Path.move(to: NSPoint(x: 8.5, y: 17.02))
        documentcertificate2Path.line(to: NSPoint(x: 8.5, y: 16.06))
        documentcertificate2Path.line(to: NSPoint(x: 21.5, y: 16.06))
        documentcertificate2Path.line(to: NSPoint(x: 21.5, y: 17.02))
        documentcertificate2Path.line(to: NSPoint(x: 8.5, y: 17.02))
        documentcertificate2Path.line(to: NSPoint(x: 8.5, y: 17.02))
        documentcertificate2Path.close()
        documentcertificate2Path.move(to: NSPoint(x: 8.5, y: 14.12))
        documentcertificate2Path.line(to: NSPoint(x: 8.5, y: 13.16))
        documentcertificate2Path.line(to: NSPoint(x: 21.5, y: 13.16))
        documentcertificate2Path.line(to: NSPoint(x: 21.5, y: 14.12))
        documentcertificate2Path.line(to: NSPoint(x: 8.5, y: 14.12))
        documentcertificate2Path.line(to: NSPoint(x: 8.5, y: 14.12))
        documentcertificate2Path.close()
        documentcertificate2Path.move(to: NSPoint(x: 18, y: 5.42))
        documentcertificate2Path.curve(to: NSPoint(x: 20.5, y: 7.84), controlPoint1: NSPoint(x: 19.38, y: 5.42), controlPoint2: NSPoint(x: 20.5, y: 6.5))
        documentcertificate2Path.curve(to: NSPoint(x: 18, y: 10.25), controlPoint1: NSPoint(x: 20.5, y: 9.17), controlPoint2: NSPoint(x: 19.38, y: 10.25))
        documentcertificate2Path.curve(to: NSPoint(x: 15.5, y: 7.84), controlPoint1: NSPoint(x: 16.62, y: 10.25), controlPoint2: NSPoint(x: 15.5, y: 9.17))
        documentcertificate2Path.curve(to: NSPoint(x: 18, y: 5.42), controlPoint1: NSPoint(x: 15.5, y: 6.5), controlPoint2: NSPoint(x: 16.62, y: 5.42))
        documentcertificate2Path.line(to: NSPoint(x: 18, y: 5.42))
        documentcertificate2Path.close()
        documentcertificate2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        documentcertificate2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawCertificate(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-138-certificate
        //// certificate 2 Drawing
        let certificate2Path = NSBezierPath()
        certificate2Path.move(to: NSPoint(x: 12, y: 10.95))
        certificate2Path.line(to: NSPoint(x: 12, y: 7.9))
        certificate2Path.line(to: NSPoint(x: 25, y: 7.9))
        certificate2Path.curve(to: NSPoint(x: 27, y: 9.9), controlPoint1: NSPoint(x: 26.1, y: 7.9), controlPoint2: NSPoint(x: 27, y: 8.79))
        certificate2Path.line(to: NSPoint(x: 27, y: 22.9))
        certificate2Path.curve(to: NSPoint(x: 25, y: 24.9), controlPoint1: NSPoint(x: 27, y: 24), controlPoint2: NSPoint(x: 26.1, y: 24.9))
        certificate2Path.line(to: NSPoint(x: 5, y: 24.9))
        certificate2Path.curve(to: NSPoint(x: 3, y: 22.9), controlPoint1: NSPoint(x: 3.9, y: 24.9), controlPoint2: NSPoint(x: 3, y: 24.01))
        certificate2Path.line(to: NSPoint(x: 3, y: 9.9))
        certificate2Path.curve(to: NSPoint(x: 5, y: 7.9), controlPoint1: NSPoint(x: 3, y: 8.8), controlPoint2: NSPoint(x: 3.9, y: 7.9))
        certificate2Path.line(to: NSPoint(x: 7, y: 7.9))
        certificate2Path.line(to: NSPoint(x: 7, y: 10.95))
        certificate2Path.curve(to: NSPoint(x: 6, y: 13.4), controlPoint1: NSPoint(x: 6.38, y: 11.58), controlPoint2: NSPoint(x: 6, y: 12.45))
        certificate2Path.curve(to: NSPoint(x: 9.5, y: 16.9), controlPoint1: NSPoint(x: 6, y: 15.33), controlPoint2: NSPoint(x: 7.57, y: 16.9))
        certificate2Path.curve(to: NSPoint(x: 13, y: 13.4), controlPoint1: NSPoint(x: 11.43, y: 16.9), controlPoint2: NSPoint(x: 13, y: 15.33))
        certificate2Path.curve(to: NSPoint(x: 12, y: 10.95), controlPoint1: NSPoint(x: 13, y: 12.45), controlPoint2: NSPoint(x: 12.62, y: 11.58))
        certificate2Path.line(to: NSPoint(x: 12, y: 10.95))
        certificate2Path.line(to: NSPoint(x: 12, y: 10.95))
        certificate2Path.close()
        certificate2Path.move(to: NSPoint(x: 8, y: 10.24))
        certificate2Path.line(to: NSPoint(x: 8, y: 5.3))
        certificate2Path.line(to: NSPoint(x: 9.5, y: 6.8))
        certificate2Path.line(to: NSPoint(x: 11, y: 5.3))
        certificate2Path.line(to: NSPoint(x: 11, y: 10.24))
        certificate2Path.curve(to: NSPoint(x: 9.5, y: 9.9), controlPoint1: NSPoint(x: 10.55, y: 10.02), controlPoint2: NSPoint(x: 10.04, y: 9.9))
        certificate2Path.curve(to: NSPoint(x: 8, y: 10.24), controlPoint1: NSPoint(x: 8.96, y: 9.9), controlPoint2: NSPoint(x: 8.45, y: 10.02))
        certificate2Path.line(to: NSPoint(x: 8, y: 10.24))
        certificate2Path.line(to: NSPoint(x: 8, y: 10.24))
        certificate2Path.close()
        certificate2Path.move(to: NSPoint(x: 6, y: 19.9))
        certificate2Path.line(to: NSPoint(x: 6, y: 18.9))
        certificate2Path.line(to: NSPoint(x: 24, y: 18.9))
        certificate2Path.line(to: NSPoint(x: 24, y: 19.9))
        certificate2Path.line(to: NSPoint(x: 6, y: 19.9))
        certificate2Path.line(to: NSPoint(x: 6, y: 19.9))
        certificate2Path.close()
        certificate2Path.move(to: NSPoint(x: 15, y: 16.9))
        certificate2Path.line(to: NSPoint(x: 15, y: 15.9))
        certificate2Path.line(to: NSPoint(x: 24, y: 15.9))
        certificate2Path.line(to: NSPoint(x: 24, y: 16.9))
        certificate2Path.line(to: NSPoint(x: 15, y: 16.9))
        certificate2Path.line(to: NSPoint(x: 15, y: 16.9))
        certificate2Path.close()
        certificate2Path.move(to: NSPoint(x: 18, y: 13.9))
        certificate2Path.line(to: NSPoint(x: 18, y: 12.9))
        certificate2Path.line(to: NSPoint(x: 24, y: 12.9))
        certificate2Path.line(to: NSPoint(x: 24, y: 13.9))
        certificate2Path.line(to: NSPoint(x: 18, y: 13.9))
        certificate2Path.line(to: NSPoint(x: 18, y: 13.9))
        certificate2Path.close()
        certificate2Path.move(to: NSPoint(x: 9.5, y: 10.9))
        certificate2Path.curve(to: NSPoint(x: 12, y: 13.4), controlPoint1: NSPoint(x: 10.88, y: 10.9), controlPoint2: NSPoint(x: 12, y: 12.02))
        certificate2Path.curve(to: NSPoint(x: 9.5, y: 15.9), controlPoint1: NSPoint(x: 12, y: 14.78), controlPoint2: NSPoint(x: 10.88, y: 15.9))
        certificate2Path.curve(to: NSPoint(x: 7, y: 13.4), controlPoint1: NSPoint(x: 8.12, y: 15.9), controlPoint2: NSPoint(x: 7, y: 14.78))
        certificate2Path.curve(to: NSPoint(x: 9.5, y: 10.9), controlPoint1: NSPoint(x: 7, y: 12.02), controlPoint2: NSPoint(x: 8.12, y: 10.9))
        certificate2Path.line(to: NSPoint(x: 9.5, y: 10.9))
        certificate2Path.close()
        certificate2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        certificate2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawPackage2(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-139-package
        //// package 3 Drawing
        let package3Path = NSBezierPath()
        package3Path.move(to: NSPoint(x: 2.5, y: 18))
        package3Path.line(to: NSPoint(x: 2.5, y: 3))
        package3Path.line(to: NSPoint(x: 27.5, y: 3))
        package3Path.line(to: NSPoint(x: 27.5, y: 18))
        package3Path.line(to: NSPoint(x: 17.5, y: 18))
        package3Path.line(to: NSPoint(x: 17.5, y: 11))
        package3Path.line(to: NSPoint(x: 12.5, y: 11))
        package3Path.line(to: NSPoint(x: 12.5, y: 18))
        package3Path.line(to: NSPoint(x: 2.5, y: 18))
        package3Path.line(to: NSPoint(x: 2.5, y: 18))
        package3Path.line(to: NSPoint(x: 2.5, y: 18))
        package3Path.close()
        package3Path.move(to: NSPoint(x: 12.5, y: 19))
        package3Path.line(to: NSPoint(x: 2.5, y: 19))
        package3Path.line(to: NSPoint(x: 7.5, y: 27))
        package3Path.line(to: NSPoint(x: 13.5, y: 27))
        package3Path.line(to: NSPoint(x: 12.5, y: 19))
        package3Path.line(to: NSPoint(x: 12.5, y: 19))
        package3Path.close()
        package3Path.move(to: NSPoint(x: 17.5, y: 19))
        package3Path.line(to: NSPoint(x: 27.5, y: 19))
        package3Path.line(to: NSPoint(x: 22.5, y: 27))
        package3Path.line(to: NSPoint(x: 16.5, y: 27))
        package3Path.line(to: NSPoint(x: 17.5, y: 19))
        package3Path.line(to: NSPoint(x: 17.5, y: 19))
        package3Path.close()
        package3Path.move(to: NSPoint(x: 13.5, y: 19))
        package3Path.line(to: NSPoint(x: 16.5, y: 19))
        package3Path.line(to: NSPoint(x: 15.5, y: 27))
        package3Path.line(to: NSPoint(x: 14.5, y: 27))
        package3Path.line(to: NSPoint(x: 13.5, y: 19))
        package3Path.line(to: NSPoint(x: 13.5, y: 19))
        package3Path.close()
        package3Path.move(to: NSPoint(x: 13.5, y: 18))
        package3Path.line(to: NSPoint(x: 13.5, y: 12))
        package3Path.line(to: NSPoint(x: 16.5, y: 12))
        package3Path.line(to: NSPoint(x: 16.5, y: 18))
        package3Path.line(to: NSPoint(x: 13.5, y: 18))
        package3Path.line(to: NSPoint(x: 13.5, y: 18))
        package3Path.close()
        package3Path.move(to: NSPoint(x: 4.5, y: 10))
        package3Path.line(to: NSPoint(x: 4.5, y: 9))
        package3Path.line(to: NSPoint(x: 11.5, y: 9))
        package3Path.line(to: NSPoint(x: 11.5, y: 10))
        package3Path.line(to: NSPoint(x: 4.5, y: 10))
        package3Path.line(to: NSPoint(x: 4.5, y: 10))
        package3Path.close()
        package3Path.move(to: NSPoint(x: 4.5, y: 6))
        package3Path.line(to: NSPoint(x: 4.5, y: 5))
        package3Path.line(to: NSPoint(x: 11.5, y: 5))
        package3Path.line(to: NSPoint(x: 11.5, y: 6))
        package3Path.line(to: NSPoint(x: 4.5, y: 6))
        package3Path.line(to: NSPoint(x: 4.5, y: 6))
        package3Path.close()
        package3Path.move(to: NSPoint(x: 4.5, y: 8))
        package3Path.line(to: NSPoint(x: 4.5, y: 7))
        package3Path.line(to: NSPoint(x: 9.5, y: 7))
        package3Path.line(to: NSPoint(x: 9.5, y: 8))
        package3Path.line(to: NSPoint(x: 4.5, y: 8))
        package3Path.line(to: NSPoint(x: 4.5, y: 8))
        package3Path.close()
        package3Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        package3Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawBox(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-140-box
        //// box 4 Drawing
        let box4Path = NSBezierPath()
        box4Path.move(to: NSPoint(x: 2.5, y: 19))
        box4Path.line(to: NSPoint(x: 7.5, y: 27))
        box4Path.line(to: NSPoint(x: 22.5, y: 27))
        box4Path.line(to: NSPoint(x: 27.5, y: 19))
        box4Path.line(to: NSPoint(x: 27.5, y: 18))
        box4Path.line(to: NSPoint(x: 27.5, y: 3))
        box4Path.line(to: NSPoint(x: 2.5, y: 3))
        box4Path.line(to: NSPoint(x: 2.5, y: 19))
        box4Path.line(to: NSPoint(x: 2.5, y: 19))
        box4Path.close()
        box4Path.move(to: NSPoint(x: 26.28, y: 19))
        box4Path.line(to: NSPoint(x: 21.9, y: 26))
        box4Path.line(to: NSPoint(x: 8.1, y: 26))
        box4Path.line(to: NSPoint(x: 3.72, y: 19))
        box4Path.line(to: NSPoint(x: 26.28, y: 19))
        box4Path.line(to: NSPoint(x: 26.28, y: 19))
        box4Path.close()
        box4Path.move(to: NSPoint(x: 12.5, y: 13))
        box4Path.curve(to: NSPoint(x: 10.5, y: 11), controlPoint1: NSPoint(x: 11.39, y: 13), controlPoint2: NSPoint(x: 10.5, y: 12.11))
        box4Path.curve(to: NSPoint(x: 12.5, y: 9), controlPoint1: NSPoint(x: 10.5, y: 9.9), controlPoint2: NSPoint(x: 11.4, y: 9))
        box4Path.line(to: NSPoint(x: 17.5, y: 9))
        box4Path.curve(to: NSPoint(x: 19.5, y: 11), controlPoint1: NSPoint(x: 18.61, y: 9), controlPoint2: NSPoint(x: 19.5, y: 9.89))
        box4Path.curve(to: NSPoint(x: 17.5, y: 13), controlPoint1: NSPoint(x: 19.5, y: 12.1), controlPoint2: NSPoint(x: 18.6, y: 13))
        box4Path.line(to: NSPoint(x: 12.5, y: 13))
        box4Path.line(to: NSPoint(x: 12.5, y: 13))
        box4Path.close()
        box4Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        box4Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawBoxFilled(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-141-box-filled
        //// box-filled 2 Drawing
        let boxfilled2Path = NSBezierPath()
        boxfilled2Path.move(to: NSPoint(x: 2.5, y: 19))
        boxfilled2Path.line(to: NSPoint(x: 7.5, y: 27))
        boxfilled2Path.line(to: NSPoint(x: 22.5, y: 27))
        boxfilled2Path.line(to: NSPoint(x: 27.5, y: 19))
        boxfilled2Path.line(to: NSPoint(x: 27.5, y: 17.5))
        boxfilled2Path.line(to: NSPoint(x: 27.5, y: 3))
        boxfilled2Path.line(to: NSPoint(x: 2.5, y: 3))
        boxfilled2Path.line(to: NSPoint(x: 2.5, y: 19))
        boxfilled2Path.line(to: NSPoint(x: 2.5, y: 19))
        boxfilled2Path.close()
        boxfilled2Path.move(to: NSPoint(x: 26.28, y: 19))
        boxfilled2Path.line(to: NSPoint(x: 21.9, y: 26))
        boxfilled2Path.line(to: NSPoint(x: 8.1, y: 26))
        boxfilled2Path.line(to: NSPoint(x: 3.72, y: 19))
        boxfilled2Path.line(to: NSPoint(x: 26.28, y: 19))
        boxfilled2Path.line(to: NSPoint(x: 26.28, y: 19))
        boxfilled2Path.close()
        boxfilled2Path.move(to: NSPoint(x: 12.5, y: 13))
        boxfilled2Path.curve(to: NSPoint(x: 10.5, y: 11), controlPoint1: NSPoint(x: 11.39, y: 13), controlPoint2: NSPoint(x: 10.5, y: 12.11))
        boxfilled2Path.curve(to: NSPoint(x: 12.5, y: 9), controlPoint1: NSPoint(x: 10.5, y: 9.9), controlPoint2: NSPoint(x: 11.4, y: 9))
        boxfilled2Path.line(to: NSPoint(x: 17.5, y: 9))
        boxfilled2Path.curve(to: NSPoint(x: 19.5, y: 11), controlPoint1: NSPoint(x: 18.61, y: 9), controlPoint2: NSPoint(x: 19.5, y: 9.89))
        boxfilled2Path.curve(to: NSPoint(x: 17.5, y: 13), controlPoint1: NSPoint(x: 19.5, y: 12.1), controlPoint2: NSPoint(x: 18.6, y: 13))
        boxfilled2Path.line(to: NSPoint(x: 12.5, y: 13))
        boxfilled2Path.line(to: NSPoint(x: 12.5, y: 13))
        boxfilled2Path.close()
        boxfilled2Path.move(to: NSPoint(x: 9.5, y: 25))
        boxfilled2Path.line(to: NSPoint(x: 8.9, y: 24))
        boxfilled2Path.line(to: NSPoint(x: 21.1, y: 24))
        boxfilled2Path.line(to: NSPoint(x: 20.5, y: 25))
        boxfilled2Path.line(to: NSPoint(x: 9.5, y: 25))
        boxfilled2Path.line(to: NSPoint(x: 9.5, y: 25))
        boxfilled2Path.close()
        boxfilled2Path.move(to: NSPoint(x: 8.2, y: 23))
        boxfilled2Path.line(to: NSPoint(x: 7.6, y: 22))
        boxfilled2Path.line(to: NSPoint(x: 22.4, y: 22))
        boxfilled2Path.line(to: NSPoint(x: 21.8, y: 23))
        boxfilled2Path.line(to: NSPoint(x: 8.2, y: 23))
        boxfilled2Path.line(to: NSPoint(x: 8.2, y: 23))
        boxfilled2Path.close()
        boxfilled2Path.move(to: NSPoint(x: 7, y: 21))
        boxfilled2Path.line(to: NSPoint(x: 6.4, y: 20))
        boxfilled2Path.line(to: NSPoint(x: 23.6, y: 20))
        boxfilled2Path.line(to: NSPoint(x: 23, y: 21))
        boxfilled2Path.line(to: NSPoint(x: 7, y: 21))
        boxfilled2Path.line(to: NSPoint(x: 7, y: 21))
        boxfilled2Path.close()
        boxfilled2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        boxfilled2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawBox2(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-142-box
        //// box 4 Drawing
        let box4Path = NSBezierPath()
        box4Path.move(to: NSPoint(x: 27.5, y: 20))
        box4Path.line(to: NSPoint(x: 27.5, y: 17))
        box4Path.line(to: NSPoint(x: 27.5, y: 17))
        box4Path.line(to: NSPoint(x: 2.5, y: 17))
        box4Path.line(to: NSPoint(x: 2.5, y: 20))
        box4Path.line(to: NSPoint(x: 27.5, y: 20))
        box4Path.line(to: NSPoint(x: 27.5, y: 20))
        box4Path.close()
        box4Path.move(to: NSPoint(x: 2.5, y: 16))
        box4Path.line(to: NSPoint(x: 2.5, y: 1))
        box4Path.line(to: NSPoint(x: 27.5, y: 1))
        box4Path.line(to: NSPoint(x: 27.5, y: 16))
        box4Path.line(to: NSPoint(x: 2.5, y: 16))
        box4Path.line(to: NSPoint(x: 2.5, y: 16))
        box4Path.line(to: NSPoint(x: 2.5, y: 16))
        box4Path.close()
        box4Path.move(to: NSPoint(x: 7.5, y: 29))
        box4Path.line(to: NSPoint(x: 2.5, y: 21))
        box4Path.line(to: NSPoint(x: 27.5, y: 21))
        box4Path.line(to: NSPoint(x: 22.5, y: 29))
        box4Path.line(to: NSPoint(x: 7.5, y: 29))
        box4Path.line(to: NSPoint(x: 7.5, y: 29))
        box4Path.close()
        box4Path.move(to: NSPoint(x: 12.5, y: 11))
        box4Path.curve(to: NSPoint(x: 10.5, y: 9), controlPoint1: NSPoint(x: 11.39, y: 11), controlPoint2: NSPoint(x: 10.5, y: 10.11))
        box4Path.curve(to: NSPoint(x: 12.5, y: 7), controlPoint1: NSPoint(x: 10.5, y: 7.9), controlPoint2: NSPoint(x: 11.4, y: 7))
        box4Path.line(to: NSPoint(x: 17.5, y: 7))
        box4Path.curve(to: NSPoint(x: 19.5, y: 9), controlPoint1: NSPoint(x: 18.61, y: 7), controlPoint2: NSPoint(x: 19.5, y: 7.89))
        box4Path.curve(to: NSPoint(x: 17.5, y: 11), controlPoint1: NSPoint(x: 19.5, y: 10.1), controlPoint2: NSPoint(x: 18.6, y: 11))
        box4Path.line(to: NSPoint(x: 12.5, y: 11))
        box4Path.line(to: NSPoint(x: 12.5, y: 11))
        box4Path.close()
        box4Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        box4Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawBox3(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-143-box
        //// box 4 Drawing
        let box4Path = NSBezierPath()
        box4Path.move(to: NSPoint(x: 26.5, y: 18.5))
        box4Path.line(to: NSPoint(x: 26.5, y: 3.5))
        box4Path.line(to: NSPoint(x: 3.5, y: 3.5))
        box4Path.line(to: NSPoint(x: 3.5, y: 18.5))
        box4Path.line(to: NSPoint(x: 26.5, y: 18.5))
        box4Path.line(to: NSPoint(x: 26.5, y: 18.5))
        box4Path.close()
        box4Path.move(to: NSPoint(x: 28.5, y: 19.5))
        box4Path.line(to: NSPoint(x: 28.5, y: 26.5))
        box4Path.line(to: NSPoint(x: 1.5, y: 26.5))
        box4Path.line(to: NSPoint(x: 1.5, y: 19.5))
        box4Path.line(to: NSPoint(x: 28.5, y: 19.5))
        box4Path.line(to: NSPoint(x: 28.5, y: 19.5))
        box4Path.line(to: NSPoint(x: 28.5, y: 19.5))
        box4Path.close()
        box4Path.move(to: NSPoint(x: 12.5, y: 13.5))
        box4Path.curve(to: NSPoint(x: 10.5, y: 11.5), controlPoint1: NSPoint(x: 11.39, y: 13.5), controlPoint2: NSPoint(x: 10.5, y: 12.61))
        box4Path.curve(to: NSPoint(x: 12.5, y: 9.5), controlPoint1: NSPoint(x: 10.5, y: 10.4), controlPoint2: NSPoint(x: 11.4, y: 9.5))
        box4Path.line(to: NSPoint(x: 17.5, y: 9.5))
        box4Path.curve(to: NSPoint(x: 19.5, y: 11.5), controlPoint1: NSPoint(x: 18.61, y: 9.5), controlPoint2: NSPoint(x: 19.5, y: 10.39))
        box4Path.curve(to: NSPoint(x: 17.5, y: 13.5), controlPoint1: NSPoint(x: 19.5, y: 12.6), controlPoint2: NSPoint(x: 18.6, y: 13.5))
        box4Path.line(to: NSPoint(x: 12.5, y: 13.5))
        box4Path.line(to: NSPoint(x: 12.5, y: 13.5))
        box4Path.close()
        box4Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        box4Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawBoxBookmark(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-144-box-bookmark
        //// box-bookmark 2 Drawing
        let boxbookmark2Path = NSBezierPath()
        boxbookmark2Path.move(to: NSPoint(x: 26.5, y: 18.5))
        boxbookmark2Path.line(to: NSPoint(x: 26.5, y: 3.5))
        boxbookmark2Path.line(to: NSPoint(x: 3.5, y: 3.5))
        boxbookmark2Path.line(to: NSPoint(x: 3.5, y: 18.5))
        boxbookmark2Path.line(to: NSPoint(x: 16.5, y: 18.5))
        boxbookmark2Path.line(to: NSPoint(x: 16.5, y: 9.5))
        boxbookmark2Path.line(to: NSPoint(x: 19.5, y: 12.5))
        boxbookmark2Path.line(to: NSPoint(x: 22.5, y: 9.5))
        boxbookmark2Path.line(to: NSPoint(x: 22.5, y: 18.5))
        boxbookmark2Path.line(to: NSPoint(x: 26.5, y: 18.5))
        boxbookmark2Path.line(to: NSPoint(x: 26.5, y: 18.5))
        boxbookmark2Path.close()
        boxbookmark2Path.move(to: NSPoint(x: 28.5, y: 19.5))
        boxbookmark2Path.line(to: NSPoint(x: 28.5, y: 26.5))
        boxbookmark2Path.line(to: NSPoint(x: 1.5, y: 26.5))
        boxbookmark2Path.line(to: NSPoint(x: 1.5, y: 19.5))
        boxbookmark2Path.line(to: NSPoint(x: 28.5, y: 19.5))
        boxbookmark2Path.line(to: NSPoint(x: 28.5, y: 19.5))
        boxbookmark2Path.line(to: NSPoint(x: 28.5, y: 19.5))
        boxbookmark2Path.close()
        boxbookmark2Path.move(to: NSPoint(x: 17.5, y: 18.5))
        boxbookmark2Path.line(to: NSPoint(x: 17.5, y: 11.9))
        boxbookmark2Path.line(to: NSPoint(x: 19.5, y: 13.9))
        boxbookmark2Path.line(to: NSPoint(x: 21.5, y: 11.9))
        boxbookmark2Path.line(to: NSPoint(x: 21.5, y: 18.5))
        boxbookmark2Path.line(to: NSPoint(x: 17.5, y: 18.5))
        boxbookmark2Path.line(to: NSPoint(x: 17.5, y: 18.5))
        boxbookmark2Path.close()
        boxbookmark2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        boxbookmark2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawTagCord(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-145-tag-cord
        //// tag-cord 2 Drawing
        let tagcord2Path = NSBezierPath()
        tagcord2Path.move(to: NSPoint(x: 9.76, y: 25.47))
        tagcord2Path.line(to: NSPoint(x: 15, y: 25.47))
        tagcord2Path.line(to: NSPoint(x: 28.38, y: 12.09))
        tagcord2Path.curve(to: NSPoint(x: 28.39, y: 9.26), controlPoint1: NSPoint(x: 29.17, y: 11.31), controlPoint2: NSPoint(x: 29.17, y: 10.04))
        tagcord2Path.line(to: NSPoint(x: 21.22, y: 2.08))
        tagcord2Path.curve(to: NSPoint(x: 18.38, y: 2.09), controlPoint1: NSPoint(x: 20.44, y: 1.3), controlPoint2: NSPoint(x: 19.17, y: 1.31))
        tagcord2Path.line(to: NSPoint(x: 5, y: 15.47))
        tagcord2Path.line(to: NSPoint(x: 5, y: 23.47))
        tagcord2Path.curve(to: NSPoint(x: 6.54, y: 25.42), controlPoint1: NSPoint(x: 5, y: 24.42), controlPoint2: NSPoint(x: 5.66, y: 25.21))
        tagcord2Path.curve(to: NSPoint(x: 6.98, y: 24.24), controlPoint1: NSPoint(x: 6.73, y: 25.1), controlPoint2: NSPoint(x: 6.89, y: 24.71))
        tagcord2Path.curve(to: NSPoint(x: 10.43, y: 18.47), controlPoint1: NSPoint(x: 7.79, y: 20.16), controlPoint2: NSPoint(x: 8.6, y: 18.69))
        tagcord2Path.curve(to: NSPoint(x: 10.44, y: 18.47), controlPoint1: NSPoint(x: 10.43, y: 18.46), controlPoint2: NSPoint(x: 10.44, y: 18.47))
        tagcord2Path.curve(to: NSPoint(x: 10.5, y: 18.47), controlPoint1: NSPoint(x: 10.46, y: 18.47), controlPoint2: NSPoint(x: 10.48, y: 18.47))
        tagcord2Path.curve(to: NSPoint(x: 12, y: 19.97), controlPoint1: NSPoint(x: 11.33, y: 18.47), controlPoint2: NSPoint(x: 12, y: 19.14))
        tagcord2Path.curve(to: NSPoint(x: 10.92, y: 21.41), controlPoint1: NSPoint(x: 12, y: 20.66), controlPoint2: NSPoint(x: 11.54, y: 21.23))
        tagcord2Path.curve(to: NSPoint(x: 10.92, y: 21.43), controlPoint1: NSPoint(x: 10.92, y: 21.42), controlPoint2: NSPoint(x: 10.92, y: 21.42))
        tagcord2Path.curve(to: NSPoint(x: 9.92, y: 24.82), controlPoint1: NSPoint(x: 10.64, y: 21.82), controlPoint2: NSPoint(x: 10.31, y: 22.88))
        tagcord2Path.curve(to: NSPoint(x: 9.76, y: 25.47), controlPoint1: NSPoint(x: 9.88, y: 25.05), controlPoint2: NSPoint(x: 9.83, y: 25.26))
        tagcord2Path.line(to: NSPoint(x: 9.76, y: 25.47))
        tagcord2Path.line(to: NSPoint(x: 9.76, y: 25.47))
        tagcord2Path.close()
        tagcord2Path.move(to: NSPoint(x: 8.94, y: 24.63))
        tagcord2Path.curve(to: NSPoint(x: 1.58, y: 26.74), controlPoint1: NSPoint(x: 8.08, y: 29), controlPoint2: NSPoint(x: 3.39, y: 29.61))
        tagcord2Path.curve(to: NSPoint(x: 4, y: 20.47), controlPoint1: NSPoint(x: 0.13, y: 24.43), controlPoint2: NSPoint(x: 1.57, y: 20.47))
        tagcord2Path.line(to: NSPoint(x: 4, y: 21.47))
        tagcord2Path.curve(to: NSPoint(x: 2.43, y: 26.2), controlPoint1: NSPoint(x: 2.45, y: 21.47), controlPoint2: NSPoint(x: 1.36, y: 24.5))
        tagcord2Path.curve(to: NSPoint(x: 7.96, y: 24.43), controlPoint1: NSPoint(x: 3.77, y: 28.34), controlPoint2: NSPoint(x: 7.28, y: 27.88))
        tagcord2Path.curve(to: NSPoint(x: 11, y: 19.47), controlPoint1: NSPoint(x: 8.77, y: 20.36), controlPoint2: NSPoint(x: 9.38, y: 19.47))
        tagcord2Path.line(to: NSPoint(x: 11, y: 20.47))
        tagcord2Path.curve(to: NSPoint(x: 8.94, y: 24.63), controlPoint1: NSPoint(x: 10.01, y: 20.47), controlPoint2: NSPoint(x: 9.67, y: 20.97))
        tagcord2Path.line(to: NSPoint(x: 8.94, y: 24.63))
        tagcord2Path.close()
        tagcord2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        tagcord2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawTag(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-146-tag
        //// tag 2 Drawing
        let tag2Path = NSBezierPath()
        tag2Path.move(to: NSPoint(x: 13, y: 26.97))
        tag2Path.line(to: NSPoint(x: 5, y: 26.97))
        tag2Path.curve(to: NSPoint(x: 3, y: 24.97), controlPoint1: NSPoint(x: 3.9, y: 26.97), controlPoint2: NSPoint(x: 3, y: 26.08))
        tag2Path.line(to: NSPoint(x: 3, y: 16.97))
        tag2Path.line(to: NSPoint(x: 16.38, y: 3.59))
        tag2Path.curve(to: NSPoint(x: 19.21, y: 3.58), controlPoint1: NSPoint(x: 17.16, y: 2.81), controlPoint2: NSPoint(x: 18.43, y: 2.8))
        tag2Path.line(to: NSPoint(x: 26.39, y: 10.76))
        tag2Path.curve(to: NSPoint(x: 26.38, y: 13.59), controlPoint1: NSPoint(x: 27.17, y: 11.54), controlPoint2: NSPoint(x: 27.16, y: 12.81))
        tag2Path.line(to: NSPoint(x: 13, y: 26.97))
        tag2Path.line(to: NSPoint(x: 13, y: 26.97))
        tag2Path.close()
        tag2Path.move(to: NSPoint(x: 8.5, y: 19.97))
        tag2Path.curve(to: NSPoint(x: 10, y: 21.47), controlPoint1: NSPoint(x: 9.33, y: 19.97), controlPoint2: NSPoint(x: 10, y: 20.64))
        tag2Path.curve(to: NSPoint(x: 8.5, y: 22.97), controlPoint1: NSPoint(x: 10, y: 22.3), controlPoint2: NSPoint(x: 9.33, y: 22.97))
        tag2Path.curve(to: NSPoint(x: 7, y: 21.47), controlPoint1: NSPoint(x: 7.67, y: 22.97), controlPoint2: NSPoint(x: 7, y: 22.3))
        tag2Path.curve(to: NSPoint(x: 8.5, y: 19.97), controlPoint1: NSPoint(x: 7, y: 20.64), controlPoint2: NSPoint(x: 7.67, y: 19.97))
        tag2Path.line(to: NSPoint(x: 8.5, y: 19.97))
        tag2Path.close()
        tag2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        tag2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawTags(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-147-tags
        //// tags 2 Drawing
        let tags2Path = NSBezierPath()
        tags2Path.move(to: NSPoint(x: 3.5, y: 26.47))
        tags2Path.curve(to: NSPoint(x: 1.5, y: 24.47), controlPoint1: NSPoint(x: 2.4, y: 26.47), controlPoint2: NSPoint(x: 1.5, y: 25.58))
        tags2Path.line(to: NSPoint(x: 1.5, y: 16.47))
        tags2Path.line(to: NSPoint(x: 14.88, y: 3.09))
        tags2Path.curve(to: NSPoint(x: 17.5, y: 2.9), controlPoint1: NSPoint(x: 15.6, y: 2.37), controlPoint2: NSPoint(x: 16.72, y: 2.31))
        tags2Path.line(to: NSPoint(x: 3.5, y: 16.97))
        tags2Path.line(to: NSPoint(x: 3.5, y: 26.46))
        tags2Path.curve(to: NSPoint(x: 3.5, y: 26.47), controlPoint1: NSPoint(x: 3.5, y: 26.47), controlPoint2: NSPoint(x: 3.5, y: 26.47))
        tags2Path.line(to: NSPoint(x: 3.5, y: 26.47))
        tags2Path.line(to: NSPoint(x: 3.5, y: 26.47))
        tags2Path.close()
        tags2Path.move(to: NSPoint(x: 14.5, y: 27.47))
        tags2Path.line(to: NSPoint(x: 6.5, y: 27.47))
        tags2Path.curve(to: NSPoint(x: 4.5, y: 25.47), controlPoint1: NSPoint(x: 5.4, y: 27.47), controlPoint2: NSPoint(x: 4.5, y: 26.58))
        tags2Path.line(to: NSPoint(x: 4.5, y: 17.47))
        tags2Path.line(to: NSPoint(x: 17.88, y: 4.09))
        tags2Path.curve(to: NSPoint(x: 20.71, y: 4.08), controlPoint1: NSPoint(x: 18.66, y: 3.31), controlPoint2: NSPoint(x: 19.93, y: 3.3))
        tags2Path.line(to: NSPoint(x: 27.89, y: 11.26))
        tags2Path.curve(to: NSPoint(x: 27.88, y: 14.09), controlPoint1: NSPoint(x: 28.67, y: 12.04), controlPoint2: NSPoint(x: 28.66, y: 13.31))
        tags2Path.line(to: NSPoint(x: 14.5, y: 27.47))
        tags2Path.line(to: NSPoint(x: 14.5, y: 27.47))
        tags2Path.close()
        tags2Path.move(to: NSPoint(x: 10, y: 20.47))
        tags2Path.curve(to: NSPoint(x: 11.5, y: 21.97), controlPoint1: NSPoint(x: 10.83, y: 20.47), controlPoint2: NSPoint(x: 11.5, y: 21.14))
        tags2Path.curve(to: NSPoint(x: 10, y: 23.47), controlPoint1: NSPoint(x: 11.5, y: 22.8), controlPoint2: NSPoint(x: 10.83, y: 23.47))
        tags2Path.curve(to: NSPoint(x: 8.5, y: 21.97), controlPoint1: NSPoint(x: 9.17, y: 23.47), controlPoint2: NSPoint(x: 8.5, y: 22.8))
        tags2Path.curve(to: NSPoint(x: 10, y: 20.47), controlPoint1: NSPoint(x: 8.5, y: 21.14), controlPoint2: NSPoint(x: 9.17, y: 20.47))
        tags2Path.line(to: NSPoint(x: 10, y: 20.47))
        tags2Path.close()
        tags2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        tags2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawTagAdd(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-148-tag-add
        //// tag-add 2 Drawing
        let tagadd2Path = NSBezierPath()
        tagadd2Path.move(to: NSPoint(x: 8, y: 9.97))
        tagadd2Path.line(to: NSPoint(x: 8, y: 12.97))
        tagadd2Path.line(to: NSPoint(x: 9, y: 12.97))
        tagadd2Path.line(to: NSPoint(x: 9, y: 9.97))
        tagadd2Path.line(to: NSPoint(x: 12, y: 9.97))
        tagadd2Path.line(to: NSPoint(x: 12, y: 8.97))
        tagadd2Path.line(to: NSPoint(x: 9, y: 8.97))
        tagadd2Path.line(to: NSPoint(x: 9, y: 5.97))
        tagadd2Path.line(to: NSPoint(x: 8, y: 5.97))
        tagadd2Path.line(to: NSPoint(x: 8, y: 8.97))
        tagadd2Path.line(to: NSPoint(x: 5, y: 8.97))
        tagadd2Path.line(to: NSPoint(x: 5, y: 9.97))
        tagadd2Path.line(to: NSPoint(x: 8, y: 9.97))
        tagadd2Path.line(to: NSPoint(x: 8, y: 9.97))
        tagadd2Path.close()
        tagadd2Path.move(to: NSPoint(x: 5.01, y: 14.96))
        tagadd2Path.line(to: NSPoint(x: 3, y: 16.97))
        tagadd2Path.line(to: NSPoint(x: 3, y: 24.97))
        tagadd2Path.curve(to: NSPoint(x: 5, y: 26.97), controlPoint1: NSPoint(x: 3, y: 26.08), controlPoint2: NSPoint(x: 3.9, y: 26.97))
        tagadd2Path.line(to: NSPoint(x: 13, y: 26.97))
        tagadd2Path.line(to: NSPoint(x: 26.38, y: 13.59))
        tagadd2Path.curve(to: NSPoint(x: 26.39, y: 10.76), controlPoint1: NSPoint(x: 27.16, y: 12.81), controlPoint2: NSPoint(x: 27.17, y: 11.54))
        tagadd2Path.line(to: NSPoint(x: 19.21, y: 3.58))
        tagadd2Path.curve(to: NSPoint(x: 16.38, y: 3.59), controlPoint1: NSPoint(x: 18.43, y: 2.8), controlPoint2: NSPoint(x: 17.16, y: 2.81))
        tagadd2Path.line(to: NSPoint(x: 13.99, y: 5.98))
        tagadd2Path.curve(to: NSPoint(x: 15, y: 9.47), controlPoint1: NSPoint(x: 14.63, y: 6.99), controlPoint2: NSPoint(x: 15, y: 8.19))
        tagadd2Path.curve(to: NSPoint(x: 8.5, y: 15.97), controlPoint1: NSPoint(x: 15, y: 13.06), controlPoint2: NSPoint(x: 12.09, y: 15.97))
        tagadd2Path.curve(to: NSPoint(x: 5.01, y: 14.96), controlPoint1: NSPoint(x: 7.22, y: 15.97), controlPoint2: NSPoint(x: 6.02, y: 15.6))
        tagadd2Path.line(to: NSPoint(x: 5.01, y: 14.96))
        tagadd2Path.line(to: NSPoint(x: 5.01, y: 14.96))
        tagadd2Path.close()
        tagadd2Path.move(to: NSPoint(x: 8.5, y: 19.97))
        tagadd2Path.curve(to: NSPoint(x: 10, y: 21.47), controlPoint1: NSPoint(x: 9.33, y: 19.97), controlPoint2: NSPoint(x: 10, y: 20.64))
        tagadd2Path.curve(to: NSPoint(x: 8.5, y: 22.97), controlPoint1: NSPoint(x: 10, y: 22.3), controlPoint2: NSPoint(x: 9.33, y: 22.97))
        tagadd2Path.curve(to: NSPoint(x: 7, y: 21.47), controlPoint1: NSPoint(x: 7.67, y: 22.97), controlPoint2: NSPoint(x: 7, y: 22.3))
        tagadd2Path.curve(to: NSPoint(x: 8.5, y: 19.97), controlPoint1: NSPoint(x: 7, y: 20.64), controlPoint2: NSPoint(x: 7.67, y: 19.97))
        tagadd2Path.line(to: NSPoint(x: 8.5, y: 19.97))
        tagadd2Path.close()
        tagadd2Path.move(to: NSPoint(x: 8.5, y: 3.97))
        tagadd2Path.curve(to: NSPoint(x: 14, y: 9.47), controlPoint1: NSPoint(x: 11.54, y: 3.97), controlPoint2: NSPoint(x: 14, y: 6.43))
        tagadd2Path.curve(to: NSPoint(x: 8.5, y: 14.97), controlPoint1: NSPoint(x: 14, y: 12.51), controlPoint2: NSPoint(x: 11.54, y: 14.97))
        tagadd2Path.curve(to: NSPoint(x: 3, y: 9.47), controlPoint1: NSPoint(x: 5.46, y: 14.97), controlPoint2: NSPoint(x: 3, y: 12.51))
        tagadd2Path.curve(to: NSPoint(x: 8.5, y: 3.97), controlPoint1: NSPoint(x: 3, y: 6.43), controlPoint2: NSPoint(x: 5.46, y: 3.97))
        tagadd2Path.line(to: NSPoint(x: 8.5, y: 3.97))
        tagadd2Path.close()
        tagadd2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        tagadd2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawTagRemove(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-149-tag-remove
        //// tag-remove 2 Drawing
        let tagremove2Path = NSBezierPath()
        tagremove2Path.move(to: NSPoint(x: 5.01, y: 14.96))
        tagremove2Path.line(to: NSPoint(x: 3, y: 16.97))
        tagremove2Path.line(to: NSPoint(x: 3, y: 24.97))
        tagremove2Path.curve(to: NSPoint(x: 5, y: 26.97), controlPoint1: NSPoint(x: 3, y: 26.08), controlPoint2: NSPoint(x: 3.9, y: 26.97))
        tagremove2Path.line(to: NSPoint(x: 13, y: 26.97))
        tagremove2Path.line(to: NSPoint(x: 26.38, y: 13.59))
        tagremove2Path.curve(to: NSPoint(x: 26.39, y: 10.76), controlPoint1: NSPoint(x: 27.16, y: 12.81), controlPoint2: NSPoint(x: 27.17, y: 11.54))
        tagremove2Path.line(to: NSPoint(x: 19.21, y: 3.58))
        tagremove2Path.curve(to: NSPoint(x: 16.38, y: 3.59), controlPoint1: NSPoint(x: 18.43, y: 2.8), controlPoint2: NSPoint(x: 17.16, y: 2.81))
        tagremove2Path.line(to: NSPoint(x: 13.99, y: 5.98))
        tagremove2Path.curve(to: NSPoint(x: 15, y: 9.47), controlPoint1: NSPoint(x: 14.63, y: 6.99), controlPoint2: NSPoint(x: 15, y: 8.19))
        tagremove2Path.curve(to: NSPoint(x: 8.5, y: 15.97), controlPoint1: NSPoint(x: 15, y: 13.06), controlPoint2: NSPoint(x: 12.09, y: 15.97))
        tagremove2Path.curve(to: NSPoint(x: 5.01, y: 14.96), controlPoint1: NSPoint(x: 7.22, y: 15.97), controlPoint2: NSPoint(x: 6.02, y: 15.6))
        tagremove2Path.line(to: NSPoint(x: 5.01, y: 14.96))
        tagremove2Path.line(to: NSPoint(x: 5.01, y: 14.96))
        tagremove2Path.close()
        tagremove2Path.move(to: NSPoint(x: 8.5, y: 19.97))
        tagremove2Path.curve(to: NSPoint(x: 10, y: 21.47), controlPoint1: NSPoint(x: 9.33, y: 19.97), controlPoint2: NSPoint(x: 10, y: 20.64))
        tagremove2Path.curve(to: NSPoint(x: 8.5, y: 22.97), controlPoint1: NSPoint(x: 10, y: 22.3), controlPoint2: NSPoint(x: 9.33, y: 22.97))
        tagremove2Path.curve(to: NSPoint(x: 7, y: 21.47), controlPoint1: NSPoint(x: 7.67, y: 22.97), controlPoint2: NSPoint(x: 7, y: 22.3))
        tagremove2Path.curve(to: NSPoint(x: 8.5, y: 19.97), controlPoint1: NSPoint(x: 7, y: 20.64), controlPoint2: NSPoint(x: 7.67, y: 19.97))
        tagremove2Path.line(to: NSPoint(x: 8.5, y: 19.97))
        tagremove2Path.close()
        tagremove2Path.move(to: NSPoint(x: 8.5, y: 3.97))
        tagremove2Path.curve(to: NSPoint(x: 14, y: 9.47), controlPoint1: NSPoint(x: 11.54, y: 3.97), controlPoint2: NSPoint(x: 14, y: 6.43))
        tagremove2Path.curve(to: NSPoint(x: 8.5, y: 14.97), controlPoint1: NSPoint(x: 14, y: 12.51), controlPoint2: NSPoint(x: 11.54, y: 14.97))
        tagremove2Path.curve(to: NSPoint(x: 3, y: 9.47), controlPoint1: NSPoint(x: 5.46, y: 14.97), controlPoint2: NSPoint(x: 3, y: 12.51))
        tagremove2Path.curve(to: NSPoint(x: 8.5, y: 3.97), controlPoint1: NSPoint(x: 3, y: 6.43), controlPoint2: NSPoint(x: 5.46, y: 3.97))
        tagremove2Path.line(to: NSPoint(x: 8.5, y: 3.97))
        tagremove2Path.close()
        tagremove2Path.move(to: NSPoint(x: 5, y: 9.97))
        tagremove2Path.line(to: NSPoint(x: 5, y: 8.97))
        tagremove2Path.line(to: NSPoint(x: 12, y: 8.97))
        tagremove2Path.line(to: NSPoint(x: 12, y: 9.97))
        tagremove2Path.line(to: NSPoint(x: 5, y: 9.97))
        tagremove2Path.line(to: NSPoint(x: 5, y: 9.97))
        tagremove2Path.close()
        tagremove2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        tagremove2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawTagChecked(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-150-tag-checked
        //// tag-checked 2 Drawing
        let tagchecked2Path = NSBezierPath()
        tagchecked2Path.move(to: NSPoint(x: 5.01, y: 14.96))
        tagchecked2Path.line(to: NSPoint(x: 3, y: 16.97))
        tagchecked2Path.line(to: NSPoint(x: 3, y: 24.97))
        tagchecked2Path.curve(to: NSPoint(x: 5, y: 26.97), controlPoint1: NSPoint(x: 3, y: 26.08), controlPoint2: NSPoint(x: 3.9, y: 26.97))
        tagchecked2Path.line(to: NSPoint(x: 13, y: 26.97))
        tagchecked2Path.line(to: NSPoint(x: 26.38, y: 13.59))
        tagchecked2Path.curve(to: NSPoint(x: 26.39, y: 10.76), controlPoint1: NSPoint(x: 27.16, y: 12.81), controlPoint2: NSPoint(x: 27.17, y: 11.54))
        tagchecked2Path.line(to: NSPoint(x: 19.21, y: 3.58))
        tagchecked2Path.curve(to: NSPoint(x: 16.38, y: 3.59), controlPoint1: NSPoint(x: 18.43, y: 2.8), controlPoint2: NSPoint(x: 17.16, y: 2.81))
        tagchecked2Path.line(to: NSPoint(x: 13.99, y: 5.98))
        tagchecked2Path.curve(to: NSPoint(x: 15, y: 9.47), controlPoint1: NSPoint(x: 14.63, y: 6.99), controlPoint2: NSPoint(x: 15, y: 8.19))
        tagchecked2Path.curve(to: NSPoint(x: 8.5, y: 15.97), controlPoint1: NSPoint(x: 15, y: 13.06), controlPoint2: NSPoint(x: 12.09, y: 15.97))
        tagchecked2Path.curve(to: NSPoint(x: 5.01, y: 14.96), controlPoint1: NSPoint(x: 7.22, y: 15.97), controlPoint2: NSPoint(x: 6.02, y: 15.6))
        tagchecked2Path.line(to: NSPoint(x: 5.01, y: 14.96))
        tagchecked2Path.line(to: NSPoint(x: 5.01, y: 14.96))
        tagchecked2Path.close()
        tagchecked2Path.move(to: NSPoint(x: 8.5, y: 19.97))
        tagchecked2Path.curve(to: NSPoint(x: 10, y: 21.47), controlPoint1: NSPoint(x: 9.33, y: 19.97), controlPoint2: NSPoint(x: 10, y: 20.64))
        tagchecked2Path.curve(to: NSPoint(x: 8.5, y: 22.97), controlPoint1: NSPoint(x: 10, y: 22.3), controlPoint2: NSPoint(x: 9.33, y: 22.97))
        tagchecked2Path.curve(to: NSPoint(x: 7, y: 21.47), controlPoint1: NSPoint(x: 7.67, y: 22.97), controlPoint2: NSPoint(x: 7, y: 22.3))
        tagchecked2Path.curve(to: NSPoint(x: 8.5, y: 19.97), controlPoint1: NSPoint(x: 7, y: 20.64), controlPoint2: NSPoint(x: 7.67, y: 19.97))
        tagchecked2Path.line(to: NSPoint(x: 8.5, y: 19.97))
        tagchecked2Path.close()
        tagchecked2Path.move(to: NSPoint(x: 8.5, y: 3.97))
        tagchecked2Path.curve(to: NSPoint(x: 14, y: 9.47), controlPoint1: NSPoint(x: 11.54, y: 3.97), controlPoint2: NSPoint(x: 14, y: 6.43))
        tagchecked2Path.curve(to: NSPoint(x: 8.5, y: 14.97), controlPoint1: NSPoint(x: 14, y: 12.51), controlPoint2: NSPoint(x: 11.54, y: 14.97))
        tagchecked2Path.curve(to: NSPoint(x: 3, y: 9.47), controlPoint1: NSPoint(x: 5.46, y: 14.97), controlPoint2: NSPoint(x: 3, y: 12.51))
        tagchecked2Path.curve(to: NSPoint(x: 8.5, y: 3.97), controlPoint1: NSPoint(x: 3, y: 6.43), controlPoint2: NSPoint(x: 5.46, y: 3.97))
        tagchecked2Path.line(to: NSPoint(x: 8.5, y: 3.97))
        tagchecked2Path.close()
        tagchecked2Path.move(to: NSPoint(x: 8, y: 6.73))
        tagchecked2Path.line(to: NSPoint(x: 5.65, y: 9.08))
        tagchecked2Path.line(to: NSPoint(x: 6.38, y: 9.81))
        tagchecked2Path.line(to: NSPoint(x: 8, y: 8.19))
        tagchecked2Path.line(to: NSPoint(x: 11.12, y: 11.31))
        tagchecked2Path.line(to: NSPoint(x: 11.85, y: 10.58))
        tagchecked2Path.line(to: NSPoint(x: 8, y: 6.73))
        tagchecked2Path.line(to: NSPoint(x: 8, y: 6.73))
        tagchecked2Path.close()
        tagchecked2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        tagchecked2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawTagCancel(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-151-tag-cancel
        //// tag-cancel 2 Drawing
        let tagcancel2Path = NSBezierPath()
        tagcancel2Path.move(to: NSPoint(x: 8.5, y: 8.76))
        tagcancel2Path.line(to: NSPoint(x: 6.38, y: 6.64))
        tagcancel2Path.line(to: NSPoint(x: 5.67, y: 7.35))
        tagcancel2Path.line(to: NSPoint(x: 7.79, y: 9.47))
        tagcancel2Path.line(to: NSPoint(x: 5.67, y: 11.59))
        tagcancel2Path.line(to: NSPoint(x: 6.38, y: 12.3))
        tagcancel2Path.line(to: NSPoint(x: 8.5, y: 10.18))
        tagcancel2Path.line(to: NSPoint(x: 10.62, y: 12.3))
        tagcancel2Path.line(to: NSPoint(x: 11.33, y: 11.59))
        tagcancel2Path.line(to: NSPoint(x: 9.21, y: 9.47))
        tagcancel2Path.line(to: NSPoint(x: 11.33, y: 7.35))
        tagcancel2Path.line(to: NSPoint(x: 10.62, y: 6.64))
        tagcancel2Path.line(to: NSPoint(x: 8.5, y: 8.76))
        tagcancel2Path.line(to: NSPoint(x: 8.5, y: 8.76))
        tagcancel2Path.close()
        tagcancel2Path.move(to: NSPoint(x: 5.01, y: 14.96))
        tagcancel2Path.line(to: NSPoint(x: 3, y: 16.97))
        tagcancel2Path.line(to: NSPoint(x: 3, y: 24.97))
        tagcancel2Path.curve(to: NSPoint(x: 5, y: 26.97), controlPoint1: NSPoint(x: 3, y: 26.08), controlPoint2: NSPoint(x: 3.9, y: 26.97))
        tagcancel2Path.line(to: NSPoint(x: 13, y: 26.97))
        tagcancel2Path.line(to: NSPoint(x: 26.38, y: 13.59))
        tagcancel2Path.curve(to: NSPoint(x: 26.39, y: 10.76), controlPoint1: NSPoint(x: 27.16, y: 12.81), controlPoint2: NSPoint(x: 27.17, y: 11.54))
        tagcancel2Path.line(to: NSPoint(x: 19.21, y: 3.58))
        tagcancel2Path.curve(to: NSPoint(x: 16.38, y: 3.59), controlPoint1: NSPoint(x: 18.43, y: 2.8), controlPoint2: NSPoint(x: 17.16, y: 2.81))
        tagcancel2Path.line(to: NSPoint(x: 13.99, y: 5.98))
        tagcancel2Path.curve(to: NSPoint(x: 15, y: 9.47), controlPoint1: NSPoint(x: 14.63, y: 6.99), controlPoint2: NSPoint(x: 15, y: 8.19))
        tagcancel2Path.curve(to: NSPoint(x: 8.5, y: 15.97), controlPoint1: NSPoint(x: 15, y: 13.06), controlPoint2: NSPoint(x: 12.09, y: 15.97))
        tagcancel2Path.curve(to: NSPoint(x: 5.01, y: 14.96), controlPoint1: NSPoint(x: 7.22, y: 15.97), controlPoint2: NSPoint(x: 6.02, y: 15.6))
        tagcancel2Path.line(to: NSPoint(x: 5.01, y: 14.96))
        tagcancel2Path.line(to: NSPoint(x: 5.01, y: 14.96))
        tagcancel2Path.close()
        tagcancel2Path.move(to: NSPoint(x: 8.5, y: 19.97))
        tagcancel2Path.curve(to: NSPoint(x: 10, y: 21.47), controlPoint1: NSPoint(x: 9.33, y: 19.97), controlPoint2: NSPoint(x: 10, y: 20.64))
        tagcancel2Path.curve(to: NSPoint(x: 8.5, y: 22.97), controlPoint1: NSPoint(x: 10, y: 22.3), controlPoint2: NSPoint(x: 9.33, y: 22.97))
        tagcancel2Path.curve(to: NSPoint(x: 7, y: 21.47), controlPoint1: NSPoint(x: 7.67, y: 22.97), controlPoint2: NSPoint(x: 7, y: 22.3))
        tagcancel2Path.curve(to: NSPoint(x: 8.5, y: 19.97), controlPoint1: NSPoint(x: 7, y: 20.64), controlPoint2: NSPoint(x: 7.67, y: 19.97))
        tagcancel2Path.line(to: NSPoint(x: 8.5, y: 19.97))
        tagcancel2Path.close()
        tagcancel2Path.move(to: NSPoint(x: 8.5, y: 3.97))
        tagcancel2Path.curve(to: NSPoint(x: 14, y: 9.47), controlPoint1: NSPoint(x: 11.54, y: 3.97), controlPoint2: NSPoint(x: 14, y: 6.43))
        tagcancel2Path.curve(to: NSPoint(x: 8.5, y: 14.97), controlPoint1: NSPoint(x: 14, y: 12.51), controlPoint2: NSPoint(x: 11.54, y: 14.97))
        tagcancel2Path.curve(to: NSPoint(x: 3, y: 9.47), controlPoint1: NSPoint(x: 5.46, y: 14.97), controlPoint2: NSPoint(x: 3, y: 12.51))
        tagcancel2Path.curve(to: NSPoint(x: 8.5, y: 3.97), controlPoint1: NSPoint(x: 3, y: 6.43), controlPoint2: NSPoint(x: 5.46, y: 3.97))
        tagcancel2Path.line(to: NSPoint(x: 8.5, y: 3.97))
        tagcancel2Path.close()
        tagcancel2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        tagcancel2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    public dynamic class func drawPaperclip(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, fillColor: NSColor = NSColor(calibratedRed: 0.081, green: 0.394, blue: 0.979, alpha: 1)) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Page-1
        //// icon-152-paperclip
        //// paperclip 2 Drawing
        let paperclip2Path = NSBezierPath()
        paperclip2Path.move(to: NSPoint(x: 15, y: 2.5))
        paperclip2Path.curve(to: NSPoint(x: 27.5, y: 15), controlPoint1: NSPoint(x: 21.9, y: 2.5), controlPoint2: NSPoint(x: 27.5, y: 8.1))
        paperclip2Path.curve(to: NSPoint(x: 15, y: 27.5), controlPoint1: NSPoint(x: 27.5, y: 21.9), controlPoint2: NSPoint(x: 21.9, y: 27.5))
        paperclip2Path.curve(to: NSPoint(x: 2.5, y: 15), controlPoint1: NSPoint(x: 8.1, y: 27.5), controlPoint2: NSPoint(x: 2.5, y: 21.9))
        paperclip2Path.curve(to: NSPoint(x: 15, y: 2.5), controlPoint1: NSPoint(x: 2.5, y: 8.1), controlPoint2: NSPoint(x: 8.1, y: 2.5))
        paperclip2Path.line(to: NSPoint(x: 15, y: 2.5))
        paperclip2Path.close()
        paperclip2Path.move(to: NSPoint(x: 19.1, y: 13.94))
        paperclip2Path.line(to: NSPoint(x: 14.15, y: 8.99))
        paperclip2Path.curve(to: NSPoint(x: 8.49, y: 8.99), controlPoint1: NSPoint(x: 12.59, y: 7.43), controlPoint2: NSPoint(x: 10.05, y: 7.43))
        paperclip2Path.curve(to: NSPoint(x: 8.49, y: 14.65), controlPoint1: NSPoint(x: 6.93, y: 10.55), controlPoint2: NSPoint(x: 6.92, y: 13.08))
        paperclip2Path.line(to: NSPoint(x: 15.91, y: 22.07))
        paperclip2Path.curve(to: NSPoint(x: 19.45, y: 22.07), controlPoint1: NSPoint(x: 16.89, y: 23.04), controlPoint2: NSPoint(x: 18.47, y: 23.05))
        paperclip2Path.curve(to: NSPoint(x: 19.45, y: 18.53), controlPoint1: NSPoint(x: 20.43, y: 21.09), controlPoint2: NSPoint(x: 20.42, y: 19.51))
        paperclip2Path.line(to: NSPoint(x: 12.03, y: 11.12))
        paperclip2Path.curve(to: NSPoint(x: 10.61, y: 11.11), controlPoint1: NSPoint(x: 11.64, y: 10.72), controlPoint2: NSPoint(x: 11, y: 10.72))
        paperclip2Path.curve(to: NSPoint(x: 10.61, y: 12.52), controlPoint1: NSPoint(x: 10.22, y: 11.5), controlPoint2: NSPoint(x: 10.22, y: 12.14))
        paperclip2Path.line(to: NSPoint(x: 15.56, y: 17.47))
        paperclip2Path.line(to: NSPoint(x: 14.85, y: 18.18))
        paperclip2Path.line(to: NSPoint(x: 9.9, y: 13.23))
        paperclip2Path.curve(to: NSPoint(x: 9.9, y: 10.4), controlPoint1: NSPoint(x: 9.12, y: 12.45), controlPoint2: NSPoint(x: 9.12, y: 11.19))
        paperclip2Path.curve(to: NSPoint(x: 12.73, y: 10.4), controlPoint1: NSPoint(x: 10.68, y: 9.62), controlPoint2: NSPoint(x: 11.95, y: 9.62))
        paperclip2Path.line(to: NSPoint(x: 20.16, y: 17.83))
        paperclip2Path.curve(to: NSPoint(x: 20.16, y: 22.78), controlPoint1: NSPoint(x: 21.53, y: 19.2), controlPoint2: NSPoint(x: 21.52, y: 21.41))
        paperclip2Path.curve(to: NSPoint(x: 15.2, y: 22.77), controlPoint1: NSPoint(x: 18.79, y: 24.15), controlPoint2: NSPoint(x: 16.57, y: 24.14))
        paperclip2Path.line(to: NSPoint(x: 7.78, y: 15.35))
        paperclip2Path.curve(to: NSPoint(x: 7.78, y: 8.28), controlPoint1: NSPoint(x: 5.83, y: 13.4), controlPoint2: NSPoint(x: 5.83, y: 10.23))
        paperclip2Path.curve(to: NSPoint(x: 14.86, y: 8.28), controlPoint1: NSPoint(x: 9.74, y: 6.33), controlPoint2: NSPoint(x: 12.89, y: 6.32))
        paperclip2Path.line(to: NSPoint(x: 19.8, y: 13.23))
        paperclip2Path.line(to: NSPoint(x: 19.1, y: 13.94))
        paperclip2Path.line(to: NSPoint(x: 19.1, y: 13.94))
        paperclip2Path.close()
        paperclip2Path.windingRule = .evenOddWindingRule
        fillColor.setFill()
        paperclip2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: NSRect, target: NSRect) -> NSRect {
            if rect == target || target == NSRect.zero {
                return rect
            }

            var scales = NSSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
