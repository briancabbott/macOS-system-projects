Last login: Tue Jun  9 16:28:30 on ttys006

The default interactive shell is now zsh.
To update your account to use zsh, please run `chsh -s /bin/zsh`.
For more details, please visit https://support.apple.com/kb/HT208050.
brian@BRIANs-MacBook-Pro:~/dev_space/GitHub-briancabbott/clojure-funcoder$ ls 
Projects/                              README.md                              repoList--clojure--1591517440555.json
brian@BRIANs-MacBook-Pro:~/dev_space/GitHub-briancabbott/clojure-funcoder$ git status 
On branch master
Your branch is ahead of 'origin/master' by 4 commits.
  (use "git push" to publish your local commits)


It took 6.67 seconds to enumerate untracked files. 'status -uno'
may speed it up, but you have to be careful not to forget to add
new files yourself (see 'git help status').
nothing to commit, working tree clean
brian@BRIANs-MacBook-Pro:~/dev_space/GitHub-briancabbott/clojure-funcoder$ git push 
Uploading LFS objects: 100% (2/2), 728 MB | 0 B/s, done.                                                                                                                                                                                                                  
Enumerating objects: 301353, done.
Counting objects: 100% (301353/301353), done.
Delta compression using up to 16 threads
Compressing objects: 100% (202226/202226), done.
Writing objects: 100% (301347/301347), 1.20 GiB | 3.04 MiB/s, done.
Total 301347 (delta 91592), reused 300526 (delta 91367)
remote: Resolving deltas: 100% (91592/91592), completed with 2 local objects.
remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
remote: error: Trace: 1b0f24d0893bdf2d24e4b23fc1770a40
remote: error: See http://git.io/iEPt8g for more information.
remote: error: File Projects/MboxExtractor/resources/code/Mozilla Thunderbird/mozilla-central-dadc7312128e.zip is 660.19 MB; this exceeds GitHub's file size limit of 100.00 MB
To https://github.com/briancabbott/clojure-funcoder
 ! [remote rejected]       master -> master (pre-receive hook declined)
error: failed to push some refs to 'https://github.com/briancabbott/clojure-funcoder'
brian@BRIANs-MacBook-Pro:~/dev_space/GitHub-briancabbott/clojure-funcoder$ git reset --soft Projects/MboxExtractor/resources/code/Mozilla Thunderbird/mozilla-central-dadc7312128e.zip
fatal: ambiguous argument 'Projects/MboxExtractor/resources/code/Mozilla': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git <command> [<revision>...] -- [<file>...]'
brian@BRIANs-MacBook-Pro:~/dev_space/GitHub-briancabbott/clojure-funcoder$ git status 
On branch master
Your branch is ahead of 'origin/master' by 4 commits.
  (use "git push" to publish your local commits)


It took 2.92 seconds to enumerate untracked files. 'status -uno'
may speed it up, but you have to be careful not to forget to add
new files yourself (see 'git help status').
nothing to commit, working tree clean
brian@BRIANs-MacBook-Pro:~/dev_space/GitHub-briancabbott/clojure-funcoder$ history | grep "git lfs" 
  504  history | grep "git lfs" 
brian@BRIANs-MacBook-Pro:~/dev_space/GitHub-briancabbott/clojure-funcoder$ git lfs 
git-lfs/2.9.2 (GitHub; darwin amd64; go 1.13.5)
git lfs <command> [<args>]

Git LFS is a system for managing and versioning large files in
association with a Git repository.  Instead of storing the large files
within the Git repository as blobs, Git LFS stores special "pointer
files" in the repository, while storing the actual file contents on a
Git LFS server.  The contents of the large file are downloaded
automatically when needed, for example when a Git branch containing
the large file is checked out.

Git LFS works by using a "smudge" filter to look up the large file
contents based on the pointer file, and a "clean" filter to create a
new version of the pointer file when the large file's contents change.
It also uses a pre-push hook to upload the large file contents to
the Git LFS server whenever a commit containing a new large file
version is about to be pushed to the corresponding Git server.

Commands
--------

Like Git, Git LFS commands are separated into high level ("porcelain")
commands and low level ("plumbing") commands.

High level commands 
--------------------

* git lfs env:
    Display the Git LFS environment.
* git lfs checkout:
    Populate working copy with real content from Git LFS files.
* git lfs fetch:
    Download Git LFS files from a remote.
* git lfs fsck:
    Check Git LFS files for consistency.
* git lfs install:
    Install Git LFS configuration.
* git lfs lock:
    Set a file as "locked" on the Git LFS server.
* git lfs locks:
    List currently "locked" files from the Git LFS server.
* git lfs logs:
    Show errors from the Git LFS command.
* git lfs ls-files:
    Show information about Git LFS files in the index and working tree.
* git lfs migrate:
    Migrate history to or from Git LFS
* git lfs prune:
    Delete old Git LFS files from local storage
* git lfs pull:
    Fetch Git LFS changes from the remote & checkout any required working tree
    files.
* git lfs push:
    Push queued large files to the Git LFS endpoint.
* git lfs status:
    Show the status of Git LFS files in the working tree.
* git lfs track:
    View or add Git LFS paths to Git attributes.
* git lfs uninstall:
    Uninstall Git LFS by removing hooks and smudge/clean filter configuration.
* git lfs unlock:
    Remove "locked" setting for a file on the Git LFS server.
* git lfs untrack:
    Remove Git LFS paths from Git Attributes.
* git lfs update:
    Update Git hooks for the current Git repository.
* git lfs version:
    Report the version number.
  
Low level commands 
-------------------

* git lfs clean:
    Git clean filter that converts large files to pointers.
* git lfs pointer:
    Build and compare pointers.
* git lfs pre-push:
    Git pre-push hook implementation.
* git lfs filter-process:
    Git process filter that converts between large files and pointers.
* git lfs smudge:
    Git smudge filter that converts pointer in blobs to the actual content.
  
Examples
--------

To get started with Git LFS, the following commands can be used.

 1. Setup Git LFS on your system. You only have to do this once per
    repository per machine:

        git lfs install

 2. Choose the type of files you want to track, for examples all ISO
    images, with git lfs track:

        git lfs track "*.iso"

 3. The above stores this information in gitattributes(5) files, so
    that file need to be added to the repository:

        git add .gitattributes

 3. Commit, push and work with the files normally:

        git add file.iso
        git commit -m "Add disk image"
        git push
brian@BRIANs-MacBook-Pro:~/dev_space/GitHub-briancabbott/clojure-funcoder$ 
brian@BRIANs-MacBook-Pro:~/dev_space/GitHub-briancabbott/clojure-funcoder$ git lfs track "Projects/MboxExtractor/resources/code/Mozilla Thunderbird/mozilla-central-dadc7312128e.zip"
Tracking "Projects/MboxExtractor/resources/code/Mozilla Thunderbird/mozilla-central-dadc7312128e.zip"
brian@BRIANs-MacBook-Pro:~/dev_space/GitHub-briancabbott/clojure-funcoder$ git commit -m "moved Mozilla Thunderbird to LFS"
On branch master
Your branch is ahead of 'origin/master' by 4 commits.
  (use "git push" to publish your local commits)

Untracked files:
	.gitattributes


It took 4.73 seconds to enumerate untracked files. 'status -uno'
may speed it up, but you have to be careful not to forget to add
new files yourself (see 'git help status').
nothing added to commit but untracked files present
brian@BRIANs-MacBook-Pro:~/dev_space/GitHub-briancabbott/clojure-funcoder$ git lfs ls-files
2f91a66236 * Projects/MboxExtractor/resources/code/Mozilla Thunderbird/comm-central-d146b4e2061c.zip
6c40415d3e * Projects/MboxExtractor/resources/code/Mozilla Thunderbird/mozilla-central-dadc7312128e.zip
brian@BRIANs-MacBook-Pro:~/dev_space/GitHub-briancabbott/clojure-funcoder$ history | grep launchd
  509  history | grep launchd
brian@BRIANs-MacBook-Pro:~/dev_space/GitHub-briancabbott/clojure-funcoder$ 
brian@BRIANs-MacBook-Pro:~/dev_space/GitHub-briancabbott/clojure-funcoder$ man launchd.plist


launchd.plist(5)            BSD File Formats Manual           launchd.plist(5)

NAME
     launchd.plist -- System wide and per-user daemon/agent configuration files

DESCRIPTION
     This document details the parameters that can be given to an XML property list that can be loaded into launchd with launchctl.

EXPECTATIONS
     Daemons or agents managed by launchd are expected to behave certain ways.

     A daemon or agent launched by launchd MUST NOT do the following in the process directly launched by launchd:

           o   Call daemon(3).
           o   Do the moral equivalent of daemon(3) by calling fork(2) and have the parent process exit(3) or _exit(2).

     A launchd daemon or agent should not perform the following as part of its initialization, as launchd will always implicitly perform them on behalf of the process.

           o   Redirect stdio(3) to /dev/null.

     A launchd daemon or agent need not perform the following as part of its initialization, since launchd can perform them on the process' behalf with the appropriate launchd.plist keys specified.

           o   Setup the user ID or group ID.
           o   Setup the working directory.
           o   chroot(2)
           o   setsid(2)
           o   Close "stray" file descriptors.
           o   Setup resource limits with setrlimit(2).
           o   Setup priority with setpriority(2).

     A daemon or agent launched by launchd SHOULD:

           o   Launch on demand given criteria specified in the XML property list. More information can be found later in this man page.
           o   Handle the SIGTERM signal, preferably with a dispatch(3) source, and respond to this signal by unwinding any outstanding work quickly and then exiting.

     A daemon or agent launched by launchd MUST:

           o   check in for any MachServices advertised in its plist, using xpc_connection_create_mach_service(3) (or bootstrap_check_in(3)) if it uses MIG or raw Mach for communication
           o   check in for any LaunchEvents advertised in its plist, using xpc_set_event_stream_handler(3)

XML PROPERTY LIST KEYS
     The following keys can be used to describe the configuration details of your daemon or agent. Property lists are Apple's standard configuration file format.  Please see plist(5) for more information. Please note: property list files
     are expected to have their name end in ".plist". Also please note that it is the expected convention for launchd property list files to be named <Label>.plist. Thus, if your job label is "com.apple.sshd", your plist file should be
     named "com.apple.sshd.plist".

     Label <string>
     This required key uniquely identifies the job to launchd.

     Disabled <boolean>
     This optional key specifies whether the job should be loaded by default. Note that this key may be overridden through the enable subcommand of launchctl(3).  Previous Darwin operating systems would modify the configuration file's
     value for this key, but now this state is kept externally.

     UserName <string>
     This optional key specifies the user to run the job as. This key is only applicable for services that are loaded into the privileged system domain.

     GroupName <string>
     This optional key specifies the group to run the job as. This key is only applicable for services that are loaded into the privileged system domain. If UserName is set and GroupName is not, then the group will be set to the primary
     group of the user.

     inetdCompatibility <dictionary>
     The presence of this key specifies that the daemon expects to be run as if it were launched from inetd. For new projects, this key should be avoided.

           Wait <boolean>
           This flag corresponds to the "wait" or "nowait" option of inetd. If true, then the listening socket is passed via the stdio(3) file descriptors. If false, then accept(2) is called on behalf of the job, and the result is passed
           via the stdio(3) descriptors.

:
